
ADC_joy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000643c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006628  08006628  00016628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a4c  08006a4c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006a4c  08006a4c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a4c  08006a4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200001dc  08006c30  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08006c30  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a38e  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c7  00000000  00000000  0002a593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002d020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acfe  00000000  00000000  0002d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b406  00000000  00000000  000484b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009717d  00000000  00000000  000538bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eaa39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003178  00000000  00000000  000eaa8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	0800660c 	.word	0x0800660c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	0800660c 	.word	0x0800660c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000b72:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0x98>)
 8000b74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000b8c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9e:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000ba0:	f000 fbdc 	bl	800135c <HAL_ADC_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000baa:	f000 f98f 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bae:	2308      	movs	r3, #8
 8000bb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000bc0:	f000 fdb0 	bl	8001724 <HAL_ADC_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bca:	f000 f97f 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bce:	2309      	movs	r3, #9
 8000bd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_ADC1_Init+0x94>)
 8000bdc:	f000 fda2 	bl	8001724 <HAL_ADC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000be6:	f000 f971 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000204 	.word	0x20000204
 8000bf8:	40012400 	.word	0x40012400

08000bfc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <HAL_ADC_MspInit+0xbc>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d149      	bne.n	8000cb0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <HAL_ADC_MspInit+0xc0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <HAL_ADC_MspInit+0xc0>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <HAL_ADC_MspInit+0xc0>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <HAL_ADC_MspInit+0xc0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <HAL_ADC_MspInit+0xc0>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <HAL_ADC_MspInit+0xc0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c50:	2303      	movs	r3, #3
 8000c52:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <HAL_ADC_MspInit+0xc4>)
 8000c5c:	f001 fca2 	bl	80025a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0xcc>)
 8000c64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000c96:	f001 f83d 	bl	8001d14 <HAL_DMA_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ca0:	f000 f914 	bl	8000ecc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000ca8:	621a      	str	r2, [r3, #32]
 8000caa:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_ADC_MspInit+0xc8>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40012400 	.word	0x40012400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010c00 	.word	0x40010c00
 8000cc4:	20000234 	.word	0x20000234
 8000cc8:	40020008 	.word	0x40020008

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_DMA_Init+0x38>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <MX_DMA_Init+0x38>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_DMA_Init+0x38>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	200b      	movs	r0, #11
 8000cf0:	f000 ffd9 	bl	8001ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f000 fff2 	bl	8001cde <HAL_NVIC_EnableIRQ>

}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000

08000d08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_GPIO_Init+0x40>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <MX_GPIO_Init+0x40>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_GPIO_Init+0x40>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_GPIO_Init+0x40>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <MX_GPIO_Init+0x40>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6193      	str	r3, [r2, #24]
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <MX_GPIO_Init+0x40>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000

08000d4c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, unsigned char* p, int len)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, p, len, 10);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	230a      	movs	r3, #10
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <_write+0x24>)
 8000d62:	f002 fad0 	bl	8003306 <HAL_UART_Transmit>
   return len;
 8000d66:	687b      	ldr	r3, [r7, #4]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000278 	.word	0x20000278

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7a:	f000 fa69 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7e:	f000 f849 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d82:	f7ff ffc1 	bl	8000d08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d86:	f7ff ffa1 	bl	8000ccc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d8a:	f000 f9bd 	bl	8001108 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000d8e:	f7ff fee7 	bl	8000b60 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <main+0x8c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6898      	ldr	r0, [r3, #8]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	f003 fafb 	bl	8004398 <setvbuf>
  printf("nanhee");
 8000da2:	4818      	ldr	r0, [pc, #96]	; (8000e04 <main+0x90>)
 8000da4:	f003 fae0 	bl	8004368 <iprintf>

  uint32_t ADC_Value_32[2];
  uint16_t ADC_Value_16[2];
  HAL_ADC_Start_DMA(&hadc1, ADC_Value_32, 2);
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2202      	movs	r2, #2
 8000dae:	4619      	mov	r1, r3
 8000db0:	4815      	ldr	r0, [pc, #84]	; (8000e08 <main+0x94>)
 8000db2:	f000 fbbd 	bl	8001530 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_Value_16[0]=(uint16_t)ADC_Value_32[0];
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	80bb      	strh	r3, [r7, #4]
	  ADC_Value_16[1]=(uint16_t)ADC_Value_32[1];
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	80fb      	strh	r3, [r7, #6]


	  ADC_Value_16[0] &= 0xFFF;
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	80bb      	strh	r3, [r7, #4]
	  printf("X-%4d ", ADC_Value_16[0]);
 8000dcc:	88bb      	ldrh	r3, [r7, #4]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480e      	ldr	r0, [pc, #56]	; (8000e0c <main+0x98>)
 8000dd2:	f003 fac9 	bl	8004368 <iprintf>

	  ADC_Value_16[1] &= 0xFFF;
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	80fb      	strh	r3, [r7, #6]
	  printf("Y-%4d\n", ADC_Value_16[1]);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	4619      	mov	r1, r3
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <main+0x9c>)
 8000de6:	f003 fabf 	bl	8004368 <iprintf>

	  HAL_ADC_Start_DMA(&hadc1, ADC_Value_32, 2);
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	2202      	movs	r2, #2
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <main+0x94>)
 8000df4:	f000 fb9c 	bl	8001530 <HAL_ADC_Start_DMA>
	  HAL_Delay(100);
 8000df8:	2064      	movs	r0, #100	; 0x64
 8000dfa:	f000 fa8b 	bl	8001314 <HAL_Delay>
	  ADC_Value_16[0]=(uint16_t)ADC_Value_32[0];
 8000dfe:	e7da      	b.n	8000db6 <main+0x42>
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	08006628 	.word	0x08006628
 8000e08:	20000204 	.word	0x20000204
 8000e0c:	08006630 	.word	0x08006630
 8000e10:	08006638 	.word	0x08006638

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b096      	sub	sp, #88	; 0x58
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e1e:	2228      	movs	r2, #40	; 0x28
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fe38 	bl	8003a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e56:	2301      	movs	r3, #1
 8000e58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e64:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fd2c 	bl	80028cc <HAL_RCC_OscConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e7a:	f000 f827 	bl	8000ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	230f      	movs	r3, #15
 8000e80:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e82:	2302      	movs	r3, #2
 8000e84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 ff96 	bl	8002dcc <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ea6:	f000 f811 	bl	8000ecc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 f923 	bl	8003100 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ec0:	f000 f804 	bl	8000ecc <Error_Handler>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3758      	adds	r7, #88	; 0x58
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_MspInit+0x5c>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <HAL_MspInit+0x5c>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6193      	str	r3, [r2, #24]
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_MspInit+0x5c>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_MspInit+0x5c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_MspInit+0x60>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_MspInit+0x60>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 f9ab 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <DMA1_Channel1_IRQHandler+0x10>)
 8000f92:	f001 f89d 	bl	80020d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000234 	.word	0x20000234

08000fa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <USART1_IRQHandler+0x10>)
 8000fa6:	f002 fa41 	bl	800342c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000278 	.word	0x20000278

08000fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
	return 1;
 8000fb8:	2301      	movs	r3, #1
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <_kill>:

int _kill(int pid, int sig)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fcc:	f002 fd3a 	bl	8003a44 <__errno>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2216      	movs	r2, #22
 8000fd4:	601a      	str	r2, [r3, #0]
	return -1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_exit>:

void _exit (int status)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fea:	f04f 31ff 	mov.w	r1, #4294967295
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffe7 	bl	8000fc2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ff4:	e7fe      	b.n	8000ff4 <_exit+0x12>

08000ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	e00a      	b.n	800101e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001008:	f3af 8000 	nop.w
 800100c:	4601      	mov	r1, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	60ba      	str	r2, [r7, #8]
 8001014:	b2ca      	uxtb	r2, r1
 8001016:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	429a      	cmp	r2, r3
 8001024:	dbf0      	blt.n	8001008 <_read+0x12>
	}

return len;
 8001026:	687b      	ldr	r3, [r7, #4]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	return -1;
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001056:	605a      	str	r2, [r3, #4]
	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <_isatty>:

int _isatty(int file)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	return 1;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	return 0;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f002 fcc0 	bl	8003a44 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000c000 	.word	0x2000c000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	200001f8 	.word	0x200001f8
 80010f8:	200002d0 	.word	0x200002d0

080010fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_USART1_UART_Init+0x4c>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_USART1_UART_Init+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_USART1_UART_Init+0x4c>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_USART1_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_USART1_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_USART1_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_USART1_UART_Init+0x4c>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <MX_USART1_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_USART1_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_USART1_UART_Init+0x4c>)
 8001140:	f002 f894 	bl	800326c <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800114a:	f7ff febf 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000278 	.word	0x20000278
 8001158:	40013800 	.word	0x40013800

0800115c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <HAL_UART_MspInit+0x9c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d139      	bne.n	80011f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <HAL_UART_MspInit+0xa0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_UART_MspInit+0xa0>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <HAL_UART_MspInit+0xa0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_UART_MspInit+0xa0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a18      	ldr	r2, [pc, #96]	; (80011fc <HAL_UART_MspInit+0xa0>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_UART_MspInit+0xa0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <HAL_UART_MspInit+0xa4>)
 80011c2:	f001 f9ef 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4809      	ldr	r0, [pc, #36]	; (8001200 <HAL_UART_MspInit+0xa4>)
 80011dc:	f001 f9e2 	bl	80025a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2025      	movs	r0, #37	; 0x25
 80011e6:	f000 fd5e 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ea:	2025      	movs	r0, #37	; 0x25
 80011ec:	f000 fd77 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010800 	.word	0x40010800

08001204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001204:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001206:	e003      	b.n	8001210 <LoopCopyDataInit>

08001208 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800120a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800120c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800120e:	3104      	adds	r1, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001214:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001216:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001218:	d3f6      	bcc.n	8001208 <CopyDataInit>
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800121c:	e002      	b.n	8001224 <LoopFillZerobss>

0800121e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001220:	f842 3b04 	str.w	r3, [r2], #4

08001224 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001226:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001228:	d3f9      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800122a:	f7ff ff67 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f002 fc0f 	bl	8003a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fd9f 	bl	8000d74 <main>
  bx lr
 8001236:	4770      	bx	lr
  ldr r3, =_sidata
 8001238:	08006a54 	.word	0x08006a54
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001240:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001244:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001248:	200002cc 	.word	0x200002cc

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 fd15 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fe34 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fd2d 	bl	8001cfa <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 fcf5 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x20>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000008 	.word	0x20000008
 80012fc:	200002b8 	.word	0x200002b8

08001300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	200002b8 	.word	0x200002b8

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff fff0 	bl	8001300 <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffe0 	bl	8001300 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0ce      	b.n	800151c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fc2e 	bl	8000bfc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fb09 	bl	80019b8 <ADC_ConversionStop_Disable>
 80013a6:	4603      	mov	r3, r0
 80013a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f040 80a9 	bne.w	800150a <HAL_ADC_Init+0x1ae>
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 80a5 	bne.w	800150a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013c8:	f023 0302 	bic.w	r3, r3, #2
 80013cc:	f043 0202 	orr.w	r2, r3, #2
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4951      	ldr	r1, [pc, #324]	; (8001524 <HAL_ADC_Init+0x1c8>)
 80013de:	428b      	cmp	r3, r1
 80013e0:	d10a      	bne.n	80013f8 <HAL_ADC_Init+0x9c>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80013ea:	d002      	beq.n	80013f2 <HAL_ADC_Init+0x96>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	e004      	b.n	80013fc <HAL_ADC_Init+0xa0>
 80013f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80013f6:	e001      	b.n	80013fc <HAL_ADC_Init+0xa0>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7b1b      	ldrb	r3, [r3, #12]
 8001402:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001404:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4313      	orrs	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001414:	d003      	beq.n	800141e <HAL_ADC_Init+0xc2>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d102      	bne.n	8001424 <HAL_ADC_Init+0xc8>
 800141e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001422:	e000      	b.n	8001426 <HAL_ADC_Init+0xca>
 8001424:	2300      	movs	r3, #0
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7d1b      	ldrb	r3, [r3, #20]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d119      	bne.n	8001468 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7b1b      	ldrb	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	3b01      	subs	r3, #1
 8001442:	035a      	lsls	r2, r3, #13
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	e00b      	b.n	8001468 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	f043 0220 	orr.w	r2, r3, #32
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <HAL_ADC_Init+0x1cc>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	430b      	orrs	r3, r1
 800148e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001498:	d003      	beq.n	80014a2 <HAL_ADC_Init+0x146>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d104      	bne.n	80014ac <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	430a      	orrs	r2, r1
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_ADC_Init+0x1d0>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d10b      	bne.n	80014e8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014e6:	e018      	b.n	800151a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	f023 0312 	bic.w	r3, r3, #18
 80014f0:	f043 0210 	orr.w	r2, r3, #16
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001508:	e007      	b.n	800151a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	f043 0210 	orr.w	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800151a:	7dfb      	ldrb	r3, [r7, #23]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40013c00 	.word	0x40013c00
 8001528:	ffe1f7fd 	.word	0xffe1f7fd
 800152c:	ff1f0efe 	.word	0xff1f0efe

08001530 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a64      	ldr	r2, [pc, #400]	; (80016d8 <HAL_ADC_Start_DMA+0x1a8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d004      	beq.n	8001554 <HAL_ADC_Start_DMA+0x24>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a63      	ldr	r2, [pc, #396]	; (80016dc <HAL_ADC_Start_DMA+0x1ac>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d106      	bne.n	8001562 <HAL_ADC_Start_DMA+0x32>
 8001554:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <HAL_ADC_Start_DMA+0x1a8>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800155c:	2b00      	cmp	r3, #0
 800155e:	f040 80b3 	bne.w	80016c8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_ADC_Start_DMA+0x40>
 800156c:	2302      	movs	r3, #2
 800156e:	e0ae      	b.n	80016ce <HAL_ADC_Start_DMA+0x19e>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 f9cb 	bl	8001914 <ADC_Enable>
 800157e:	4603      	mov	r3, r0
 8001580:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b00      	cmp	r3, #0
 8001586:	f040 809a 	bne.w	80016be <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a4e      	ldr	r2, [pc, #312]	; (80016dc <HAL_ADC_Start_DMA+0x1ac>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_Start_DMA+0x84>
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <HAL_ADC_Start_DMA+0x1a8>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d115      	bne.n	80015e0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d026      	beq.n	800161c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015de:	e01d      	b.n	800161c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a39      	ldr	r2, [pc, #228]	; (80016d8 <HAL_ADC_Start_DMA+0x1a8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d004      	beq.n	8001600 <HAL_ADC_Start_DMA+0xd0>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a38      	ldr	r2, [pc, #224]	; (80016dc <HAL_ADC_Start_DMA+0x1ac>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d10d      	bne.n	800161c <HAL_ADC_Start_DMA+0xec>
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_ADC_Start_DMA+0x1a8>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	2b00      	cmp	r3, #0
 800160a:	d007      	beq.n	800161c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001614:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	f023 0206 	bic.w	r2, r3, #6
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
 8001634:	e002      	b.n	800163c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <HAL_ADC_Start_DMA+0x1b0>)
 800164a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <HAL_ADC_Start_DMA+0x1b4>)
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <HAL_ADC_Start_DMA+0x1b8>)
 800165a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f06f 0202 	mvn.w	r2, #2
 8001664:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001674:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a18      	ldr	r0, [r3, #32]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	334c      	adds	r3, #76	; 0x4c
 8001680:	4619      	mov	r1, r3
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f000 fbbb 	bl	8001e00 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001694:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001698:	d108      	bne.n	80016ac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80016a8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80016aa:	e00f      	b.n	80016cc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016ba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80016bc:	e006      	b.n	80016cc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80016c6:	e001      	b.n	80016cc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40012400 	.word	0x40012400
 80016dc:	40012800 	.word	0x40012800
 80016e0:	08001a2d 	.word	0x08001a2d
 80016e4:	08001aa9 	.word	0x08001aa9
 80016e8:	08001ac5 	.word	0x08001ac5

080016ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
	...

08001724 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x20>
 8001740:	2302      	movs	r3, #2
 8001742:	e0dc      	b.n	80018fe <HAL_ADC_ConfigChannel+0x1da>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b06      	cmp	r3, #6
 8001752:	d81c      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	3b05      	subs	r3, #5
 8001766:	221f      	movs	r2, #31
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	4019      	ands	r1, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b05      	subs	r3, #5
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	635a      	str	r2, [r3, #52]	; 0x34
 800178c:	e03c      	b.n	8001808 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d81c      	bhi.n	80017d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b23      	subs	r3, #35	; 0x23
 80017a8:	221f      	movs	r2, #31
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	4019      	ands	r1, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b23      	subs	r3, #35	; 0x23
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	631a      	str	r2, [r3, #48]	; 0x30
 80017ce:	e01b      	b.n	8001808 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	3b41      	subs	r3, #65	; 0x41
 80017e2:	221f      	movs	r2, #31
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4019      	ands	r1, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	3b41      	subs	r3, #65	; 0x41
 80017fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b09      	cmp	r3, #9
 800180e:	d91c      	bls.n	800184a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68d9      	ldr	r1, [r3, #12]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	3b1e      	subs	r3, #30
 8001822:	2207      	movs	r2, #7
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	4019      	ands	r1, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6898      	ldr	r0, [r3, #8]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	3b1e      	subs	r3, #30
 800183c:	fa00 f203 	lsl.w	r2, r0, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	e019      	b.n	800187e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6919      	ldr	r1, [r3, #16]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	2207      	movs	r2, #7
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	4019      	ands	r1, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6898      	ldr	r0, [r3, #8]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	fa00 f203 	lsl.w	r2, r0, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d003      	beq.n	800188e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800188a:	2b11      	cmp	r3, #17
 800188c:	d132      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_ADC_ConfigChannel+0x1e4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d125      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d126      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018b4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d11a      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_ADC_ConfigChannel+0x1e8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <HAL_ADC_ConfigChannel+0x1ec>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	0c9a      	lsrs	r2, r3, #18
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d4:	e002      	b.n	80018dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x1b2>
 80018e2:	e007      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f043 0220 	orr.w	r2, r3, #32
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	40012400 	.word	0x40012400
 800190c:	20000000 	.word	0x20000000
 8001910:	431bde83 	.word	0x431bde83

08001914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d039      	beq.n	80019a6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <ADC_Enable+0x9c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <ADC_Enable+0xa0>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	0c9b      	lsrs	r3, r3, #18
 800194e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001950:	e002      	b.n	8001958 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3b01      	subs	r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f9      	bne.n	8001952 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800195e:	f7ff fccf 	bl	8001300 <HAL_GetTick>
 8001962:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001964:	e018      	b.n	8001998 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001966:	f7ff fccb 	bl	8001300 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d911      	bls.n	8001998 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	f043 0210 	orr.w	r2, r3, #16
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e007      	b.n	80019a8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d1df      	bne.n	8001966 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000000 	.word	0x20000000
 80019b4:	431bde83 	.word	0x431bde83

080019b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d127      	bne.n	8001a22 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019e2:	f7ff fc8d 	bl	8001300 <HAL_GetTick>
 80019e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019e8:	e014      	b.n	8001a14 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019ea:	f7ff fc89 	bl	8001300 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d90d      	bls.n	8001a14 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	f043 0210 	orr.w	r2, r3, #16
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e007      	b.n	8001a24 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d0e3      	beq.n	80019ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d127      	bne.n	8001a96 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a5c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a60:	d115      	bne.n	8001a8e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d111      	bne.n	8001a8e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d105      	bne.n	8001a8e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f7ff fe2c 	bl	80016ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a94:	e004      	b.n	8001aa0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff fe21 	bl	80016fe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f043 0204 	orr.w	r2, r3, #4
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fe10 	bl	8001710 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4906      	ldr	r1, [pc, #24]	; (8001b90 <__NVIC_EnableIRQ+0x34>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff90 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff2d 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff42 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff90 	bl	8001be8 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5f 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff35 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffa2 	bl	8001c4c <SysTick_Config>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e059      	b.n	8001dde <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_DMA_Init+0xd4>)
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d80f      	bhi.n	8001d56 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_DMA_Init+0xd8>)
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a2b      	ldr	r2, [pc, #172]	; (8001df0 <HAL_DMA_Init+0xdc>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	009a      	lsls	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a28      	ldr	r2, [pc, #160]	; (8001df4 <HAL_DMA_Init+0xe0>)
 8001d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d54:	e00e      	b.n	8001d74 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <HAL_DMA_Init+0xe4>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <HAL_DMA_Init+0xdc>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	009a      	lsls	r2, r3, #2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_DMA_Init+0xe8>)
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40020407 	.word	0x40020407
 8001dec:	bffdfff8 	.word	0xbffdfff8
 8001df0:	cccccccd 	.word	0xcccccccd
 8001df4:	40020000 	.word	0x40020000
 8001df8:	bffdfbf8 	.word	0xbffdfbf8
 8001dfc:	40020400 	.word	0x40020400

08001e00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_DMA_Start_IT+0x20>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e04a      	b.n	8001eb6 <HAL_DMA_Start_IT+0xb6>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d13a      	bne.n	8001ea8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2202      	movs	r2, #2
 8001e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fb76 	bl	8002548 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 020e 	orr.w	r2, r2, #14
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e00f      	b.n	8001e96 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0204 	bic.w	r2, r2, #4
 8001e84:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 020a 	orr.w	r2, r2, #10
 8001e94:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e005      	b.n	8001eb4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d005      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e0d6      	b.n	8002090 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 020e 	bic.w	r2, r2, #14
 8001ef0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b64      	ldr	r3, [pc, #400]	; (800209c <HAL_DMA_Abort_IT+0x1dc>)
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d958      	bls.n	8001fc0 <HAL_DMA_Abort_IT+0x100>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a63      	ldr	r2, [pc, #396]	; (80020a0 <HAL_DMA_Abort_IT+0x1e0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d04f      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xf8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a61      	ldr	r2, [pc, #388]	; (80020a4 <HAL_DMA_Abort_IT+0x1e4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d048      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0xf4>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_DMA_Abort_IT+0x1e8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d040      	beq.n	8001fae <HAL_DMA_Abort_IT+0xee>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <HAL_DMA_Abort_IT+0x1ec>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d038      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0xe8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5d      	ldr	r2, [pc, #372]	; (80020b0 <HAL_DMA_Abort_IT+0x1f0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d030      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0xe2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5b      	ldr	r2, [pc, #364]	; (80020b4 <HAL_DMA_Abort_IT+0x1f4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d028      	beq.n	8001f9c <HAL_DMA_Abort_IT+0xdc>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a53      	ldr	r2, [pc, #332]	; (800209c <HAL_DMA_Abort_IT+0x1dc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d020      	beq.n	8001f96 <HAL_DMA_Abort_IT+0xd6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a57      	ldr	r2, [pc, #348]	; (80020b8 <HAL_DMA_Abort_IT+0x1f8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d019      	beq.n	8001f92 <HAL_DMA_Abort_IT+0xd2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a56      	ldr	r2, [pc, #344]	; (80020bc <HAL_DMA_Abort_IT+0x1fc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d012      	beq.n	8001f8e <HAL_DMA_Abort_IT+0xce>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a54      	ldr	r2, [pc, #336]	; (80020c0 <HAL_DMA_Abort_IT+0x200>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00a      	beq.n	8001f88 <HAL_DMA_Abort_IT+0xc8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a53      	ldr	r2, [pc, #332]	; (80020c4 <HAL_DMA_Abort_IT+0x204>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d102      	bne.n	8001f82 <HAL_DMA_Abort_IT+0xc2>
 8001f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f80:	e01b      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f86:	e018      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f8c:	e015      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001f8e:	2310      	movs	r3, #16
 8001f90:	e013      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e011      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f9a:	e00e      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001f9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fa0:	e00b      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa6:	e008      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	e005      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb2:	e002      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	e000      	b.n	8001fba <HAL_DMA_Abort_IT+0xfa>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	4a43      	ldr	r2, [pc, #268]	; (80020c8 <HAL_DMA_Abort_IT+0x208>)
 8001fbc:	6053      	str	r3, [r2, #4]
 8001fbe:	e057      	b.n	8002070 <HAL_DMA_Abort_IT+0x1b0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <HAL_DMA_Abort_IT+0x1e0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d04f      	beq.n	800206a <HAL_DMA_Abort_IT+0x1aa>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a35      	ldr	r2, [pc, #212]	; (80020a4 <HAL_DMA_Abort_IT+0x1e4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d048      	beq.n	8002066 <HAL_DMA_Abort_IT+0x1a6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <HAL_DMA_Abort_IT+0x1e8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d040      	beq.n	8002060 <HAL_DMA_Abort_IT+0x1a0>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a32      	ldr	r2, [pc, #200]	; (80020ac <HAL_DMA_Abort_IT+0x1ec>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d038      	beq.n	800205a <HAL_DMA_Abort_IT+0x19a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a30      	ldr	r2, [pc, #192]	; (80020b0 <HAL_DMA_Abort_IT+0x1f0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d030      	beq.n	8002054 <HAL_DMA_Abort_IT+0x194>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a2f      	ldr	r2, [pc, #188]	; (80020b4 <HAL_DMA_Abort_IT+0x1f4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d028      	beq.n	800204e <HAL_DMA_Abort_IT+0x18e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a26      	ldr	r2, [pc, #152]	; (800209c <HAL_DMA_Abort_IT+0x1dc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d020      	beq.n	8002048 <HAL_DMA_Abort_IT+0x188>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <HAL_DMA_Abort_IT+0x1f8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d019      	beq.n	8002044 <HAL_DMA_Abort_IT+0x184>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a29      	ldr	r2, [pc, #164]	; (80020bc <HAL_DMA_Abort_IT+0x1fc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d012      	beq.n	8002040 <HAL_DMA_Abort_IT+0x180>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_DMA_Abort_IT+0x200>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00a      	beq.n	800203a <HAL_DMA_Abort_IT+0x17a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <HAL_DMA_Abort_IT+0x204>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d102      	bne.n	8002034 <HAL_DMA_Abort_IT+0x174>
 800202e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002032:	e01b      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 8002034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002038:	e018      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 800203a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203e:	e015      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 8002040:	2310      	movs	r3, #16
 8002042:	e013      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 8002044:	2301      	movs	r3, #1
 8002046:	e011      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 8002048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800204c:	e00e      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 800204e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002052:	e00b      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 8002054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002058:	e008      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 800205a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205e:	e005      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	e002      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 8002066:	2310      	movs	r3, #16
 8002068:	e000      	b.n	800206c <HAL_DMA_Abort_IT+0x1ac>
 800206a:	2301      	movs	r3, #1
 800206c:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_DMA_Abort_IT+0x20c>)
 800206e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
    } 
  }
  return status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40020080 	.word	0x40020080
 80020a0:	40020008 	.word	0x40020008
 80020a4:	4002001c 	.word	0x4002001c
 80020a8:	40020030 	.word	0x40020030
 80020ac:	40020044 	.word	0x40020044
 80020b0:	40020058 	.word	0x40020058
 80020b4:	4002006c 	.word	0x4002006c
 80020b8:	40020408 	.word	0x40020408
 80020bc:	4002041c 	.word	0x4002041c
 80020c0:	40020430 	.word	0x40020430
 80020c4:	40020444 	.word	0x40020444
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40020000 	.word	0x40020000

080020d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2204      	movs	r2, #4
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80d6 	beq.w	80022a6 <HAL_DMA_IRQHandler+0x1d6>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80d0 	beq.w	80022a6 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0204 	bic.w	r2, r2, #4
 8002122:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b9b      	ldr	r3, [pc, #620]	; (8002398 <HAL_DMA_IRQHandler+0x2c8>)
 800212c:	429a      	cmp	r2, r3
 800212e:	d958      	bls.n	80021e2 <HAL_DMA_IRQHandler+0x112>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a99      	ldr	r2, [pc, #612]	; (800239c <HAL_DMA_IRQHandler+0x2cc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d04f      	beq.n	80021da <HAL_DMA_IRQHandler+0x10a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a98      	ldr	r2, [pc, #608]	; (80023a0 <HAL_DMA_IRQHandler+0x2d0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d048      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x106>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a96      	ldr	r2, [pc, #600]	; (80023a4 <HAL_DMA_IRQHandler+0x2d4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d040      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x100>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a95      	ldr	r2, [pc, #596]	; (80023a8 <HAL_DMA_IRQHandler+0x2d8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d038      	beq.n	80021ca <HAL_DMA_IRQHandler+0xfa>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a93      	ldr	r2, [pc, #588]	; (80023ac <HAL_DMA_IRQHandler+0x2dc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d030      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xf4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a92      	ldr	r2, [pc, #584]	; (80023b0 <HAL_DMA_IRQHandler+0x2e0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d028      	beq.n	80021be <HAL_DMA_IRQHandler+0xee>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a89      	ldr	r2, [pc, #548]	; (8002398 <HAL_DMA_IRQHandler+0x2c8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d020      	beq.n	80021b8 <HAL_DMA_IRQHandler+0xe8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a8e      	ldr	r2, [pc, #568]	; (80023b4 <HAL_DMA_IRQHandler+0x2e4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d019      	beq.n	80021b4 <HAL_DMA_IRQHandler+0xe4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a8c      	ldr	r2, [pc, #560]	; (80023b8 <HAL_DMA_IRQHandler+0x2e8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d012      	beq.n	80021b0 <HAL_DMA_IRQHandler+0xe0>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a8b      	ldr	r2, [pc, #556]	; (80023bc <HAL_DMA_IRQHandler+0x2ec>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00a      	beq.n	80021aa <HAL_DMA_IRQHandler+0xda>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a89      	ldr	r2, [pc, #548]	; (80023c0 <HAL_DMA_IRQHandler+0x2f0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d102      	bne.n	80021a4 <HAL_DMA_IRQHandler+0xd4>
 800219e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021a2:	e01b      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021a8:	e018      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ae:	e015      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021b0:	2340      	movs	r3, #64	; 0x40
 80021b2:	e013      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021b4:	2304      	movs	r3, #4
 80021b6:	e011      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80021bc:	e00e      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021c2:	e00b      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80021c8:	e008      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021ce:	e005      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d4:	e002      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021d6:	2340      	movs	r3, #64	; 0x40
 80021d8:	e000      	b.n	80021dc <HAL_DMA_IRQHandler+0x10c>
 80021da:	2304      	movs	r3, #4
 80021dc:	4a79      	ldr	r2, [pc, #484]	; (80023c4 <HAL_DMA_IRQHandler+0x2f4>)
 80021de:	6053      	str	r3, [r2, #4]
 80021e0:	e057      	b.n	8002292 <HAL_DMA_IRQHandler+0x1c2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a6d      	ldr	r2, [pc, #436]	; (800239c <HAL_DMA_IRQHandler+0x2cc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d04f      	beq.n	800228c <HAL_DMA_IRQHandler+0x1bc>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a6b      	ldr	r2, [pc, #428]	; (80023a0 <HAL_DMA_IRQHandler+0x2d0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d048      	beq.n	8002288 <HAL_DMA_IRQHandler+0x1b8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6a      	ldr	r2, [pc, #424]	; (80023a4 <HAL_DMA_IRQHandler+0x2d4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d040      	beq.n	8002282 <HAL_DMA_IRQHandler+0x1b2>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a68      	ldr	r2, [pc, #416]	; (80023a8 <HAL_DMA_IRQHandler+0x2d8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d038      	beq.n	800227c <HAL_DMA_IRQHandler+0x1ac>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a67      	ldr	r2, [pc, #412]	; (80023ac <HAL_DMA_IRQHandler+0x2dc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d030      	beq.n	8002276 <HAL_DMA_IRQHandler+0x1a6>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a65      	ldr	r2, [pc, #404]	; (80023b0 <HAL_DMA_IRQHandler+0x2e0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d028      	beq.n	8002270 <HAL_DMA_IRQHandler+0x1a0>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5d      	ldr	r2, [pc, #372]	; (8002398 <HAL_DMA_IRQHandler+0x2c8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d020      	beq.n	800226a <HAL_DMA_IRQHandler+0x19a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a61      	ldr	r2, [pc, #388]	; (80023b4 <HAL_DMA_IRQHandler+0x2e4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d019      	beq.n	8002266 <HAL_DMA_IRQHandler+0x196>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a60      	ldr	r2, [pc, #384]	; (80023b8 <HAL_DMA_IRQHandler+0x2e8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d012      	beq.n	8002262 <HAL_DMA_IRQHandler+0x192>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <HAL_DMA_IRQHandler+0x2ec>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00a      	beq.n	800225c <HAL_DMA_IRQHandler+0x18c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a5d      	ldr	r2, [pc, #372]	; (80023c0 <HAL_DMA_IRQHandler+0x2f0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d102      	bne.n	8002256 <HAL_DMA_IRQHandler+0x186>
 8002250:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002254:	e01b      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 8002256:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800225a:	e018      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 800225c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002260:	e015      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	e013      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 8002266:	2304      	movs	r3, #4
 8002268:	e011      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 800226a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800226e:	e00e      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 8002270:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002274:	e00b      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 8002276:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800227a:	e008      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 800227c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002280:	e005      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 8002282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002286:	e002      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 8002288:	2340      	movs	r3, #64	; 0x40
 800228a:	e000      	b.n	800228e <HAL_DMA_IRQHandler+0x1be>
 800228c:	2304      	movs	r3, #4
 800228e:	4a4e      	ldr	r2, [pc, #312]	; (80023c8 <HAL_DMA_IRQHandler+0x2f8>)
 8002290:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8136 	beq.w	8002508 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022a4:	e130      	b.n	8002508 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2202      	movs	r2, #2
 80022ac:	409a      	lsls	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80f8 	beq.w	80024a8 <HAL_DMA_IRQHandler+0x3d8>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80f2 	beq.w	80024a8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 020a 	bic.w	r2, r2, #10
 80022e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_DMA_IRQHandler+0x2c8>)
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d973      	bls.n	80023de <HAL_DMA_IRQHandler+0x30e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a28      	ldr	r2, [pc, #160]	; (800239c <HAL_DMA_IRQHandler+0x2cc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d06a      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x306>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <HAL_DMA_IRQHandler+0x2d0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d063      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x302>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <HAL_DMA_IRQHandler+0x2d4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d05b      	beq.n	80023cc <HAL_DMA_IRQHandler+0x2fc>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <HAL_DMA_IRQHandler+0x2d8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d038      	beq.n	8002390 <HAL_DMA_IRQHandler+0x2c0>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a22      	ldr	r2, [pc, #136]	; (80023ac <HAL_DMA_IRQHandler+0x2dc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d030      	beq.n	800238a <HAL_DMA_IRQHandler+0x2ba>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a20      	ldr	r2, [pc, #128]	; (80023b0 <HAL_DMA_IRQHandler+0x2e0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d028      	beq.n	8002384 <HAL_DMA_IRQHandler+0x2b4>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <HAL_DMA_IRQHandler+0x2c8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d020      	beq.n	800237e <HAL_DMA_IRQHandler+0x2ae>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_DMA_IRQHandler+0x2e4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d019      	beq.n	800237a <HAL_DMA_IRQHandler+0x2aa>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_DMA_IRQHandler+0x2e8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d012      	beq.n	8002376 <HAL_DMA_IRQHandler+0x2a6>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_DMA_IRQHandler+0x2ec>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00a      	beq.n	8002370 <HAL_DMA_IRQHandler+0x2a0>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_DMA_IRQHandler+0x2f0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d102      	bne.n	800236a <HAL_DMA_IRQHandler+0x29a>
 8002364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002368:	e036      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 800236a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236e:	e033      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 8002370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002374:	e030      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 8002376:	2320      	movs	r3, #32
 8002378:	e02e      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 800237a:	2302      	movs	r3, #2
 800237c:	e02c      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 800237e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002382:	e029      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 8002384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002388:	e026      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 800238a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800238e:	e023      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 8002390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002394:	e020      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 8002396:	bf00      	nop
 8002398:	40020080 	.word	0x40020080
 800239c:	40020008 	.word	0x40020008
 80023a0:	4002001c 	.word	0x4002001c
 80023a4:	40020030 	.word	0x40020030
 80023a8:	40020044 	.word	0x40020044
 80023ac:	40020058 	.word	0x40020058
 80023b0:	4002006c 	.word	0x4002006c
 80023b4:	40020408 	.word	0x40020408
 80023b8:	4002041c 	.word	0x4002041c
 80023bc:	40020430 	.word	0x40020430
 80023c0:	40020444 	.word	0x40020444
 80023c4:	40020400 	.word	0x40020400
 80023c8:	40020000 	.word	0x40020000
 80023cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d0:	e002      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 80023d2:	2320      	movs	r3, #32
 80023d4:	e000      	b.n	80023d8 <HAL_DMA_IRQHandler+0x308>
 80023d6:	2302      	movs	r3, #2
 80023d8:	4a4e      	ldr	r2, [pc, #312]	; (8002514 <HAL_DMA_IRQHandler+0x444>)
 80023da:	6053      	str	r3, [r2, #4]
 80023dc:	e057      	b.n	800248e <HAL_DMA_IRQHandler+0x3be>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4d      	ldr	r2, [pc, #308]	; (8002518 <HAL_DMA_IRQHandler+0x448>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d04f      	beq.n	8002488 <HAL_DMA_IRQHandler+0x3b8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_DMA_IRQHandler+0x44c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d048      	beq.n	8002484 <HAL_DMA_IRQHandler+0x3b4>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a4a      	ldr	r2, [pc, #296]	; (8002520 <HAL_DMA_IRQHandler+0x450>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d040      	beq.n	800247e <HAL_DMA_IRQHandler+0x3ae>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a48      	ldr	r2, [pc, #288]	; (8002524 <HAL_DMA_IRQHandler+0x454>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d038      	beq.n	8002478 <HAL_DMA_IRQHandler+0x3a8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a47      	ldr	r2, [pc, #284]	; (8002528 <HAL_DMA_IRQHandler+0x458>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d030      	beq.n	8002472 <HAL_DMA_IRQHandler+0x3a2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a45      	ldr	r2, [pc, #276]	; (800252c <HAL_DMA_IRQHandler+0x45c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d028      	beq.n	800246c <HAL_DMA_IRQHandler+0x39c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a44      	ldr	r2, [pc, #272]	; (8002530 <HAL_DMA_IRQHandler+0x460>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d020      	beq.n	8002466 <HAL_DMA_IRQHandler+0x396>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a42      	ldr	r2, [pc, #264]	; (8002534 <HAL_DMA_IRQHandler+0x464>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d019      	beq.n	8002462 <HAL_DMA_IRQHandler+0x392>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a41      	ldr	r2, [pc, #260]	; (8002538 <HAL_DMA_IRQHandler+0x468>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d012      	beq.n	800245e <HAL_DMA_IRQHandler+0x38e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3f      	ldr	r2, [pc, #252]	; (800253c <HAL_DMA_IRQHandler+0x46c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00a      	beq.n	8002458 <HAL_DMA_IRQHandler+0x388>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a3e      	ldr	r2, [pc, #248]	; (8002540 <HAL_DMA_IRQHandler+0x470>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d102      	bne.n	8002452 <HAL_DMA_IRQHandler+0x382>
 800244c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002450:	e01b      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 8002452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002456:	e018      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 8002458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800245c:	e015      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 800245e:	2320      	movs	r3, #32
 8002460:	e013      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 8002462:	2302      	movs	r3, #2
 8002464:	e011      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 8002466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800246a:	e00e      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 800246c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002470:	e00b      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 8002472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002476:	e008      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 8002478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247c:	e005      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 800247e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002482:	e002      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 8002484:	2320      	movs	r3, #32
 8002486:	e000      	b.n	800248a <HAL_DMA_IRQHandler+0x3ba>
 8002488:	2302      	movs	r3, #2
 800248a:	4a2e      	ldr	r2, [pc, #184]	; (8002544 <HAL_DMA_IRQHandler+0x474>)
 800248c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d034      	beq.n	8002508 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024a6:	e02f      	b.n	8002508 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	2208      	movs	r2, #8
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d028      	beq.n	800250a <HAL_DMA_IRQHandler+0x43a>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d023      	beq.n	800250a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 020e 	bic.w	r2, r2, #14
 80024d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
    }
  }
  return;
 8002508:	bf00      	nop
 800250a:	bf00      	nop
}
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40020400 	.word	0x40020400
 8002518:	40020008 	.word	0x40020008
 800251c:	4002001c 	.word	0x4002001c
 8002520:	40020030 	.word	0x40020030
 8002524:	40020044 	.word	0x40020044
 8002528:	40020058 	.word	0x40020058
 800252c:	4002006c 	.word	0x4002006c
 8002530:	40020080 	.word	0x40020080
 8002534:	40020408 	.word	0x40020408
 8002538:	4002041c 	.word	0x4002041c
 800253c:	40020430 	.word	0x40020430
 8002540:	40020444 	.word	0x40020444
 8002544:	40020000 	.word	0x40020000

08002548 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f202 	lsl.w	r2, r1, r2
 8002564:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b10      	cmp	r3, #16
 8002574:	d108      	bne.n	8002588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002586:	e007      	b.n	8002598 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b08b      	sub	sp, #44	; 0x2c
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b6:	e179      	b.n	80028ac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025b8:	2201      	movs	r2, #1
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	f040 8168 	bne.w	80028a6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4aa0      	ldr	r2, [pc, #640]	; (800285c <HAL_GPIO_Init+0x2b8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d05e      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 80025e0:	4a9e      	ldr	r2, [pc, #632]	; (800285c <HAL_GPIO_Init+0x2b8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d875      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 80025e6:	4a9e      	ldr	r2, [pc, #632]	; (8002860 <HAL_GPIO_Init+0x2bc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d058      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 80025ec:	4a9c      	ldr	r2, [pc, #624]	; (8002860 <HAL_GPIO_Init+0x2bc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d86f      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 80025f2:	4a9c      	ldr	r2, [pc, #624]	; (8002864 <HAL_GPIO_Init+0x2c0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d052      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 80025f8:	4a9a      	ldr	r2, [pc, #616]	; (8002864 <HAL_GPIO_Init+0x2c0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d869      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 80025fe:	4a9a      	ldr	r2, [pc, #616]	; (8002868 <HAL_GPIO_Init+0x2c4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d04c      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 8002604:	4a98      	ldr	r2, [pc, #608]	; (8002868 <HAL_GPIO_Init+0x2c4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d863      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 800260a:	4a98      	ldr	r2, [pc, #608]	; (800286c <HAL_GPIO_Init+0x2c8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d046      	beq.n	800269e <HAL_GPIO_Init+0xfa>
 8002610:	4a96      	ldr	r2, [pc, #600]	; (800286c <HAL_GPIO_Init+0x2c8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d85d      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 8002616:	2b12      	cmp	r3, #18
 8002618:	d82a      	bhi.n	8002670 <HAL_GPIO_Init+0xcc>
 800261a:	2b12      	cmp	r3, #18
 800261c:	d859      	bhi.n	80026d2 <HAL_GPIO_Init+0x12e>
 800261e:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <HAL_GPIO_Init+0x80>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	0800269f 	.word	0x0800269f
 8002628:	08002679 	.word	0x08002679
 800262c:	0800268b 	.word	0x0800268b
 8002630:	080026cd 	.word	0x080026cd
 8002634:	080026d3 	.word	0x080026d3
 8002638:	080026d3 	.word	0x080026d3
 800263c:	080026d3 	.word	0x080026d3
 8002640:	080026d3 	.word	0x080026d3
 8002644:	080026d3 	.word	0x080026d3
 8002648:	080026d3 	.word	0x080026d3
 800264c:	080026d3 	.word	0x080026d3
 8002650:	080026d3 	.word	0x080026d3
 8002654:	080026d3 	.word	0x080026d3
 8002658:	080026d3 	.word	0x080026d3
 800265c:	080026d3 	.word	0x080026d3
 8002660:	080026d3 	.word	0x080026d3
 8002664:	080026d3 	.word	0x080026d3
 8002668:	08002681 	.word	0x08002681
 800266c:	08002695 	.word	0x08002695
 8002670:	4a7f      	ldr	r2, [pc, #508]	; (8002870 <HAL_GPIO_Init+0x2cc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002676:	e02c      	b.n	80026d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	623b      	str	r3, [r7, #32]
          break;
 800267e:	e029      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	3304      	adds	r3, #4
 8002686:	623b      	str	r3, [r7, #32]
          break;
 8002688:	e024      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	3308      	adds	r3, #8
 8002690:	623b      	str	r3, [r7, #32]
          break;
 8002692:	e01f      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	330c      	adds	r3, #12
 800269a:	623b      	str	r3, [r7, #32]
          break;
 800269c:	e01a      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026a6:	2304      	movs	r3, #4
 80026a8:	623b      	str	r3, [r7, #32]
          break;
 80026aa:	e013      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b4:	2308      	movs	r3, #8
 80026b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	611a      	str	r2, [r3, #16]
          break;
 80026be:	e009      	b.n	80026d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c0:	2308      	movs	r3, #8
 80026c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	615a      	str	r2, [r3, #20]
          break;
 80026ca:	e003      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
          break;
 80026d0:	e000      	b.n	80026d4 <HAL_GPIO_Init+0x130>
          break;
 80026d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2bff      	cmp	r3, #255	; 0xff
 80026d8:	d801      	bhi.n	80026de <HAL_GPIO_Init+0x13a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	e001      	b.n	80026e2 <HAL_GPIO_Init+0x13e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2bff      	cmp	r3, #255	; 0xff
 80026e8:	d802      	bhi.n	80026f0 <HAL_GPIO_Init+0x14c>
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	e002      	b.n	80026f6 <HAL_GPIO_Init+0x152>
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	3b08      	subs	r3, #8
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	210f      	movs	r1, #15
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	401a      	ands	r2, r3
 8002708:	6a39      	ldr	r1, [r7, #32]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	431a      	orrs	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80c1 	beq.w	80028a6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002724:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_GPIO_Init+0x2d0>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_GPIO_Init+0x2d0>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6193      	str	r3, [r2, #24]
 8002730:	4b50      	ldr	r3, [pc, #320]	; (8002874 <HAL_GPIO_Init+0x2d0>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800273c:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_GPIO_Init+0x2d4>)
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	220f      	movs	r2, #15
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a46      	ldr	r2, [pc, #280]	; (800287c <HAL_GPIO_Init+0x2d8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d01f      	beq.n	80027a8 <HAL_GPIO_Init+0x204>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a45      	ldr	r2, [pc, #276]	; (8002880 <HAL_GPIO_Init+0x2dc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d019      	beq.n	80027a4 <HAL_GPIO_Init+0x200>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a44      	ldr	r2, [pc, #272]	; (8002884 <HAL_GPIO_Init+0x2e0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_GPIO_Init+0x1fc>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a43      	ldr	r2, [pc, #268]	; (8002888 <HAL_GPIO_Init+0x2e4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00d      	beq.n	800279c <HAL_GPIO_Init+0x1f8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a42      	ldr	r2, [pc, #264]	; (800288c <HAL_GPIO_Init+0x2e8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d007      	beq.n	8002798 <HAL_GPIO_Init+0x1f4>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a41      	ldr	r2, [pc, #260]	; (8002890 <HAL_GPIO_Init+0x2ec>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_GPIO_Init+0x1f0>
 8002790:	2305      	movs	r3, #5
 8002792:	e00a      	b.n	80027aa <HAL_GPIO_Init+0x206>
 8002794:	2306      	movs	r3, #6
 8002796:	e008      	b.n	80027aa <HAL_GPIO_Init+0x206>
 8002798:	2304      	movs	r3, #4
 800279a:	e006      	b.n	80027aa <HAL_GPIO_Init+0x206>
 800279c:	2303      	movs	r3, #3
 800279e:	e004      	b.n	80027aa <HAL_GPIO_Init+0x206>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e002      	b.n	80027aa <HAL_GPIO_Init+0x206>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_GPIO_Init+0x206>
 80027a8:	2300      	movs	r3, #0
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	f002 0203 	and.w	r2, r2, #3
 80027b0:	0092      	lsls	r2, r2, #2
 80027b2:	4093      	lsls	r3, r2
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ba:	492f      	ldr	r1, [pc, #188]	; (8002878 <HAL_GPIO_Init+0x2d4>)
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	492e      	ldr	r1, [pc, #184]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	492a      	ldr	r1, [pc, #168]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4924      	ldr	r1, [pc, #144]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	43db      	mvns	r3, r3
 8002812:	4920      	ldr	r1, [pc, #128]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 8002814:	4013      	ands	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	491a      	ldr	r1, [pc, #104]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	608b      	str	r3, [r1, #8]
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	43db      	mvns	r3, r3
 800283a:	4916      	ldr	r1, [pc, #88]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 800283c:	4013      	ands	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d025      	beq.n	8002898 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	4910      	ldr	r1, [pc, #64]	; (8002894 <HAL_GPIO_Init+0x2f0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	60cb      	str	r3, [r1, #12]
 8002858:	e025      	b.n	80028a6 <HAL_GPIO_Init+0x302>
 800285a:	bf00      	nop
 800285c:	10320000 	.word	0x10320000
 8002860:	10310000 	.word	0x10310000
 8002864:	10220000 	.word	0x10220000
 8002868:	10210000 	.word	0x10210000
 800286c:	10120000 	.word	0x10120000
 8002870:	10110000 	.word	0x10110000
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	40010800 	.word	0x40010800
 8002880:	40010c00 	.word	0x40010c00
 8002884:	40011000 	.word	0x40011000
 8002888:	40011400 	.word	0x40011400
 800288c:	40011800 	.word	0x40011800
 8002890:	40011c00 	.word	0x40011c00
 8002894:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_GPIO_Init+0x324>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	43db      	mvns	r3, r3
 80028a0:	4909      	ldr	r1, [pc, #36]	; (80028c8 <HAL_GPIO_Init+0x324>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	3301      	adds	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f47f ae7e 	bne.w	80025b8 <HAL_GPIO_Init+0x14>
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	372c      	adds	r7, #44	; 0x2c
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40010400 	.word	0x40010400

080028cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e26c      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8087 	beq.w	80029fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ec:	4b92      	ldr	r3, [pc, #584]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d00c      	beq.n	8002912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f8:	4b8f      	ldr	r3, [pc, #572]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d112      	bne.n	800292a <HAL_RCC_OscConfig+0x5e>
 8002904:	4b8c      	ldr	r3, [pc, #560]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002910:	d10b      	bne.n	800292a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002912:	4b89      	ldr	r3, [pc, #548]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d06c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x12c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d168      	bne.n	80029f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e246      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x76>
 8002934:	4b80      	ldr	r3, [pc, #512]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a7f      	ldr	r2, [pc, #508]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800293a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e02e      	b.n	80029a0 <HAL_RCC_OscConfig+0xd4>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x98>
 800294a:	4b7b      	ldr	r3, [pc, #492]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a7a      	ldr	r2, [pc, #488]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b78      	ldr	r3, [pc, #480]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a77      	ldr	r2, [pc, #476]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800295c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e01d      	b.n	80029a0 <HAL_RCC_OscConfig+0xd4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0xbc>
 800296e:	4b72      	ldr	r3, [pc, #456]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a71      	ldr	r2, [pc, #452]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b6f      	ldr	r3, [pc, #444]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a6e      	ldr	r2, [pc, #440]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0xd4>
 8002988:	4b6b      	ldr	r3, [pc, #428]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800298e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a67      	ldr	r2, [pc, #412]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 800299a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe fcaa 	bl	8001300 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe fca6 	bl	8001300 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1fa      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b5d      	ldr	r3, [pc, #372]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0xe4>
 80029ce:	e014      	b.n	80029fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe fc96 	bl	8001300 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fc92 	bl	8001300 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1e6      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x10c>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d063      	beq.n	8002ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a06:	4b4c      	ldr	r3, [pc, #304]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a12:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d11c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x18c>
 8002a1e:	4b46      	ldr	r3, [pc, #280]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d116      	bne.n	8002a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2a:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x176>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e1ba      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4939      	ldr	r1, [pc, #228]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	e03a      	b.n	8002ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fc4b 	bl	8001300 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fc47 	bl	8001300 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e19b      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a80:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4927      	ldr	r1, [pc, #156]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
 8002aa0:	e015      	b.n	8002ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fc2a 	bl	8001300 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fc26 	bl	8001300 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e17a      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d03a      	beq.n	8002b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d019      	beq.n	8002b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae2:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fc0a 	bl	8001300 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fe fc06 	bl	8001300 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e15a      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f000 fad8 	bl	80030c4 <RCC_Delay>
 8002b14:	e01c      	b.n	8002b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_RCC_OscConfig+0x274>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fbf0 	bl	8001300 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b22:	e00f      	b.n	8002b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fe fbec 	bl	8001300 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d908      	bls.n	8002b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e140      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	42420000 	.word	0x42420000
 8002b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b44:	4b9e      	ldr	r3, [pc, #632]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e9      	bne.n	8002b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a6 	beq.w	8002caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b62:	4b97      	ldr	r3, [pc, #604]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6e:	4b94      	ldr	r3, [pc, #592]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	4a93      	ldr	r2, [pc, #588]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	61d3      	str	r3, [r2, #28]
 8002b7a:	4b91      	ldr	r3, [pc, #580]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b8e      	ldr	r3, [pc, #568]	; (8002dc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d118      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b8b      	ldr	r3, [pc, #556]	; (8002dc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a8a      	ldr	r2, [pc, #552]	; (8002dc4 <HAL_RCC_OscConfig+0x4f8>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fbad 	bl	8001300 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7fe fba9 	bl	8001300 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b64      	cmp	r3, #100	; 0x64
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0fd      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b81      	ldr	r3, [pc, #516]	; (8002dc4 <HAL_RCC_OscConfig+0x4f8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x312>
 8002bd0:	4b7b      	ldr	r3, [pc, #492]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a7a      	ldr	r2, [pc, #488]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	e02d      	b.n	8002c3a <HAL_RCC_OscConfig+0x36e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x334>
 8002be6:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a75      	ldr	r2, [pc, #468]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	4b73      	ldr	r3, [pc, #460]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a72      	ldr	r2, [pc, #456]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	6213      	str	r3, [r2, #32]
 8002bfe:	e01c      	b.n	8002c3a <HAL_RCC_OscConfig+0x36e>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCC_OscConfig+0x356>
 8002c08:	4b6d      	ldr	r3, [pc, #436]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4a6c      	ldr	r2, [pc, #432]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	6213      	str	r3, [r2, #32]
 8002c14:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a69      	ldr	r2, [pc, #420]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	e00b      	b.n	8002c3a <HAL_RCC_OscConfig+0x36e>
 8002c22:	4b67      	ldr	r3, [pc, #412]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a66      	ldr	r2, [pc, #408]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6213      	str	r3, [r2, #32]
 8002c2e:	4b64      	ldr	r3, [pc, #400]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a63      	ldr	r2, [pc, #396]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d015      	beq.n	8002c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c42:	f7fe fb5d 	bl	8001300 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4a:	f7fe fb59 	bl	8001300 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0ab      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c60:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0ee      	beq.n	8002c4a <HAL_RCC_OscConfig+0x37e>
 8002c6c:	e014      	b.n	8002c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fb47 	bl	8001300 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fe fb43 	bl	8001300 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e095      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8c:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ee      	bne.n	8002c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9e:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	4a47      	ldr	r2, [pc, #284]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8081 	beq.w	8002db6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb4:	4b42      	ldr	r3, [pc, #264]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d061      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d146      	bne.n	8002d56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCC_OscConfig+0x4fc>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7fe fb17 	bl	8001300 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fe fb13 	bl	8001300 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e067      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce8:	4b35      	ldr	r3, [pc, #212]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f0      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d108      	bne.n	8002d10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	492d      	ldr	r1, [pc, #180]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a19      	ldr	r1, [r3, #32]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	430b      	orrs	r3, r1
 8002d22:	4927      	ldr	r1, [pc, #156]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x4fc>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fae7 	bl	8001300 <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d36:	f7fe fae3 	bl	8001300 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e037      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x46a>
 8002d54:	e02f      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_RCC_OscConfig+0x4fc>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fad0 	bl	8001300 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe facc 	bl	8001300 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e020      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x498>
 8002d82:	e018      	b.n	8002db6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e013      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_OscConfig+0x4f4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	42420060 	.word	0x42420060

08002dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0d0      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b6a      	ldr	r3, [pc, #424]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d910      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4965      	ldr	r1, [pc, #404]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0b8      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a52      	ldr	r2, [pc, #328]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b50      	ldr	r3, [pc, #320]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	494d      	ldr	r1, [pc, #308]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d040      	beq.n	8002eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d115      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e073      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b3d      	ldr	r3, [pc, #244]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e06b      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4936      	ldr	r1, [pc, #216]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7fe fa20 	bl	8001300 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7fe fa1c 	bl	8001300 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e053      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d210      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4922      	ldr	r1, [pc, #136]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e032      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4916      	ldr	r1, [pc, #88]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	490e      	ldr	r1, [pc, #56]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f5a:	f000 f821 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	490a      	ldr	r1, [pc, #40]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	5ccb      	ldrb	r3, [r1, r3]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1cc>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1d0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f97e 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40022000 	.word	0x40022000
 8002f90:	40021000 	.word	0x40021000
 8002f94:	08006650 	.word	0x08006650
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa0:	b490      	push	{r4, r7}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fa8:	1d3c      	adds	r4, r7, #4
 8002faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fb0:	f240 2301 	movw	r3, #513	; 0x201
 8002fb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d002      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x46>
 8002fde:	e02d      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe2:	623b      	str	r3, [r7, #32]
      break;
 8002fe4:	e02d      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	0c9b      	lsrs	r3, r3, #18
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ff8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d013      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	0c5b      	lsrs	r3, r3, #17
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003012:	4413      	add	r3, r2
 8003014:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003018:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <HAL_RCC_GetSysClockFreq+0xb8>)
 800301e:	fb02 f203 	mul.w	r2, r2, r3
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	e004      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	623b      	str	r3, [r7, #32]
      break;
 800303a:	e002      	b.n	8003042 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCC_GetSysClockFreq+0xb8>)
 800303e:	623b      	str	r3, [r7, #32]
      break;
 8003040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003042:	6a3b      	ldr	r3, [r7, #32]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3728      	adds	r7, #40	; 0x28
 8003048:	46bd      	mov	sp, r7
 800304a:	bc90      	pop	{r4, r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	08006640 	.word	0x08006640
 8003054:	40021000 	.word	0x40021000
 8003058:	007a1200 	.word	0x007a1200
 800305c:	003d0900 	.word	0x003d0900

08003060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003064:	4b02      	ldr	r3, [pc, #8]	; (8003070 <HAL_RCC_GetHCLKFreq+0x10>)
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	20000000 	.word	0x20000000

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003078:	f7ff fff2 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	08006660 	.word	0x08006660

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030a0:	f7ff ffde 	bl	8003060 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	0adb      	lsrs	r3, r3, #11
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08006660 	.word	0x08006660

080030c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <RCC_Delay+0x34>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <RCC_Delay+0x38>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	0a5b      	lsrs	r3, r3, #9
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030e0:	bf00      	nop
  }
  while (Delay --);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1e5a      	subs	r2, r3, #1
 80030e6:	60fa      	str	r2, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f9      	bne.n	80030e0 <RCC_Delay+0x1c>
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	20000000 	.word	0x20000000
 80030fc:	10624dd3 	.word	0x10624dd3

08003100 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d07d      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800311c:	2300      	movs	r3, #0
 800311e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003120:	4b4f      	ldr	r3, [pc, #316]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10d      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b4c      	ldr	r3, [pc, #304]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003136:	61d3      	str	r3, [r2, #28]
 8003138:	4b49      	ldr	r3, [pc, #292]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b46      	ldr	r3, [pc, #280]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d118      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003154:	4b43      	ldr	r3, [pc, #268]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a42      	ldr	r2, [pc, #264]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003160:	f7fe f8ce 	bl	8001300 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	e008      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003168:	f7fe f8ca 	bl	8001300 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e06d      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b3a      	ldr	r3, [pc, #232]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003186:	4b36      	ldr	r3, [pc, #216]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02e      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d027      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031a4:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b4:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031ba:	4a29      	ldr	r2, [pc, #164]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d014      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fe f899 	bl	8001300 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe f895 	bl	8001300 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e036      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ee      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f4:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4917      	ldr	r1, [pc, #92]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	4313      	orrs	r3, r2
 8003204:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	4a13      	ldr	r2, [pc, #76]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	490b      	ldr	r1, [pc, #44]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003242:	4b07      	ldr	r3, [pc, #28]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4904      	ldr	r1, [pc, #16]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	40007000 	.word	0x40007000
 8003268:	42420440 	.word	0x42420440

0800326c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e03f      	b.n	80032fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd ff62 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2224      	movs	r2, #36	; 0x24
 800329c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fb39 	bl	8003928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08a      	sub	sp, #40	; 0x28
 800330a:	af02      	add	r7, sp, #8
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	d17c      	bne.n	8003420 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_UART_Transmit+0x2c>
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e075      	b.n	8003422 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_UART_Transmit+0x3e>
 8003340:	2302      	movs	r3, #2
 8003342:	e06e      	b.n	8003422 <HAL_UART_Transmit+0x11c>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2221      	movs	r2, #33	; 0x21
 8003356:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800335a:	f7fd ffd1 	bl	8001300 <HAL_GetTick>
 800335e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d108      	bne.n	8003388 <HAL_UART_Transmit+0x82>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	e003      	b.n	8003390 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003398:	e02a      	b.n	80033f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2180      	movs	r1, #128	; 0x80
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f95c 	bl	8003662 <UART_WaitOnFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e036      	b.n	8003422 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3302      	adds	r3, #2
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e007      	b.n	80033e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3301      	adds	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1cf      	bne.n	800339a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2200      	movs	r2, #0
 8003402:	2140      	movs	r1, #64	; 0x40
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f92c 	bl	8003662 <UART_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e006      	b.n	8003422 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800344c:	2300      	movs	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_UART_IRQHandler+0x52>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9d5 	bl	8003826 <UART_Receive_IT>
      return;
 800347c:	e0d0      	b.n	8003620 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80b0 	beq.w	80035e6 <HAL_UART_IRQHandler+0x1ba>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_UART_IRQHandler+0x70>
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80a5 	beq.w	80035e6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_UART_IRQHandler+0x90>
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_UART_IRQHandler+0xb0>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	f043 0202 	orr.w	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_UART_IRQHandler+0xd0>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	f043 0204 	orr.w	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00f      	beq.n	8003526 <HAL_UART_IRQHandler+0xfa>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_UART_IRQHandler+0xee>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	f043 0208 	orr.w	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d077      	beq.n	800361e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f96f 	bl	8003826 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <HAL_UART_IRQHandler+0x144>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8c0 	bl	80036f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d023      	beq.n	80035cc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003592:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	4a21      	ldr	r2, [pc, #132]	; (8003628 <HAL_UART_IRQHandler+0x1fc>)
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fc89 	bl	8001ec0 <HAL_DMA_Abort_IT>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d016      	beq.n	80035e2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035be:	4610      	mov	r0, r2
 80035c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c2:	e00e      	b.n	80035e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f843 	bl	8003650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ca:	e00a      	b.n	80035e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f83f 	bl	8003650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d2:	e006      	b.n	80035e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f83b 	bl	8003650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035e0:	e01d      	b.n	800361e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e2:	bf00      	nop
    return;
 80035e4:	e01b      	b.n	800361e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_UART_IRQHandler+0x1d6>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8ac 	bl	8003758 <UART_Transmit_IT>
    return;
 8003600:	e00e      	b.n	8003620 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <HAL_UART_IRQHandler+0x1f4>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d004      	beq.n	8003620 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8ed 	bl	80037f6 <UART_EndTransmit_IT>
    return;
 800361c:	e000      	b.n	8003620 <HAL_UART_IRQHandler+0x1f4>
    return;
 800361e:	bf00      	nop
  }
}
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	08003731 	.word	0x08003731

0800362c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003672:	e02c      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d028      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x30>
 8003682:	f7fd fe3d 	bl	8001300 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	429a      	cmp	r2, r3
 8003690:	d21d      	bcs.n	80036ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e00f      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d0c3      	beq.n	8003674 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800370c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff ff80 	bl	8003650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b21      	cmp	r3, #33	; 0x21
 800376a:	d13e      	bne.n	80037ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003774:	d114      	bne.n	80037a0 <UART_Transmit_IT+0x48>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d110      	bne.n	80037a0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003792:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	1c9a      	adds	r2, r3, #2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	621a      	str	r2, [r3, #32]
 800379e:	e008      	b.n	80037b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	1c59      	adds	r1, r3, #1
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6211      	str	r1, [r2, #32]
 80037aa:	781a      	ldrb	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4619      	mov	r1, r3
 80037c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10f      	bne.n	80037e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ff08 	bl	800362c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b22      	cmp	r3, #34	; 0x22
 8003838:	d170      	bne.n	800391c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003842:	d117      	bne.n	8003874 <UART_Receive_IT+0x4e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d113      	bne.n	8003874 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	b29a      	uxth	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
 8003872:	e026      	b.n	80038c2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003886:	d007      	beq.n	8003898 <UART_Receive_IT+0x72>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <UART_Receive_IT+0x80>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e008      	b.n	80038b8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4619      	mov	r1, r3
 80038d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d120      	bne.n	8003918 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0220 	bic.w	r2, r2, #32
 80038e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fe95 	bl	800363e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e002      	b.n	800391e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003962:	f023 030c 	bic.w	r3, r3, #12
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	430b      	orrs	r3, r1
 800396e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2c      	ldr	r2, [pc, #176]	; (8003a3c <UART_SetConfig+0x114>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003990:	f7ff fb84 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	e002      	b.n	800399e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003998:	f7ff fb6c 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 800399c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009a      	lsls	r2, r3, #2
 80039a8:	441a      	add	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <UART_SetConfig+0x118>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	0119      	lsls	r1, r3, #4
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009a      	lsls	r2, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d4:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <UART_SetConfig+0x118>)
 80039d6:	fba3 0302 	umull	r0, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2064      	movs	r0, #100	; 0x64
 80039de:	fb00 f303 	mul.w	r3, r0, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	3332      	adds	r3, #50	; 0x32
 80039e8:	4a15      	ldr	r2, [pc, #84]	; (8003a40 <UART_SetConfig+0x118>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f4:	4419      	add	r1, r3
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009a      	lsls	r2, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <UART_SetConfig+0x118>)
 8003a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2064      	movs	r0, #100	; 0x64
 8003a16:	fb00 f303 	mul.w	r3, r0, r3
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	3332      	adds	r3, #50	; 0x32
 8003a20:	4a07      	ldr	r2, [pc, #28]	; (8003a40 <UART_SetConfig+0x118>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	f003 020f 	and.w	r2, r3, #15
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	440a      	add	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40013800 	.word	0x40013800
 8003a40:	51eb851f 	.word	0x51eb851f

08003a44 <__errno>:
 8003a44:	4b01      	ldr	r3, [pc, #4]	; (8003a4c <__errno+0x8>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	2000000c 	.word	0x2000000c

08003a50 <__libc_init_array>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	2600      	movs	r6, #0
 8003a54:	4d0c      	ldr	r5, [pc, #48]	; (8003a88 <__libc_init_array+0x38>)
 8003a56:	4c0d      	ldr	r4, [pc, #52]	; (8003a8c <__libc_init_array+0x3c>)
 8003a58:	1b64      	subs	r4, r4, r5
 8003a5a:	10a4      	asrs	r4, r4, #2
 8003a5c:	42a6      	cmp	r6, r4
 8003a5e:	d109      	bne.n	8003a74 <__libc_init_array+0x24>
 8003a60:	f002 fdd4 	bl	800660c <_init>
 8003a64:	2600      	movs	r6, #0
 8003a66:	4d0a      	ldr	r5, [pc, #40]	; (8003a90 <__libc_init_array+0x40>)
 8003a68:	4c0a      	ldr	r4, [pc, #40]	; (8003a94 <__libc_init_array+0x44>)
 8003a6a:	1b64      	subs	r4, r4, r5
 8003a6c:	10a4      	asrs	r4, r4, #2
 8003a6e:	42a6      	cmp	r6, r4
 8003a70:	d105      	bne.n	8003a7e <__libc_init_array+0x2e>
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a78:	4798      	blx	r3
 8003a7a:	3601      	adds	r6, #1
 8003a7c:	e7ee      	b.n	8003a5c <__libc_init_array+0xc>
 8003a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a82:	4798      	blx	r3
 8003a84:	3601      	adds	r6, #1
 8003a86:	e7f2      	b.n	8003a6e <__libc_init_array+0x1e>
 8003a88:	08006a4c 	.word	0x08006a4c
 8003a8c:	08006a4c 	.word	0x08006a4c
 8003a90:	08006a4c 	.word	0x08006a4c
 8003a94:	08006a50 	.word	0x08006a50

08003a98 <memset>:
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4402      	add	r2, r0
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d100      	bne.n	8003aa2 <memset+0xa>
 8003aa0:	4770      	bx	lr
 8003aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa6:	e7f9      	b.n	8003a9c <memset+0x4>

08003aa8 <__cvt>:
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aae:	461f      	mov	r7, r3
 8003ab0:	bfbb      	ittet	lt
 8003ab2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003ab6:	461f      	movlt	r7, r3
 8003ab8:	2300      	movge	r3, #0
 8003aba:	232d      	movlt	r3, #45	; 0x2d
 8003abc:	b088      	sub	sp, #32
 8003abe:	4614      	mov	r4, r2
 8003ac0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ac2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003ac4:	7013      	strb	r3, [r2, #0]
 8003ac6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ac8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003acc:	f023 0820 	bic.w	r8, r3, #32
 8003ad0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ad4:	d005      	beq.n	8003ae2 <__cvt+0x3a>
 8003ad6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ada:	d100      	bne.n	8003ade <__cvt+0x36>
 8003adc:	3501      	adds	r5, #1
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e000      	b.n	8003ae4 <__cvt+0x3c>
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	aa07      	add	r2, sp, #28
 8003ae6:	9204      	str	r2, [sp, #16]
 8003ae8:	aa06      	add	r2, sp, #24
 8003aea:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003aee:	e9cd 3500 	strd	r3, r5, [sp]
 8003af2:	4622      	mov	r2, r4
 8003af4:	463b      	mov	r3, r7
 8003af6:	f000 fda3 	bl	8004640 <_dtoa_r>
 8003afa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003afe:	4606      	mov	r6, r0
 8003b00:	d102      	bne.n	8003b08 <__cvt+0x60>
 8003b02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b04:	07db      	lsls	r3, r3, #31
 8003b06:	d522      	bpl.n	8003b4e <__cvt+0xa6>
 8003b08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b0c:	eb06 0905 	add.w	r9, r6, r5
 8003b10:	d110      	bne.n	8003b34 <__cvt+0x8c>
 8003b12:	7833      	ldrb	r3, [r6, #0]
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d10a      	bne.n	8003b2e <__cvt+0x86>
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	4639      	mov	r1, r7
 8003b20:	f7fc ffae 	bl	8000a80 <__aeabi_dcmpeq>
 8003b24:	b918      	cbnz	r0, 8003b2e <__cvt+0x86>
 8003b26:	f1c5 0501 	rsb	r5, r5, #1
 8003b2a:	f8ca 5000 	str.w	r5, [sl]
 8003b2e:	f8da 3000 	ldr.w	r3, [sl]
 8003b32:	4499      	add	r9, r3
 8003b34:	2200      	movs	r2, #0
 8003b36:	2300      	movs	r3, #0
 8003b38:	4620      	mov	r0, r4
 8003b3a:	4639      	mov	r1, r7
 8003b3c:	f7fc ffa0 	bl	8000a80 <__aeabi_dcmpeq>
 8003b40:	b108      	cbz	r0, 8003b46 <__cvt+0x9e>
 8003b42:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b46:	2230      	movs	r2, #48	; 0x30
 8003b48:	9b07      	ldr	r3, [sp, #28]
 8003b4a:	454b      	cmp	r3, r9
 8003b4c:	d307      	bcc.n	8003b5e <__cvt+0xb6>
 8003b4e:	4630      	mov	r0, r6
 8003b50:	9b07      	ldr	r3, [sp, #28]
 8003b52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003b54:	1b9b      	subs	r3, r3, r6
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	b008      	add	sp, #32
 8003b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5e:	1c59      	adds	r1, r3, #1
 8003b60:	9107      	str	r1, [sp, #28]
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e7f0      	b.n	8003b48 <__cvt+0xa0>

08003b66 <__exponent>:
 8003b66:	4603      	mov	r3, r0
 8003b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	f803 2b02 	strb.w	r2, [r3], #2
 8003b70:	bfb6      	itet	lt
 8003b72:	222d      	movlt	r2, #45	; 0x2d
 8003b74:	222b      	movge	r2, #43	; 0x2b
 8003b76:	4249      	neglt	r1, r1
 8003b78:	2909      	cmp	r1, #9
 8003b7a:	7042      	strb	r2, [r0, #1]
 8003b7c:	dd2b      	ble.n	8003bd6 <__exponent+0x70>
 8003b7e:	f10d 0407 	add.w	r4, sp, #7
 8003b82:	46a4      	mov	ip, r4
 8003b84:	270a      	movs	r7, #10
 8003b86:	fb91 f6f7 	sdiv	r6, r1, r7
 8003b8a:	460a      	mov	r2, r1
 8003b8c:	46a6      	mov	lr, r4
 8003b8e:	fb07 1516 	mls	r5, r7, r6, r1
 8003b92:	2a63      	cmp	r2, #99	; 0x63
 8003b94:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003b98:	4631      	mov	r1, r6
 8003b9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003b9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003ba2:	dcf0      	bgt.n	8003b86 <__exponent+0x20>
 8003ba4:	3130      	adds	r1, #48	; 0x30
 8003ba6:	f1ae 0502 	sub.w	r5, lr, #2
 8003baa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003bae:	4629      	mov	r1, r5
 8003bb0:	1c44      	adds	r4, r0, #1
 8003bb2:	4561      	cmp	r1, ip
 8003bb4:	d30a      	bcc.n	8003bcc <__exponent+0x66>
 8003bb6:	f10d 0209 	add.w	r2, sp, #9
 8003bba:	eba2 020e 	sub.w	r2, r2, lr
 8003bbe:	4565      	cmp	r5, ip
 8003bc0:	bf88      	it	hi
 8003bc2:	2200      	movhi	r2, #0
 8003bc4:	4413      	add	r3, r2
 8003bc6:	1a18      	subs	r0, r3, r0
 8003bc8:	b003      	add	sp, #12
 8003bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bd0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003bd4:	e7ed      	b.n	8003bb2 <__exponent+0x4c>
 8003bd6:	2330      	movs	r3, #48	; 0x30
 8003bd8:	3130      	adds	r1, #48	; 0x30
 8003bda:	7083      	strb	r3, [r0, #2]
 8003bdc:	70c1      	strb	r1, [r0, #3]
 8003bde:	1d03      	adds	r3, r0, #4
 8003be0:	e7f1      	b.n	8003bc6 <__exponent+0x60>
	...

08003be4 <_printf_float>:
 8003be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be8:	b091      	sub	sp, #68	; 0x44
 8003bea:	460c      	mov	r4, r1
 8003bec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	461f      	mov	r7, r3
 8003bf4:	4605      	mov	r5, r0
 8003bf6:	f001 fcc9 	bl	800558c <_localeconv_r>
 8003bfa:	6803      	ldr	r3, [r0, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003c00:	f7fc fb12 	bl	8000228 <strlen>
 8003c04:	2300      	movs	r3, #0
 8003c06:	930e      	str	r3, [sp, #56]	; 0x38
 8003c08:	f8d8 3000 	ldr.w	r3, [r8]
 8003c0c:	900a      	str	r0, [sp, #40]	; 0x28
 8003c0e:	3307      	adds	r3, #7
 8003c10:	f023 0307 	bic.w	r3, r3, #7
 8003c14:	f103 0208 	add.w	r2, r3, #8
 8003c18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003c1c:	f8d4 b000 	ldr.w	fp, [r4]
 8003c20:	f8c8 2000 	str.w	r2, [r8]
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003c2c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003c30:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3a:	4640      	mov	r0, r8
 8003c3c:	4b9c      	ldr	r3, [pc, #624]	; (8003eb0 <_printf_float+0x2cc>)
 8003c3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c40:	f7fc ff50 	bl	8000ae4 <__aeabi_dcmpun>
 8003c44:	bb70      	cbnz	r0, 8003ca4 <_printf_float+0xc0>
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	4640      	mov	r0, r8
 8003c4c:	4b98      	ldr	r3, [pc, #608]	; (8003eb0 <_printf_float+0x2cc>)
 8003c4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c50:	f7fc ff2a 	bl	8000aa8 <__aeabi_dcmple>
 8003c54:	bb30      	cbnz	r0, 8003ca4 <_printf_float+0xc0>
 8003c56:	2200      	movs	r2, #0
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	f7fc ff19 	bl	8000a94 <__aeabi_dcmplt>
 8003c62:	b110      	cbz	r0, 8003c6a <_printf_float+0x86>
 8003c64:	232d      	movs	r3, #45	; 0x2d
 8003c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c6a:	4b92      	ldr	r3, [pc, #584]	; (8003eb4 <_printf_float+0x2d0>)
 8003c6c:	4892      	ldr	r0, [pc, #584]	; (8003eb8 <_printf_float+0x2d4>)
 8003c6e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003c72:	bf94      	ite	ls
 8003c74:	4698      	movls	r8, r3
 8003c76:	4680      	movhi	r8, r0
 8003c78:	2303      	movs	r3, #3
 8003c7a:	f04f 0a00 	mov.w	sl, #0
 8003c7e:	6123      	str	r3, [r4, #16]
 8003c80:	f02b 0304 	bic.w	r3, fp, #4
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	4633      	mov	r3, r6
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	9700      	str	r7, [sp, #0]
 8003c8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003c90:	f000 f9d4 	bl	800403c <_printf_common>
 8003c94:	3001      	adds	r0, #1
 8003c96:	f040 8090 	bne.w	8003dba <_printf_float+0x1d6>
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9e:	b011      	add	sp, #68	; 0x44
 8003ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	4653      	mov	r3, sl
 8003ca8:	4640      	mov	r0, r8
 8003caa:	4651      	mov	r1, sl
 8003cac:	f7fc ff1a 	bl	8000ae4 <__aeabi_dcmpun>
 8003cb0:	b148      	cbz	r0, 8003cc6 <_printf_float+0xe2>
 8003cb2:	f1ba 0f00 	cmp.w	sl, #0
 8003cb6:	bfb8      	it	lt
 8003cb8:	232d      	movlt	r3, #45	; 0x2d
 8003cba:	4880      	ldr	r0, [pc, #512]	; (8003ebc <_printf_float+0x2d8>)
 8003cbc:	bfb8      	it	lt
 8003cbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003cc2:	4b7f      	ldr	r3, [pc, #508]	; (8003ec0 <_printf_float+0x2dc>)
 8003cc4:	e7d3      	b.n	8003c6e <_printf_float+0x8a>
 8003cc6:	6863      	ldr	r3, [r4, #4]
 8003cc8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	d142      	bne.n	8003d56 <_printf_float+0x172>
 8003cd0:	2306      	movs	r3, #6
 8003cd2:	6063      	str	r3, [r4, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	9206      	str	r2, [sp, #24]
 8003cd8:	aa0e      	add	r2, sp, #56	; 0x38
 8003cda:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003cde:	aa0d      	add	r2, sp, #52	; 0x34
 8003ce0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ce4:	9203      	str	r2, [sp, #12]
 8003ce6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003cea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	6863      	ldr	r3, [r4, #4]
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	4653      	mov	r3, sl
 8003cfa:	910b      	str	r1, [sp, #44]	; 0x2c
 8003cfc:	f7ff fed4 	bl	8003aa8 <__cvt>
 8003d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d02:	4680      	mov	r8, r0
 8003d04:	2947      	cmp	r1, #71	; 0x47
 8003d06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d08:	d108      	bne.n	8003d1c <_printf_float+0x138>
 8003d0a:	1cc8      	adds	r0, r1, #3
 8003d0c:	db02      	blt.n	8003d14 <_printf_float+0x130>
 8003d0e:	6863      	ldr	r3, [r4, #4]
 8003d10:	4299      	cmp	r1, r3
 8003d12:	dd40      	ble.n	8003d96 <_printf_float+0x1b2>
 8003d14:	f1a9 0902 	sub.w	r9, r9, #2
 8003d18:	fa5f f989 	uxtb.w	r9, r9
 8003d1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d20:	d81f      	bhi.n	8003d62 <_printf_float+0x17e>
 8003d22:	464a      	mov	r2, r9
 8003d24:	3901      	subs	r1, #1
 8003d26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003d2a:	910d      	str	r1, [sp, #52]	; 0x34
 8003d2c:	f7ff ff1b 	bl	8003b66 <__exponent>
 8003d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d32:	4682      	mov	sl, r0
 8003d34:	1813      	adds	r3, r2, r0
 8003d36:	2a01      	cmp	r2, #1
 8003d38:	6123      	str	r3, [r4, #16]
 8003d3a:	dc02      	bgt.n	8003d42 <_printf_float+0x15e>
 8003d3c:	6822      	ldr	r2, [r4, #0]
 8003d3e:	07d2      	lsls	r2, r2, #31
 8003d40:	d501      	bpl.n	8003d46 <_printf_float+0x162>
 8003d42:	3301      	adds	r3, #1
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d09b      	beq.n	8003c86 <_printf_float+0xa2>
 8003d4e:	232d      	movs	r3, #45	; 0x2d
 8003d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d54:	e797      	b.n	8003c86 <_printf_float+0xa2>
 8003d56:	2947      	cmp	r1, #71	; 0x47
 8003d58:	d1bc      	bne.n	8003cd4 <_printf_float+0xf0>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ba      	bne.n	8003cd4 <_printf_float+0xf0>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e7b7      	b.n	8003cd2 <_printf_float+0xee>
 8003d62:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003d66:	d118      	bne.n	8003d9a <_printf_float+0x1b6>
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	dd0b      	ble.n	8003d86 <_printf_float+0x1a2>
 8003d6e:	6121      	str	r1, [r4, #16]
 8003d70:	b913      	cbnz	r3, 8003d78 <_printf_float+0x194>
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	07d0      	lsls	r0, r2, #31
 8003d76:	d502      	bpl.n	8003d7e <_printf_float+0x19a>
 8003d78:	3301      	adds	r3, #1
 8003d7a:	440b      	add	r3, r1
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	f04f 0a00 	mov.w	sl, #0
 8003d82:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d84:	e7df      	b.n	8003d46 <_printf_float+0x162>
 8003d86:	b913      	cbnz	r3, 8003d8e <_printf_float+0x1aa>
 8003d88:	6822      	ldr	r2, [r4, #0]
 8003d8a:	07d2      	lsls	r2, r2, #31
 8003d8c:	d501      	bpl.n	8003d92 <_printf_float+0x1ae>
 8003d8e:	3302      	adds	r3, #2
 8003d90:	e7f4      	b.n	8003d7c <_printf_float+0x198>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e7f2      	b.n	8003d7c <_printf_float+0x198>
 8003d96:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d9c:	4299      	cmp	r1, r3
 8003d9e:	db05      	blt.n	8003dac <_printf_float+0x1c8>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	6121      	str	r1, [r4, #16]
 8003da4:	07d8      	lsls	r0, r3, #31
 8003da6:	d5ea      	bpl.n	8003d7e <_printf_float+0x19a>
 8003da8:	1c4b      	adds	r3, r1, #1
 8003daa:	e7e7      	b.n	8003d7c <_printf_float+0x198>
 8003dac:	2900      	cmp	r1, #0
 8003dae:	bfcc      	ite	gt
 8003db0:	2201      	movgt	r2, #1
 8003db2:	f1c1 0202 	rsble	r2, r1, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	e7e0      	b.n	8003d7c <_printf_float+0x198>
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	055a      	lsls	r2, r3, #21
 8003dbe:	d407      	bmi.n	8003dd0 <_printf_float+0x1ec>
 8003dc0:	6923      	ldr	r3, [r4, #16]
 8003dc2:	4642      	mov	r2, r8
 8003dc4:	4631      	mov	r1, r6
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	47b8      	blx	r7
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d12b      	bne.n	8003e26 <_printf_float+0x242>
 8003dce:	e764      	b.n	8003c9a <_printf_float+0xb6>
 8003dd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003dd4:	f240 80dd 	bls.w	8003f92 <_printf_float+0x3ae>
 8003dd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2300      	movs	r3, #0
 8003de0:	f7fc fe4e 	bl	8000a80 <__aeabi_dcmpeq>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d033      	beq.n	8003e50 <_printf_float+0x26c>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4631      	mov	r1, r6
 8003dec:	4628      	mov	r0, r5
 8003dee:	4a35      	ldr	r2, [pc, #212]	; (8003ec4 <_printf_float+0x2e0>)
 8003df0:	47b8      	blx	r7
 8003df2:	3001      	adds	r0, #1
 8003df4:	f43f af51 	beq.w	8003c9a <_printf_float+0xb6>
 8003df8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	db02      	blt.n	8003e06 <_printf_float+0x222>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	07d8      	lsls	r0, r3, #31
 8003e04:	d50f      	bpl.n	8003e26 <_printf_float+0x242>
 8003e06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	47b8      	blx	r7
 8003e10:	3001      	adds	r0, #1
 8003e12:	f43f af42 	beq.w	8003c9a <_printf_float+0xb6>
 8003e16:	f04f 0800 	mov.w	r8, #0
 8003e1a:	f104 091a 	add.w	r9, r4, #26
 8003e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e20:	3b01      	subs	r3, #1
 8003e22:	4543      	cmp	r3, r8
 8003e24:	dc09      	bgt.n	8003e3a <_printf_float+0x256>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	079b      	lsls	r3, r3, #30
 8003e2a:	f100 8102 	bmi.w	8004032 <_printf_float+0x44e>
 8003e2e:	68e0      	ldr	r0, [r4, #12]
 8003e30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e32:	4298      	cmp	r0, r3
 8003e34:	bfb8      	it	lt
 8003e36:	4618      	movlt	r0, r3
 8003e38:	e731      	b.n	8003c9e <_printf_float+0xba>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	464a      	mov	r2, r9
 8003e3e:	4631      	mov	r1, r6
 8003e40:	4628      	mov	r0, r5
 8003e42:	47b8      	blx	r7
 8003e44:	3001      	adds	r0, #1
 8003e46:	f43f af28 	beq.w	8003c9a <_printf_float+0xb6>
 8003e4a:	f108 0801 	add.w	r8, r8, #1
 8003e4e:	e7e6      	b.n	8003e1e <_printf_float+0x23a>
 8003e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	dc38      	bgt.n	8003ec8 <_printf_float+0x2e4>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <_printf_float+0x2e0>)
 8003e5e:	47b8      	blx	r7
 8003e60:	3001      	adds	r0, #1
 8003e62:	f43f af1a 	beq.w	8003c9a <_printf_float+0xb6>
 8003e66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	d102      	bne.n	8003e74 <_printf_float+0x290>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	07d9      	lsls	r1, r3, #31
 8003e72:	d5d8      	bpl.n	8003e26 <_printf_float+0x242>
 8003e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	47b8      	blx	r7
 8003e7e:	3001      	adds	r0, #1
 8003e80:	f43f af0b 	beq.w	8003c9a <_printf_float+0xb6>
 8003e84:	f04f 0900 	mov.w	r9, #0
 8003e88:	f104 0a1a 	add.w	sl, r4, #26
 8003e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e8e:	425b      	negs	r3, r3
 8003e90:	454b      	cmp	r3, r9
 8003e92:	dc01      	bgt.n	8003e98 <_printf_float+0x2b4>
 8003e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e96:	e794      	b.n	8003dc2 <_printf_float+0x1de>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	4652      	mov	r2, sl
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	47b8      	blx	r7
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	f43f aef9 	beq.w	8003c9a <_printf_float+0xb6>
 8003ea8:	f109 0901 	add.w	r9, r9, #1
 8003eac:	e7ee      	b.n	8003e8c <_printf_float+0x2a8>
 8003eae:	bf00      	nop
 8003eb0:	7fefffff 	.word	0x7fefffff
 8003eb4:	0800666c 	.word	0x0800666c
 8003eb8:	08006670 	.word	0x08006670
 8003ebc:	08006678 	.word	0x08006678
 8003ec0:	08006674 	.word	0x08006674
 8003ec4:	0800667c 	.word	0x0800667c
 8003ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	bfa8      	it	ge
 8003ed0:	461a      	movge	r2, r3
 8003ed2:	2a00      	cmp	r2, #0
 8003ed4:	4691      	mov	r9, r2
 8003ed6:	dc37      	bgt.n	8003f48 <_printf_float+0x364>
 8003ed8:	f04f 0b00 	mov.w	fp, #0
 8003edc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ee0:	f104 021a 	add.w	r2, r4, #26
 8003ee4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003ee8:	ebaa 0309 	sub.w	r3, sl, r9
 8003eec:	455b      	cmp	r3, fp
 8003eee:	dc33      	bgt.n	8003f58 <_printf_float+0x374>
 8003ef0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	db3b      	blt.n	8003f70 <_printf_float+0x38c>
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	07da      	lsls	r2, r3, #31
 8003efc:	d438      	bmi.n	8003f70 <_printf_float+0x38c>
 8003efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f02:	eba2 030a 	sub.w	r3, r2, sl
 8003f06:	eba2 0901 	sub.w	r9, r2, r1
 8003f0a:	4599      	cmp	r9, r3
 8003f0c:	bfa8      	it	ge
 8003f0e:	4699      	movge	r9, r3
 8003f10:	f1b9 0f00 	cmp.w	r9, #0
 8003f14:	dc34      	bgt.n	8003f80 <_printf_float+0x39c>
 8003f16:	f04f 0800 	mov.w	r8, #0
 8003f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f1e:	f104 0a1a 	add.w	sl, r4, #26
 8003f22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	eba3 0309 	sub.w	r3, r3, r9
 8003f2c:	4543      	cmp	r3, r8
 8003f2e:	f77f af7a 	ble.w	8003e26 <_printf_float+0x242>
 8003f32:	2301      	movs	r3, #1
 8003f34:	4652      	mov	r2, sl
 8003f36:	4631      	mov	r1, r6
 8003f38:	4628      	mov	r0, r5
 8003f3a:	47b8      	blx	r7
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f43f aeac 	beq.w	8003c9a <_printf_float+0xb6>
 8003f42:	f108 0801 	add.w	r8, r8, #1
 8003f46:	e7ec      	b.n	8003f22 <_printf_float+0x33e>
 8003f48:	4613      	mov	r3, r2
 8003f4a:	4631      	mov	r1, r6
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	4628      	mov	r0, r5
 8003f50:	47b8      	blx	r7
 8003f52:	3001      	adds	r0, #1
 8003f54:	d1c0      	bne.n	8003ed8 <_printf_float+0x2f4>
 8003f56:	e6a0      	b.n	8003c9a <_printf_float+0xb6>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f60:	47b8      	blx	r7
 8003f62:	3001      	adds	r0, #1
 8003f64:	f43f ae99 	beq.w	8003c9a <_printf_float+0xb6>
 8003f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f6a:	f10b 0b01 	add.w	fp, fp, #1
 8003f6e:	e7b9      	b.n	8003ee4 <_printf_float+0x300>
 8003f70:	4631      	mov	r1, r6
 8003f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f76:	4628      	mov	r0, r5
 8003f78:	47b8      	blx	r7
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d1bf      	bne.n	8003efe <_printf_float+0x31a>
 8003f7e:	e68c      	b.n	8003c9a <_printf_float+0xb6>
 8003f80:	464b      	mov	r3, r9
 8003f82:	4631      	mov	r1, r6
 8003f84:	4628      	mov	r0, r5
 8003f86:	eb08 020a 	add.w	r2, r8, sl
 8003f8a:	47b8      	blx	r7
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d1c2      	bne.n	8003f16 <_printf_float+0x332>
 8003f90:	e683      	b.n	8003c9a <_printf_float+0xb6>
 8003f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f94:	2a01      	cmp	r2, #1
 8003f96:	dc01      	bgt.n	8003f9c <_printf_float+0x3b8>
 8003f98:	07db      	lsls	r3, r3, #31
 8003f9a:	d537      	bpl.n	800400c <_printf_float+0x428>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4642      	mov	r2, r8
 8003fa0:	4631      	mov	r1, r6
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	47b8      	blx	r7
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	f43f ae77 	beq.w	8003c9a <_printf_float+0xb6>
 8003fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fb0:	4631      	mov	r1, r6
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	47b8      	blx	r7
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	f43f ae6f 	beq.w	8003c9a <_printf_float+0xb6>
 8003fbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f7fc fd5c 	bl	8000a80 <__aeabi_dcmpeq>
 8003fc8:	b9d8      	cbnz	r0, 8004002 <_printf_float+0x41e>
 8003fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fcc:	f108 0201 	add.w	r2, r8, #1
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	47b8      	blx	r7
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d10e      	bne.n	8003ffa <_printf_float+0x416>
 8003fdc:	e65d      	b.n	8003c9a <_printf_float+0xb6>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	464a      	mov	r2, r9
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	47b8      	blx	r7
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f43f ae56 	beq.w	8003c9a <_printf_float+0xb6>
 8003fee:	f108 0801 	add.w	r8, r8, #1
 8003ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	4543      	cmp	r3, r8
 8003ff8:	dcf1      	bgt.n	8003fde <_printf_float+0x3fa>
 8003ffa:	4653      	mov	r3, sl
 8003ffc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004000:	e6e0      	b.n	8003dc4 <_printf_float+0x1e0>
 8004002:	f04f 0800 	mov.w	r8, #0
 8004006:	f104 091a 	add.w	r9, r4, #26
 800400a:	e7f2      	b.n	8003ff2 <_printf_float+0x40e>
 800400c:	2301      	movs	r3, #1
 800400e:	4642      	mov	r2, r8
 8004010:	e7df      	b.n	8003fd2 <_printf_float+0x3ee>
 8004012:	2301      	movs	r3, #1
 8004014:	464a      	mov	r2, r9
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	47b8      	blx	r7
 800401c:	3001      	adds	r0, #1
 800401e:	f43f ae3c 	beq.w	8003c9a <_printf_float+0xb6>
 8004022:	f108 0801 	add.w	r8, r8, #1
 8004026:	68e3      	ldr	r3, [r4, #12]
 8004028:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800402a:	1a5b      	subs	r3, r3, r1
 800402c:	4543      	cmp	r3, r8
 800402e:	dcf0      	bgt.n	8004012 <_printf_float+0x42e>
 8004030:	e6fd      	b.n	8003e2e <_printf_float+0x24a>
 8004032:	f04f 0800 	mov.w	r8, #0
 8004036:	f104 0919 	add.w	r9, r4, #25
 800403a:	e7f4      	b.n	8004026 <_printf_float+0x442>

0800403c <_printf_common>:
 800403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004040:	4616      	mov	r6, r2
 8004042:	4699      	mov	r9, r3
 8004044:	688a      	ldr	r2, [r1, #8]
 8004046:	690b      	ldr	r3, [r1, #16]
 8004048:	4607      	mov	r7, r0
 800404a:	4293      	cmp	r3, r2
 800404c:	bfb8      	it	lt
 800404e:	4613      	movlt	r3, r2
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004056:	460c      	mov	r4, r1
 8004058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800405c:	b10a      	cbz	r2, 8004062 <_printf_common+0x26>
 800405e:	3301      	adds	r3, #1
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	0699      	lsls	r1, r3, #26
 8004066:	bf42      	ittt	mi
 8004068:	6833      	ldrmi	r3, [r6, #0]
 800406a:	3302      	addmi	r3, #2
 800406c:	6033      	strmi	r3, [r6, #0]
 800406e:	6825      	ldr	r5, [r4, #0]
 8004070:	f015 0506 	ands.w	r5, r5, #6
 8004074:	d106      	bne.n	8004084 <_printf_common+0x48>
 8004076:	f104 0a19 	add.w	sl, r4, #25
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	6832      	ldr	r2, [r6, #0]
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	42ab      	cmp	r3, r5
 8004082:	dc28      	bgt.n	80040d6 <_printf_common+0x9a>
 8004084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004088:	1e13      	subs	r3, r2, #0
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	bf18      	it	ne
 800408e:	2301      	movne	r3, #1
 8004090:	0692      	lsls	r2, r2, #26
 8004092:	d42d      	bmi.n	80040f0 <_printf_common+0xb4>
 8004094:	4649      	mov	r1, r9
 8004096:	4638      	mov	r0, r7
 8004098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d020      	beq.n	80040e4 <_printf_common+0xa8>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	68e5      	ldr	r5, [r4, #12]
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf18      	it	ne
 80040ae:	2500      	movne	r5, #0
 80040b0:	6832      	ldr	r2, [r6, #0]
 80040b2:	f04f 0600 	mov.w	r6, #0
 80040b6:	68a3      	ldr	r3, [r4, #8]
 80040b8:	bf08      	it	eq
 80040ba:	1aad      	subeq	r5, r5, r2
 80040bc:	6922      	ldr	r2, [r4, #16]
 80040be:	bf08      	it	eq
 80040c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bfc4      	itt	gt
 80040c8:	1a9b      	subgt	r3, r3, r2
 80040ca:	18ed      	addgt	r5, r5, r3
 80040cc:	341a      	adds	r4, #26
 80040ce:	42b5      	cmp	r5, r6
 80040d0:	d11a      	bne.n	8004108 <_printf_common+0xcc>
 80040d2:	2000      	movs	r0, #0
 80040d4:	e008      	b.n	80040e8 <_printf_common+0xac>
 80040d6:	2301      	movs	r3, #1
 80040d8:	4652      	mov	r2, sl
 80040da:	4649      	mov	r1, r9
 80040dc:	4638      	mov	r0, r7
 80040de:	47c0      	blx	r8
 80040e0:	3001      	adds	r0, #1
 80040e2:	d103      	bne.n	80040ec <_printf_common+0xb0>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ec:	3501      	adds	r5, #1
 80040ee:	e7c4      	b.n	800407a <_printf_common+0x3e>
 80040f0:	2030      	movs	r0, #48	; 0x30
 80040f2:	18e1      	adds	r1, r4, r3
 80040f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040fe:	4422      	add	r2, r4
 8004100:	3302      	adds	r3, #2
 8004102:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004106:	e7c5      	b.n	8004094 <_printf_common+0x58>
 8004108:	2301      	movs	r3, #1
 800410a:	4622      	mov	r2, r4
 800410c:	4649      	mov	r1, r9
 800410e:	4638      	mov	r0, r7
 8004110:	47c0      	blx	r8
 8004112:	3001      	adds	r0, #1
 8004114:	d0e6      	beq.n	80040e4 <_printf_common+0xa8>
 8004116:	3601      	adds	r6, #1
 8004118:	e7d9      	b.n	80040ce <_printf_common+0x92>
	...

0800411c <_printf_i>:
 800411c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	460c      	mov	r4, r1
 8004122:	7e27      	ldrb	r7, [r4, #24]
 8004124:	4691      	mov	r9, r2
 8004126:	2f78      	cmp	r7, #120	; 0x78
 8004128:	4680      	mov	r8, r0
 800412a:	469a      	mov	sl, r3
 800412c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800412e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004132:	d807      	bhi.n	8004144 <_printf_i+0x28>
 8004134:	2f62      	cmp	r7, #98	; 0x62
 8004136:	d80a      	bhi.n	800414e <_printf_i+0x32>
 8004138:	2f00      	cmp	r7, #0
 800413a:	f000 80d9 	beq.w	80042f0 <_printf_i+0x1d4>
 800413e:	2f58      	cmp	r7, #88	; 0x58
 8004140:	f000 80a4 	beq.w	800428c <_printf_i+0x170>
 8004144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800414c:	e03a      	b.n	80041c4 <_printf_i+0xa8>
 800414e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004152:	2b15      	cmp	r3, #21
 8004154:	d8f6      	bhi.n	8004144 <_printf_i+0x28>
 8004156:	a001      	add	r0, pc, #4	; (adr r0, 800415c <_printf_i+0x40>)
 8004158:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041c9 	.word	0x080041c9
 8004164:	08004145 	.word	0x08004145
 8004168:	08004145 	.word	0x08004145
 800416c:	08004145 	.word	0x08004145
 8004170:	08004145 	.word	0x08004145
 8004174:	080041c9 	.word	0x080041c9
 8004178:	08004145 	.word	0x08004145
 800417c:	08004145 	.word	0x08004145
 8004180:	08004145 	.word	0x08004145
 8004184:	08004145 	.word	0x08004145
 8004188:	080042d7 	.word	0x080042d7
 800418c:	080041f9 	.word	0x080041f9
 8004190:	080042b9 	.word	0x080042b9
 8004194:	08004145 	.word	0x08004145
 8004198:	08004145 	.word	0x08004145
 800419c:	080042f9 	.word	0x080042f9
 80041a0:	08004145 	.word	0x08004145
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	08004145 	.word	0x08004145
 80041ac:	08004145 	.word	0x08004145
 80041b0:	080042c1 	.word	0x080042c1
 80041b4:	680b      	ldr	r3, [r1, #0]
 80041b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041ba:	1d1a      	adds	r2, r3, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	600a      	str	r2, [r1, #0]
 80041c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0a4      	b.n	8004312 <_printf_i+0x1f6>
 80041c8:	6825      	ldr	r5, [r4, #0]
 80041ca:	6808      	ldr	r0, [r1, #0]
 80041cc:	062e      	lsls	r6, r5, #24
 80041ce:	f100 0304 	add.w	r3, r0, #4
 80041d2:	d50a      	bpl.n	80041ea <_printf_i+0xce>
 80041d4:	6805      	ldr	r5, [r0, #0]
 80041d6:	600b      	str	r3, [r1, #0]
 80041d8:	2d00      	cmp	r5, #0
 80041da:	da03      	bge.n	80041e4 <_printf_i+0xc8>
 80041dc:	232d      	movs	r3, #45	; 0x2d
 80041de:	426d      	negs	r5, r5
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e4:	230a      	movs	r3, #10
 80041e6:	485e      	ldr	r0, [pc, #376]	; (8004360 <_printf_i+0x244>)
 80041e8:	e019      	b.n	800421e <_printf_i+0x102>
 80041ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041ee:	6805      	ldr	r5, [r0, #0]
 80041f0:	600b      	str	r3, [r1, #0]
 80041f2:	bf18      	it	ne
 80041f4:	b22d      	sxthne	r5, r5
 80041f6:	e7ef      	b.n	80041d8 <_printf_i+0xbc>
 80041f8:	680b      	ldr	r3, [r1, #0]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	1d18      	adds	r0, r3, #4
 80041fe:	6008      	str	r0, [r1, #0]
 8004200:	0628      	lsls	r0, r5, #24
 8004202:	d501      	bpl.n	8004208 <_printf_i+0xec>
 8004204:	681d      	ldr	r5, [r3, #0]
 8004206:	e002      	b.n	800420e <_printf_i+0xf2>
 8004208:	0669      	lsls	r1, r5, #25
 800420a:	d5fb      	bpl.n	8004204 <_printf_i+0xe8>
 800420c:	881d      	ldrh	r5, [r3, #0]
 800420e:	2f6f      	cmp	r7, #111	; 0x6f
 8004210:	bf0c      	ite	eq
 8004212:	2308      	moveq	r3, #8
 8004214:	230a      	movne	r3, #10
 8004216:	4852      	ldr	r0, [pc, #328]	; (8004360 <_printf_i+0x244>)
 8004218:	2100      	movs	r1, #0
 800421a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800421e:	6866      	ldr	r6, [r4, #4]
 8004220:	2e00      	cmp	r6, #0
 8004222:	bfa8      	it	ge
 8004224:	6821      	ldrge	r1, [r4, #0]
 8004226:	60a6      	str	r6, [r4, #8]
 8004228:	bfa4      	itt	ge
 800422a:	f021 0104 	bicge.w	r1, r1, #4
 800422e:	6021      	strge	r1, [r4, #0]
 8004230:	b90d      	cbnz	r5, 8004236 <_printf_i+0x11a>
 8004232:	2e00      	cmp	r6, #0
 8004234:	d04d      	beq.n	80042d2 <_printf_i+0x1b6>
 8004236:	4616      	mov	r6, r2
 8004238:	fbb5 f1f3 	udiv	r1, r5, r3
 800423c:	fb03 5711 	mls	r7, r3, r1, r5
 8004240:	5dc7      	ldrb	r7, [r0, r7]
 8004242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004246:	462f      	mov	r7, r5
 8004248:	42bb      	cmp	r3, r7
 800424a:	460d      	mov	r5, r1
 800424c:	d9f4      	bls.n	8004238 <_printf_i+0x11c>
 800424e:	2b08      	cmp	r3, #8
 8004250:	d10b      	bne.n	800426a <_printf_i+0x14e>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	07df      	lsls	r7, r3, #31
 8004256:	d508      	bpl.n	800426a <_printf_i+0x14e>
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	6861      	ldr	r1, [r4, #4]
 800425c:	4299      	cmp	r1, r3
 800425e:	bfde      	ittt	le
 8004260:	2330      	movle	r3, #48	; 0x30
 8004262:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800426a:	1b92      	subs	r2, r2, r6
 800426c:	6122      	str	r2, [r4, #16]
 800426e:	464b      	mov	r3, r9
 8004270:	4621      	mov	r1, r4
 8004272:	4640      	mov	r0, r8
 8004274:	f8cd a000 	str.w	sl, [sp]
 8004278:	aa03      	add	r2, sp, #12
 800427a:	f7ff fedf 	bl	800403c <_printf_common>
 800427e:	3001      	adds	r0, #1
 8004280:	d14c      	bne.n	800431c <_printf_i+0x200>
 8004282:	f04f 30ff 	mov.w	r0, #4294967295
 8004286:	b004      	add	sp, #16
 8004288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428c:	4834      	ldr	r0, [pc, #208]	; (8004360 <_printf_i+0x244>)
 800428e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004292:	680e      	ldr	r6, [r1, #0]
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	f856 5b04 	ldr.w	r5, [r6], #4
 800429a:	061f      	lsls	r7, r3, #24
 800429c:	600e      	str	r6, [r1, #0]
 800429e:	d514      	bpl.n	80042ca <_printf_i+0x1ae>
 80042a0:	07d9      	lsls	r1, r3, #31
 80042a2:	bf44      	itt	mi
 80042a4:	f043 0320 	orrmi.w	r3, r3, #32
 80042a8:	6023      	strmi	r3, [r4, #0]
 80042aa:	b91d      	cbnz	r5, 80042b4 <_printf_i+0x198>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	f023 0320 	bic.w	r3, r3, #32
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	2310      	movs	r3, #16
 80042b6:	e7af      	b.n	8004218 <_printf_i+0xfc>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	f043 0320 	orr.w	r3, r3, #32
 80042be:	6023      	str	r3, [r4, #0]
 80042c0:	2378      	movs	r3, #120	; 0x78
 80042c2:	4828      	ldr	r0, [pc, #160]	; (8004364 <_printf_i+0x248>)
 80042c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042c8:	e7e3      	b.n	8004292 <_printf_i+0x176>
 80042ca:	065e      	lsls	r6, r3, #25
 80042cc:	bf48      	it	mi
 80042ce:	b2ad      	uxthmi	r5, r5
 80042d0:	e7e6      	b.n	80042a0 <_printf_i+0x184>
 80042d2:	4616      	mov	r6, r2
 80042d4:	e7bb      	b.n	800424e <_printf_i+0x132>
 80042d6:	680b      	ldr	r3, [r1, #0]
 80042d8:	6826      	ldr	r6, [r4, #0]
 80042da:	1d1d      	adds	r5, r3, #4
 80042dc:	6960      	ldr	r0, [r4, #20]
 80042de:	600d      	str	r5, [r1, #0]
 80042e0:	0635      	lsls	r5, r6, #24
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	d501      	bpl.n	80042ea <_printf_i+0x1ce>
 80042e6:	6018      	str	r0, [r3, #0]
 80042e8:	e002      	b.n	80042f0 <_printf_i+0x1d4>
 80042ea:	0671      	lsls	r1, r6, #25
 80042ec:	d5fb      	bpl.n	80042e6 <_printf_i+0x1ca>
 80042ee:	8018      	strh	r0, [r3, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	4616      	mov	r6, r2
 80042f4:	6123      	str	r3, [r4, #16]
 80042f6:	e7ba      	b.n	800426e <_printf_i+0x152>
 80042f8:	680b      	ldr	r3, [r1, #0]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	600a      	str	r2, [r1, #0]
 80042fe:	681e      	ldr	r6, [r3, #0]
 8004300:	2100      	movs	r1, #0
 8004302:	4630      	mov	r0, r6
 8004304:	6862      	ldr	r2, [r4, #4]
 8004306:	f001 f9b5 	bl	8005674 <memchr>
 800430a:	b108      	cbz	r0, 8004310 <_printf_i+0x1f4>
 800430c:	1b80      	subs	r0, r0, r6
 800430e:	6060      	str	r0, [r4, #4]
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	6123      	str	r3, [r4, #16]
 8004314:	2300      	movs	r3, #0
 8004316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431a:	e7a8      	b.n	800426e <_printf_i+0x152>
 800431c:	4632      	mov	r2, r6
 800431e:	4649      	mov	r1, r9
 8004320:	4640      	mov	r0, r8
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	47d0      	blx	sl
 8004326:	3001      	adds	r0, #1
 8004328:	d0ab      	beq.n	8004282 <_printf_i+0x166>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	079b      	lsls	r3, r3, #30
 800432e:	d413      	bmi.n	8004358 <_printf_i+0x23c>
 8004330:	68e0      	ldr	r0, [r4, #12]
 8004332:	9b03      	ldr	r3, [sp, #12]
 8004334:	4298      	cmp	r0, r3
 8004336:	bfb8      	it	lt
 8004338:	4618      	movlt	r0, r3
 800433a:	e7a4      	b.n	8004286 <_printf_i+0x16a>
 800433c:	2301      	movs	r3, #1
 800433e:	4632      	mov	r2, r6
 8004340:	4649      	mov	r1, r9
 8004342:	4640      	mov	r0, r8
 8004344:	47d0      	blx	sl
 8004346:	3001      	adds	r0, #1
 8004348:	d09b      	beq.n	8004282 <_printf_i+0x166>
 800434a:	3501      	adds	r5, #1
 800434c:	68e3      	ldr	r3, [r4, #12]
 800434e:	9903      	ldr	r1, [sp, #12]
 8004350:	1a5b      	subs	r3, r3, r1
 8004352:	42ab      	cmp	r3, r5
 8004354:	dcf2      	bgt.n	800433c <_printf_i+0x220>
 8004356:	e7eb      	b.n	8004330 <_printf_i+0x214>
 8004358:	2500      	movs	r5, #0
 800435a:	f104 0619 	add.w	r6, r4, #25
 800435e:	e7f5      	b.n	800434c <_printf_i+0x230>
 8004360:	0800667e 	.word	0x0800667e
 8004364:	0800668f 	.word	0x0800668f

08004368 <iprintf>:
 8004368:	b40f      	push	{r0, r1, r2, r3}
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <iprintf+0x2c>)
 800436c:	b513      	push	{r0, r1, r4, lr}
 800436e:	681c      	ldr	r4, [r3, #0]
 8004370:	b124      	cbz	r4, 800437c <iprintf+0x14>
 8004372:	69a3      	ldr	r3, [r4, #24]
 8004374:	b913      	cbnz	r3, 800437c <iprintf+0x14>
 8004376:	4620      	mov	r0, r4
 8004378:	f001 f86a 	bl	8005450 <__sinit>
 800437c:	ab05      	add	r3, sp, #20
 800437e:	4620      	mov	r0, r4
 8004380:	9a04      	ldr	r2, [sp, #16]
 8004382:	68a1      	ldr	r1, [r4, #8]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	f001 fdef 	bl	8005f68 <_vfiprintf_r>
 800438a:	b002      	add	sp, #8
 800438c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004390:	b004      	add	sp, #16
 8004392:	4770      	bx	lr
 8004394:	2000000c 	.word	0x2000000c

08004398 <setvbuf>:
 8004398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800439c:	461d      	mov	r5, r3
 800439e:	4b5d      	ldr	r3, [pc, #372]	; (8004514 <setvbuf+0x17c>)
 80043a0:	4604      	mov	r4, r0
 80043a2:	681f      	ldr	r7, [r3, #0]
 80043a4:	460e      	mov	r6, r1
 80043a6:	4690      	mov	r8, r2
 80043a8:	b127      	cbz	r7, 80043b4 <setvbuf+0x1c>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	b913      	cbnz	r3, 80043b4 <setvbuf+0x1c>
 80043ae:	4638      	mov	r0, r7
 80043b0:	f001 f84e 	bl	8005450 <__sinit>
 80043b4:	4b58      	ldr	r3, [pc, #352]	; (8004518 <setvbuf+0x180>)
 80043b6:	429c      	cmp	r4, r3
 80043b8:	d167      	bne.n	800448a <setvbuf+0xf2>
 80043ba:	687c      	ldr	r4, [r7, #4]
 80043bc:	f1b8 0f02 	cmp.w	r8, #2
 80043c0:	d006      	beq.n	80043d0 <setvbuf+0x38>
 80043c2:	f1b8 0f01 	cmp.w	r8, #1
 80043c6:	f200 809f 	bhi.w	8004508 <setvbuf+0x170>
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	f2c0 809c 	blt.w	8004508 <setvbuf+0x170>
 80043d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043d2:	07db      	lsls	r3, r3, #31
 80043d4:	d405      	bmi.n	80043e2 <setvbuf+0x4a>
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	0598      	lsls	r0, r3, #22
 80043da:	d402      	bmi.n	80043e2 <setvbuf+0x4a>
 80043dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043de:	f001 f8da 	bl	8005596 <__retarget_lock_acquire_recursive>
 80043e2:	4621      	mov	r1, r4
 80043e4:	4638      	mov	r0, r7
 80043e6:	f000 ff9f 	bl	8005328 <_fflush_r>
 80043ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ec:	b141      	cbz	r1, 8004400 <setvbuf+0x68>
 80043ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043f2:	4299      	cmp	r1, r3
 80043f4:	d002      	beq.n	80043fc <setvbuf+0x64>
 80043f6:	4638      	mov	r0, r7
 80043f8:	f001 fce8 	bl	8005dcc <_free_r>
 80043fc:	2300      	movs	r3, #0
 80043fe:	6363      	str	r3, [r4, #52]	; 0x34
 8004400:	2300      	movs	r3, #0
 8004402:	61a3      	str	r3, [r4, #24]
 8004404:	6063      	str	r3, [r4, #4]
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	0619      	lsls	r1, r3, #24
 800440a:	d503      	bpl.n	8004414 <setvbuf+0x7c>
 800440c:	4638      	mov	r0, r7
 800440e:	6921      	ldr	r1, [r4, #16]
 8004410:	f001 fcdc 	bl	8005dcc <_free_r>
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	f1b8 0f02 	cmp.w	r8, #2
 800441a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	81a3      	strh	r3, [r4, #12]
 8004424:	d06c      	beq.n	8004500 <setvbuf+0x168>
 8004426:	ab01      	add	r3, sp, #4
 8004428:	466a      	mov	r2, sp
 800442a:	4621      	mov	r1, r4
 800442c:	4638      	mov	r0, r7
 800442e:	f001 f8b4 	bl	800559a <__swhatbuf_r>
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	4318      	orrs	r0, r3
 8004436:	81a0      	strh	r0, [r4, #12]
 8004438:	2d00      	cmp	r5, #0
 800443a:	d130      	bne.n	800449e <setvbuf+0x106>
 800443c:	9d00      	ldr	r5, [sp, #0]
 800443e:	4628      	mov	r0, r5
 8004440:	f001 f910 	bl	8005664 <malloc>
 8004444:	4606      	mov	r6, r0
 8004446:	2800      	cmp	r0, #0
 8004448:	d155      	bne.n	80044f6 <setvbuf+0x15e>
 800444a:	f8dd 9000 	ldr.w	r9, [sp]
 800444e:	45a9      	cmp	r9, r5
 8004450:	d14a      	bne.n	80044e8 <setvbuf+0x150>
 8004452:	f04f 35ff 	mov.w	r5, #4294967295
 8004456:	2200      	movs	r2, #0
 8004458:	60a2      	str	r2, [r4, #8]
 800445a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800445e:	6022      	str	r2, [r4, #0]
 8004460:	6122      	str	r2, [r4, #16]
 8004462:	2201      	movs	r2, #1
 8004464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004468:	6162      	str	r2, [r4, #20]
 800446a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	07d2      	lsls	r2, r2, #31
 8004472:	81a3      	strh	r3, [r4, #12]
 8004474:	d405      	bmi.n	8004482 <setvbuf+0xea>
 8004476:	f413 7f00 	tst.w	r3, #512	; 0x200
 800447a:	d102      	bne.n	8004482 <setvbuf+0xea>
 800447c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800447e:	f001 f88b 	bl	8005598 <__retarget_lock_release_recursive>
 8004482:	4628      	mov	r0, r5
 8004484:	b003      	add	sp, #12
 8004486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800448a:	4b24      	ldr	r3, [pc, #144]	; (800451c <setvbuf+0x184>)
 800448c:	429c      	cmp	r4, r3
 800448e:	d101      	bne.n	8004494 <setvbuf+0xfc>
 8004490:	68bc      	ldr	r4, [r7, #8]
 8004492:	e793      	b.n	80043bc <setvbuf+0x24>
 8004494:	4b22      	ldr	r3, [pc, #136]	; (8004520 <setvbuf+0x188>)
 8004496:	429c      	cmp	r4, r3
 8004498:	bf08      	it	eq
 800449a:	68fc      	ldreq	r4, [r7, #12]
 800449c:	e78e      	b.n	80043bc <setvbuf+0x24>
 800449e:	2e00      	cmp	r6, #0
 80044a0:	d0cd      	beq.n	800443e <setvbuf+0xa6>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	b913      	cbnz	r3, 80044ac <setvbuf+0x114>
 80044a6:	4638      	mov	r0, r7
 80044a8:	f000 ffd2 	bl	8005450 <__sinit>
 80044ac:	f1b8 0f01 	cmp.w	r8, #1
 80044b0:	bf08      	it	eq
 80044b2:	89a3      	ldrheq	r3, [r4, #12]
 80044b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80044b8:	bf04      	itt	eq
 80044ba:	f043 0301 	orreq.w	r3, r3, #1
 80044be:	81a3      	strheq	r3, [r4, #12]
 80044c0:	89a2      	ldrh	r2, [r4, #12]
 80044c2:	6026      	str	r6, [r4, #0]
 80044c4:	f012 0308 	ands.w	r3, r2, #8
 80044c8:	d01c      	beq.n	8004504 <setvbuf+0x16c>
 80044ca:	07d3      	lsls	r3, r2, #31
 80044cc:	bf41      	itttt	mi
 80044ce:	2300      	movmi	r3, #0
 80044d0:	426d      	negmi	r5, r5
 80044d2:	60a3      	strmi	r3, [r4, #8]
 80044d4:	61a5      	strmi	r5, [r4, #24]
 80044d6:	bf58      	it	pl
 80044d8:	60a5      	strpl	r5, [r4, #8]
 80044da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80044dc:	f015 0501 	ands.w	r5, r5, #1
 80044e0:	d115      	bne.n	800450e <setvbuf+0x176>
 80044e2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80044e6:	e7c8      	b.n	800447a <setvbuf+0xe2>
 80044e8:	4648      	mov	r0, r9
 80044ea:	f001 f8bb 	bl	8005664 <malloc>
 80044ee:	4606      	mov	r6, r0
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d0ae      	beq.n	8004452 <setvbuf+0xba>
 80044f4:	464d      	mov	r5, r9
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fc:	81a3      	strh	r3, [r4, #12]
 80044fe:	e7d0      	b.n	80044a2 <setvbuf+0x10a>
 8004500:	2500      	movs	r5, #0
 8004502:	e7a8      	b.n	8004456 <setvbuf+0xbe>
 8004504:	60a3      	str	r3, [r4, #8]
 8004506:	e7e8      	b.n	80044da <setvbuf+0x142>
 8004508:	f04f 35ff 	mov.w	r5, #4294967295
 800450c:	e7b9      	b.n	8004482 <setvbuf+0xea>
 800450e:	2500      	movs	r5, #0
 8004510:	e7b7      	b.n	8004482 <setvbuf+0xea>
 8004512:	bf00      	nop
 8004514:	2000000c 	.word	0x2000000c
 8004518:	08006754 	.word	0x08006754
 800451c:	08006774 	.word	0x08006774
 8004520:	08006734 	.word	0x08006734

08004524 <quorem>:
 8004524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004528:	6903      	ldr	r3, [r0, #16]
 800452a:	690c      	ldr	r4, [r1, #16]
 800452c:	4607      	mov	r7, r0
 800452e:	42a3      	cmp	r3, r4
 8004530:	f2c0 8083 	blt.w	800463a <quorem+0x116>
 8004534:	3c01      	subs	r4, #1
 8004536:	f100 0514 	add.w	r5, r0, #20
 800453a:	f101 0814 	add.w	r8, r1, #20
 800453e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800454c:	3301      	adds	r3, #1
 800454e:	429a      	cmp	r2, r3
 8004550:	fbb2 f6f3 	udiv	r6, r2, r3
 8004554:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004558:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800455c:	d332      	bcc.n	80045c4 <quorem+0xa0>
 800455e:	f04f 0e00 	mov.w	lr, #0
 8004562:	4640      	mov	r0, r8
 8004564:	46ac      	mov	ip, r5
 8004566:	46f2      	mov	sl, lr
 8004568:	f850 2b04 	ldr.w	r2, [r0], #4
 800456c:	b293      	uxth	r3, r2
 800456e:	fb06 e303 	mla	r3, r6, r3, lr
 8004572:	0c12      	lsrs	r2, r2, #16
 8004574:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004578:	fb06 e202 	mla	r2, r6, r2, lr
 800457c:	b29b      	uxth	r3, r3
 800457e:	ebaa 0303 	sub.w	r3, sl, r3
 8004582:	f8dc a000 	ldr.w	sl, [ip]
 8004586:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800458a:	fa1f fa8a 	uxth.w	sl, sl
 800458e:	4453      	add	r3, sl
 8004590:	fa1f fa82 	uxth.w	sl, r2
 8004594:	f8dc 2000 	ldr.w	r2, [ip]
 8004598:	4581      	cmp	r9, r0
 800459a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800459e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80045ac:	f84c 3b04 	str.w	r3, [ip], #4
 80045b0:	d2da      	bcs.n	8004568 <quorem+0x44>
 80045b2:	f855 300b 	ldr.w	r3, [r5, fp]
 80045b6:	b92b      	cbnz	r3, 80045c4 <quorem+0xa0>
 80045b8:	9b01      	ldr	r3, [sp, #4]
 80045ba:	3b04      	subs	r3, #4
 80045bc:	429d      	cmp	r5, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	d32f      	bcc.n	8004622 <quorem+0xfe>
 80045c2:	613c      	str	r4, [r7, #16]
 80045c4:	4638      	mov	r0, r7
 80045c6:	f001 faeb 	bl	8005ba0 <__mcmp>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	db25      	blt.n	800461a <quorem+0xf6>
 80045ce:	4628      	mov	r0, r5
 80045d0:	f04f 0c00 	mov.w	ip, #0
 80045d4:	3601      	adds	r6, #1
 80045d6:	f858 1b04 	ldr.w	r1, [r8], #4
 80045da:	f8d0 e000 	ldr.w	lr, [r0]
 80045de:	b28b      	uxth	r3, r1
 80045e0:	ebac 0303 	sub.w	r3, ip, r3
 80045e4:	fa1f f28e 	uxth.w	r2, lr
 80045e8:	4413      	add	r3, r2
 80045ea:	0c0a      	lsrs	r2, r1, #16
 80045ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80045f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045fa:	45c1      	cmp	r9, r8
 80045fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004600:	f840 3b04 	str.w	r3, [r0], #4
 8004604:	d2e7      	bcs.n	80045d6 <quorem+0xb2>
 8004606:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800460a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800460e:	b922      	cbnz	r2, 800461a <quorem+0xf6>
 8004610:	3b04      	subs	r3, #4
 8004612:	429d      	cmp	r5, r3
 8004614:	461a      	mov	r2, r3
 8004616:	d30a      	bcc.n	800462e <quorem+0x10a>
 8004618:	613c      	str	r4, [r7, #16]
 800461a:	4630      	mov	r0, r6
 800461c:	b003      	add	sp, #12
 800461e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	3b04      	subs	r3, #4
 8004626:	2a00      	cmp	r2, #0
 8004628:	d1cb      	bne.n	80045c2 <quorem+0x9e>
 800462a:	3c01      	subs	r4, #1
 800462c:	e7c6      	b.n	80045bc <quorem+0x98>
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	3b04      	subs	r3, #4
 8004632:	2a00      	cmp	r2, #0
 8004634:	d1f0      	bne.n	8004618 <quorem+0xf4>
 8004636:	3c01      	subs	r4, #1
 8004638:	e7eb      	b.n	8004612 <quorem+0xee>
 800463a:	2000      	movs	r0, #0
 800463c:	e7ee      	b.n	800461c <quorem+0xf8>
	...

08004640 <_dtoa_r>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	4616      	mov	r6, r2
 8004646:	461f      	mov	r7, r3
 8004648:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800464a:	b099      	sub	sp, #100	; 0x64
 800464c:	4605      	mov	r5, r0
 800464e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004652:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004656:	b974      	cbnz	r4, 8004676 <_dtoa_r+0x36>
 8004658:	2010      	movs	r0, #16
 800465a:	f001 f803 	bl	8005664 <malloc>
 800465e:	4602      	mov	r2, r0
 8004660:	6268      	str	r0, [r5, #36]	; 0x24
 8004662:	b920      	cbnz	r0, 800466e <_dtoa_r+0x2e>
 8004664:	21ea      	movs	r1, #234	; 0xea
 8004666:	4bae      	ldr	r3, [pc, #696]	; (8004920 <_dtoa_r+0x2e0>)
 8004668:	48ae      	ldr	r0, [pc, #696]	; (8004924 <_dtoa_r+0x2e4>)
 800466a:	f001 fed3 	bl	8006414 <__assert_func>
 800466e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004672:	6004      	str	r4, [r0, #0]
 8004674:	60c4      	str	r4, [r0, #12]
 8004676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	b151      	cbz	r1, 8004692 <_dtoa_r+0x52>
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	2301      	movs	r3, #1
 8004680:	4093      	lsls	r3, r2
 8004682:	604a      	str	r2, [r1, #4]
 8004684:	608b      	str	r3, [r1, #8]
 8004686:	4628      	mov	r0, r5
 8004688:	f001 f850 	bl	800572c <_Bfree>
 800468c:	2200      	movs	r2, #0
 800468e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	1e3b      	subs	r3, r7, #0
 8004694:	bfaf      	iteee	ge
 8004696:	2300      	movge	r3, #0
 8004698:	2201      	movlt	r2, #1
 800469a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800469e:	9305      	strlt	r3, [sp, #20]
 80046a0:	bfa8      	it	ge
 80046a2:	f8c8 3000 	strge.w	r3, [r8]
 80046a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80046aa:	4b9f      	ldr	r3, [pc, #636]	; (8004928 <_dtoa_r+0x2e8>)
 80046ac:	bfb8      	it	lt
 80046ae:	f8c8 2000 	strlt.w	r2, [r8]
 80046b2:	ea33 0309 	bics.w	r3, r3, r9
 80046b6:	d119      	bne.n	80046ec <_dtoa_r+0xac>
 80046b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80046bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046c4:	4333      	orrs	r3, r6
 80046c6:	f000 8580 	beq.w	80051ca <_dtoa_r+0xb8a>
 80046ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80046cc:	b953      	cbnz	r3, 80046e4 <_dtoa_r+0xa4>
 80046ce:	4b97      	ldr	r3, [pc, #604]	; (800492c <_dtoa_r+0x2ec>)
 80046d0:	e022      	b.n	8004718 <_dtoa_r+0xd8>
 80046d2:	4b97      	ldr	r3, [pc, #604]	; (8004930 <_dtoa_r+0x2f0>)
 80046d4:	9308      	str	r3, [sp, #32]
 80046d6:	3308      	adds	r3, #8
 80046d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	9808      	ldr	r0, [sp, #32]
 80046de:	b019      	add	sp, #100	; 0x64
 80046e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e4:	4b91      	ldr	r3, [pc, #580]	; (800492c <_dtoa_r+0x2ec>)
 80046e6:	9308      	str	r3, [sp, #32]
 80046e8:	3303      	adds	r3, #3
 80046ea:	e7f5      	b.n	80046d8 <_dtoa_r+0x98>
 80046ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80046f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80046f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046f8:	2200      	movs	r2, #0
 80046fa:	2300      	movs	r3, #0
 80046fc:	f7fc f9c0 	bl	8000a80 <__aeabi_dcmpeq>
 8004700:	4680      	mov	r8, r0
 8004702:	b158      	cbz	r0, 800471c <_dtoa_r+0xdc>
 8004704:	2301      	movs	r3, #1
 8004706:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8559 	beq.w	80051c4 <_dtoa_r+0xb84>
 8004712:	4888      	ldr	r0, [pc, #544]	; (8004934 <_dtoa_r+0x2f4>)
 8004714:	6018      	str	r0, [r3, #0]
 8004716:	1e43      	subs	r3, r0, #1
 8004718:	9308      	str	r3, [sp, #32]
 800471a:	e7df      	b.n	80046dc <_dtoa_r+0x9c>
 800471c:	ab16      	add	r3, sp, #88	; 0x58
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	ab17      	add	r3, sp, #92	; 0x5c
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	4628      	mov	r0, r5
 8004726:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800472a:	f001 fae5 	bl	8005cf8 <__d2b>
 800472e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004732:	4682      	mov	sl, r0
 8004734:	2c00      	cmp	r4, #0
 8004736:	d07e      	beq.n	8004836 <_dtoa_r+0x1f6>
 8004738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800473c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800473e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004746:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800474a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800474e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004752:	2200      	movs	r2, #0
 8004754:	4b78      	ldr	r3, [pc, #480]	; (8004938 <_dtoa_r+0x2f8>)
 8004756:	f7fb fd73 	bl	8000240 <__aeabi_dsub>
 800475a:	a36b      	add	r3, pc, #428	; (adr r3, 8004908 <_dtoa_r+0x2c8>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb ff26 	bl	80005b0 <__aeabi_dmul>
 8004764:	a36a      	add	r3, pc, #424	; (adr r3, 8004910 <_dtoa_r+0x2d0>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	f7fb fd6b 	bl	8000244 <__adddf3>
 800476e:	4606      	mov	r6, r0
 8004770:	4620      	mov	r0, r4
 8004772:	460f      	mov	r7, r1
 8004774:	f7fb feb2 	bl	80004dc <__aeabi_i2d>
 8004778:	a367      	add	r3, pc, #412	; (adr r3, 8004918 <_dtoa_r+0x2d8>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f7fb ff17 	bl	80005b0 <__aeabi_dmul>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4630      	mov	r0, r6
 8004788:	4639      	mov	r1, r7
 800478a:	f7fb fd5b 	bl	8000244 <__adddf3>
 800478e:	4606      	mov	r6, r0
 8004790:	460f      	mov	r7, r1
 8004792:	f7fc f9bd 	bl	8000b10 <__aeabi_d2iz>
 8004796:	2200      	movs	r2, #0
 8004798:	4681      	mov	r9, r0
 800479a:	2300      	movs	r3, #0
 800479c:	4630      	mov	r0, r6
 800479e:	4639      	mov	r1, r7
 80047a0:	f7fc f978 	bl	8000a94 <__aeabi_dcmplt>
 80047a4:	b148      	cbz	r0, 80047ba <_dtoa_r+0x17a>
 80047a6:	4648      	mov	r0, r9
 80047a8:	f7fb fe98 	bl	80004dc <__aeabi_i2d>
 80047ac:	4632      	mov	r2, r6
 80047ae:	463b      	mov	r3, r7
 80047b0:	f7fc f966 	bl	8000a80 <__aeabi_dcmpeq>
 80047b4:	b908      	cbnz	r0, 80047ba <_dtoa_r+0x17a>
 80047b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80047ba:	f1b9 0f16 	cmp.w	r9, #22
 80047be:	d857      	bhi.n	8004870 <_dtoa_r+0x230>
 80047c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047c4:	4b5d      	ldr	r3, [pc, #372]	; (800493c <_dtoa_r+0x2fc>)
 80047c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	f7fc f961 	bl	8000a94 <__aeabi_dcmplt>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d04e      	beq.n	8004874 <_dtoa_r+0x234>
 80047d6:	2300      	movs	r3, #0
 80047d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80047dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80047de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80047e0:	1b1c      	subs	r4, r3, r4
 80047e2:	1e63      	subs	r3, r4, #1
 80047e4:	9309      	str	r3, [sp, #36]	; 0x24
 80047e6:	bf49      	itett	mi
 80047e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80047ec:	2300      	movpl	r3, #0
 80047ee:	9306      	strmi	r3, [sp, #24]
 80047f0:	2300      	movmi	r3, #0
 80047f2:	bf54      	ite	pl
 80047f4:	9306      	strpl	r3, [sp, #24]
 80047f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80047f8:	f1b9 0f00 	cmp.w	r9, #0
 80047fc:	db3c      	blt.n	8004878 <_dtoa_r+0x238>
 80047fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004800:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004804:	444b      	add	r3, r9
 8004806:	9309      	str	r3, [sp, #36]	; 0x24
 8004808:	2300      	movs	r3, #0
 800480a:	930a      	str	r3, [sp, #40]	; 0x28
 800480c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800480e:	2b09      	cmp	r3, #9
 8004810:	d86c      	bhi.n	80048ec <_dtoa_r+0x2ac>
 8004812:	2b05      	cmp	r3, #5
 8004814:	bfc4      	itt	gt
 8004816:	3b04      	subgt	r3, #4
 8004818:	9322      	strgt	r3, [sp, #136]	; 0x88
 800481a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800481c:	bfc8      	it	gt
 800481e:	2400      	movgt	r4, #0
 8004820:	f1a3 0302 	sub.w	r3, r3, #2
 8004824:	bfd8      	it	le
 8004826:	2401      	movle	r4, #1
 8004828:	2b03      	cmp	r3, #3
 800482a:	f200 808b 	bhi.w	8004944 <_dtoa_r+0x304>
 800482e:	e8df f003 	tbb	[pc, r3]
 8004832:	4f2d      	.short	0x4f2d
 8004834:	5b4d      	.short	0x5b4d
 8004836:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800483a:	441c      	add	r4, r3
 800483c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004840:	2b20      	cmp	r3, #32
 8004842:	bfc3      	ittte	gt
 8004844:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004848:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800484c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004850:	f1c3 0320 	rsble	r3, r3, #32
 8004854:	bfc6      	itte	gt
 8004856:	fa26 f000 	lsrgt.w	r0, r6, r0
 800485a:	4318      	orrgt	r0, r3
 800485c:	fa06 f003 	lslle.w	r0, r6, r3
 8004860:	f7fb fe2c 	bl	80004bc <__aeabi_ui2d>
 8004864:	2301      	movs	r3, #1
 8004866:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800486a:	3c01      	subs	r4, #1
 800486c:	9313      	str	r3, [sp, #76]	; 0x4c
 800486e:	e770      	b.n	8004752 <_dtoa_r+0x112>
 8004870:	2301      	movs	r3, #1
 8004872:	e7b3      	b.n	80047dc <_dtoa_r+0x19c>
 8004874:	900f      	str	r0, [sp, #60]	; 0x3c
 8004876:	e7b2      	b.n	80047de <_dtoa_r+0x19e>
 8004878:	9b06      	ldr	r3, [sp, #24]
 800487a:	eba3 0309 	sub.w	r3, r3, r9
 800487e:	9306      	str	r3, [sp, #24]
 8004880:	f1c9 0300 	rsb	r3, r9, #0
 8004884:	930a      	str	r3, [sp, #40]	; 0x28
 8004886:	2300      	movs	r3, #0
 8004888:	930e      	str	r3, [sp, #56]	; 0x38
 800488a:	e7bf      	b.n	800480c <_dtoa_r+0x1cc>
 800488c:	2300      	movs	r3, #0
 800488e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004890:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004892:	2b00      	cmp	r3, #0
 8004894:	dc59      	bgt.n	800494a <_dtoa_r+0x30a>
 8004896:	f04f 0b01 	mov.w	fp, #1
 800489a:	465b      	mov	r3, fp
 800489c:	f8cd b008 	str.w	fp, [sp, #8]
 80048a0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80048a4:	2200      	movs	r2, #0
 80048a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80048a8:	6042      	str	r2, [r0, #4]
 80048aa:	2204      	movs	r2, #4
 80048ac:	f102 0614 	add.w	r6, r2, #20
 80048b0:	429e      	cmp	r6, r3
 80048b2:	6841      	ldr	r1, [r0, #4]
 80048b4:	d94f      	bls.n	8004956 <_dtoa_r+0x316>
 80048b6:	4628      	mov	r0, r5
 80048b8:	f000 fef8 	bl	80056ac <_Balloc>
 80048bc:	9008      	str	r0, [sp, #32]
 80048be:	2800      	cmp	r0, #0
 80048c0:	d14d      	bne.n	800495e <_dtoa_r+0x31e>
 80048c2:	4602      	mov	r2, r0
 80048c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <_dtoa_r+0x300>)
 80048ca:	e6cd      	b.n	8004668 <_dtoa_r+0x28>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e7de      	b.n	800488e <_dtoa_r+0x24e>
 80048d0:	2300      	movs	r3, #0
 80048d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80048d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048d6:	eb09 0b03 	add.w	fp, r9, r3
 80048da:	f10b 0301 	add.w	r3, fp, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	9302      	str	r3, [sp, #8]
 80048e2:	bfb8      	it	lt
 80048e4:	2301      	movlt	r3, #1
 80048e6:	e7dd      	b.n	80048a4 <_dtoa_r+0x264>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e7f2      	b.n	80048d2 <_dtoa_r+0x292>
 80048ec:	2401      	movs	r4, #1
 80048ee:	2300      	movs	r3, #0
 80048f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80048f2:	9322      	str	r3, [sp, #136]	; 0x88
 80048f4:	f04f 3bff 	mov.w	fp, #4294967295
 80048f8:	2200      	movs	r2, #0
 80048fa:	2312      	movs	r3, #18
 80048fc:	f8cd b008 	str.w	fp, [sp, #8]
 8004900:	9223      	str	r2, [sp, #140]	; 0x8c
 8004902:	e7cf      	b.n	80048a4 <_dtoa_r+0x264>
 8004904:	f3af 8000 	nop.w
 8004908:	636f4361 	.word	0x636f4361
 800490c:	3fd287a7 	.word	0x3fd287a7
 8004910:	8b60c8b3 	.word	0x8b60c8b3
 8004914:	3fc68a28 	.word	0x3fc68a28
 8004918:	509f79fb 	.word	0x509f79fb
 800491c:	3fd34413 	.word	0x3fd34413
 8004920:	080066ad 	.word	0x080066ad
 8004924:	080066c4 	.word	0x080066c4
 8004928:	7ff00000 	.word	0x7ff00000
 800492c:	080066a9 	.word	0x080066a9
 8004930:	080066a0 	.word	0x080066a0
 8004934:	0800667d 	.word	0x0800667d
 8004938:	3ff80000 	.word	0x3ff80000
 800493c:	08006820 	.word	0x08006820
 8004940:	08006723 	.word	0x08006723
 8004944:	2301      	movs	r3, #1
 8004946:	930b      	str	r3, [sp, #44]	; 0x2c
 8004948:	e7d4      	b.n	80048f4 <_dtoa_r+0x2b4>
 800494a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800494e:	465b      	mov	r3, fp
 8004950:	f8cd b008 	str.w	fp, [sp, #8]
 8004954:	e7a6      	b.n	80048a4 <_dtoa_r+0x264>
 8004956:	3101      	adds	r1, #1
 8004958:	6041      	str	r1, [r0, #4]
 800495a:	0052      	lsls	r2, r2, #1
 800495c:	e7a6      	b.n	80048ac <_dtoa_r+0x26c>
 800495e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004960:	9a08      	ldr	r2, [sp, #32]
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	9b02      	ldr	r3, [sp, #8]
 8004966:	2b0e      	cmp	r3, #14
 8004968:	f200 80a8 	bhi.w	8004abc <_dtoa_r+0x47c>
 800496c:	2c00      	cmp	r4, #0
 800496e:	f000 80a5 	beq.w	8004abc <_dtoa_r+0x47c>
 8004972:	f1b9 0f00 	cmp.w	r9, #0
 8004976:	dd34      	ble.n	80049e2 <_dtoa_r+0x3a2>
 8004978:	4a9a      	ldr	r2, [pc, #616]	; (8004be4 <_dtoa_r+0x5a4>)
 800497a:	f009 030f 	and.w	r3, r9, #15
 800497e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004982:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004986:	e9d3 3400 	ldrd	r3, r4, [r3]
 800498a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800498e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004992:	d016      	beq.n	80049c2 <_dtoa_r+0x382>
 8004994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004998:	4b93      	ldr	r3, [pc, #588]	; (8004be8 <_dtoa_r+0x5a8>)
 800499a:	2703      	movs	r7, #3
 800499c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049a0:	f7fb ff30 	bl	8000804 <__aeabi_ddiv>
 80049a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049a8:	f004 040f 	and.w	r4, r4, #15
 80049ac:	4e8e      	ldr	r6, [pc, #568]	; (8004be8 <_dtoa_r+0x5a8>)
 80049ae:	b954      	cbnz	r4, 80049c6 <_dtoa_r+0x386>
 80049b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049b8:	f7fb ff24 	bl	8000804 <__aeabi_ddiv>
 80049bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049c0:	e029      	b.n	8004a16 <_dtoa_r+0x3d6>
 80049c2:	2702      	movs	r7, #2
 80049c4:	e7f2      	b.n	80049ac <_dtoa_r+0x36c>
 80049c6:	07e1      	lsls	r1, r4, #31
 80049c8:	d508      	bpl.n	80049dc <_dtoa_r+0x39c>
 80049ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80049ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049d2:	f7fb fded 	bl	80005b0 <__aeabi_dmul>
 80049d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049da:	3701      	adds	r7, #1
 80049dc:	1064      	asrs	r4, r4, #1
 80049de:	3608      	adds	r6, #8
 80049e0:	e7e5      	b.n	80049ae <_dtoa_r+0x36e>
 80049e2:	f000 80a5 	beq.w	8004b30 <_dtoa_r+0x4f0>
 80049e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049ea:	f1c9 0400 	rsb	r4, r9, #0
 80049ee:	4b7d      	ldr	r3, [pc, #500]	; (8004be4 <_dtoa_r+0x5a4>)
 80049f0:	f004 020f 	and.w	r2, r4, #15
 80049f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f7fb fdd8 	bl	80005b0 <__aeabi_dmul>
 8004a00:	2702      	movs	r7, #2
 8004a02:	2300      	movs	r3, #0
 8004a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a08:	4e77      	ldr	r6, [pc, #476]	; (8004be8 <_dtoa_r+0x5a8>)
 8004a0a:	1124      	asrs	r4, r4, #4
 8004a0c:	2c00      	cmp	r4, #0
 8004a0e:	f040 8084 	bne.w	8004b1a <_dtoa_r+0x4da>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1d2      	bne.n	80049bc <_dtoa_r+0x37c>
 8004a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 808b 	beq.w	8004b34 <_dtoa_r+0x4f4>
 8004a1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	4b6f      	ldr	r3, [pc, #444]	; (8004bec <_dtoa_r+0x5ac>)
 8004a2e:	f7fc f831 	bl	8000a94 <__aeabi_dcmplt>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d07e      	beq.n	8004b34 <_dtoa_r+0x4f4>
 8004a36:	9b02      	ldr	r3, [sp, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d07b      	beq.n	8004b34 <_dtoa_r+0x4f4>
 8004a3c:	f1bb 0f00 	cmp.w	fp, #0
 8004a40:	dd38      	ble.n	8004ab4 <_dtoa_r+0x474>
 8004a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a46:	2200      	movs	r2, #0
 8004a48:	4b69      	ldr	r3, [pc, #420]	; (8004bf0 <_dtoa_r+0x5b0>)
 8004a4a:	f7fb fdb1 	bl	80005b0 <__aeabi_dmul>
 8004a4e:	465c      	mov	r4, fp
 8004a50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a54:	f109 38ff 	add.w	r8, r9, #4294967295
 8004a58:	3701      	adds	r7, #1
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	f7fb fd3e 	bl	80004dc <__aeabi_i2d>
 8004a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a64:	f7fb fda4 	bl	80005b0 <__aeabi_dmul>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	4b62      	ldr	r3, [pc, #392]	; (8004bf4 <_dtoa_r+0x5b4>)
 8004a6c:	f7fb fbea 	bl	8000244 <__adddf3>
 8004a70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004a74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a78:	9611      	str	r6, [sp, #68]	; 0x44
 8004a7a:	2c00      	cmp	r4, #0
 8004a7c:	d15d      	bne.n	8004b3a <_dtoa_r+0x4fa>
 8004a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a82:	2200      	movs	r2, #0
 8004a84:	4b5c      	ldr	r3, [pc, #368]	; (8004bf8 <_dtoa_r+0x5b8>)
 8004a86:	f7fb fbdb 	bl	8000240 <__aeabi_dsub>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a92:	4633      	mov	r3, r6
 8004a94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a96:	f7fc f81b 	bl	8000ad0 <__aeabi_dcmpgt>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	f040 829e 	bne.w	8004fdc <_dtoa_r+0x99c>
 8004aa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004aa6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004aaa:	f7fb fff3 	bl	8000a94 <__aeabi_dcmplt>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	f040 8292 	bne.w	8004fd8 <_dtoa_r+0x998>
 8004ab4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004ab8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f2c0 8153 	blt.w	8004d6a <_dtoa_r+0x72a>
 8004ac4:	f1b9 0f0e 	cmp.w	r9, #14
 8004ac8:	f300 814f 	bgt.w	8004d6a <_dtoa_r+0x72a>
 8004acc:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <_dtoa_r+0x5a4>)
 8004ace:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004ad2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ad6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004ada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f280 80db 	bge.w	8004c98 <_dtoa_r+0x658>
 8004ae2:	9b02      	ldr	r3, [sp, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f300 80d7 	bgt.w	8004c98 <_dtoa_r+0x658>
 8004aea:	f040 8274 	bne.w	8004fd6 <_dtoa_r+0x996>
 8004aee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004af2:	2200      	movs	r2, #0
 8004af4:	4b40      	ldr	r3, [pc, #256]	; (8004bf8 <_dtoa_r+0x5b8>)
 8004af6:	f7fb fd5b 	bl	80005b0 <__aeabi_dmul>
 8004afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004afe:	f7fb ffdd 	bl	8000abc <__aeabi_dcmpge>
 8004b02:	9c02      	ldr	r4, [sp, #8]
 8004b04:	4626      	mov	r6, r4
 8004b06:	2800      	cmp	r0, #0
 8004b08:	f040 824a 	bne.w	8004fa0 <_dtoa_r+0x960>
 8004b0c:	2331      	movs	r3, #49	; 0x31
 8004b0e:	9f08      	ldr	r7, [sp, #32]
 8004b10:	f109 0901 	add.w	r9, r9, #1
 8004b14:	f807 3b01 	strb.w	r3, [r7], #1
 8004b18:	e246      	b.n	8004fa8 <_dtoa_r+0x968>
 8004b1a:	07e2      	lsls	r2, r4, #31
 8004b1c:	d505      	bpl.n	8004b2a <_dtoa_r+0x4ea>
 8004b1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b22:	f7fb fd45 	bl	80005b0 <__aeabi_dmul>
 8004b26:	2301      	movs	r3, #1
 8004b28:	3701      	adds	r7, #1
 8004b2a:	1064      	asrs	r4, r4, #1
 8004b2c:	3608      	adds	r6, #8
 8004b2e:	e76d      	b.n	8004a0c <_dtoa_r+0x3cc>
 8004b30:	2702      	movs	r7, #2
 8004b32:	e770      	b.n	8004a16 <_dtoa_r+0x3d6>
 8004b34:	46c8      	mov	r8, r9
 8004b36:	9c02      	ldr	r4, [sp, #8]
 8004b38:	e78f      	b.n	8004a5a <_dtoa_r+0x41a>
 8004b3a:	9908      	ldr	r1, [sp, #32]
 8004b3c:	4b29      	ldr	r3, [pc, #164]	; (8004be4 <_dtoa_r+0x5a4>)
 8004b3e:	4421      	add	r1, r4
 8004b40:	9112      	str	r1, [sp, #72]	; 0x48
 8004b42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004b4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b50:	2900      	cmp	r1, #0
 8004b52:	d055      	beq.n	8004c00 <_dtoa_r+0x5c0>
 8004b54:	2000      	movs	r0, #0
 8004b56:	4929      	ldr	r1, [pc, #164]	; (8004bfc <_dtoa_r+0x5bc>)
 8004b58:	f7fb fe54 	bl	8000804 <__aeabi_ddiv>
 8004b5c:	463b      	mov	r3, r7
 8004b5e:	4632      	mov	r2, r6
 8004b60:	f7fb fb6e 	bl	8000240 <__aeabi_dsub>
 8004b64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b68:	9f08      	ldr	r7, [sp, #32]
 8004b6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b6e:	f7fb ffcf 	bl	8000b10 <__aeabi_d2iz>
 8004b72:	4604      	mov	r4, r0
 8004b74:	f7fb fcb2 	bl	80004dc <__aeabi_i2d>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b80:	f7fb fb5e 	bl	8000240 <__aeabi_dsub>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	3430      	adds	r4, #48	; 0x30
 8004b8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b92:	f807 4b01 	strb.w	r4, [r7], #1
 8004b96:	f7fb ff7d 	bl	8000a94 <__aeabi_dcmplt>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d174      	bne.n	8004c88 <_dtoa_r+0x648>
 8004b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	4911      	ldr	r1, [pc, #68]	; (8004bec <_dtoa_r+0x5ac>)
 8004ba6:	f7fb fb4b 	bl	8000240 <__aeabi_dsub>
 8004baa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bae:	f7fb ff71 	bl	8000a94 <__aeabi_dcmplt>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	f040 80b6 	bne.w	8004d24 <_dtoa_r+0x6e4>
 8004bb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bba:	429f      	cmp	r7, r3
 8004bbc:	f43f af7a 	beq.w	8004ab4 <_dtoa_r+0x474>
 8004bc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <_dtoa_r+0x5b0>)
 8004bc8:	f7fb fcf2 	bl	80005b0 <__aeabi_dmul>
 8004bcc:	2200      	movs	r2, #0
 8004bce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <_dtoa_r+0x5b0>)
 8004bd8:	f7fb fcea 	bl	80005b0 <__aeabi_dmul>
 8004bdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004be0:	e7c3      	b.n	8004b6a <_dtoa_r+0x52a>
 8004be2:	bf00      	nop
 8004be4:	08006820 	.word	0x08006820
 8004be8:	080067f8 	.word	0x080067f8
 8004bec:	3ff00000 	.word	0x3ff00000
 8004bf0:	40240000 	.word	0x40240000
 8004bf4:	401c0000 	.word	0x401c0000
 8004bf8:	40140000 	.word	0x40140000
 8004bfc:	3fe00000 	.word	0x3fe00000
 8004c00:	4630      	mov	r0, r6
 8004c02:	4639      	mov	r1, r7
 8004c04:	f7fb fcd4 	bl	80005b0 <__aeabi_dmul>
 8004c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c0e:	9c08      	ldr	r4, [sp, #32]
 8004c10:	9314      	str	r3, [sp, #80]	; 0x50
 8004c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c16:	f7fb ff7b 	bl	8000b10 <__aeabi_d2iz>
 8004c1a:	9015      	str	r0, [sp, #84]	; 0x54
 8004c1c:	f7fb fc5e 	bl	80004dc <__aeabi_i2d>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c28:	f7fb fb0a 	bl	8000240 <__aeabi_dsub>
 8004c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c2e:	4606      	mov	r6, r0
 8004c30:	3330      	adds	r3, #48	; 0x30
 8004c32:	f804 3b01 	strb.w	r3, [r4], #1
 8004c36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c38:	460f      	mov	r7, r1
 8004c3a:	429c      	cmp	r4, r3
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	d124      	bne.n	8004c8c <_dtoa_r+0x64c>
 8004c42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c46:	4bb3      	ldr	r3, [pc, #716]	; (8004f14 <_dtoa_r+0x8d4>)
 8004c48:	f7fb fafc 	bl	8000244 <__adddf3>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4630      	mov	r0, r6
 8004c52:	4639      	mov	r1, r7
 8004c54:	f7fb ff3c 	bl	8000ad0 <__aeabi_dcmpgt>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d162      	bne.n	8004d22 <_dtoa_r+0x6e2>
 8004c5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c60:	2000      	movs	r0, #0
 8004c62:	49ac      	ldr	r1, [pc, #688]	; (8004f14 <_dtoa_r+0x8d4>)
 8004c64:	f7fb faec 	bl	8000240 <__aeabi_dsub>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	4639      	mov	r1, r7
 8004c70:	f7fb ff10 	bl	8000a94 <__aeabi_dcmplt>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	f43f af1d 	beq.w	8004ab4 <_dtoa_r+0x474>
 8004c7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004c7c:	1e7b      	subs	r3, r7, #1
 8004c7e:	9314      	str	r3, [sp, #80]	; 0x50
 8004c80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004c84:	2b30      	cmp	r3, #48	; 0x30
 8004c86:	d0f8      	beq.n	8004c7a <_dtoa_r+0x63a>
 8004c88:	46c1      	mov	r9, r8
 8004c8a:	e03a      	b.n	8004d02 <_dtoa_r+0x6c2>
 8004c8c:	4ba2      	ldr	r3, [pc, #648]	; (8004f18 <_dtoa_r+0x8d8>)
 8004c8e:	f7fb fc8f 	bl	80005b0 <__aeabi_dmul>
 8004c92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c96:	e7bc      	b.n	8004c12 <_dtoa_r+0x5d2>
 8004c98:	9f08      	ldr	r7, [sp, #32]
 8004c9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ca2:	f7fb fdaf 	bl	8000804 <__aeabi_ddiv>
 8004ca6:	f7fb ff33 	bl	8000b10 <__aeabi_d2iz>
 8004caa:	4604      	mov	r4, r0
 8004cac:	f7fb fc16 	bl	80004dc <__aeabi_i2d>
 8004cb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cb4:	f7fb fc7c 	bl	80005b0 <__aeabi_dmul>
 8004cb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc4:	f7fb fabc 	bl	8000240 <__aeabi_dsub>
 8004cc8:	f807 6b01 	strb.w	r6, [r7], #1
 8004ccc:	9e08      	ldr	r6, [sp, #32]
 8004cce:	9b02      	ldr	r3, [sp, #8]
 8004cd0:	1bbe      	subs	r6, r7, r6
 8004cd2:	42b3      	cmp	r3, r6
 8004cd4:	d13a      	bne.n	8004d4c <_dtoa_r+0x70c>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	f7fb fab3 	bl	8000244 <__adddf3>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cea:	f7fb fef1 	bl	8000ad0 <__aeabi_dcmpgt>
 8004cee:	bb58      	cbnz	r0, 8004d48 <_dtoa_r+0x708>
 8004cf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf8:	f7fb fec2 	bl	8000a80 <__aeabi_dcmpeq>
 8004cfc:	b108      	cbz	r0, 8004d02 <_dtoa_r+0x6c2>
 8004cfe:	07e1      	lsls	r1, r4, #31
 8004d00:	d422      	bmi.n	8004d48 <_dtoa_r+0x708>
 8004d02:	4628      	mov	r0, r5
 8004d04:	4651      	mov	r1, sl
 8004d06:	f000 fd11 	bl	800572c <_Bfree>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	703b      	strb	r3, [r7, #0]
 8004d0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004d10:	f109 0001 	add.w	r0, r9, #1
 8004d14:	6018      	str	r0, [r3, #0]
 8004d16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f43f acdf 	beq.w	80046dc <_dtoa_r+0x9c>
 8004d1e:	601f      	str	r7, [r3, #0]
 8004d20:	e4dc      	b.n	80046dc <_dtoa_r+0x9c>
 8004d22:	4627      	mov	r7, r4
 8004d24:	463b      	mov	r3, r7
 8004d26:	461f      	mov	r7, r3
 8004d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d2c:	2a39      	cmp	r2, #57	; 0x39
 8004d2e:	d107      	bne.n	8004d40 <_dtoa_r+0x700>
 8004d30:	9a08      	ldr	r2, [sp, #32]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d1f7      	bne.n	8004d26 <_dtoa_r+0x6e6>
 8004d36:	2230      	movs	r2, #48	; 0x30
 8004d38:	9908      	ldr	r1, [sp, #32]
 8004d3a:	f108 0801 	add.w	r8, r8, #1
 8004d3e:	700a      	strb	r2, [r1, #0]
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	3201      	adds	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	e79f      	b.n	8004c88 <_dtoa_r+0x648>
 8004d48:	46c8      	mov	r8, r9
 8004d4a:	e7eb      	b.n	8004d24 <_dtoa_r+0x6e4>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	4b72      	ldr	r3, [pc, #456]	; (8004f18 <_dtoa_r+0x8d8>)
 8004d50:	f7fb fc2e 	bl	80005b0 <__aeabi_dmul>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f7fb fe8e 	bl	8000a80 <__aeabi_dcmpeq>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d098      	beq.n	8004c9a <_dtoa_r+0x65a>
 8004d68:	e7cb      	b.n	8004d02 <_dtoa_r+0x6c2>
 8004d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d6c:	2a00      	cmp	r2, #0
 8004d6e:	f000 80cd 	beq.w	8004f0c <_dtoa_r+0x8cc>
 8004d72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004d74:	2a01      	cmp	r2, #1
 8004d76:	f300 80af 	bgt.w	8004ed8 <_dtoa_r+0x898>
 8004d7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d7c:	2a00      	cmp	r2, #0
 8004d7e:	f000 80a7 	beq.w	8004ed0 <_dtoa_r+0x890>
 8004d82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004d86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004d88:	9f06      	ldr	r7, [sp, #24]
 8004d8a:	9a06      	ldr	r2, [sp, #24]
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	441a      	add	r2, r3
 8004d90:	9206      	str	r2, [sp, #24]
 8004d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d94:	4628      	mov	r0, r5
 8004d96:	441a      	add	r2, r3
 8004d98:	9209      	str	r2, [sp, #36]	; 0x24
 8004d9a:	f000 fd81 	bl	80058a0 <__i2b>
 8004d9e:	4606      	mov	r6, r0
 8004da0:	2f00      	cmp	r7, #0
 8004da2:	dd0c      	ble.n	8004dbe <_dtoa_r+0x77e>
 8004da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	dd09      	ble.n	8004dbe <_dtoa_r+0x77e>
 8004daa:	42bb      	cmp	r3, r7
 8004dac:	bfa8      	it	ge
 8004dae:	463b      	movge	r3, r7
 8004db0:	9a06      	ldr	r2, [sp, #24]
 8004db2:	1aff      	subs	r7, r7, r3
 8004db4:	1ad2      	subs	r2, r2, r3
 8004db6:	9206      	str	r2, [sp, #24]
 8004db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dc0:	b1f3      	cbz	r3, 8004e00 <_dtoa_r+0x7c0>
 8004dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80a9 	beq.w	8004f1c <_dtoa_r+0x8dc>
 8004dca:	2c00      	cmp	r4, #0
 8004dcc:	dd10      	ble.n	8004df0 <_dtoa_r+0x7b0>
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 fe1e 	bl	8005a14 <__pow5mult>
 8004dd8:	4652      	mov	r2, sl
 8004dda:	4601      	mov	r1, r0
 8004ddc:	4606      	mov	r6, r0
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 fd74 	bl	80058cc <__multiply>
 8004de4:	4680      	mov	r8, r0
 8004de6:	4651      	mov	r1, sl
 8004de8:	4628      	mov	r0, r5
 8004dea:	f000 fc9f 	bl	800572c <_Bfree>
 8004dee:	46c2      	mov	sl, r8
 8004df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df2:	1b1a      	subs	r2, r3, r4
 8004df4:	d004      	beq.n	8004e00 <_dtoa_r+0x7c0>
 8004df6:	4651      	mov	r1, sl
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f000 fe0b 	bl	8005a14 <__pow5mult>
 8004dfe:	4682      	mov	sl, r0
 8004e00:	2101      	movs	r1, #1
 8004e02:	4628      	mov	r0, r5
 8004e04:	f000 fd4c 	bl	80058a0 <__i2b>
 8004e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f340 8087 	ble.w	8004f20 <_dtoa_r+0x8e0>
 8004e12:	461a      	mov	r2, r3
 8004e14:	4601      	mov	r1, r0
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 fdfc 	bl	8005a14 <__pow5mult>
 8004e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e1e:	4604      	mov	r4, r0
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	f340 8080 	ble.w	8004f26 <_dtoa_r+0x8e6>
 8004e26:	f04f 0800 	mov.w	r8, #0
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e30:	6918      	ldr	r0, [r3, #16]
 8004e32:	f000 fce7 	bl	8005804 <__hi0bits>
 8004e36:	f1c0 0020 	rsb	r0, r0, #32
 8004e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3c:	4418      	add	r0, r3
 8004e3e:	f010 001f 	ands.w	r0, r0, #31
 8004e42:	f000 8092 	beq.w	8004f6a <_dtoa_r+0x92a>
 8004e46:	f1c0 0320 	rsb	r3, r0, #32
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	f340 808a 	ble.w	8004f64 <_dtoa_r+0x924>
 8004e50:	f1c0 001c 	rsb	r0, r0, #28
 8004e54:	9b06      	ldr	r3, [sp, #24]
 8004e56:	4407      	add	r7, r0
 8004e58:	4403      	add	r3, r0
 8004e5a:	9306      	str	r3, [sp, #24]
 8004e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e5e:	4403      	add	r3, r0
 8004e60:	9309      	str	r3, [sp, #36]	; 0x24
 8004e62:	9b06      	ldr	r3, [sp, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dd05      	ble.n	8004e74 <_dtoa_r+0x834>
 8004e68:	4651      	mov	r1, sl
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 fe2b 	bl	8005ac8 <__lshift>
 8004e72:	4682      	mov	sl, r0
 8004e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dd05      	ble.n	8004e86 <_dtoa_r+0x846>
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 fe22 	bl	8005ac8 <__lshift>
 8004e84:	4604      	mov	r4, r0
 8004e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d070      	beq.n	8004f6e <_dtoa_r+0x92e>
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4650      	mov	r0, sl
 8004e90:	f000 fe86 	bl	8005ba0 <__mcmp>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	da6a      	bge.n	8004f6e <_dtoa_r+0x92e>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4651      	mov	r1, sl
 8004e9c:	220a      	movs	r2, #10
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 fc66 	bl	8005770 <__multadd>
 8004ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ea6:	4682      	mov	sl, r0
 8004ea8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8193 	beq.w	80051d8 <_dtoa_r+0xb98>
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	220a      	movs	r2, #10
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 fc59 	bl	8005770 <__multadd>
 8004ebe:	f1bb 0f00 	cmp.w	fp, #0
 8004ec2:	4606      	mov	r6, r0
 8004ec4:	f300 8093 	bgt.w	8004fee <_dtoa_r+0x9ae>
 8004ec8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	dc57      	bgt.n	8004f7e <_dtoa_r+0x93e>
 8004ece:	e08e      	b.n	8004fee <_dtoa_r+0x9ae>
 8004ed0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ed2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ed6:	e756      	b.n	8004d86 <_dtoa_r+0x746>
 8004ed8:	9b02      	ldr	r3, [sp, #8]
 8004eda:	1e5c      	subs	r4, r3, #1
 8004edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ede:	42a3      	cmp	r3, r4
 8004ee0:	bfb7      	itett	lt
 8004ee2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004ee4:	1b1c      	subge	r4, r3, r4
 8004ee6:	1ae2      	sublt	r2, r4, r3
 8004ee8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004eea:	bfbe      	ittt	lt
 8004eec:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004eee:	189b      	addlt	r3, r3, r2
 8004ef0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004ef2:	9b02      	ldr	r3, [sp, #8]
 8004ef4:	bfb8      	it	lt
 8004ef6:	2400      	movlt	r4, #0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bfbb      	ittet	lt
 8004efc:	9b06      	ldrlt	r3, [sp, #24]
 8004efe:	9a02      	ldrlt	r2, [sp, #8]
 8004f00:	9f06      	ldrge	r7, [sp, #24]
 8004f02:	1a9f      	sublt	r7, r3, r2
 8004f04:	bfac      	ite	ge
 8004f06:	9b02      	ldrge	r3, [sp, #8]
 8004f08:	2300      	movlt	r3, #0
 8004f0a:	e73e      	b.n	8004d8a <_dtoa_r+0x74a>
 8004f0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f0e:	9f06      	ldr	r7, [sp, #24]
 8004f10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004f12:	e745      	b.n	8004da0 <_dtoa_r+0x760>
 8004f14:	3fe00000 	.word	0x3fe00000
 8004f18:	40240000 	.word	0x40240000
 8004f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f1e:	e76a      	b.n	8004df6 <_dtoa_r+0x7b6>
 8004f20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	dc19      	bgt.n	8004f5a <_dtoa_r+0x91a>
 8004f26:	9b04      	ldr	r3, [sp, #16]
 8004f28:	b9bb      	cbnz	r3, 8004f5a <_dtoa_r+0x91a>
 8004f2a:	9b05      	ldr	r3, [sp, #20]
 8004f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f30:	b99b      	cbnz	r3, 8004f5a <_dtoa_r+0x91a>
 8004f32:	9b05      	ldr	r3, [sp, #20]
 8004f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f38:	0d1b      	lsrs	r3, r3, #20
 8004f3a:	051b      	lsls	r3, r3, #20
 8004f3c:	b183      	cbz	r3, 8004f60 <_dtoa_r+0x920>
 8004f3e:	f04f 0801 	mov.w	r8, #1
 8004f42:	9b06      	ldr	r3, [sp, #24]
 8004f44:	3301      	adds	r3, #1
 8004f46:	9306      	str	r3, [sp, #24]
 8004f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f47f af6a 	bne.w	8004e2a <_dtoa_r+0x7ea>
 8004f56:	2001      	movs	r0, #1
 8004f58:	e76f      	b.n	8004e3a <_dtoa_r+0x7fa>
 8004f5a:	f04f 0800 	mov.w	r8, #0
 8004f5e:	e7f6      	b.n	8004f4e <_dtoa_r+0x90e>
 8004f60:	4698      	mov	r8, r3
 8004f62:	e7f4      	b.n	8004f4e <_dtoa_r+0x90e>
 8004f64:	f43f af7d 	beq.w	8004e62 <_dtoa_r+0x822>
 8004f68:	4618      	mov	r0, r3
 8004f6a:	301c      	adds	r0, #28
 8004f6c:	e772      	b.n	8004e54 <_dtoa_r+0x814>
 8004f6e:	9b02      	ldr	r3, [sp, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	dc36      	bgt.n	8004fe2 <_dtoa_r+0x9a2>
 8004f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	dd33      	ble.n	8004fe2 <_dtoa_r+0x9a2>
 8004f7a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004f7e:	f1bb 0f00 	cmp.w	fp, #0
 8004f82:	d10d      	bne.n	8004fa0 <_dtoa_r+0x960>
 8004f84:	4621      	mov	r1, r4
 8004f86:	465b      	mov	r3, fp
 8004f88:	2205      	movs	r2, #5
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fbf0 	bl	8005770 <__multadd>
 8004f90:	4601      	mov	r1, r0
 8004f92:	4604      	mov	r4, r0
 8004f94:	4650      	mov	r0, sl
 8004f96:	f000 fe03 	bl	8005ba0 <__mcmp>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	f73f adb6 	bgt.w	8004b0c <_dtoa_r+0x4cc>
 8004fa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fa2:	9f08      	ldr	r7, [sp, #32]
 8004fa4:	ea6f 0903 	mvn.w	r9, r3
 8004fa8:	f04f 0800 	mov.w	r8, #0
 8004fac:	4621      	mov	r1, r4
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f000 fbbc 	bl	800572c <_Bfree>
 8004fb4:	2e00      	cmp	r6, #0
 8004fb6:	f43f aea4 	beq.w	8004d02 <_dtoa_r+0x6c2>
 8004fba:	f1b8 0f00 	cmp.w	r8, #0
 8004fbe:	d005      	beq.n	8004fcc <_dtoa_r+0x98c>
 8004fc0:	45b0      	cmp	r8, r6
 8004fc2:	d003      	beq.n	8004fcc <_dtoa_r+0x98c>
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 fbb0 	bl	800572c <_Bfree>
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 fbac 	bl	800572c <_Bfree>
 8004fd4:	e695      	b.n	8004d02 <_dtoa_r+0x6c2>
 8004fd6:	2400      	movs	r4, #0
 8004fd8:	4626      	mov	r6, r4
 8004fda:	e7e1      	b.n	8004fa0 <_dtoa_r+0x960>
 8004fdc:	46c1      	mov	r9, r8
 8004fde:	4626      	mov	r6, r4
 8004fe0:	e594      	b.n	8004b0c <_dtoa_r+0x4cc>
 8004fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fe4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80fc 	beq.w	80051e6 <_dtoa_r+0xba6>
 8004fee:	2f00      	cmp	r7, #0
 8004ff0:	dd05      	ble.n	8004ffe <_dtoa_r+0x9be>
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	463a      	mov	r2, r7
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fd66 	bl	8005ac8 <__lshift>
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	f1b8 0f00 	cmp.w	r8, #0
 8005002:	d05c      	beq.n	80050be <_dtoa_r+0xa7e>
 8005004:	4628      	mov	r0, r5
 8005006:	6871      	ldr	r1, [r6, #4]
 8005008:	f000 fb50 	bl	80056ac <_Balloc>
 800500c:	4607      	mov	r7, r0
 800500e:	b928      	cbnz	r0, 800501c <_dtoa_r+0x9dc>
 8005010:	4602      	mov	r2, r0
 8005012:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005016:	4b7e      	ldr	r3, [pc, #504]	; (8005210 <_dtoa_r+0xbd0>)
 8005018:	f7ff bb26 	b.w	8004668 <_dtoa_r+0x28>
 800501c:	6932      	ldr	r2, [r6, #16]
 800501e:	f106 010c 	add.w	r1, r6, #12
 8005022:	3202      	adds	r2, #2
 8005024:	0092      	lsls	r2, r2, #2
 8005026:	300c      	adds	r0, #12
 8005028:	f000 fb32 	bl	8005690 <memcpy>
 800502c:	2201      	movs	r2, #1
 800502e:	4639      	mov	r1, r7
 8005030:	4628      	mov	r0, r5
 8005032:	f000 fd49 	bl	8005ac8 <__lshift>
 8005036:	46b0      	mov	r8, r6
 8005038:	4606      	mov	r6, r0
 800503a:	9b08      	ldr	r3, [sp, #32]
 800503c:	3301      	adds	r3, #1
 800503e:	9302      	str	r3, [sp, #8]
 8005040:	9b08      	ldr	r3, [sp, #32]
 8005042:	445b      	add	r3, fp
 8005044:	930a      	str	r3, [sp, #40]	; 0x28
 8005046:	9b04      	ldr	r3, [sp, #16]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	9309      	str	r3, [sp, #36]	; 0x24
 800504e:	9b02      	ldr	r3, [sp, #8]
 8005050:	4621      	mov	r1, r4
 8005052:	4650      	mov	r0, sl
 8005054:	f103 3bff 	add.w	fp, r3, #4294967295
 8005058:	f7ff fa64 	bl	8004524 <quorem>
 800505c:	4603      	mov	r3, r0
 800505e:	4641      	mov	r1, r8
 8005060:	3330      	adds	r3, #48	; 0x30
 8005062:	9004      	str	r0, [sp, #16]
 8005064:	4650      	mov	r0, sl
 8005066:	930b      	str	r3, [sp, #44]	; 0x2c
 8005068:	f000 fd9a 	bl	8005ba0 <__mcmp>
 800506c:	4632      	mov	r2, r6
 800506e:	9006      	str	r0, [sp, #24]
 8005070:	4621      	mov	r1, r4
 8005072:	4628      	mov	r0, r5
 8005074:	f000 fdb0 	bl	8005bd8 <__mdiff>
 8005078:	68c2      	ldr	r2, [r0, #12]
 800507a:	4607      	mov	r7, r0
 800507c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800507e:	bb02      	cbnz	r2, 80050c2 <_dtoa_r+0xa82>
 8005080:	4601      	mov	r1, r0
 8005082:	4650      	mov	r0, sl
 8005084:	f000 fd8c 	bl	8005ba0 <__mcmp>
 8005088:	4602      	mov	r2, r0
 800508a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800508c:	4639      	mov	r1, r7
 800508e:	4628      	mov	r0, r5
 8005090:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005094:	f000 fb4a 	bl	800572c <_Bfree>
 8005098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800509a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800509c:	9f02      	ldr	r7, [sp, #8]
 800509e:	ea43 0102 	orr.w	r1, r3, r2
 80050a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a4:	430b      	orrs	r3, r1
 80050a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a8:	d10d      	bne.n	80050c6 <_dtoa_r+0xa86>
 80050aa:	2b39      	cmp	r3, #57	; 0x39
 80050ac:	d027      	beq.n	80050fe <_dtoa_r+0xabe>
 80050ae:	9a06      	ldr	r2, [sp, #24]
 80050b0:	2a00      	cmp	r2, #0
 80050b2:	dd01      	ble.n	80050b8 <_dtoa_r+0xa78>
 80050b4:	9b04      	ldr	r3, [sp, #16]
 80050b6:	3331      	adds	r3, #49	; 0x31
 80050b8:	f88b 3000 	strb.w	r3, [fp]
 80050bc:	e776      	b.n	8004fac <_dtoa_r+0x96c>
 80050be:	4630      	mov	r0, r6
 80050c0:	e7b9      	b.n	8005036 <_dtoa_r+0x9f6>
 80050c2:	2201      	movs	r2, #1
 80050c4:	e7e2      	b.n	800508c <_dtoa_r+0xa4c>
 80050c6:	9906      	ldr	r1, [sp, #24]
 80050c8:	2900      	cmp	r1, #0
 80050ca:	db04      	blt.n	80050d6 <_dtoa_r+0xa96>
 80050cc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80050ce:	4301      	orrs	r1, r0
 80050d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050d2:	4301      	orrs	r1, r0
 80050d4:	d120      	bne.n	8005118 <_dtoa_r+0xad8>
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	ddee      	ble.n	80050b8 <_dtoa_r+0xa78>
 80050da:	4651      	mov	r1, sl
 80050dc:	2201      	movs	r2, #1
 80050de:	4628      	mov	r0, r5
 80050e0:	9302      	str	r3, [sp, #8]
 80050e2:	f000 fcf1 	bl	8005ac8 <__lshift>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4682      	mov	sl, r0
 80050ea:	f000 fd59 	bl	8005ba0 <__mcmp>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	9b02      	ldr	r3, [sp, #8]
 80050f2:	dc02      	bgt.n	80050fa <_dtoa_r+0xaba>
 80050f4:	d1e0      	bne.n	80050b8 <_dtoa_r+0xa78>
 80050f6:	07da      	lsls	r2, r3, #31
 80050f8:	d5de      	bpl.n	80050b8 <_dtoa_r+0xa78>
 80050fa:	2b39      	cmp	r3, #57	; 0x39
 80050fc:	d1da      	bne.n	80050b4 <_dtoa_r+0xa74>
 80050fe:	2339      	movs	r3, #57	; 0x39
 8005100:	f88b 3000 	strb.w	r3, [fp]
 8005104:	463b      	mov	r3, r7
 8005106:	461f      	mov	r7, r3
 8005108:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800510c:	3b01      	subs	r3, #1
 800510e:	2a39      	cmp	r2, #57	; 0x39
 8005110:	d050      	beq.n	80051b4 <_dtoa_r+0xb74>
 8005112:	3201      	adds	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	e749      	b.n	8004fac <_dtoa_r+0x96c>
 8005118:	2a00      	cmp	r2, #0
 800511a:	dd03      	ble.n	8005124 <_dtoa_r+0xae4>
 800511c:	2b39      	cmp	r3, #57	; 0x39
 800511e:	d0ee      	beq.n	80050fe <_dtoa_r+0xabe>
 8005120:	3301      	adds	r3, #1
 8005122:	e7c9      	b.n	80050b8 <_dtoa_r+0xa78>
 8005124:	9a02      	ldr	r2, [sp, #8]
 8005126:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005128:	f802 3c01 	strb.w	r3, [r2, #-1]
 800512c:	428a      	cmp	r2, r1
 800512e:	d02a      	beq.n	8005186 <_dtoa_r+0xb46>
 8005130:	4651      	mov	r1, sl
 8005132:	2300      	movs	r3, #0
 8005134:	220a      	movs	r2, #10
 8005136:	4628      	mov	r0, r5
 8005138:	f000 fb1a 	bl	8005770 <__multadd>
 800513c:	45b0      	cmp	r8, r6
 800513e:	4682      	mov	sl, r0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 020a 	mov.w	r2, #10
 8005148:	4641      	mov	r1, r8
 800514a:	4628      	mov	r0, r5
 800514c:	d107      	bne.n	800515e <_dtoa_r+0xb1e>
 800514e:	f000 fb0f 	bl	8005770 <__multadd>
 8005152:	4680      	mov	r8, r0
 8005154:	4606      	mov	r6, r0
 8005156:	9b02      	ldr	r3, [sp, #8]
 8005158:	3301      	adds	r3, #1
 800515a:	9302      	str	r3, [sp, #8]
 800515c:	e777      	b.n	800504e <_dtoa_r+0xa0e>
 800515e:	f000 fb07 	bl	8005770 <__multadd>
 8005162:	4631      	mov	r1, r6
 8005164:	4680      	mov	r8, r0
 8005166:	2300      	movs	r3, #0
 8005168:	220a      	movs	r2, #10
 800516a:	4628      	mov	r0, r5
 800516c:	f000 fb00 	bl	8005770 <__multadd>
 8005170:	4606      	mov	r6, r0
 8005172:	e7f0      	b.n	8005156 <_dtoa_r+0xb16>
 8005174:	f1bb 0f00 	cmp.w	fp, #0
 8005178:	bfcc      	ite	gt
 800517a:	465f      	movgt	r7, fp
 800517c:	2701      	movle	r7, #1
 800517e:	f04f 0800 	mov.w	r8, #0
 8005182:	9a08      	ldr	r2, [sp, #32]
 8005184:	4417      	add	r7, r2
 8005186:	4651      	mov	r1, sl
 8005188:	2201      	movs	r2, #1
 800518a:	4628      	mov	r0, r5
 800518c:	9302      	str	r3, [sp, #8]
 800518e:	f000 fc9b 	bl	8005ac8 <__lshift>
 8005192:	4621      	mov	r1, r4
 8005194:	4682      	mov	sl, r0
 8005196:	f000 fd03 	bl	8005ba0 <__mcmp>
 800519a:	2800      	cmp	r0, #0
 800519c:	dcb2      	bgt.n	8005104 <_dtoa_r+0xac4>
 800519e:	d102      	bne.n	80051a6 <_dtoa_r+0xb66>
 80051a0:	9b02      	ldr	r3, [sp, #8]
 80051a2:	07db      	lsls	r3, r3, #31
 80051a4:	d4ae      	bmi.n	8005104 <_dtoa_r+0xac4>
 80051a6:	463b      	mov	r3, r7
 80051a8:	461f      	mov	r7, r3
 80051aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051ae:	2a30      	cmp	r2, #48	; 0x30
 80051b0:	d0fa      	beq.n	80051a8 <_dtoa_r+0xb68>
 80051b2:	e6fb      	b.n	8004fac <_dtoa_r+0x96c>
 80051b4:	9a08      	ldr	r2, [sp, #32]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d1a5      	bne.n	8005106 <_dtoa_r+0xac6>
 80051ba:	2331      	movs	r3, #49	; 0x31
 80051bc:	f109 0901 	add.w	r9, r9, #1
 80051c0:	7013      	strb	r3, [r2, #0]
 80051c2:	e6f3      	b.n	8004fac <_dtoa_r+0x96c>
 80051c4:	4b13      	ldr	r3, [pc, #76]	; (8005214 <_dtoa_r+0xbd4>)
 80051c6:	f7ff baa7 	b.w	8004718 <_dtoa_r+0xd8>
 80051ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f47f aa80 	bne.w	80046d2 <_dtoa_r+0x92>
 80051d2:	4b11      	ldr	r3, [pc, #68]	; (8005218 <_dtoa_r+0xbd8>)
 80051d4:	f7ff baa0 	b.w	8004718 <_dtoa_r+0xd8>
 80051d8:	f1bb 0f00 	cmp.w	fp, #0
 80051dc:	dc03      	bgt.n	80051e6 <_dtoa_r+0xba6>
 80051de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	f73f aecc 	bgt.w	8004f7e <_dtoa_r+0x93e>
 80051e6:	9f08      	ldr	r7, [sp, #32]
 80051e8:	4621      	mov	r1, r4
 80051ea:	4650      	mov	r0, sl
 80051ec:	f7ff f99a 	bl	8004524 <quorem>
 80051f0:	9a08      	ldr	r2, [sp, #32]
 80051f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80051f6:	f807 3b01 	strb.w	r3, [r7], #1
 80051fa:	1aba      	subs	r2, r7, r2
 80051fc:	4593      	cmp	fp, r2
 80051fe:	ddb9      	ble.n	8005174 <_dtoa_r+0xb34>
 8005200:	4651      	mov	r1, sl
 8005202:	2300      	movs	r3, #0
 8005204:	220a      	movs	r2, #10
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fab2 	bl	8005770 <__multadd>
 800520c:	4682      	mov	sl, r0
 800520e:	e7eb      	b.n	80051e8 <_dtoa_r+0xba8>
 8005210:	08006723 	.word	0x08006723
 8005214:	0800667c 	.word	0x0800667c
 8005218:	080066a0 	.word	0x080066a0

0800521c <__sflush_r>:
 800521c:	898a      	ldrh	r2, [r1, #12]
 800521e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005222:	4605      	mov	r5, r0
 8005224:	0710      	lsls	r0, r2, #28
 8005226:	460c      	mov	r4, r1
 8005228:	d458      	bmi.n	80052dc <__sflush_r+0xc0>
 800522a:	684b      	ldr	r3, [r1, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	dc05      	bgt.n	800523c <__sflush_r+0x20>
 8005230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	dc02      	bgt.n	800523c <__sflush_r+0x20>
 8005236:	2000      	movs	r0, #0
 8005238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800523c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800523e:	2e00      	cmp	r6, #0
 8005240:	d0f9      	beq.n	8005236 <__sflush_r+0x1a>
 8005242:	2300      	movs	r3, #0
 8005244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005248:	682f      	ldr	r7, [r5, #0]
 800524a:	602b      	str	r3, [r5, #0]
 800524c:	d032      	beq.n	80052b4 <__sflush_r+0x98>
 800524e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	075a      	lsls	r2, r3, #29
 8005254:	d505      	bpl.n	8005262 <__sflush_r+0x46>
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	1ac0      	subs	r0, r0, r3
 800525a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800525c:	b10b      	cbz	r3, 8005262 <__sflush_r+0x46>
 800525e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005260:	1ac0      	subs	r0, r0, r3
 8005262:	2300      	movs	r3, #0
 8005264:	4602      	mov	r2, r0
 8005266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005268:	4628      	mov	r0, r5
 800526a:	6a21      	ldr	r1, [r4, #32]
 800526c:	47b0      	blx	r6
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	d106      	bne.n	8005282 <__sflush_r+0x66>
 8005274:	6829      	ldr	r1, [r5, #0]
 8005276:	291d      	cmp	r1, #29
 8005278:	d82c      	bhi.n	80052d4 <__sflush_r+0xb8>
 800527a:	4a2a      	ldr	r2, [pc, #168]	; (8005324 <__sflush_r+0x108>)
 800527c:	40ca      	lsrs	r2, r1
 800527e:	07d6      	lsls	r6, r2, #31
 8005280:	d528      	bpl.n	80052d4 <__sflush_r+0xb8>
 8005282:	2200      	movs	r2, #0
 8005284:	6062      	str	r2, [r4, #4]
 8005286:	6922      	ldr	r2, [r4, #16]
 8005288:	04d9      	lsls	r1, r3, #19
 800528a:	6022      	str	r2, [r4, #0]
 800528c:	d504      	bpl.n	8005298 <__sflush_r+0x7c>
 800528e:	1c42      	adds	r2, r0, #1
 8005290:	d101      	bne.n	8005296 <__sflush_r+0x7a>
 8005292:	682b      	ldr	r3, [r5, #0]
 8005294:	b903      	cbnz	r3, 8005298 <__sflush_r+0x7c>
 8005296:	6560      	str	r0, [r4, #84]	; 0x54
 8005298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800529a:	602f      	str	r7, [r5, #0]
 800529c:	2900      	cmp	r1, #0
 800529e:	d0ca      	beq.n	8005236 <__sflush_r+0x1a>
 80052a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052a4:	4299      	cmp	r1, r3
 80052a6:	d002      	beq.n	80052ae <__sflush_r+0x92>
 80052a8:	4628      	mov	r0, r5
 80052aa:	f000 fd8f 	bl	8005dcc <_free_r>
 80052ae:	2000      	movs	r0, #0
 80052b0:	6360      	str	r0, [r4, #52]	; 0x34
 80052b2:	e7c1      	b.n	8005238 <__sflush_r+0x1c>
 80052b4:	6a21      	ldr	r1, [r4, #32]
 80052b6:	2301      	movs	r3, #1
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b0      	blx	r6
 80052bc:	1c41      	adds	r1, r0, #1
 80052be:	d1c7      	bne.n	8005250 <__sflush_r+0x34>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0c4      	beq.n	8005250 <__sflush_r+0x34>
 80052c6:	2b1d      	cmp	r3, #29
 80052c8:	d001      	beq.n	80052ce <__sflush_r+0xb2>
 80052ca:	2b16      	cmp	r3, #22
 80052cc:	d101      	bne.n	80052d2 <__sflush_r+0xb6>
 80052ce:	602f      	str	r7, [r5, #0]
 80052d0:	e7b1      	b.n	8005236 <__sflush_r+0x1a>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	e7ad      	b.n	8005238 <__sflush_r+0x1c>
 80052dc:	690f      	ldr	r7, [r1, #16]
 80052de:	2f00      	cmp	r7, #0
 80052e0:	d0a9      	beq.n	8005236 <__sflush_r+0x1a>
 80052e2:	0793      	lsls	r3, r2, #30
 80052e4:	bf18      	it	ne
 80052e6:	2300      	movne	r3, #0
 80052e8:	680e      	ldr	r6, [r1, #0]
 80052ea:	bf08      	it	eq
 80052ec:	694b      	ldreq	r3, [r1, #20]
 80052ee:	eba6 0807 	sub.w	r8, r6, r7
 80052f2:	600f      	str	r7, [r1, #0]
 80052f4:	608b      	str	r3, [r1, #8]
 80052f6:	f1b8 0f00 	cmp.w	r8, #0
 80052fa:	dd9c      	ble.n	8005236 <__sflush_r+0x1a>
 80052fc:	4643      	mov	r3, r8
 80052fe:	463a      	mov	r2, r7
 8005300:	4628      	mov	r0, r5
 8005302:	6a21      	ldr	r1, [r4, #32]
 8005304:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005306:	47b0      	blx	r6
 8005308:	2800      	cmp	r0, #0
 800530a:	dc06      	bgt.n	800531a <__sflush_r+0xfe>
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	f04f 30ff 	mov.w	r0, #4294967295
 8005312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005316:	81a3      	strh	r3, [r4, #12]
 8005318:	e78e      	b.n	8005238 <__sflush_r+0x1c>
 800531a:	4407      	add	r7, r0
 800531c:	eba8 0800 	sub.w	r8, r8, r0
 8005320:	e7e9      	b.n	80052f6 <__sflush_r+0xda>
 8005322:	bf00      	nop
 8005324:	20400001 	.word	0x20400001

08005328 <_fflush_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	690b      	ldr	r3, [r1, #16]
 800532c:	4605      	mov	r5, r0
 800532e:	460c      	mov	r4, r1
 8005330:	b913      	cbnz	r3, 8005338 <_fflush_r+0x10>
 8005332:	2500      	movs	r5, #0
 8005334:	4628      	mov	r0, r5
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	b118      	cbz	r0, 8005342 <_fflush_r+0x1a>
 800533a:	6983      	ldr	r3, [r0, #24]
 800533c:	b90b      	cbnz	r3, 8005342 <_fflush_r+0x1a>
 800533e:	f000 f887 	bl	8005450 <__sinit>
 8005342:	4b14      	ldr	r3, [pc, #80]	; (8005394 <_fflush_r+0x6c>)
 8005344:	429c      	cmp	r4, r3
 8005346:	d11b      	bne.n	8005380 <_fflush_r+0x58>
 8005348:	686c      	ldr	r4, [r5, #4]
 800534a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0ef      	beq.n	8005332 <_fflush_r+0xa>
 8005352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005354:	07d0      	lsls	r0, r2, #31
 8005356:	d404      	bmi.n	8005362 <_fflush_r+0x3a>
 8005358:	0599      	lsls	r1, r3, #22
 800535a:	d402      	bmi.n	8005362 <_fflush_r+0x3a>
 800535c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800535e:	f000 f91a 	bl	8005596 <__retarget_lock_acquire_recursive>
 8005362:	4628      	mov	r0, r5
 8005364:	4621      	mov	r1, r4
 8005366:	f7ff ff59 	bl	800521c <__sflush_r>
 800536a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800536c:	4605      	mov	r5, r0
 800536e:	07da      	lsls	r2, r3, #31
 8005370:	d4e0      	bmi.n	8005334 <_fflush_r+0xc>
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	059b      	lsls	r3, r3, #22
 8005376:	d4dd      	bmi.n	8005334 <_fflush_r+0xc>
 8005378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800537a:	f000 f90d 	bl	8005598 <__retarget_lock_release_recursive>
 800537e:	e7d9      	b.n	8005334 <_fflush_r+0xc>
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <_fflush_r+0x70>)
 8005382:	429c      	cmp	r4, r3
 8005384:	d101      	bne.n	800538a <_fflush_r+0x62>
 8005386:	68ac      	ldr	r4, [r5, #8]
 8005388:	e7df      	b.n	800534a <_fflush_r+0x22>
 800538a:	4b04      	ldr	r3, [pc, #16]	; (800539c <_fflush_r+0x74>)
 800538c:	429c      	cmp	r4, r3
 800538e:	bf08      	it	eq
 8005390:	68ec      	ldreq	r4, [r5, #12]
 8005392:	e7da      	b.n	800534a <_fflush_r+0x22>
 8005394:	08006754 	.word	0x08006754
 8005398:	08006774 	.word	0x08006774
 800539c:	08006734 	.word	0x08006734

080053a0 <std>:
 80053a0:	2300      	movs	r3, #0
 80053a2:	b510      	push	{r4, lr}
 80053a4:	4604      	mov	r4, r0
 80053a6:	e9c0 3300 	strd	r3, r3, [r0]
 80053aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053ae:	6083      	str	r3, [r0, #8]
 80053b0:	8181      	strh	r1, [r0, #12]
 80053b2:	6643      	str	r3, [r0, #100]	; 0x64
 80053b4:	81c2      	strh	r2, [r0, #14]
 80053b6:	6183      	str	r3, [r0, #24]
 80053b8:	4619      	mov	r1, r3
 80053ba:	2208      	movs	r2, #8
 80053bc:	305c      	adds	r0, #92	; 0x5c
 80053be:	f7fe fb6b 	bl	8003a98 <memset>
 80053c2:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <std+0x38>)
 80053c4:	6224      	str	r4, [r4, #32]
 80053c6:	6263      	str	r3, [r4, #36]	; 0x24
 80053c8:	4b04      	ldr	r3, [pc, #16]	; (80053dc <std+0x3c>)
 80053ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <std+0x40>)
 80053ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <std+0x44>)
 80053d2:	6323      	str	r3, [r4, #48]	; 0x30
 80053d4:	bd10      	pop	{r4, pc}
 80053d6:	bf00      	nop
 80053d8:	080061e9 	.word	0x080061e9
 80053dc:	0800620b 	.word	0x0800620b
 80053e0:	08006243 	.word	0x08006243
 80053e4:	08006267 	.word	0x08006267

080053e8 <_cleanup_r>:
 80053e8:	4901      	ldr	r1, [pc, #4]	; (80053f0 <_cleanup_r+0x8>)
 80053ea:	f000 b8af 	b.w	800554c <_fwalk_reent>
 80053ee:	bf00      	nop
 80053f0:	08005329 	.word	0x08005329

080053f4 <__sfmoreglue>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	2568      	movs	r5, #104	; 0x68
 80053f8:	1e4a      	subs	r2, r1, #1
 80053fa:	4355      	muls	r5, r2
 80053fc:	460e      	mov	r6, r1
 80053fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005402:	f000 fd2f 	bl	8005e64 <_malloc_r>
 8005406:	4604      	mov	r4, r0
 8005408:	b140      	cbz	r0, 800541c <__sfmoreglue+0x28>
 800540a:	2100      	movs	r1, #0
 800540c:	e9c0 1600 	strd	r1, r6, [r0]
 8005410:	300c      	adds	r0, #12
 8005412:	60a0      	str	r0, [r4, #8]
 8005414:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005418:	f7fe fb3e 	bl	8003a98 <memset>
 800541c:	4620      	mov	r0, r4
 800541e:	bd70      	pop	{r4, r5, r6, pc}

08005420 <__sfp_lock_acquire>:
 8005420:	4801      	ldr	r0, [pc, #4]	; (8005428 <__sfp_lock_acquire+0x8>)
 8005422:	f000 b8b8 	b.w	8005596 <__retarget_lock_acquire_recursive>
 8005426:	bf00      	nop
 8005428:	200002c4 	.word	0x200002c4

0800542c <__sfp_lock_release>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__sfp_lock_release+0x8>)
 800542e:	f000 b8b3 	b.w	8005598 <__retarget_lock_release_recursive>
 8005432:	bf00      	nop
 8005434:	200002c4 	.word	0x200002c4

08005438 <__sinit_lock_acquire>:
 8005438:	4801      	ldr	r0, [pc, #4]	; (8005440 <__sinit_lock_acquire+0x8>)
 800543a:	f000 b8ac 	b.w	8005596 <__retarget_lock_acquire_recursive>
 800543e:	bf00      	nop
 8005440:	200002bf 	.word	0x200002bf

08005444 <__sinit_lock_release>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__sinit_lock_release+0x8>)
 8005446:	f000 b8a7 	b.w	8005598 <__retarget_lock_release_recursive>
 800544a:	bf00      	nop
 800544c:	200002bf 	.word	0x200002bf

08005450 <__sinit>:
 8005450:	b510      	push	{r4, lr}
 8005452:	4604      	mov	r4, r0
 8005454:	f7ff fff0 	bl	8005438 <__sinit_lock_acquire>
 8005458:	69a3      	ldr	r3, [r4, #24]
 800545a:	b11b      	cbz	r3, 8005464 <__sinit+0x14>
 800545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005460:	f7ff bff0 	b.w	8005444 <__sinit_lock_release>
 8005464:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005468:	6523      	str	r3, [r4, #80]	; 0x50
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <__sinit+0x68>)
 800546c:	4a13      	ldr	r2, [pc, #76]	; (80054bc <__sinit+0x6c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	62a2      	str	r2, [r4, #40]	; 0x28
 8005472:	42a3      	cmp	r3, r4
 8005474:	bf08      	it	eq
 8005476:	2301      	moveq	r3, #1
 8005478:	4620      	mov	r0, r4
 800547a:	bf08      	it	eq
 800547c:	61a3      	streq	r3, [r4, #24]
 800547e:	f000 f81f 	bl	80054c0 <__sfp>
 8005482:	6060      	str	r0, [r4, #4]
 8005484:	4620      	mov	r0, r4
 8005486:	f000 f81b 	bl	80054c0 <__sfp>
 800548a:	60a0      	str	r0, [r4, #8]
 800548c:	4620      	mov	r0, r4
 800548e:	f000 f817 	bl	80054c0 <__sfp>
 8005492:	2200      	movs	r2, #0
 8005494:	2104      	movs	r1, #4
 8005496:	60e0      	str	r0, [r4, #12]
 8005498:	6860      	ldr	r0, [r4, #4]
 800549a:	f7ff ff81 	bl	80053a0 <std>
 800549e:	2201      	movs	r2, #1
 80054a0:	2109      	movs	r1, #9
 80054a2:	68a0      	ldr	r0, [r4, #8]
 80054a4:	f7ff ff7c 	bl	80053a0 <std>
 80054a8:	2202      	movs	r2, #2
 80054aa:	2112      	movs	r1, #18
 80054ac:	68e0      	ldr	r0, [r4, #12]
 80054ae:	f7ff ff77 	bl	80053a0 <std>
 80054b2:	2301      	movs	r3, #1
 80054b4:	61a3      	str	r3, [r4, #24]
 80054b6:	e7d1      	b.n	800545c <__sinit+0xc>
 80054b8:	08006668 	.word	0x08006668
 80054bc:	080053e9 	.word	0x080053e9

080054c0 <__sfp>:
 80054c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c2:	4607      	mov	r7, r0
 80054c4:	f7ff ffac 	bl	8005420 <__sfp_lock_acquire>
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <__sfp+0x84>)
 80054ca:	681e      	ldr	r6, [r3, #0]
 80054cc:	69b3      	ldr	r3, [r6, #24]
 80054ce:	b913      	cbnz	r3, 80054d6 <__sfp+0x16>
 80054d0:	4630      	mov	r0, r6
 80054d2:	f7ff ffbd 	bl	8005450 <__sinit>
 80054d6:	3648      	adds	r6, #72	; 0x48
 80054d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054dc:	3b01      	subs	r3, #1
 80054de:	d503      	bpl.n	80054e8 <__sfp+0x28>
 80054e0:	6833      	ldr	r3, [r6, #0]
 80054e2:	b30b      	cbz	r3, 8005528 <__sfp+0x68>
 80054e4:	6836      	ldr	r6, [r6, #0]
 80054e6:	e7f7      	b.n	80054d8 <__sfp+0x18>
 80054e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054ec:	b9d5      	cbnz	r5, 8005524 <__sfp+0x64>
 80054ee:	4b16      	ldr	r3, [pc, #88]	; (8005548 <__sfp+0x88>)
 80054f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054f4:	60e3      	str	r3, [r4, #12]
 80054f6:	6665      	str	r5, [r4, #100]	; 0x64
 80054f8:	f000 f84c 	bl	8005594 <__retarget_lock_init_recursive>
 80054fc:	f7ff ff96 	bl	800542c <__sfp_lock_release>
 8005500:	2208      	movs	r2, #8
 8005502:	4629      	mov	r1, r5
 8005504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800550c:	6025      	str	r5, [r4, #0]
 800550e:	61a5      	str	r5, [r4, #24]
 8005510:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005514:	f7fe fac0 	bl	8003a98 <memset>
 8005518:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800551c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005520:	4620      	mov	r0, r4
 8005522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005524:	3468      	adds	r4, #104	; 0x68
 8005526:	e7d9      	b.n	80054dc <__sfp+0x1c>
 8005528:	2104      	movs	r1, #4
 800552a:	4638      	mov	r0, r7
 800552c:	f7ff ff62 	bl	80053f4 <__sfmoreglue>
 8005530:	4604      	mov	r4, r0
 8005532:	6030      	str	r0, [r6, #0]
 8005534:	2800      	cmp	r0, #0
 8005536:	d1d5      	bne.n	80054e4 <__sfp+0x24>
 8005538:	f7ff ff78 	bl	800542c <__sfp_lock_release>
 800553c:	230c      	movs	r3, #12
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	e7ee      	b.n	8005520 <__sfp+0x60>
 8005542:	bf00      	nop
 8005544:	08006668 	.word	0x08006668
 8005548:	ffff0001 	.word	0xffff0001

0800554c <_fwalk_reent>:
 800554c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005550:	4606      	mov	r6, r0
 8005552:	4688      	mov	r8, r1
 8005554:	2700      	movs	r7, #0
 8005556:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800555a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800555e:	f1b9 0901 	subs.w	r9, r9, #1
 8005562:	d505      	bpl.n	8005570 <_fwalk_reent+0x24>
 8005564:	6824      	ldr	r4, [r4, #0]
 8005566:	2c00      	cmp	r4, #0
 8005568:	d1f7      	bne.n	800555a <_fwalk_reent+0xe>
 800556a:	4638      	mov	r0, r7
 800556c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005570:	89ab      	ldrh	r3, [r5, #12]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d907      	bls.n	8005586 <_fwalk_reent+0x3a>
 8005576:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800557a:	3301      	adds	r3, #1
 800557c:	d003      	beq.n	8005586 <_fwalk_reent+0x3a>
 800557e:	4629      	mov	r1, r5
 8005580:	4630      	mov	r0, r6
 8005582:	47c0      	blx	r8
 8005584:	4307      	orrs	r7, r0
 8005586:	3568      	adds	r5, #104	; 0x68
 8005588:	e7e9      	b.n	800555e <_fwalk_reent+0x12>
	...

0800558c <_localeconv_r>:
 800558c:	4800      	ldr	r0, [pc, #0]	; (8005590 <_localeconv_r+0x4>)
 800558e:	4770      	bx	lr
 8005590:	20000160 	.word	0x20000160

08005594 <__retarget_lock_init_recursive>:
 8005594:	4770      	bx	lr

08005596 <__retarget_lock_acquire_recursive>:
 8005596:	4770      	bx	lr

08005598 <__retarget_lock_release_recursive>:
 8005598:	4770      	bx	lr

0800559a <__swhatbuf_r>:
 800559a:	b570      	push	{r4, r5, r6, lr}
 800559c:	460e      	mov	r6, r1
 800559e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a2:	4614      	mov	r4, r2
 80055a4:	2900      	cmp	r1, #0
 80055a6:	461d      	mov	r5, r3
 80055a8:	b096      	sub	sp, #88	; 0x58
 80055aa:	da07      	bge.n	80055bc <__swhatbuf_r+0x22>
 80055ac:	2300      	movs	r3, #0
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	89b3      	ldrh	r3, [r6, #12]
 80055b2:	061a      	lsls	r2, r3, #24
 80055b4:	d410      	bmi.n	80055d8 <__swhatbuf_r+0x3e>
 80055b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ba:	e00e      	b.n	80055da <__swhatbuf_r+0x40>
 80055bc:	466a      	mov	r2, sp
 80055be:	f000 ff69 	bl	8006494 <_fstat_r>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	dbf2      	blt.n	80055ac <__swhatbuf_r+0x12>
 80055c6:	9a01      	ldr	r2, [sp, #4]
 80055c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055d0:	425a      	negs	r2, r3
 80055d2:	415a      	adcs	r2, r3
 80055d4:	602a      	str	r2, [r5, #0]
 80055d6:	e7ee      	b.n	80055b6 <__swhatbuf_r+0x1c>
 80055d8:	2340      	movs	r3, #64	; 0x40
 80055da:	2000      	movs	r0, #0
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	b016      	add	sp, #88	; 0x58
 80055e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080055e4 <__smakebuf_r>:
 80055e4:	898b      	ldrh	r3, [r1, #12]
 80055e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055e8:	079d      	lsls	r5, r3, #30
 80055ea:	4606      	mov	r6, r0
 80055ec:	460c      	mov	r4, r1
 80055ee:	d507      	bpl.n	8005600 <__smakebuf_r+0x1c>
 80055f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	2301      	movs	r3, #1
 80055fa:	6163      	str	r3, [r4, #20]
 80055fc:	b002      	add	sp, #8
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	466a      	mov	r2, sp
 8005602:	ab01      	add	r3, sp, #4
 8005604:	f7ff ffc9 	bl	800559a <__swhatbuf_r>
 8005608:	9900      	ldr	r1, [sp, #0]
 800560a:	4605      	mov	r5, r0
 800560c:	4630      	mov	r0, r6
 800560e:	f000 fc29 	bl	8005e64 <_malloc_r>
 8005612:	b948      	cbnz	r0, 8005628 <__smakebuf_r+0x44>
 8005614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005618:	059a      	lsls	r2, r3, #22
 800561a:	d4ef      	bmi.n	80055fc <__smakebuf_r+0x18>
 800561c:	f023 0303 	bic.w	r3, r3, #3
 8005620:	f043 0302 	orr.w	r3, r3, #2
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	e7e3      	b.n	80055f0 <__smakebuf_r+0xc>
 8005628:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <__smakebuf_r+0x7c>)
 800562a:	62b3      	str	r3, [r6, #40]	; 0x28
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	6020      	str	r0, [r4, #0]
 8005630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	9b00      	ldr	r3, [sp, #0]
 8005638:	6120      	str	r0, [r4, #16]
 800563a:	6163      	str	r3, [r4, #20]
 800563c:	9b01      	ldr	r3, [sp, #4]
 800563e:	b15b      	cbz	r3, 8005658 <__smakebuf_r+0x74>
 8005640:	4630      	mov	r0, r6
 8005642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005646:	f000 ff37 	bl	80064b8 <_isatty_r>
 800564a:	b128      	cbz	r0, 8005658 <__smakebuf_r+0x74>
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	81a3      	strh	r3, [r4, #12]
 8005658:	89a0      	ldrh	r0, [r4, #12]
 800565a:	4305      	orrs	r5, r0
 800565c:	81a5      	strh	r5, [r4, #12]
 800565e:	e7cd      	b.n	80055fc <__smakebuf_r+0x18>
 8005660:	080053e9 	.word	0x080053e9

08005664 <malloc>:
 8005664:	4b02      	ldr	r3, [pc, #8]	; (8005670 <malloc+0xc>)
 8005666:	4601      	mov	r1, r0
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	f000 bbfb 	b.w	8005e64 <_malloc_r>
 800566e:	bf00      	nop
 8005670:	2000000c 	.word	0x2000000c

08005674 <memchr>:
 8005674:	4603      	mov	r3, r0
 8005676:	b510      	push	{r4, lr}
 8005678:	b2c9      	uxtb	r1, r1
 800567a:	4402      	add	r2, r0
 800567c:	4293      	cmp	r3, r2
 800567e:	4618      	mov	r0, r3
 8005680:	d101      	bne.n	8005686 <memchr+0x12>
 8005682:	2000      	movs	r0, #0
 8005684:	e003      	b.n	800568e <memchr+0x1a>
 8005686:	7804      	ldrb	r4, [r0, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	428c      	cmp	r4, r1
 800568c:	d1f6      	bne.n	800567c <memchr+0x8>
 800568e:	bd10      	pop	{r4, pc}

08005690 <memcpy>:
 8005690:	440a      	add	r2, r1
 8005692:	4291      	cmp	r1, r2
 8005694:	f100 33ff 	add.w	r3, r0, #4294967295
 8005698:	d100      	bne.n	800569c <memcpy+0xc>
 800569a:	4770      	bx	lr
 800569c:	b510      	push	{r4, lr}
 800569e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056a2:	4291      	cmp	r1, r2
 80056a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056a8:	d1f9      	bne.n	800569e <memcpy+0xe>
 80056aa:	bd10      	pop	{r4, pc}

080056ac <_Balloc>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056b0:	4604      	mov	r4, r0
 80056b2:	460d      	mov	r5, r1
 80056b4:	b976      	cbnz	r6, 80056d4 <_Balloc+0x28>
 80056b6:	2010      	movs	r0, #16
 80056b8:	f7ff ffd4 	bl	8005664 <malloc>
 80056bc:	4602      	mov	r2, r0
 80056be:	6260      	str	r0, [r4, #36]	; 0x24
 80056c0:	b920      	cbnz	r0, 80056cc <_Balloc+0x20>
 80056c2:	2166      	movs	r1, #102	; 0x66
 80056c4:	4b17      	ldr	r3, [pc, #92]	; (8005724 <_Balloc+0x78>)
 80056c6:	4818      	ldr	r0, [pc, #96]	; (8005728 <_Balloc+0x7c>)
 80056c8:	f000 fea4 	bl	8006414 <__assert_func>
 80056cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056d0:	6006      	str	r6, [r0, #0]
 80056d2:	60c6      	str	r6, [r0, #12]
 80056d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056d6:	68f3      	ldr	r3, [r6, #12]
 80056d8:	b183      	cbz	r3, 80056fc <_Balloc+0x50>
 80056da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056e2:	b9b8      	cbnz	r0, 8005714 <_Balloc+0x68>
 80056e4:	2101      	movs	r1, #1
 80056e6:	fa01 f605 	lsl.w	r6, r1, r5
 80056ea:	1d72      	adds	r2, r6, #5
 80056ec:	4620      	mov	r0, r4
 80056ee:	0092      	lsls	r2, r2, #2
 80056f0:	f000 fb5e 	bl	8005db0 <_calloc_r>
 80056f4:	b160      	cbz	r0, 8005710 <_Balloc+0x64>
 80056f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056fa:	e00e      	b.n	800571a <_Balloc+0x6e>
 80056fc:	2221      	movs	r2, #33	; 0x21
 80056fe:	2104      	movs	r1, #4
 8005700:	4620      	mov	r0, r4
 8005702:	f000 fb55 	bl	8005db0 <_calloc_r>
 8005706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005708:	60f0      	str	r0, [r6, #12]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e4      	bne.n	80056da <_Balloc+0x2e>
 8005710:	2000      	movs	r0, #0
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	6802      	ldr	r2, [r0, #0]
 8005716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800571a:	2300      	movs	r3, #0
 800571c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005720:	e7f7      	b.n	8005712 <_Balloc+0x66>
 8005722:	bf00      	nop
 8005724:	080066ad 	.word	0x080066ad
 8005728:	08006794 	.word	0x08006794

0800572c <_Bfree>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005730:	4605      	mov	r5, r0
 8005732:	460c      	mov	r4, r1
 8005734:	b976      	cbnz	r6, 8005754 <_Bfree+0x28>
 8005736:	2010      	movs	r0, #16
 8005738:	f7ff ff94 	bl	8005664 <malloc>
 800573c:	4602      	mov	r2, r0
 800573e:	6268      	str	r0, [r5, #36]	; 0x24
 8005740:	b920      	cbnz	r0, 800574c <_Bfree+0x20>
 8005742:	218a      	movs	r1, #138	; 0x8a
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <_Bfree+0x3c>)
 8005746:	4809      	ldr	r0, [pc, #36]	; (800576c <_Bfree+0x40>)
 8005748:	f000 fe64 	bl	8006414 <__assert_func>
 800574c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005750:	6006      	str	r6, [r0, #0]
 8005752:	60c6      	str	r6, [r0, #12]
 8005754:	b13c      	cbz	r4, 8005766 <_Bfree+0x3a>
 8005756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005758:	6862      	ldr	r2, [r4, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005760:	6021      	str	r1, [r4, #0]
 8005762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	080066ad 	.word	0x080066ad
 800576c:	08006794 	.word	0x08006794

08005770 <__multadd>:
 8005770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005774:	4698      	mov	r8, r3
 8005776:	460c      	mov	r4, r1
 8005778:	2300      	movs	r3, #0
 800577a:	690e      	ldr	r6, [r1, #16]
 800577c:	4607      	mov	r7, r0
 800577e:	f101 0014 	add.w	r0, r1, #20
 8005782:	6805      	ldr	r5, [r0, #0]
 8005784:	3301      	adds	r3, #1
 8005786:	b2a9      	uxth	r1, r5
 8005788:	fb02 8101 	mla	r1, r2, r1, r8
 800578c:	0c2d      	lsrs	r5, r5, #16
 800578e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005792:	fb02 c505 	mla	r5, r2, r5, ip
 8005796:	b289      	uxth	r1, r1
 8005798:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800579c:	429e      	cmp	r6, r3
 800579e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80057a2:	f840 1b04 	str.w	r1, [r0], #4
 80057a6:	dcec      	bgt.n	8005782 <__multadd+0x12>
 80057a8:	f1b8 0f00 	cmp.w	r8, #0
 80057ac:	d022      	beq.n	80057f4 <__multadd+0x84>
 80057ae:	68a3      	ldr	r3, [r4, #8]
 80057b0:	42b3      	cmp	r3, r6
 80057b2:	dc19      	bgt.n	80057e8 <__multadd+0x78>
 80057b4:	6861      	ldr	r1, [r4, #4]
 80057b6:	4638      	mov	r0, r7
 80057b8:	3101      	adds	r1, #1
 80057ba:	f7ff ff77 	bl	80056ac <_Balloc>
 80057be:	4605      	mov	r5, r0
 80057c0:	b928      	cbnz	r0, 80057ce <__multadd+0x5e>
 80057c2:	4602      	mov	r2, r0
 80057c4:	21b5      	movs	r1, #181	; 0xb5
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <__multadd+0x8c>)
 80057c8:	480d      	ldr	r0, [pc, #52]	; (8005800 <__multadd+0x90>)
 80057ca:	f000 fe23 	bl	8006414 <__assert_func>
 80057ce:	6922      	ldr	r2, [r4, #16]
 80057d0:	f104 010c 	add.w	r1, r4, #12
 80057d4:	3202      	adds	r2, #2
 80057d6:	0092      	lsls	r2, r2, #2
 80057d8:	300c      	adds	r0, #12
 80057da:	f7ff ff59 	bl	8005690 <memcpy>
 80057de:	4621      	mov	r1, r4
 80057e0:	4638      	mov	r0, r7
 80057e2:	f7ff ffa3 	bl	800572c <_Bfree>
 80057e6:	462c      	mov	r4, r5
 80057e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80057ec:	3601      	adds	r6, #1
 80057ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80057f2:	6126      	str	r6, [r4, #16]
 80057f4:	4620      	mov	r0, r4
 80057f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057fa:	bf00      	nop
 80057fc:	08006723 	.word	0x08006723
 8005800:	08006794 	.word	0x08006794

08005804 <__hi0bits>:
 8005804:	0c02      	lsrs	r2, r0, #16
 8005806:	0412      	lsls	r2, r2, #16
 8005808:	4603      	mov	r3, r0
 800580a:	b9ca      	cbnz	r2, 8005840 <__hi0bits+0x3c>
 800580c:	0403      	lsls	r3, r0, #16
 800580e:	2010      	movs	r0, #16
 8005810:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005814:	bf04      	itt	eq
 8005816:	021b      	lsleq	r3, r3, #8
 8005818:	3008      	addeq	r0, #8
 800581a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800581e:	bf04      	itt	eq
 8005820:	011b      	lsleq	r3, r3, #4
 8005822:	3004      	addeq	r0, #4
 8005824:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005828:	bf04      	itt	eq
 800582a:	009b      	lsleq	r3, r3, #2
 800582c:	3002      	addeq	r0, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	db05      	blt.n	800583e <__hi0bits+0x3a>
 8005832:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005836:	f100 0001 	add.w	r0, r0, #1
 800583a:	bf08      	it	eq
 800583c:	2020      	moveq	r0, #32
 800583e:	4770      	bx	lr
 8005840:	2000      	movs	r0, #0
 8005842:	e7e5      	b.n	8005810 <__hi0bits+0xc>

08005844 <__lo0bits>:
 8005844:	6803      	ldr	r3, [r0, #0]
 8005846:	4602      	mov	r2, r0
 8005848:	f013 0007 	ands.w	r0, r3, #7
 800584c:	d00b      	beq.n	8005866 <__lo0bits+0x22>
 800584e:	07d9      	lsls	r1, r3, #31
 8005850:	d422      	bmi.n	8005898 <__lo0bits+0x54>
 8005852:	0798      	lsls	r0, r3, #30
 8005854:	bf49      	itett	mi
 8005856:	085b      	lsrmi	r3, r3, #1
 8005858:	089b      	lsrpl	r3, r3, #2
 800585a:	2001      	movmi	r0, #1
 800585c:	6013      	strmi	r3, [r2, #0]
 800585e:	bf5c      	itt	pl
 8005860:	2002      	movpl	r0, #2
 8005862:	6013      	strpl	r3, [r2, #0]
 8005864:	4770      	bx	lr
 8005866:	b299      	uxth	r1, r3
 8005868:	b909      	cbnz	r1, 800586e <__lo0bits+0x2a>
 800586a:	2010      	movs	r0, #16
 800586c:	0c1b      	lsrs	r3, r3, #16
 800586e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005872:	bf04      	itt	eq
 8005874:	0a1b      	lsreq	r3, r3, #8
 8005876:	3008      	addeq	r0, #8
 8005878:	0719      	lsls	r1, r3, #28
 800587a:	bf04      	itt	eq
 800587c:	091b      	lsreq	r3, r3, #4
 800587e:	3004      	addeq	r0, #4
 8005880:	0799      	lsls	r1, r3, #30
 8005882:	bf04      	itt	eq
 8005884:	089b      	lsreq	r3, r3, #2
 8005886:	3002      	addeq	r0, #2
 8005888:	07d9      	lsls	r1, r3, #31
 800588a:	d403      	bmi.n	8005894 <__lo0bits+0x50>
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	f100 0001 	add.w	r0, r0, #1
 8005892:	d003      	beq.n	800589c <__lo0bits+0x58>
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	4770      	bx	lr
 8005898:	2000      	movs	r0, #0
 800589a:	4770      	bx	lr
 800589c:	2020      	movs	r0, #32
 800589e:	4770      	bx	lr

080058a0 <__i2b>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	460c      	mov	r4, r1
 80058a4:	2101      	movs	r1, #1
 80058a6:	f7ff ff01 	bl	80056ac <_Balloc>
 80058aa:	4602      	mov	r2, r0
 80058ac:	b928      	cbnz	r0, 80058ba <__i2b+0x1a>
 80058ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058b2:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <__i2b+0x24>)
 80058b4:	4804      	ldr	r0, [pc, #16]	; (80058c8 <__i2b+0x28>)
 80058b6:	f000 fdad 	bl	8006414 <__assert_func>
 80058ba:	2301      	movs	r3, #1
 80058bc:	6144      	str	r4, [r0, #20]
 80058be:	6103      	str	r3, [r0, #16]
 80058c0:	bd10      	pop	{r4, pc}
 80058c2:	bf00      	nop
 80058c4:	08006723 	.word	0x08006723
 80058c8:	08006794 	.word	0x08006794

080058cc <__multiply>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	4614      	mov	r4, r2
 80058d2:	690a      	ldr	r2, [r1, #16]
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	460d      	mov	r5, r1
 80058d8:	429a      	cmp	r2, r3
 80058da:	bfbe      	ittt	lt
 80058dc:	460b      	movlt	r3, r1
 80058de:	4625      	movlt	r5, r4
 80058e0:	461c      	movlt	r4, r3
 80058e2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80058e6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80058ea:	68ab      	ldr	r3, [r5, #8]
 80058ec:	6869      	ldr	r1, [r5, #4]
 80058ee:	eb0a 0709 	add.w	r7, sl, r9
 80058f2:	42bb      	cmp	r3, r7
 80058f4:	b085      	sub	sp, #20
 80058f6:	bfb8      	it	lt
 80058f8:	3101      	addlt	r1, #1
 80058fa:	f7ff fed7 	bl	80056ac <_Balloc>
 80058fe:	b930      	cbnz	r0, 800590e <__multiply+0x42>
 8005900:	4602      	mov	r2, r0
 8005902:	f240 115d 	movw	r1, #349	; 0x15d
 8005906:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <__multiply+0x140>)
 8005908:	4841      	ldr	r0, [pc, #260]	; (8005a10 <__multiply+0x144>)
 800590a:	f000 fd83 	bl	8006414 <__assert_func>
 800590e:	f100 0614 	add.w	r6, r0, #20
 8005912:	4633      	mov	r3, r6
 8005914:	2200      	movs	r2, #0
 8005916:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800591a:	4543      	cmp	r3, r8
 800591c:	d31e      	bcc.n	800595c <__multiply+0x90>
 800591e:	f105 0c14 	add.w	ip, r5, #20
 8005922:	f104 0314 	add.w	r3, r4, #20
 8005926:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800592a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800592e:	9202      	str	r2, [sp, #8]
 8005930:	ebac 0205 	sub.w	r2, ip, r5
 8005934:	3a15      	subs	r2, #21
 8005936:	f022 0203 	bic.w	r2, r2, #3
 800593a:	3204      	adds	r2, #4
 800593c:	f105 0115 	add.w	r1, r5, #21
 8005940:	458c      	cmp	ip, r1
 8005942:	bf38      	it	cc
 8005944:	2204      	movcc	r2, #4
 8005946:	9201      	str	r2, [sp, #4]
 8005948:	9a02      	ldr	r2, [sp, #8]
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d808      	bhi.n	8005962 <__multiply+0x96>
 8005950:	2f00      	cmp	r7, #0
 8005952:	dc55      	bgt.n	8005a00 <__multiply+0x134>
 8005954:	6107      	str	r7, [r0, #16]
 8005956:	b005      	add	sp, #20
 8005958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595c:	f843 2b04 	str.w	r2, [r3], #4
 8005960:	e7db      	b.n	800591a <__multiply+0x4e>
 8005962:	f8b3 a000 	ldrh.w	sl, [r3]
 8005966:	f1ba 0f00 	cmp.w	sl, #0
 800596a:	d020      	beq.n	80059ae <__multiply+0xe2>
 800596c:	46b1      	mov	r9, r6
 800596e:	2200      	movs	r2, #0
 8005970:	f105 0e14 	add.w	lr, r5, #20
 8005974:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005978:	f8d9 b000 	ldr.w	fp, [r9]
 800597c:	b2a1      	uxth	r1, r4
 800597e:	fa1f fb8b 	uxth.w	fp, fp
 8005982:	fb0a b101 	mla	r1, sl, r1, fp
 8005986:	4411      	add	r1, r2
 8005988:	f8d9 2000 	ldr.w	r2, [r9]
 800598c:	0c24      	lsrs	r4, r4, #16
 800598e:	0c12      	lsrs	r2, r2, #16
 8005990:	fb0a 2404 	mla	r4, sl, r4, r2
 8005994:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005998:	b289      	uxth	r1, r1
 800599a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800599e:	45f4      	cmp	ip, lr
 80059a0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80059a4:	f849 1b04 	str.w	r1, [r9], #4
 80059a8:	d8e4      	bhi.n	8005974 <__multiply+0xa8>
 80059aa:	9901      	ldr	r1, [sp, #4]
 80059ac:	5072      	str	r2, [r6, r1]
 80059ae:	9a03      	ldr	r2, [sp, #12]
 80059b0:	3304      	adds	r3, #4
 80059b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059b6:	f1b9 0f00 	cmp.w	r9, #0
 80059ba:	d01f      	beq.n	80059fc <__multiply+0x130>
 80059bc:	46b6      	mov	lr, r6
 80059be:	f04f 0a00 	mov.w	sl, #0
 80059c2:	6834      	ldr	r4, [r6, #0]
 80059c4:	f105 0114 	add.w	r1, r5, #20
 80059c8:	880a      	ldrh	r2, [r1, #0]
 80059ca:	f8be b002 	ldrh.w	fp, [lr, #2]
 80059ce:	b2a4      	uxth	r4, r4
 80059d0:	fb09 b202 	mla	r2, r9, r2, fp
 80059d4:	4492      	add	sl, r2
 80059d6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80059da:	f84e 4b04 	str.w	r4, [lr], #4
 80059de:	f851 4b04 	ldr.w	r4, [r1], #4
 80059e2:	f8be 2000 	ldrh.w	r2, [lr]
 80059e6:	0c24      	lsrs	r4, r4, #16
 80059e8:	fb09 2404 	mla	r4, r9, r4, r2
 80059ec:	458c      	cmp	ip, r1
 80059ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80059f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80059f6:	d8e7      	bhi.n	80059c8 <__multiply+0xfc>
 80059f8:	9a01      	ldr	r2, [sp, #4]
 80059fa:	50b4      	str	r4, [r6, r2]
 80059fc:	3604      	adds	r6, #4
 80059fe:	e7a3      	b.n	8005948 <__multiply+0x7c>
 8005a00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1a5      	bne.n	8005954 <__multiply+0x88>
 8005a08:	3f01      	subs	r7, #1
 8005a0a:	e7a1      	b.n	8005950 <__multiply+0x84>
 8005a0c:	08006723 	.word	0x08006723
 8005a10:	08006794 	.word	0x08006794

08005a14 <__pow5mult>:
 8005a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a18:	4615      	mov	r5, r2
 8005a1a:	f012 0203 	ands.w	r2, r2, #3
 8005a1e:	4606      	mov	r6, r0
 8005a20:	460f      	mov	r7, r1
 8005a22:	d007      	beq.n	8005a34 <__pow5mult+0x20>
 8005a24:	4c25      	ldr	r4, [pc, #148]	; (8005abc <__pow5mult+0xa8>)
 8005a26:	3a01      	subs	r2, #1
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a2e:	f7ff fe9f 	bl	8005770 <__multadd>
 8005a32:	4607      	mov	r7, r0
 8005a34:	10ad      	asrs	r5, r5, #2
 8005a36:	d03d      	beq.n	8005ab4 <__pow5mult+0xa0>
 8005a38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a3a:	b97c      	cbnz	r4, 8005a5c <__pow5mult+0x48>
 8005a3c:	2010      	movs	r0, #16
 8005a3e:	f7ff fe11 	bl	8005664 <malloc>
 8005a42:	4602      	mov	r2, r0
 8005a44:	6270      	str	r0, [r6, #36]	; 0x24
 8005a46:	b928      	cbnz	r0, 8005a54 <__pow5mult+0x40>
 8005a48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a4c:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <__pow5mult+0xac>)
 8005a4e:	481d      	ldr	r0, [pc, #116]	; (8005ac4 <__pow5mult+0xb0>)
 8005a50:	f000 fce0 	bl	8006414 <__assert_func>
 8005a54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a58:	6004      	str	r4, [r0, #0]
 8005a5a:	60c4      	str	r4, [r0, #12]
 8005a5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a64:	b94c      	cbnz	r4, 8005a7a <__pow5mult+0x66>
 8005a66:	f240 2171 	movw	r1, #625	; 0x271
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7ff ff18 	bl	80058a0 <__i2b>
 8005a70:	2300      	movs	r3, #0
 8005a72:	4604      	mov	r4, r0
 8005a74:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a78:	6003      	str	r3, [r0, #0]
 8005a7a:	f04f 0900 	mov.w	r9, #0
 8005a7e:	07eb      	lsls	r3, r5, #31
 8005a80:	d50a      	bpl.n	8005a98 <__pow5mult+0x84>
 8005a82:	4639      	mov	r1, r7
 8005a84:	4622      	mov	r2, r4
 8005a86:	4630      	mov	r0, r6
 8005a88:	f7ff ff20 	bl	80058cc <__multiply>
 8005a8c:	4680      	mov	r8, r0
 8005a8e:	4639      	mov	r1, r7
 8005a90:	4630      	mov	r0, r6
 8005a92:	f7ff fe4b 	bl	800572c <_Bfree>
 8005a96:	4647      	mov	r7, r8
 8005a98:	106d      	asrs	r5, r5, #1
 8005a9a:	d00b      	beq.n	8005ab4 <__pow5mult+0xa0>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	b938      	cbnz	r0, 8005ab0 <__pow5mult+0x9c>
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f7ff ff11 	bl	80058cc <__multiply>
 8005aaa:	6020      	str	r0, [r4, #0]
 8005aac:	f8c0 9000 	str.w	r9, [r0]
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	e7e4      	b.n	8005a7e <__pow5mult+0x6a>
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aba:	bf00      	nop
 8005abc:	080068e8 	.word	0x080068e8
 8005ac0:	080066ad 	.word	0x080066ad
 8005ac4:	08006794 	.word	0x08006794

08005ac8 <__lshift>:
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	460c      	mov	r4, r1
 8005ace:	4607      	mov	r7, r0
 8005ad0:	4691      	mov	r9, r2
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	6849      	ldr	r1, [r1, #4]
 8005ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ae0:	f108 0601 	add.w	r6, r8, #1
 8005ae4:	42b3      	cmp	r3, r6
 8005ae6:	db0b      	blt.n	8005b00 <__lshift+0x38>
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f7ff fddf 	bl	80056ac <_Balloc>
 8005aee:	4605      	mov	r5, r0
 8005af0:	b948      	cbnz	r0, 8005b06 <__lshift+0x3e>
 8005af2:	4602      	mov	r2, r0
 8005af4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005af8:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <__lshift+0xd0>)
 8005afa:	4828      	ldr	r0, [pc, #160]	; (8005b9c <__lshift+0xd4>)
 8005afc:	f000 fc8a 	bl	8006414 <__assert_func>
 8005b00:	3101      	adds	r1, #1
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	e7ee      	b.n	8005ae4 <__lshift+0x1c>
 8005b06:	2300      	movs	r3, #0
 8005b08:	f100 0114 	add.w	r1, r0, #20
 8005b0c:	f100 0210 	add.w	r2, r0, #16
 8005b10:	4618      	mov	r0, r3
 8005b12:	4553      	cmp	r3, sl
 8005b14:	db33      	blt.n	8005b7e <__lshift+0xb6>
 8005b16:	6920      	ldr	r0, [r4, #16]
 8005b18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b1c:	f104 0314 	add.w	r3, r4, #20
 8005b20:	f019 091f 	ands.w	r9, r9, #31
 8005b24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b2c:	d02b      	beq.n	8005b86 <__lshift+0xbe>
 8005b2e:	468a      	mov	sl, r1
 8005b30:	2200      	movs	r2, #0
 8005b32:	f1c9 0e20 	rsb	lr, r9, #32
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	fa00 f009 	lsl.w	r0, r0, r9
 8005b3c:	4302      	orrs	r2, r0
 8005b3e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b46:	459c      	cmp	ip, r3
 8005b48:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b4c:	d8f3      	bhi.n	8005b36 <__lshift+0x6e>
 8005b4e:	ebac 0304 	sub.w	r3, ip, r4
 8005b52:	3b15      	subs	r3, #21
 8005b54:	f023 0303 	bic.w	r3, r3, #3
 8005b58:	3304      	adds	r3, #4
 8005b5a:	f104 0015 	add.w	r0, r4, #21
 8005b5e:	4584      	cmp	ip, r0
 8005b60:	bf38      	it	cc
 8005b62:	2304      	movcc	r3, #4
 8005b64:	50ca      	str	r2, [r1, r3]
 8005b66:	b10a      	cbz	r2, 8005b6c <__lshift+0xa4>
 8005b68:	f108 0602 	add.w	r6, r8, #2
 8005b6c:	3e01      	subs	r6, #1
 8005b6e:	4638      	mov	r0, r7
 8005b70:	4621      	mov	r1, r4
 8005b72:	612e      	str	r6, [r5, #16]
 8005b74:	f7ff fdda 	bl	800572c <_Bfree>
 8005b78:	4628      	mov	r0, r5
 8005b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b82:	3301      	adds	r3, #1
 8005b84:	e7c5      	b.n	8005b12 <__lshift+0x4a>
 8005b86:	3904      	subs	r1, #4
 8005b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b8c:	459c      	cmp	ip, r3
 8005b8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b92:	d8f9      	bhi.n	8005b88 <__lshift+0xc0>
 8005b94:	e7ea      	b.n	8005b6c <__lshift+0xa4>
 8005b96:	bf00      	nop
 8005b98:	08006723 	.word	0x08006723
 8005b9c:	08006794 	.word	0x08006794

08005ba0 <__mcmp>:
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	690a      	ldr	r2, [r1, #16]
 8005ba4:	6900      	ldr	r0, [r0, #16]
 8005ba6:	b530      	push	{r4, r5, lr}
 8005ba8:	1a80      	subs	r0, r0, r2
 8005baa:	d10d      	bne.n	8005bc8 <__mcmp+0x28>
 8005bac:	3314      	adds	r3, #20
 8005bae:	3114      	adds	r1, #20
 8005bb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005bc0:	4295      	cmp	r5, r2
 8005bc2:	d002      	beq.n	8005bca <__mcmp+0x2a>
 8005bc4:	d304      	bcc.n	8005bd0 <__mcmp+0x30>
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	bd30      	pop	{r4, r5, pc}
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	d3f4      	bcc.n	8005bb8 <__mcmp+0x18>
 8005bce:	e7fb      	b.n	8005bc8 <__mcmp+0x28>
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd4:	e7f8      	b.n	8005bc8 <__mcmp+0x28>
	...

08005bd8 <__mdiff>:
 8005bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	460c      	mov	r4, r1
 8005bde:	4606      	mov	r6, r0
 8005be0:	4611      	mov	r1, r2
 8005be2:	4620      	mov	r0, r4
 8005be4:	4692      	mov	sl, r2
 8005be6:	f7ff ffdb 	bl	8005ba0 <__mcmp>
 8005bea:	1e05      	subs	r5, r0, #0
 8005bec:	d111      	bne.n	8005c12 <__mdiff+0x3a>
 8005bee:	4629      	mov	r1, r5
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f7ff fd5b 	bl	80056ac <_Balloc>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	b928      	cbnz	r0, 8005c06 <__mdiff+0x2e>
 8005bfa:	f240 2132 	movw	r1, #562	; 0x232
 8005bfe:	4b3c      	ldr	r3, [pc, #240]	; (8005cf0 <__mdiff+0x118>)
 8005c00:	483c      	ldr	r0, [pc, #240]	; (8005cf4 <__mdiff+0x11c>)
 8005c02:	f000 fc07 	bl	8006414 <__assert_func>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	bfa4      	itt	ge
 8005c14:	4653      	movge	r3, sl
 8005c16:	46a2      	movge	sl, r4
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005c1e:	bfa6      	itte	ge
 8005c20:	461c      	movge	r4, r3
 8005c22:	2500      	movge	r5, #0
 8005c24:	2501      	movlt	r5, #1
 8005c26:	f7ff fd41 	bl	80056ac <_Balloc>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	b918      	cbnz	r0, 8005c36 <__mdiff+0x5e>
 8005c2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c32:	4b2f      	ldr	r3, [pc, #188]	; (8005cf0 <__mdiff+0x118>)
 8005c34:	e7e4      	b.n	8005c00 <__mdiff+0x28>
 8005c36:	f100 0814 	add.w	r8, r0, #20
 8005c3a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005c3e:	60c5      	str	r5, [r0, #12]
 8005c40:	f04f 0c00 	mov.w	ip, #0
 8005c44:	f10a 0514 	add.w	r5, sl, #20
 8005c48:	f10a 0010 	add.w	r0, sl, #16
 8005c4c:	46c2      	mov	sl, r8
 8005c4e:	6926      	ldr	r6, [r4, #16]
 8005c50:	f104 0914 	add.w	r9, r4, #20
 8005c54:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005c58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c5c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005c60:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c64:	fa1f f18b 	uxth.w	r1, fp
 8005c68:	4461      	add	r1, ip
 8005c6a:	fa1f fc83 	uxth.w	ip, r3
 8005c6e:	0c1b      	lsrs	r3, r3, #16
 8005c70:	eba1 010c 	sub.w	r1, r1, ip
 8005c74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c78:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c7c:	b289      	uxth	r1, r1
 8005c7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005c82:	454e      	cmp	r6, r9
 8005c84:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005c88:	f84a 3b04 	str.w	r3, [sl], #4
 8005c8c:	d8e6      	bhi.n	8005c5c <__mdiff+0x84>
 8005c8e:	1b33      	subs	r3, r6, r4
 8005c90:	3b15      	subs	r3, #21
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	3415      	adds	r4, #21
 8005c98:	3304      	adds	r3, #4
 8005c9a:	42a6      	cmp	r6, r4
 8005c9c:	bf38      	it	cc
 8005c9e:	2304      	movcc	r3, #4
 8005ca0:	441d      	add	r5, r3
 8005ca2:	4443      	add	r3, r8
 8005ca4:	461e      	mov	r6, r3
 8005ca6:	462c      	mov	r4, r5
 8005ca8:	4574      	cmp	r4, lr
 8005caa:	d30e      	bcc.n	8005cca <__mdiff+0xf2>
 8005cac:	f10e 0103 	add.w	r1, lr, #3
 8005cb0:	1b49      	subs	r1, r1, r5
 8005cb2:	f021 0103 	bic.w	r1, r1, #3
 8005cb6:	3d03      	subs	r5, #3
 8005cb8:	45ae      	cmp	lr, r5
 8005cba:	bf38      	it	cc
 8005cbc:	2100      	movcc	r1, #0
 8005cbe:	4419      	add	r1, r3
 8005cc0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005cc4:	b18b      	cbz	r3, 8005cea <__mdiff+0x112>
 8005cc6:	6117      	str	r7, [r2, #16]
 8005cc8:	e7a0      	b.n	8005c0c <__mdiff+0x34>
 8005cca:	f854 8b04 	ldr.w	r8, [r4], #4
 8005cce:	fa1f f188 	uxth.w	r1, r8
 8005cd2:	4461      	add	r1, ip
 8005cd4:	1408      	asrs	r0, r1, #16
 8005cd6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005cda:	b289      	uxth	r1, r1
 8005cdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005ce0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ce4:	f846 1b04 	str.w	r1, [r6], #4
 8005ce8:	e7de      	b.n	8005ca8 <__mdiff+0xd0>
 8005cea:	3f01      	subs	r7, #1
 8005cec:	e7e8      	b.n	8005cc0 <__mdiff+0xe8>
 8005cee:	bf00      	nop
 8005cf0:	08006723 	.word	0x08006723
 8005cf4:	08006794 	.word	0x08006794

08005cf8 <__d2b>:
 8005cf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005d02:	4690      	mov	r8, r2
 8005d04:	461d      	mov	r5, r3
 8005d06:	f7ff fcd1 	bl	80056ac <_Balloc>
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	b930      	cbnz	r0, 8005d1c <__d2b+0x24>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	f240 310a 	movw	r1, #778	; 0x30a
 8005d14:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <__d2b+0xb0>)
 8005d16:	4825      	ldr	r0, [pc, #148]	; (8005dac <__d2b+0xb4>)
 8005d18:	f000 fb7c 	bl	8006414 <__assert_func>
 8005d1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005d20:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005d24:	bb2d      	cbnz	r5, 8005d72 <__d2b+0x7a>
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	f1b8 0300 	subs.w	r3, r8, #0
 8005d2c:	d026      	beq.n	8005d7c <__d2b+0x84>
 8005d2e:	4668      	mov	r0, sp
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	f7ff fd87 	bl	8005844 <__lo0bits>
 8005d36:	9900      	ldr	r1, [sp, #0]
 8005d38:	b1f0      	cbz	r0, 8005d78 <__d2b+0x80>
 8005d3a:	9a01      	ldr	r2, [sp, #4]
 8005d3c:	f1c0 0320 	rsb	r3, r0, #32
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	430b      	orrs	r3, r1
 8005d46:	40c2      	lsrs	r2, r0
 8005d48:	6163      	str	r3, [r4, #20]
 8005d4a:	9201      	str	r2, [sp, #4]
 8005d4c:	9b01      	ldr	r3, [sp, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2102      	movne	r1, #2
 8005d54:	2101      	moveq	r1, #1
 8005d56:	61a3      	str	r3, [r4, #24]
 8005d58:	6121      	str	r1, [r4, #16]
 8005d5a:	b1c5      	cbz	r5, 8005d8e <__d2b+0x96>
 8005d5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d60:	4405      	add	r5, r0
 8005d62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d66:	603d      	str	r5, [r7, #0]
 8005d68:	6030      	str	r0, [r6, #0]
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	b002      	add	sp, #8
 8005d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d76:	e7d6      	b.n	8005d26 <__d2b+0x2e>
 8005d78:	6161      	str	r1, [r4, #20]
 8005d7a:	e7e7      	b.n	8005d4c <__d2b+0x54>
 8005d7c:	a801      	add	r0, sp, #4
 8005d7e:	f7ff fd61 	bl	8005844 <__lo0bits>
 8005d82:	2101      	movs	r1, #1
 8005d84:	9b01      	ldr	r3, [sp, #4]
 8005d86:	6121      	str	r1, [r4, #16]
 8005d88:	6163      	str	r3, [r4, #20]
 8005d8a:	3020      	adds	r0, #32
 8005d8c:	e7e5      	b.n	8005d5a <__d2b+0x62>
 8005d8e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005d92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d96:	6038      	str	r0, [r7, #0]
 8005d98:	6918      	ldr	r0, [r3, #16]
 8005d9a:	f7ff fd33 	bl	8005804 <__hi0bits>
 8005d9e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005da2:	6031      	str	r1, [r6, #0]
 8005da4:	e7e1      	b.n	8005d6a <__d2b+0x72>
 8005da6:	bf00      	nop
 8005da8:	08006723 	.word	0x08006723
 8005dac:	08006794 	.word	0x08006794

08005db0 <_calloc_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	fb02 f501 	mul.w	r5, r2, r1
 8005db6:	4629      	mov	r1, r5
 8005db8:	f000 f854 	bl	8005e64 <_malloc_r>
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	b118      	cbz	r0, 8005dc8 <_calloc_r+0x18>
 8005dc0:	462a      	mov	r2, r5
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	f7fd fe68 	bl	8003a98 <memset>
 8005dc8:	4620      	mov	r0, r4
 8005dca:	bd38      	pop	{r3, r4, r5, pc}

08005dcc <_free_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4605      	mov	r5, r0
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	d043      	beq.n	8005e5c <_free_r+0x90>
 8005dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd8:	1f0c      	subs	r4, r1, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	bfb8      	it	lt
 8005dde:	18e4      	addlt	r4, r4, r3
 8005de0:	f000 fb9e 	bl	8006520 <__malloc_lock>
 8005de4:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <_free_r+0x94>)
 8005de6:	6813      	ldr	r3, [r2, #0]
 8005de8:	4610      	mov	r0, r2
 8005dea:	b933      	cbnz	r3, 8005dfa <_free_r+0x2e>
 8005dec:	6063      	str	r3, [r4, #4]
 8005dee:	6014      	str	r4, [r2, #0]
 8005df0:	4628      	mov	r0, r5
 8005df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005df6:	f000 bb99 	b.w	800652c <__malloc_unlock>
 8005dfa:	42a3      	cmp	r3, r4
 8005dfc:	d90a      	bls.n	8005e14 <_free_r+0x48>
 8005dfe:	6821      	ldr	r1, [r4, #0]
 8005e00:	1862      	adds	r2, r4, r1
 8005e02:	4293      	cmp	r3, r2
 8005e04:	bf01      	itttt	eq
 8005e06:	681a      	ldreq	r2, [r3, #0]
 8005e08:	685b      	ldreq	r3, [r3, #4]
 8005e0a:	1852      	addeq	r2, r2, r1
 8005e0c:	6022      	streq	r2, [r4, #0]
 8005e0e:	6063      	str	r3, [r4, #4]
 8005e10:	6004      	str	r4, [r0, #0]
 8005e12:	e7ed      	b.n	8005df0 <_free_r+0x24>
 8005e14:	461a      	mov	r2, r3
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	b10b      	cbz	r3, 8005e1e <_free_r+0x52>
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	d9fa      	bls.n	8005e14 <_free_r+0x48>
 8005e1e:	6811      	ldr	r1, [r2, #0]
 8005e20:	1850      	adds	r0, r2, r1
 8005e22:	42a0      	cmp	r0, r4
 8005e24:	d10b      	bne.n	8005e3e <_free_r+0x72>
 8005e26:	6820      	ldr	r0, [r4, #0]
 8005e28:	4401      	add	r1, r0
 8005e2a:	1850      	adds	r0, r2, r1
 8005e2c:	4283      	cmp	r3, r0
 8005e2e:	6011      	str	r1, [r2, #0]
 8005e30:	d1de      	bne.n	8005df0 <_free_r+0x24>
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	4401      	add	r1, r0
 8005e38:	6011      	str	r1, [r2, #0]
 8005e3a:	6053      	str	r3, [r2, #4]
 8005e3c:	e7d8      	b.n	8005df0 <_free_r+0x24>
 8005e3e:	d902      	bls.n	8005e46 <_free_r+0x7a>
 8005e40:	230c      	movs	r3, #12
 8005e42:	602b      	str	r3, [r5, #0]
 8005e44:	e7d4      	b.n	8005df0 <_free_r+0x24>
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	1821      	adds	r1, r4, r0
 8005e4a:	428b      	cmp	r3, r1
 8005e4c:	bf01      	itttt	eq
 8005e4e:	6819      	ldreq	r1, [r3, #0]
 8005e50:	685b      	ldreq	r3, [r3, #4]
 8005e52:	1809      	addeq	r1, r1, r0
 8005e54:	6021      	streq	r1, [r4, #0]
 8005e56:	6063      	str	r3, [r4, #4]
 8005e58:	6054      	str	r4, [r2, #4]
 8005e5a:	e7c9      	b.n	8005df0 <_free_r+0x24>
 8005e5c:	bd38      	pop	{r3, r4, r5, pc}
 8005e5e:	bf00      	nop
 8005e60:	200001fc 	.word	0x200001fc

08005e64 <_malloc_r>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	1ccd      	adds	r5, r1, #3
 8005e68:	f025 0503 	bic.w	r5, r5, #3
 8005e6c:	3508      	adds	r5, #8
 8005e6e:	2d0c      	cmp	r5, #12
 8005e70:	bf38      	it	cc
 8005e72:	250c      	movcc	r5, #12
 8005e74:	2d00      	cmp	r5, #0
 8005e76:	4606      	mov	r6, r0
 8005e78:	db01      	blt.n	8005e7e <_malloc_r+0x1a>
 8005e7a:	42a9      	cmp	r1, r5
 8005e7c:	d903      	bls.n	8005e86 <_malloc_r+0x22>
 8005e7e:	230c      	movs	r3, #12
 8005e80:	6033      	str	r3, [r6, #0]
 8005e82:	2000      	movs	r0, #0
 8005e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e86:	f000 fb4b 	bl	8006520 <__malloc_lock>
 8005e8a:	4921      	ldr	r1, [pc, #132]	; (8005f10 <_malloc_r+0xac>)
 8005e8c:	680a      	ldr	r2, [r1, #0]
 8005e8e:	4614      	mov	r4, r2
 8005e90:	b99c      	cbnz	r4, 8005eba <_malloc_r+0x56>
 8005e92:	4f20      	ldr	r7, [pc, #128]	; (8005f14 <_malloc_r+0xb0>)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	b923      	cbnz	r3, 8005ea2 <_malloc_r+0x3e>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f000 f994 	bl	80061c8 <_sbrk_r>
 8005ea0:	6038      	str	r0, [r7, #0]
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f000 f98f 	bl	80061c8 <_sbrk_r>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d123      	bne.n	8005ef6 <_malloc_r+0x92>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	6033      	str	r3, [r6, #0]
 8005eb4:	f000 fb3a 	bl	800652c <__malloc_unlock>
 8005eb8:	e7e3      	b.n	8005e82 <_malloc_r+0x1e>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	1b5b      	subs	r3, r3, r5
 8005ebe:	d417      	bmi.n	8005ef0 <_malloc_r+0x8c>
 8005ec0:	2b0b      	cmp	r3, #11
 8005ec2:	d903      	bls.n	8005ecc <_malloc_r+0x68>
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	441c      	add	r4, r3
 8005ec8:	6025      	str	r5, [r4, #0]
 8005eca:	e004      	b.n	8005ed6 <_malloc_r+0x72>
 8005ecc:	6863      	ldr	r3, [r4, #4]
 8005ece:	42a2      	cmp	r2, r4
 8005ed0:	bf0c      	ite	eq
 8005ed2:	600b      	streq	r3, [r1, #0]
 8005ed4:	6053      	strne	r3, [r2, #4]
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f000 fb28 	bl	800652c <__malloc_unlock>
 8005edc:	f104 000b 	add.w	r0, r4, #11
 8005ee0:	1d23      	adds	r3, r4, #4
 8005ee2:	f020 0007 	bic.w	r0, r0, #7
 8005ee6:	1ac2      	subs	r2, r0, r3
 8005ee8:	d0cc      	beq.n	8005e84 <_malloc_r+0x20>
 8005eea:	1a1b      	subs	r3, r3, r0
 8005eec:	50a3      	str	r3, [r4, r2]
 8005eee:	e7c9      	b.n	8005e84 <_malloc_r+0x20>
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	6864      	ldr	r4, [r4, #4]
 8005ef4:	e7cc      	b.n	8005e90 <_malloc_r+0x2c>
 8005ef6:	1cc4      	adds	r4, r0, #3
 8005ef8:	f024 0403 	bic.w	r4, r4, #3
 8005efc:	42a0      	cmp	r0, r4
 8005efe:	d0e3      	beq.n	8005ec8 <_malloc_r+0x64>
 8005f00:	1a21      	subs	r1, r4, r0
 8005f02:	4630      	mov	r0, r6
 8005f04:	f000 f960 	bl	80061c8 <_sbrk_r>
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d1dd      	bne.n	8005ec8 <_malloc_r+0x64>
 8005f0c:	e7cf      	b.n	8005eae <_malloc_r+0x4a>
 8005f0e:	bf00      	nop
 8005f10:	200001fc 	.word	0x200001fc
 8005f14:	20000200 	.word	0x20000200

08005f18 <__sfputc_r>:
 8005f18:	6893      	ldr	r3, [r2, #8]
 8005f1a:	b410      	push	{r4}
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	6093      	str	r3, [r2, #8]
 8005f22:	da07      	bge.n	8005f34 <__sfputc_r+0x1c>
 8005f24:	6994      	ldr	r4, [r2, #24]
 8005f26:	42a3      	cmp	r3, r4
 8005f28:	db01      	blt.n	8005f2e <__sfputc_r+0x16>
 8005f2a:	290a      	cmp	r1, #10
 8005f2c:	d102      	bne.n	8005f34 <__sfputc_r+0x1c>
 8005f2e:	bc10      	pop	{r4}
 8005f30:	f000 b99e 	b.w	8006270 <__swbuf_r>
 8005f34:	6813      	ldr	r3, [r2, #0]
 8005f36:	1c58      	adds	r0, r3, #1
 8005f38:	6010      	str	r0, [r2, #0]
 8005f3a:	7019      	strb	r1, [r3, #0]
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	bc10      	pop	{r4}
 8005f40:	4770      	bx	lr

08005f42 <__sfputs_r>:
 8005f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f44:	4606      	mov	r6, r0
 8005f46:	460f      	mov	r7, r1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	18d5      	adds	r5, r2, r3
 8005f4c:	42ac      	cmp	r4, r5
 8005f4e:	d101      	bne.n	8005f54 <__sfputs_r+0x12>
 8005f50:	2000      	movs	r0, #0
 8005f52:	e007      	b.n	8005f64 <__sfputs_r+0x22>
 8005f54:	463a      	mov	r2, r7
 8005f56:	4630      	mov	r0, r6
 8005f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f5c:	f7ff ffdc 	bl	8005f18 <__sfputc_r>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d1f3      	bne.n	8005f4c <__sfputs_r+0xa>
 8005f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f68 <_vfiprintf_r>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	460d      	mov	r5, r1
 8005f6e:	4614      	mov	r4, r2
 8005f70:	4698      	mov	r8, r3
 8005f72:	4606      	mov	r6, r0
 8005f74:	b09d      	sub	sp, #116	; 0x74
 8005f76:	b118      	cbz	r0, 8005f80 <_vfiprintf_r+0x18>
 8005f78:	6983      	ldr	r3, [r0, #24]
 8005f7a:	b90b      	cbnz	r3, 8005f80 <_vfiprintf_r+0x18>
 8005f7c:	f7ff fa68 	bl	8005450 <__sinit>
 8005f80:	4b89      	ldr	r3, [pc, #548]	; (80061a8 <_vfiprintf_r+0x240>)
 8005f82:	429d      	cmp	r5, r3
 8005f84:	d11b      	bne.n	8005fbe <_vfiprintf_r+0x56>
 8005f86:	6875      	ldr	r5, [r6, #4]
 8005f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f8a:	07d9      	lsls	r1, r3, #31
 8005f8c:	d405      	bmi.n	8005f9a <_vfiprintf_r+0x32>
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	059a      	lsls	r2, r3, #22
 8005f92:	d402      	bmi.n	8005f9a <_vfiprintf_r+0x32>
 8005f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f96:	f7ff fafe 	bl	8005596 <__retarget_lock_acquire_recursive>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	071b      	lsls	r3, r3, #28
 8005f9e:	d501      	bpl.n	8005fa4 <_vfiprintf_r+0x3c>
 8005fa0:	692b      	ldr	r3, [r5, #16]
 8005fa2:	b9eb      	cbnz	r3, 8005fe0 <_vfiprintf_r+0x78>
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f000 f9c6 	bl	8006338 <__swsetup_r>
 8005fac:	b1c0      	cbz	r0, 8005fe0 <_vfiprintf_r+0x78>
 8005fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fb0:	07dc      	lsls	r4, r3, #31
 8005fb2:	d50e      	bpl.n	8005fd2 <_vfiprintf_r+0x6a>
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	b01d      	add	sp, #116	; 0x74
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbe:	4b7b      	ldr	r3, [pc, #492]	; (80061ac <_vfiprintf_r+0x244>)
 8005fc0:	429d      	cmp	r5, r3
 8005fc2:	d101      	bne.n	8005fc8 <_vfiprintf_r+0x60>
 8005fc4:	68b5      	ldr	r5, [r6, #8]
 8005fc6:	e7df      	b.n	8005f88 <_vfiprintf_r+0x20>
 8005fc8:	4b79      	ldr	r3, [pc, #484]	; (80061b0 <_vfiprintf_r+0x248>)
 8005fca:	429d      	cmp	r5, r3
 8005fcc:	bf08      	it	eq
 8005fce:	68f5      	ldreq	r5, [r6, #12]
 8005fd0:	e7da      	b.n	8005f88 <_vfiprintf_r+0x20>
 8005fd2:	89ab      	ldrh	r3, [r5, #12]
 8005fd4:	0598      	lsls	r0, r3, #22
 8005fd6:	d4ed      	bmi.n	8005fb4 <_vfiprintf_r+0x4c>
 8005fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fda:	f7ff fadd 	bl	8005598 <__retarget_lock_release_recursive>
 8005fde:	e7e9      	b.n	8005fb4 <_vfiprintf_r+0x4c>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fea:	2330      	movs	r3, #48	; 0x30
 8005fec:	f04f 0901 	mov.w	r9, #1
 8005ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ff4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80061b4 <_vfiprintf_r+0x24c>
 8005ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ffc:	4623      	mov	r3, r4
 8005ffe:	469a      	mov	sl, r3
 8006000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006004:	b10a      	cbz	r2, 800600a <_vfiprintf_r+0xa2>
 8006006:	2a25      	cmp	r2, #37	; 0x25
 8006008:	d1f9      	bne.n	8005ffe <_vfiprintf_r+0x96>
 800600a:	ebba 0b04 	subs.w	fp, sl, r4
 800600e:	d00b      	beq.n	8006028 <_vfiprintf_r+0xc0>
 8006010:	465b      	mov	r3, fp
 8006012:	4622      	mov	r2, r4
 8006014:	4629      	mov	r1, r5
 8006016:	4630      	mov	r0, r6
 8006018:	f7ff ff93 	bl	8005f42 <__sfputs_r>
 800601c:	3001      	adds	r0, #1
 800601e:	f000 80aa 	beq.w	8006176 <_vfiprintf_r+0x20e>
 8006022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006024:	445a      	add	r2, fp
 8006026:	9209      	str	r2, [sp, #36]	; 0x24
 8006028:	f89a 3000 	ldrb.w	r3, [sl]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80a2 	beq.w	8006176 <_vfiprintf_r+0x20e>
 8006032:	2300      	movs	r3, #0
 8006034:	f04f 32ff 	mov.w	r2, #4294967295
 8006038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800603c:	f10a 0a01 	add.w	sl, sl, #1
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	9307      	str	r3, [sp, #28]
 8006044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006048:	931a      	str	r3, [sp, #104]	; 0x68
 800604a:	4654      	mov	r4, sl
 800604c:	2205      	movs	r2, #5
 800604e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006052:	4858      	ldr	r0, [pc, #352]	; (80061b4 <_vfiprintf_r+0x24c>)
 8006054:	f7ff fb0e 	bl	8005674 <memchr>
 8006058:	9a04      	ldr	r2, [sp, #16]
 800605a:	b9d8      	cbnz	r0, 8006094 <_vfiprintf_r+0x12c>
 800605c:	06d1      	lsls	r1, r2, #27
 800605e:	bf44      	itt	mi
 8006060:	2320      	movmi	r3, #32
 8006062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006066:	0713      	lsls	r3, r2, #28
 8006068:	bf44      	itt	mi
 800606a:	232b      	movmi	r3, #43	; 0x2b
 800606c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006070:	f89a 3000 	ldrb.w	r3, [sl]
 8006074:	2b2a      	cmp	r3, #42	; 0x2a
 8006076:	d015      	beq.n	80060a4 <_vfiprintf_r+0x13c>
 8006078:	4654      	mov	r4, sl
 800607a:	2000      	movs	r0, #0
 800607c:	f04f 0c0a 	mov.w	ip, #10
 8006080:	9a07      	ldr	r2, [sp, #28]
 8006082:	4621      	mov	r1, r4
 8006084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006088:	3b30      	subs	r3, #48	; 0x30
 800608a:	2b09      	cmp	r3, #9
 800608c:	d94e      	bls.n	800612c <_vfiprintf_r+0x1c4>
 800608e:	b1b0      	cbz	r0, 80060be <_vfiprintf_r+0x156>
 8006090:	9207      	str	r2, [sp, #28]
 8006092:	e014      	b.n	80060be <_vfiprintf_r+0x156>
 8006094:	eba0 0308 	sub.w	r3, r0, r8
 8006098:	fa09 f303 	lsl.w	r3, r9, r3
 800609c:	4313      	orrs	r3, r2
 800609e:	46a2      	mov	sl, r4
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	e7d2      	b.n	800604a <_vfiprintf_r+0xe2>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	1d19      	adds	r1, r3, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	9103      	str	r1, [sp, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bfbb      	ittet	lt
 80060b0:	425b      	neglt	r3, r3
 80060b2:	f042 0202 	orrlt.w	r2, r2, #2
 80060b6:	9307      	strge	r3, [sp, #28]
 80060b8:	9307      	strlt	r3, [sp, #28]
 80060ba:	bfb8      	it	lt
 80060bc:	9204      	strlt	r2, [sp, #16]
 80060be:	7823      	ldrb	r3, [r4, #0]
 80060c0:	2b2e      	cmp	r3, #46	; 0x2e
 80060c2:	d10c      	bne.n	80060de <_vfiprintf_r+0x176>
 80060c4:	7863      	ldrb	r3, [r4, #1]
 80060c6:	2b2a      	cmp	r3, #42	; 0x2a
 80060c8:	d135      	bne.n	8006136 <_vfiprintf_r+0x1ce>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	3402      	adds	r4, #2
 80060ce:	1d1a      	adds	r2, r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	9203      	str	r2, [sp, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bfb8      	it	lt
 80060d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80060dc:	9305      	str	r3, [sp, #20]
 80060de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80061c4 <_vfiprintf_r+0x25c>
 80060e2:	2203      	movs	r2, #3
 80060e4:	4650      	mov	r0, sl
 80060e6:	7821      	ldrb	r1, [r4, #0]
 80060e8:	f7ff fac4 	bl	8005674 <memchr>
 80060ec:	b140      	cbz	r0, 8006100 <_vfiprintf_r+0x198>
 80060ee:	2340      	movs	r3, #64	; 0x40
 80060f0:	eba0 000a 	sub.w	r0, r0, sl
 80060f4:	fa03 f000 	lsl.w	r0, r3, r0
 80060f8:	9b04      	ldr	r3, [sp, #16]
 80060fa:	3401      	adds	r4, #1
 80060fc:	4303      	orrs	r3, r0
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006104:	2206      	movs	r2, #6
 8006106:	482c      	ldr	r0, [pc, #176]	; (80061b8 <_vfiprintf_r+0x250>)
 8006108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800610c:	f7ff fab2 	bl	8005674 <memchr>
 8006110:	2800      	cmp	r0, #0
 8006112:	d03f      	beq.n	8006194 <_vfiprintf_r+0x22c>
 8006114:	4b29      	ldr	r3, [pc, #164]	; (80061bc <_vfiprintf_r+0x254>)
 8006116:	bb1b      	cbnz	r3, 8006160 <_vfiprintf_r+0x1f8>
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	3307      	adds	r3, #7
 800611c:	f023 0307 	bic.w	r3, r3, #7
 8006120:	3308      	adds	r3, #8
 8006122:	9303      	str	r3, [sp, #12]
 8006124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006126:	443b      	add	r3, r7
 8006128:	9309      	str	r3, [sp, #36]	; 0x24
 800612a:	e767      	b.n	8005ffc <_vfiprintf_r+0x94>
 800612c:	460c      	mov	r4, r1
 800612e:	2001      	movs	r0, #1
 8006130:	fb0c 3202 	mla	r2, ip, r2, r3
 8006134:	e7a5      	b.n	8006082 <_vfiprintf_r+0x11a>
 8006136:	2300      	movs	r3, #0
 8006138:	f04f 0c0a 	mov.w	ip, #10
 800613c:	4619      	mov	r1, r3
 800613e:	3401      	adds	r4, #1
 8006140:	9305      	str	r3, [sp, #20]
 8006142:	4620      	mov	r0, r4
 8006144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006148:	3a30      	subs	r2, #48	; 0x30
 800614a:	2a09      	cmp	r2, #9
 800614c:	d903      	bls.n	8006156 <_vfiprintf_r+0x1ee>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0c5      	beq.n	80060de <_vfiprintf_r+0x176>
 8006152:	9105      	str	r1, [sp, #20]
 8006154:	e7c3      	b.n	80060de <_vfiprintf_r+0x176>
 8006156:	4604      	mov	r4, r0
 8006158:	2301      	movs	r3, #1
 800615a:	fb0c 2101 	mla	r1, ip, r1, r2
 800615e:	e7f0      	b.n	8006142 <_vfiprintf_r+0x1da>
 8006160:	ab03      	add	r3, sp, #12
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	462a      	mov	r2, r5
 8006166:	4630      	mov	r0, r6
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <_vfiprintf_r+0x258>)
 800616a:	a904      	add	r1, sp, #16
 800616c:	f7fd fd3a 	bl	8003be4 <_printf_float>
 8006170:	4607      	mov	r7, r0
 8006172:	1c78      	adds	r0, r7, #1
 8006174:	d1d6      	bne.n	8006124 <_vfiprintf_r+0x1bc>
 8006176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006178:	07d9      	lsls	r1, r3, #31
 800617a:	d405      	bmi.n	8006188 <_vfiprintf_r+0x220>
 800617c:	89ab      	ldrh	r3, [r5, #12]
 800617e:	059a      	lsls	r2, r3, #22
 8006180:	d402      	bmi.n	8006188 <_vfiprintf_r+0x220>
 8006182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006184:	f7ff fa08 	bl	8005598 <__retarget_lock_release_recursive>
 8006188:	89ab      	ldrh	r3, [r5, #12]
 800618a:	065b      	lsls	r3, r3, #25
 800618c:	f53f af12 	bmi.w	8005fb4 <_vfiprintf_r+0x4c>
 8006190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006192:	e711      	b.n	8005fb8 <_vfiprintf_r+0x50>
 8006194:	ab03      	add	r3, sp, #12
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	462a      	mov	r2, r5
 800619a:	4630      	mov	r0, r6
 800619c:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <_vfiprintf_r+0x258>)
 800619e:	a904      	add	r1, sp, #16
 80061a0:	f7fd ffbc 	bl	800411c <_printf_i>
 80061a4:	e7e4      	b.n	8006170 <_vfiprintf_r+0x208>
 80061a6:	bf00      	nop
 80061a8:	08006754 	.word	0x08006754
 80061ac:	08006774 	.word	0x08006774
 80061b0:	08006734 	.word	0x08006734
 80061b4:	080068f4 	.word	0x080068f4
 80061b8:	080068fe 	.word	0x080068fe
 80061bc:	08003be5 	.word	0x08003be5
 80061c0:	08005f43 	.word	0x08005f43
 80061c4:	080068fa 	.word	0x080068fa

080061c8 <_sbrk_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	2300      	movs	r3, #0
 80061cc:	4d05      	ldr	r5, [pc, #20]	; (80061e4 <_sbrk_r+0x1c>)
 80061ce:	4604      	mov	r4, r0
 80061d0:	4608      	mov	r0, r1
 80061d2:	602b      	str	r3, [r5, #0]
 80061d4:	f7fa ff5c 	bl	8001090 <_sbrk>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_sbrk_r+0x1a>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_sbrk_r+0x1a>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	200002c8 	.word	0x200002c8

080061e8 <__sread>:
 80061e8:	b510      	push	{r4, lr}
 80061ea:	460c      	mov	r4, r1
 80061ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f0:	f000 f9a2 	bl	8006538 <_read_r>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	bfab      	itete	ge
 80061f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061fa:	89a3      	ldrhlt	r3, [r4, #12]
 80061fc:	181b      	addge	r3, r3, r0
 80061fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006202:	bfac      	ite	ge
 8006204:	6563      	strge	r3, [r4, #84]	; 0x54
 8006206:	81a3      	strhlt	r3, [r4, #12]
 8006208:	bd10      	pop	{r4, pc}

0800620a <__swrite>:
 800620a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620e:	461f      	mov	r7, r3
 8006210:	898b      	ldrh	r3, [r1, #12]
 8006212:	4605      	mov	r5, r0
 8006214:	05db      	lsls	r3, r3, #23
 8006216:	460c      	mov	r4, r1
 8006218:	4616      	mov	r6, r2
 800621a:	d505      	bpl.n	8006228 <__swrite+0x1e>
 800621c:	2302      	movs	r3, #2
 800621e:	2200      	movs	r2, #0
 8006220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006224:	f000 f958 	bl	80064d8 <_lseek_r>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	4632      	mov	r2, r6
 800622c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006230:	81a3      	strh	r3, [r4, #12]
 8006232:	4628      	mov	r0, r5
 8006234:	463b      	mov	r3, r7
 8006236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800623a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800623e:	f000 b869 	b.w	8006314 <_write_r>

08006242 <__sseek>:
 8006242:	b510      	push	{r4, lr}
 8006244:	460c      	mov	r4, r1
 8006246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624a:	f000 f945 	bl	80064d8 <_lseek_r>
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	bf15      	itete	ne
 8006254:	6560      	strne	r0, [r4, #84]	; 0x54
 8006256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800625a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800625e:	81a3      	strheq	r3, [r4, #12]
 8006260:	bf18      	it	ne
 8006262:	81a3      	strhne	r3, [r4, #12]
 8006264:	bd10      	pop	{r4, pc}

08006266 <__sclose>:
 8006266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626a:	f000 b8f1 	b.w	8006450 <_close_r>
	...

08006270 <__swbuf_r>:
 8006270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006272:	460e      	mov	r6, r1
 8006274:	4614      	mov	r4, r2
 8006276:	4605      	mov	r5, r0
 8006278:	b118      	cbz	r0, 8006282 <__swbuf_r+0x12>
 800627a:	6983      	ldr	r3, [r0, #24]
 800627c:	b90b      	cbnz	r3, 8006282 <__swbuf_r+0x12>
 800627e:	f7ff f8e7 	bl	8005450 <__sinit>
 8006282:	4b21      	ldr	r3, [pc, #132]	; (8006308 <__swbuf_r+0x98>)
 8006284:	429c      	cmp	r4, r3
 8006286:	d12b      	bne.n	80062e0 <__swbuf_r+0x70>
 8006288:	686c      	ldr	r4, [r5, #4]
 800628a:	69a3      	ldr	r3, [r4, #24]
 800628c:	60a3      	str	r3, [r4, #8]
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	071a      	lsls	r2, r3, #28
 8006292:	d52f      	bpl.n	80062f4 <__swbuf_r+0x84>
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	b36b      	cbz	r3, 80062f4 <__swbuf_r+0x84>
 8006298:	6923      	ldr	r3, [r4, #16]
 800629a:	6820      	ldr	r0, [r4, #0]
 800629c:	b2f6      	uxtb	r6, r6
 800629e:	1ac0      	subs	r0, r0, r3
 80062a0:	6963      	ldr	r3, [r4, #20]
 80062a2:	4637      	mov	r7, r6
 80062a4:	4283      	cmp	r3, r0
 80062a6:	dc04      	bgt.n	80062b2 <__swbuf_r+0x42>
 80062a8:	4621      	mov	r1, r4
 80062aa:	4628      	mov	r0, r5
 80062ac:	f7ff f83c 	bl	8005328 <_fflush_r>
 80062b0:	bb30      	cbnz	r0, 8006300 <__swbuf_r+0x90>
 80062b2:	68a3      	ldr	r3, [r4, #8]
 80062b4:	3001      	adds	r0, #1
 80062b6:	3b01      	subs	r3, #1
 80062b8:	60a3      	str	r3, [r4, #8]
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	6022      	str	r2, [r4, #0]
 80062c0:	701e      	strb	r6, [r3, #0]
 80062c2:	6963      	ldr	r3, [r4, #20]
 80062c4:	4283      	cmp	r3, r0
 80062c6:	d004      	beq.n	80062d2 <__swbuf_r+0x62>
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	07db      	lsls	r3, r3, #31
 80062cc:	d506      	bpl.n	80062dc <__swbuf_r+0x6c>
 80062ce:	2e0a      	cmp	r6, #10
 80062d0:	d104      	bne.n	80062dc <__swbuf_r+0x6c>
 80062d2:	4621      	mov	r1, r4
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7ff f827 	bl	8005328 <_fflush_r>
 80062da:	b988      	cbnz	r0, 8006300 <__swbuf_r+0x90>
 80062dc:	4638      	mov	r0, r7
 80062de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <__swbuf_r+0x9c>)
 80062e2:	429c      	cmp	r4, r3
 80062e4:	d101      	bne.n	80062ea <__swbuf_r+0x7a>
 80062e6:	68ac      	ldr	r4, [r5, #8]
 80062e8:	e7cf      	b.n	800628a <__swbuf_r+0x1a>
 80062ea:	4b09      	ldr	r3, [pc, #36]	; (8006310 <__swbuf_r+0xa0>)
 80062ec:	429c      	cmp	r4, r3
 80062ee:	bf08      	it	eq
 80062f0:	68ec      	ldreq	r4, [r5, #12]
 80062f2:	e7ca      	b.n	800628a <__swbuf_r+0x1a>
 80062f4:	4621      	mov	r1, r4
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 f81e 	bl	8006338 <__swsetup_r>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d0cb      	beq.n	8006298 <__swbuf_r+0x28>
 8006300:	f04f 37ff 	mov.w	r7, #4294967295
 8006304:	e7ea      	b.n	80062dc <__swbuf_r+0x6c>
 8006306:	bf00      	nop
 8006308:	08006754 	.word	0x08006754
 800630c:	08006774 	.word	0x08006774
 8006310:	08006734 	.word	0x08006734

08006314 <_write_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	2200      	movs	r2, #0
 800631e:	4d05      	ldr	r5, [pc, #20]	; (8006334 <_write_r+0x20>)
 8006320:	602a      	str	r2, [r5, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	f7fa fd12 	bl	8000d4c <_write>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d102      	bne.n	8006332 <_write_r+0x1e>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b103      	cbz	r3, 8006332 <_write_r+0x1e>
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	200002c8 	.word	0x200002c8

08006338 <__swsetup_r>:
 8006338:	4b32      	ldr	r3, [pc, #200]	; (8006404 <__swsetup_r+0xcc>)
 800633a:	b570      	push	{r4, r5, r6, lr}
 800633c:	681d      	ldr	r5, [r3, #0]
 800633e:	4606      	mov	r6, r0
 8006340:	460c      	mov	r4, r1
 8006342:	b125      	cbz	r5, 800634e <__swsetup_r+0x16>
 8006344:	69ab      	ldr	r3, [r5, #24]
 8006346:	b913      	cbnz	r3, 800634e <__swsetup_r+0x16>
 8006348:	4628      	mov	r0, r5
 800634a:	f7ff f881 	bl	8005450 <__sinit>
 800634e:	4b2e      	ldr	r3, [pc, #184]	; (8006408 <__swsetup_r+0xd0>)
 8006350:	429c      	cmp	r4, r3
 8006352:	d10f      	bne.n	8006374 <__swsetup_r+0x3c>
 8006354:	686c      	ldr	r4, [r5, #4]
 8006356:	89a3      	ldrh	r3, [r4, #12]
 8006358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800635c:	0719      	lsls	r1, r3, #28
 800635e:	d42c      	bmi.n	80063ba <__swsetup_r+0x82>
 8006360:	06dd      	lsls	r5, r3, #27
 8006362:	d411      	bmi.n	8006388 <__swsetup_r+0x50>
 8006364:	2309      	movs	r3, #9
 8006366:	6033      	str	r3, [r6, #0]
 8006368:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	e03e      	b.n	80063f2 <__swsetup_r+0xba>
 8006374:	4b25      	ldr	r3, [pc, #148]	; (800640c <__swsetup_r+0xd4>)
 8006376:	429c      	cmp	r4, r3
 8006378:	d101      	bne.n	800637e <__swsetup_r+0x46>
 800637a:	68ac      	ldr	r4, [r5, #8]
 800637c:	e7eb      	b.n	8006356 <__swsetup_r+0x1e>
 800637e:	4b24      	ldr	r3, [pc, #144]	; (8006410 <__swsetup_r+0xd8>)
 8006380:	429c      	cmp	r4, r3
 8006382:	bf08      	it	eq
 8006384:	68ec      	ldreq	r4, [r5, #12]
 8006386:	e7e6      	b.n	8006356 <__swsetup_r+0x1e>
 8006388:	0758      	lsls	r0, r3, #29
 800638a:	d512      	bpl.n	80063b2 <__swsetup_r+0x7a>
 800638c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800638e:	b141      	cbz	r1, 80063a2 <__swsetup_r+0x6a>
 8006390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006394:	4299      	cmp	r1, r3
 8006396:	d002      	beq.n	800639e <__swsetup_r+0x66>
 8006398:	4630      	mov	r0, r6
 800639a:	f7ff fd17 	bl	8005dcc <_free_r>
 800639e:	2300      	movs	r3, #0
 80063a0:	6363      	str	r3, [r4, #52]	; 0x34
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063a8:	81a3      	strh	r3, [r4, #12]
 80063aa:	2300      	movs	r3, #0
 80063ac:	6063      	str	r3, [r4, #4]
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	f043 0308 	orr.w	r3, r3, #8
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	b94b      	cbnz	r3, 80063d2 <__swsetup_r+0x9a>
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c8:	d003      	beq.n	80063d2 <__swsetup_r+0x9a>
 80063ca:	4621      	mov	r1, r4
 80063cc:	4630      	mov	r0, r6
 80063ce:	f7ff f909 	bl	80055e4 <__smakebuf_r>
 80063d2:	89a0      	ldrh	r0, [r4, #12]
 80063d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063d8:	f010 0301 	ands.w	r3, r0, #1
 80063dc:	d00a      	beq.n	80063f4 <__swsetup_r+0xbc>
 80063de:	2300      	movs	r3, #0
 80063e0:	60a3      	str	r3, [r4, #8]
 80063e2:	6963      	ldr	r3, [r4, #20]
 80063e4:	425b      	negs	r3, r3
 80063e6:	61a3      	str	r3, [r4, #24]
 80063e8:	6923      	ldr	r3, [r4, #16]
 80063ea:	b943      	cbnz	r3, 80063fe <__swsetup_r+0xc6>
 80063ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063f0:	d1ba      	bne.n	8006368 <__swsetup_r+0x30>
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	0781      	lsls	r1, r0, #30
 80063f6:	bf58      	it	pl
 80063f8:	6963      	ldrpl	r3, [r4, #20]
 80063fa:	60a3      	str	r3, [r4, #8]
 80063fc:	e7f4      	b.n	80063e8 <__swsetup_r+0xb0>
 80063fe:	2000      	movs	r0, #0
 8006400:	e7f7      	b.n	80063f2 <__swsetup_r+0xba>
 8006402:	bf00      	nop
 8006404:	2000000c 	.word	0x2000000c
 8006408:	08006754 	.word	0x08006754
 800640c:	08006774 	.word	0x08006774
 8006410:	08006734 	.word	0x08006734

08006414 <__assert_func>:
 8006414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006416:	4614      	mov	r4, r2
 8006418:	461a      	mov	r2, r3
 800641a:	4b09      	ldr	r3, [pc, #36]	; (8006440 <__assert_func+0x2c>)
 800641c:	4605      	mov	r5, r0
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68d8      	ldr	r0, [r3, #12]
 8006422:	b14c      	cbz	r4, 8006438 <__assert_func+0x24>
 8006424:	4b07      	ldr	r3, [pc, #28]	; (8006444 <__assert_func+0x30>)
 8006426:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800642a:	9100      	str	r1, [sp, #0]
 800642c:	462b      	mov	r3, r5
 800642e:	4906      	ldr	r1, [pc, #24]	; (8006448 <__assert_func+0x34>)
 8006430:	f000 f81e 	bl	8006470 <fiprintf>
 8006434:	f000 f89f 	bl	8006576 <abort>
 8006438:	4b04      	ldr	r3, [pc, #16]	; (800644c <__assert_func+0x38>)
 800643a:	461c      	mov	r4, r3
 800643c:	e7f3      	b.n	8006426 <__assert_func+0x12>
 800643e:	bf00      	nop
 8006440:	2000000c 	.word	0x2000000c
 8006444:	08006905 	.word	0x08006905
 8006448:	08006912 	.word	0x08006912
 800644c:	08006940 	.word	0x08006940

08006450 <_close_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	2300      	movs	r3, #0
 8006454:	4d05      	ldr	r5, [pc, #20]	; (800646c <_close_r+0x1c>)
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fa fde8 	bl	8001030 <_close>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_close_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_close_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	200002c8 	.word	0x200002c8

08006470 <fiprintf>:
 8006470:	b40e      	push	{r1, r2, r3}
 8006472:	b503      	push	{r0, r1, lr}
 8006474:	4601      	mov	r1, r0
 8006476:	ab03      	add	r3, sp, #12
 8006478:	4805      	ldr	r0, [pc, #20]	; (8006490 <fiprintf+0x20>)
 800647a:	f853 2b04 	ldr.w	r2, [r3], #4
 800647e:	6800      	ldr	r0, [r0, #0]
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	f7ff fd71 	bl	8005f68 <_vfiprintf_r>
 8006486:	b002      	add	sp, #8
 8006488:	f85d eb04 	ldr.w	lr, [sp], #4
 800648c:	b003      	add	sp, #12
 800648e:	4770      	bx	lr
 8006490:	2000000c 	.word	0x2000000c

08006494 <_fstat_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	2300      	movs	r3, #0
 8006498:	4d06      	ldr	r5, [pc, #24]	; (80064b4 <_fstat_r+0x20>)
 800649a:	4604      	mov	r4, r0
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	602b      	str	r3, [r5, #0]
 80064a2:	f7fa fdd0 	bl	8001046 <_fstat>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d102      	bne.n	80064b0 <_fstat_r+0x1c>
 80064aa:	682b      	ldr	r3, [r5, #0]
 80064ac:	b103      	cbz	r3, 80064b0 <_fstat_r+0x1c>
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	bd38      	pop	{r3, r4, r5, pc}
 80064b2:	bf00      	nop
 80064b4:	200002c8 	.word	0x200002c8

080064b8 <_isatty_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	2300      	movs	r3, #0
 80064bc:	4d05      	ldr	r5, [pc, #20]	; (80064d4 <_isatty_r+0x1c>)
 80064be:	4604      	mov	r4, r0
 80064c0:	4608      	mov	r0, r1
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	f7fa fdce 	bl	8001064 <_isatty>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_isatty_r+0x1a>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_isatty_r+0x1a>
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	200002c8 	.word	0x200002c8

080064d8 <_lseek_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	4611      	mov	r1, r2
 80064e0:	2200      	movs	r2, #0
 80064e2:	4d05      	ldr	r5, [pc, #20]	; (80064f8 <_lseek_r+0x20>)
 80064e4:	602a      	str	r2, [r5, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f7fa fdc6 	bl	8001078 <_lseek>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d102      	bne.n	80064f6 <_lseek_r+0x1e>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	b103      	cbz	r3, 80064f6 <_lseek_r+0x1e>
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	bd38      	pop	{r3, r4, r5, pc}
 80064f8:	200002c8 	.word	0x200002c8

080064fc <__ascii_mbtowc>:
 80064fc:	b082      	sub	sp, #8
 80064fe:	b901      	cbnz	r1, 8006502 <__ascii_mbtowc+0x6>
 8006500:	a901      	add	r1, sp, #4
 8006502:	b142      	cbz	r2, 8006516 <__ascii_mbtowc+0x1a>
 8006504:	b14b      	cbz	r3, 800651a <__ascii_mbtowc+0x1e>
 8006506:	7813      	ldrb	r3, [r2, #0]
 8006508:	600b      	str	r3, [r1, #0]
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	1e10      	subs	r0, r2, #0
 800650e:	bf18      	it	ne
 8006510:	2001      	movne	r0, #1
 8006512:	b002      	add	sp, #8
 8006514:	4770      	bx	lr
 8006516:	4610      	mov	r0, r2
 8006518:	e7fb      	b.n	8006512 <__ascii_mbtowc+0x16>
 800651a:	f06f 0001 	mvn.w	r0, #1
 800651e:	e7f8      	b.n	8006512 <__ascii_mbtowc+0x16>

08006520 <__malloc_lock>:
 8006520:	4801      	ldr	r0, [pc, #4]	; (8006528 <__malloc_lock+0x8>)
 8006522:	f7ff b838 	b.w	8005596 <__retarget_lock_acquire_recursive>
 8006526:	bf00      	nop
 8006528:	200002c0 	.word	0x200002c0

0800652c <__malloc_unlock>:
 800652c:	4801      	ldr	r0, [pc, #4]	; (8006534 <__malloc_unlock+0x8>)
 800652e:	f7ff b833 	b.w	8005598 <__retarget_lock_release_recursive>
 8006532:	bf00      	nop
 8006534:	200002c0 	.word	0x200002c0

08006538 <_read_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	2200      	movs	r2, #0
 8006542:	4d05      	ldr	r5, [pc, #20]	; (8006558 <_read_r+0x20>)
 8006544:	602a      	str	r2, [r5, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	f7fa fd55 	bl	8000ff6 <_read>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_read_r+0x1e>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_read_r+0x1e>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	200002c8 	.word	0x200002c8

0800655c <__ascii_wctomb>:
 800655c:	4603      	mov	r3, r0
 800655e:	4608      	mov	r0, r1
 8006560:	b141      	cbz	r1, 8006574 <__ascii_wctomb+0x18>
 8006562:	2aff      	cmp	r2, #255	; 0xff
 8006564:	d904      	bls.n	8006570 <__ascii_wctomb+0x14>
 8006566:	228a      	movs	r2, #138	; 0x8a
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	4770      	bx	lr
 8006570:	2001      	movs	r0, #1
 8006572:	700a      	strb	r2, [r1, #0]
 8006574:	4770      	bx	lr

08006576 <abort>:
 8006576:	2006      	movs	r0, #6
 8006578:	b508      	push	{r3, lr}
 800657a:	f000 f82b 	bl	80065d4 <raise>
 800657e:	2001      	movs	r0, #1
 8006580:	f7fa fd2f 	bl	8000fe2 <_exit>

08006584 <_raise_r>:
 8006584:	291f      	cmp	r1, #31
 8006586:	b538      	push	{r3, r4, r5, lr}
 8006588:	4604      	mov	r4, r0
 800658a:	460d      	mov	r5, r1
 800658c:	d904      	bls.n	8006598 <_raise_r+0x14>
 800658e:	2316      	movs	r3, #22
 8006590:	6003      	str	r3, [r0, #0]
 8006592:	f04f 30ff 	mov.w	r0, #4294967295
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800659a:	b112      	cbz	r2, 80065a2 <_raise_r+0x1e>
 800659c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065a0:	b94b      	cbnz	r3, 80065b6 <_raise_r+0x32>
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 f830 	bl	8006608 <_getpid_r>
 80065a8:	462a      	mov	r2, r5
 80065aa:	4601      	mov	r1, r0
 80065ac:	4620      	mov	r0, r4
 80065ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b2:	f000 b817 	b.w	80065e4 <_kill_r>
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d00a      	beq.n	80065d0 <_raise_r+0x4c>
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	d103      	bne.n	80065c6 <_raise_r+0x42>
 80065be:	2316      	movs	r3, #22
 80065c0:	6003      	str	r3, [r0, #0]
 80065c2:	2001      	movs	r0, #1
 80065c4:	e7e7      	b.n	8006596 <_raise_r+0x12>
 80065c6:	2400      	movs	r4, #0
 80065c8:	4628      	mov	r0, r5
 80065ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065ce:	4798      	blx	r3
 80065d0:	2000      	movs	r0, #0
 80065d2:	e7e0      	b.n	8006596 <_raise_r+0x12>

080065d4 <raise>:
 80065d4:	4b02      	ldr	r3, [pc, #8]	; (80065e0 <raise+0xc>)
 80065d6:	4601      	mov	r1, r0
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	f7ff bfd3 	b.w	8006584 <_raise_r>
 80065de:	bf00      	nop
 80065e0:	2000000c 	.word	0x2000000c

080065e4 <_kill_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	2300      	movs	r3, #0
 80065e8:	4d06      	ldr	r5, [pc, #24]	; (8006604 <_kill_r+0x20>)
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	602b      	str	r3, [r5, #0]
 80065f2:	f7fa fce6 	bl	8000fc2 <_kill>
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d102      	bne.n	8006600 <_kill_r+0x1c>
 80065fa:	682b      	ldr	r3, [r5, #0]
 80065fc:	b103      	cbz	r3, 8006600 <_kill_r+0x1c>
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	bd38      	pop	{r3, r4, r5, pc}
 8006602:	bf00      	nop
 8006604:	200002c8 	.word	0x200002c8

08006608 <_getpid_r>:
 8006608:	f7fa bcd4 	b.w	8000fb4 <_getpid>

0800660c <_init>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr

08006618 <_fini>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	bf00      	nop
 800661c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661e:	bc08      	pop	{r3}
 8006620:	469e      	mov	lr, r3
 8006622:	4770      	bx	lr
