
UART_control_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080032c4  080032c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e0  080033e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080033e0  080033e0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033e0  080033e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033e4  080033e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08003458  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003458  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000848a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb0  00000000  00000000  00028523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002a0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ec0  00000000  00000000  0002ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c74  00000000  00000000  00044d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091861  00000000  00000000  0004d9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df225  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023cc  00000000  00000000  000df278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080032ac 	.word	0x080032ac

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080032ac 	.word	0x080032ac

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	f107 0310 	add.w	r3, r7, #16
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800024c:	4b27      	ldr	r3, [pc, #156]	; (80002ec <MX_GPIO_Init+0xb4>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a26      	ldr	r2, [pc, #152]	; (80002ec <MX_GPIO_Init+0xb4>)
 8000252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b24      	ldr	r3, [pc, #144]	; (80002ec <MX_GPIO_Init+0xb4>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000264:	4b21      	ldr	r3, [pc, #132]	; (80002ec <MX_GPIO_Init+0xb4>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a20      	ldr	r2, [pc, #128]	; (80002ec <MX_GPIO_Init+0xb4>)
 800026a:	f043 0304 	orr.w	r3, r3, #4
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <MX_GPIO_Init+0xb4>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0304 	and.w	r3, r3, #4
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027c:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <MX_GPIO_Init+0xb4>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a1a      	ldr	r2, [pc, #104]	; (80002ec <MX_GPIO_Init+0xb4>)
 8000282:	f043 0310 	orr.w	r3, r3, #16
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b18      	ldr	r3, [pc, #96]	; (80002ec <MX_GPIO_Init+0xb4>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0310 	and.w	r3, r3, #16
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	211c      	movs	r1, #28
 8000298:	4815      	ldr	r0, [pc, #84]	; (80002f0 <MX_GPIO_Init+0xb8>)
 800029a:	f000 ff3f 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80002a4:	4813      	ldr	r0, [pc, #76]	; (80002f4 <MX_GPIO_Init+0xbc>)
 80002a6:	f000 ff39 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80002aa:	231c      	movs	r3, #28
 80002ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ae:	2301      	movs	r3, #1
 80002b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002b2:	2301      	movs	r3, #1
 80002b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	4619      	mov	r1, r3
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <MX_GPIO_Init+0xb8>)
 80002c2:	f000 fd97 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80002c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80002ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002d0:	2301      	movs	r3, #1
 80002d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2302      	movs	r3, #2
 80002d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_GPIO_Init+0xbc>)
 80002e0:	f000 fd88 	bl	8000df4 <HAL_GPIO_Init>

}
 80002e4:	bf00      	nop
 80002e6:	3720      	adds	r7, #32
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40021000 	.word	0x40021000
 80002f0:	40011800 	.word	0x40011800
 80002f4:	40011000 	.word	0x40011000

080002f8 <HAL_UART_RxCpltCallback>:
uint8_t Rx_Buffer[20];
uint8_t USART1_len=0;
uint8_t USART1_rx_end=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  static uint8_t usart1_chk=0;
  if(huart -> Instance == USART1)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a25      	ldr	r2, [pc, #148]	; (800039c <HAL_UART_RxCpltCallback+0xa4>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d144      	bne.n	8000394 <HAL_UART_RxCpltCallback+0x9c>
  {
      USART1_rx_end=0;
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <HAL_UART_RxCpltCallback+0xa8>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
      switch(usart1_chk)
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <HAL_UART_RxCpltCallback+0xac>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <HAL_UART_RxCpltCallback+0x26>
 8000318:	2b01      	cmp	r3, #1
 800031a:	d019      	beq.n	8000350 <HAL_UART_RxCpltCallback+0x58>
 800031c:	e030      	b.n	8000380 <HAL_UART_RxCpltCallback+0x88>
      {
          case 0:
            if(Rx_Data[0]==0x02)
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <HAL_UART_RxCpltCallback+0xb0>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b02      	cmp	r3, #2
 8000324:	d110      	bne.n	8000348 <HAL_UART_RxCpltCallback+0x50>
            {
            	Rx_Buffer[USART1_len]=Rx_Data[0];
 8000326:	4b21      	ldr	r3, [pc, #132]	; (80003ac <HAL_UART_RxCpltCallback+0xb4>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <HAL_UART_RxCpltCallback+0xb0>)
 800032e:	7819      	ldrb	r1, [r3, #0]
 8000330:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <HAL_UART_RxCpltCallback+0xb8>)
 8000332:	5499      	strb	r1, [r3, r2]
                USART1_len++;
 8000334:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <HAL_UART_RxCpltCallback+0xb4>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <HAL_UART_RxCpltCallback+0xb4>)
 800033e:	701a      	strb	r2, [r3, #0]
                usart1_chk=1;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <HAL_UART_RxCpltCallback+0xac>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
            }
            else usart1_chk=0;
            break;
 8000346:	e020      	b.n	800038a <HAL_UART_RxCpltCallback+0x92>
            else usart1_chk=0;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <HAL_UART_RxCpltCallback+0xac>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
            break;
 800034e:	e01c      	b.n	800038a <HAL_UART_RxCpltCallback+0x92>
          case 1:
            Rx_Buffer[USART1_len]=Rx_Data[0];
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <HAL_UART_RxCpltCallback+0xb4>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	461a      	mov	r2, r3
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <HAL_UART_RxCpltCallback+0xb0>)
 8000358:	7819      	ldrb	r1, [r3, #0]
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_UART_RxCpltCallback+0xb8>)
 800035c:	5499      	strb	r1, [r3, r2]
            USART1_len++;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <HAL_UART_RxCpltCallback+0xb4>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	3301      	adds	r3, #1
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <HAL_UART_RxCpltCallback+0xb4>)
 8000368:	701a      	strb	r2, [r3, #0]

            if(Rx_Data[0]==0x03)
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <HAL_UART_RxCpltCallback+0xb0>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b03      	cmp	r3, #3
 8000370:	d10a      	bne.n	8000388 <HAL_UART_RxCpltCallback+0x90>
            {
              USART1_rx_end=1;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <HAL_UART_RxCpltCallback+0xa8>)
 8000374:	2201      	movs	r2, #1
 8000376:	701a      	strb	r2, [r3, #0]
              usart1_chk=0;
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <HAL_UART_RxCpltCallback+0xac>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800037e:	e003      	b.n	8000388 <HAL_UART_RxCpltCallback+0x90>
          default:
            usart1_chk=0;
 8000380:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <HAL_UART_RxCpltCallback+0xac>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
            break;
 8000386:	e000      	b.n	800038a <HAL_UART_RxCpltCallback+0x92>
            break;
 8000388:	bf00      	nop
      }
      HAL_UART_Receive_IT(&huart1, Rx_Data, 1);
 800038a:	2201      	movs	r2, #1
 800038c:	4906      	ldr	r1, [pc, #24]	; (80003a8 <HAL_UART_RxCpltCallback+0xb0>)
 800038e:	4809      	ldr	r0, [pc, #36]	; (80003b4 <HAL_UART_RxCpltCallback+0xbc>)
 8000390:	f001 fbd5 	bl	8001b3e <HAL_UART_Receive_IT>
  }
}
 8000394:	bf00      	nop
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40013800 	.word	0x40013800
 80003a0:	2000008d 	.word	0x2000008d
 80003a4:	2000008e 	.word	0x2000008e
 80003a8:	200000b0 	.word	0x200000b0
 80003ac:	2000008c 	.word	0x2000008c
 80003b0:	2000009c 	.word	0x2000009c
 80003b4:	200000b4 	.word	0x200000b4

080003b8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)  //for printf
#endif
PUTCHAR_PROTOTYPE
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80003c0:	1d39      	adds	r1, r7, #4
 80003c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003c6:	2201      	movs	r2, #1
 80003c8:	4803      	ldr	r0, [pc, #12]	; (80003d8 <__io_putchar+0x20>)
 80003ca:	f001 fb26 	bl	8001a1a <HAL_UART_Transmit>
  return ch;
 80003ce:	687b      	ldr	r3, [r7, #4]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000b4 	.word	0x200000b4

080003dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f000 fa90 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f896 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e8:	f7ff ff26 	bl	8000238 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003ec:	f000 f9e6 	bl	80007bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  setvbuf(stdout, NULL, _IONBF, 0);
 80003f0:	4b3a      	ldr	r3, [pc, #232]	; (80004dc <main+0x100>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	6898      	ldr	r0, [r3, #8]
 80003f6:	2300      	movs	r3, #0
 80003f8:	2202      	movs	r2, #2
 80003fa:	2100      	movs	r1, #0
 80003fc:	f001 ff40 	bl	8002280 <setvbuf>

  //main 함수 while() 문 위에 수신 인터럽트 enable 설정
  HAL_UART_Receive_IT(&huart1, Rx_Data, 1);       // 수신 interrupt Enable 설정
 8000400:	2201      	movs	r2, #1
 8000402:	4937      	ldr	r1, [pc, #220]	; (80004e0 <main+0x104>)
 8000404:	4837      	ldr	r0, [pc, #220]	; (80004e4 <main+0x108>)
 8000406:	f001 fb9a 	bl	8001b3e <HAL_UART_Receive_IT>
  printf("Program start...  ");
 800040a:	4837      	ldr	r0, [pc, #220]	; (80004e8 <main+0x10c>)
 800040c:	f001 ff20 	bl	8002250 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // main함수 while문 내에서 주기적으로 USART1_rx_end flag 검사
	  if(USART1_rx_end)
 8000410:	4b36      	ldr	r3, [pc, #216]	; (80004ec <main+0x110>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0fb      	beq.n	8000410 <main+0x34>
	  {
		  // 입력 문자열 비교
		  if(!strcmp(Rx_Buffer, "\x02LED2 ON\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 , GPIO_PIN_SET);
 8000418:	4935      	ldr	r1, [pc, #212]	; (80004f0 <main+0x114>)
 800041a:	4836      	ldr	r0, [pc, #216]	; (80004f4 <main+0x118>)
 800041c:	f7ff ff02 	bl	8000224 <strcmp>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d105      	bne.n	8000432 <main+0x56>
 8000426:	2201      	movs	r2, #1
 8000428:	2104      	movs	r1, #4
 800042a:	4833      	ldr	r0, [pc, #204]	; (80004f8 <main+0x11c>)
 800042c:	f000 fe76 	bl	800111c <HAL_GPIO_WritePin>
 8000430:	e03f      	b.n	80004b2 <main+0xd6>
		  else if(!strcmp(Rx_Buffer, "\x02LED2 OFF\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 , GPIO_PIN_RESET);
 8000432:	4932      	ldr	r1, [pc, #200]	; (80004fc <main+0x120>)
 8000434:	482f      	ldr	r0, [pc, #188]	; (80004f4 <main+0x118>)
 8000436:	f7ff fef5 	bl	8000224 <strcmp>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d105      	bne.n	800044c <main+0x70>
 8000440:	2200      	movs	r2, #0
 8000442:	2104      	movs	r1, #4
 8000444:	482c      	ldr	r0, [pc, #176]	; (80004f8 <main+0x11c>)
 8000446:	f000 fe69 	bl	800111c <HAL_GPIO_WritePin>
 800044a:	e032      	b.n	80004b2 <main+0xd6>
		  else if(!strcmp(Rx_Buffer, "\x02LED3 ON\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 , GPIO_PIN_SET);
 800044c:	492c      	ldr	r1, [pc, #176]	; (8000500 <main+0x124>)
 800044e:	4829      	ldr	r0, [pc, #164]	; (80004f4 <main+0x118>)
 8000450:	f7ff fee8 	bl	8000224 <strcmp>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d105      	bne.n	8000466 <main+0x8a>
 800045a:	2201      	movs	r2, #1
 800045c:	2108      	movs	r1, #8
 800045e:	4826      	ldr	r0, [pc, #152]	; (80004f8 <main+0x11c>)
 8000460:	f000 fe5c 	bl	800111c <HAL_GPIO_WritePin>
 8000464:	e025      	b.n	80004b2 <main+0xd6>
		  else if(!strcmp(Rx_Buffer, "\x02LED3 OFF\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 , GPIO_PIN_RESET);
 8000466:	4927      	ldr	r1, [pc, #156]	; (8000504 <main+0x128>)
 8000468:	4822      	ldr	r0, [pc, #136]	; (80004f4 <main+0x118>)
 800046a:	f7ff fedb 	bl	8000224 <strcmp>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d105      	bne.n	8000480 <main+0xa4>
 8000474:	2200      	movs	r2, #0
 8000476:	2108      	movs	r1, #8
 8000478:	481f      	ldr	r0, [pc, #124]	; (80004f8 <main+0x11c>)
 800047a:	f000 fe4f 	bl	800111c <HAL_GPIO_WritePin>
 800047e:	e018      	b.n	80004b2 <main+0xd6>
		  else if(!strcmp(Rx_Buffer, "\x02LED4 ON\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4 , GPIO_PIN_SET);
 8000480:	4921      	ldr	r1, [pc, #132]	; (8000508 <main+0x12c>)
 8000482:	481c      	ldr	r0, [pc, #112]	; (80004f4 <main+0x118>)
 8000484:	f7ff fece 	bl	8000224 <strcmp>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d105      	bne.n	800049a <main+0xbe>
 800048e:	2201      	movs	r2, #1
 8000490:	2110      	movs	r1, #16
 8000492:	4819      	ldr	r0, [pc, #100]	; (80004f8 <main+0x11c>)
 8000494:	f000 fe42 	bl	800111c <HAL_GPIO_WritePin>
 8000498:	e00b      	b.n	80004b2 <main+0xd6>
		  else if(!strcmp(Rx_Buffer, "\x02LED4 OFF\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4 , GPIO_PIN_RESET);
 800049a:	491c      	ldr	r1, [pc, #112]	; (800050c <main+0x130>)
 800049c:	4815      	ldr	r0, [pc, #84]	; (80004f4 <main+0x118>)
 800049e:	f7ff fec1 	bl	8000224 <strcmp>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d104      	bne.n	80004b2 <main+0xd6>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2110      	movs	r1, #16
 80004ac:	4812      	ldr	r0, [pc, #72]	; (80004f8 <main+0x11c>)
 80004ae:	f000 fe35 	bl	800111c <HAL_GPIO_WritePin>

		  // 받은 데이터, 전송
	      HAL_UART_Transmit(&huart1, Rx_Buffer, USART1_len, 2);
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <main+0x134>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	2302      	movs	r3, #2
 80004ba:	490e      	ldr	r1, [pc, #56]	; (80004f4 <main+0x118>)
 80004bc:	4809      	ldr	r0, [pc, #36]	; (80004e4 <main+0x108>)
 80004be:	f001 faac 	bl	8001a1a <HAL_UART_Transmit>
	      USART1_len=0;
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <main+0x134>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
	      USART1_rx_end=0;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <main+0x110>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]

	      memset(Rx_Buffer, 0, 20); // 초기화
 80004ce:	2214      	movs	r2, #20
 80004d0:	2100      	movs	r1, #0
 80004d2:	4808      	ldr	r0, [pc, #32]	; (80004f4 <main+0x118>)
 80004d4:	f001 feb4 	bl	8002240 <memset>
	  if(USART1_rx_end)
 80004d8:	e79a      	b.n	8000410 <main+0x34>
 80004da:	bf00      	nop
 80004dc:	2000000c 	.word	0x2000000c
 80004e0:	200000b0 	.word	0x200000b0
 80004e4:	200000b4 	.word	0x200000b4
 80004e8:	080032c4 	.word	0x080032c4
 80004ec:	2000008d 	.word	0x2000008d
 80004f0:	080032d8 	.word	0x080032d8
 80004f4:	2000009c 	.word	0x2000009c
 80004f8:	40011800 	.word	0x40011800
 80004fc:	080032e4 	.word	0x080032e4
 8000500:	080032f0 	.word	0x080032f0
 8000504:	080032fc 	.word	0x080032fc
 8000508:	08003308 	.word	0x08003308
 800050c:	08003314 	.word	0x08003314
 8000510:	2000008c 	.word	0x2000008c

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fe8c 	bl	8002240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
 800054a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000552:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000556:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fdf5 	bl	800114c <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000568:	f000 f819 	bl	800059e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	2302      	movs	r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2102      	movs	r1, #2
 8000586:	4618      	mov	r0, r3
 8000588:	f001 f860 	bl	800164c <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000592:	f000 f804 	bl	800059e <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3740      	adds	r7, #64	; 0x40
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a2:	b672      	cpsid	i
}
 80005a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <Error_Handler+0x8>

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <HAL_MspInit+0x5c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_MspInit+0x5c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_MspInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_MspInit+0x60>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <NMI_Handler+0x4>

08000612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <HardFault_Handler+0x4>

08000618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <MemManage_Handler+0x4>

0800061e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <BusFault_Handler+0x4>

08000624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <UsageFault_Handler+0x4>

0800062a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000652:	f000 f99d 	bl	8000990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <USART1_IRQHandler+0x10>)
 8000662:	f001 fac1 	bl	8001be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000b4 	.word	0x200000b4

08000670 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e00a      	b.n	8000698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000682:	f3af 8000 	nop.w
 8000686:	4601      	mov	r1, r0
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	60ba      	str	r2, [r7, #8]
 800068e:	b2ca      	uxtb	r2, r1
 8000690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	3301      	adds	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	429a      	cmp	r2, r3
 800069e:	dbf0      	blt.n	8000682 <_read+0x12>
	}

return len;
 80006a0:	687b      	ldr	r3, [r7, #4]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	e009      	b.n	80006d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fe77 	bl	80003b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbf1      	blt.n	80006bc <_write+0x12>
	}
	return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <_close>:

int _close(int file)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	return -1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000708:	605a      	str	r2, [r3, #4]
	return 0;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <_isatty>:

int _isatty(int file)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	return 1;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800072a:	b480      	push	{r7}
 800072c:	b085      	sub	sp, #20
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
	return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <_sbrk+0x5c>)
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <_sbrk+0x60>)
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <_sbrk+0x64>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <_sbrk+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d207      	bcs.n	8000784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000774:	f001 fd3a 	bl	80021ec <__errno>
 8000778:	4603      	mov	r3, r0
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	e009      	b.n	8000798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <_sbrk+0x64>)
 8000794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000c000 	.word	0x2000c000
 80007a4:	00000400 	.word	0x00000400
 80007a8:	20000090 	.word	0x20000090
 80007ac:	20000108 	.word	0x20000108

080007b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART1_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f001 f8c4 	bl	8001980 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f7ff fece 	bl	800059e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000b4 	.word	0x200000b4
 800080c:	40013800 	.word	0x40013800

08000810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a20      	ldr	r2, [pc, #128]	; (80008ac <HAL_UART_MspInit+0x9c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d139      	bne.n	80008a4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <HAL_UART_MspInit+0xa0>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a1e      	ldr	r2, [pc, #120]	; (80008b0 <HAL_UART_MspInit+0xa0>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <HAL_UART_MspInit+0xa0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <HAL_UART_MspInit+0xa0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <HAL_UART_MspInit+0xa0>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <HAL_UART_MspInit+0xa0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	480f      	ldr	r0, [pc, #60]	; (80008b4 <HAL_UART_MspInit+0xa4>)
 8000876:	f000 fabd 	bl	8000df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <HAL_UART_MspInit+0xa4>)
 8000890:	f000 fab0 	bl	8000df4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2025      	movs	r0, #37	; 0x25
 800089a:	f000 f96c 	bl	8000b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800089e:	2025      	movs	r0, #37	; 0x25
 80008a0:	f000 f985 	bl	8000bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010800 	.word	0x40010800

080008b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008ba:	e003      	b.n	80008c4 <LoopCopyDataInit>

080008bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008c2:	3104      	adds	r1, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008c4:	480a      	ldr	r0, [pc, #40]	; (80008f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008cc:	d3f6      	bcc.n	80008bc <CopyDataInit>
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008d0:	e002      	b.n	80008d8 <LoopFillZerobss>

080008d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008d4:	f842 3b04 	str.w	r3, [r2], #4

080008d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008dc:	d3f9      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008de:	f7ff ff67 	bl	80007b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e2:	f001 fc89 	bl	80021f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff fd79 	bl	80003dc <main>
  bx lr
 80008ea:	4770      	bx	lr
  ldr r3, =_sidata
 80008ec:	080033e8 	.word	0x080033e8
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008f4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80008f8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80008fc:	20000108 	.word	0x20000108

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_Init+0x28>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <HAL_Init+0x28>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f923 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	2000      	movs	r0, #0
 800091c:	f000 f808 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff fe42 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_InitTick+0x54>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x58>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	fbb3 f3f1 	udiv	r3, r3, r1
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f93b 	bl	8000bca <HAL_SYSTICK_Config>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e00e      	b.n	800097c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d80a      	bhi.n	800097a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f903 	bl	8000b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <HAL_InitTick+0x5c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000000 	.word	0x20000000
 8000988:	20000008 	.word	0x20000008
 800098c:	20000004 	.word	0x20000004

08000990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_IncTick+0x1c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_IncTick+0x20>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <HAL_IncTick+0x20>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	20000008 	.word	0x20000008
 80009b0:	200000f4 	.word	0x200000f4

080009b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <HAL_GetTick+0x10>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	200000f4 	.word	0x200000f4

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4906      	ldr	r1, [pc, #24]	; (8000a60 <__NVIC_EnableIRQ+0x34>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff90 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff2d 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff42 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff90 	bl	8000ab8 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5f 	bl	8000a64 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff35 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffa2 	bl	8000b1c <SysTick_Config>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d005      	beq.n	8000c06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e0d6      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 020e 	bic.w	r2, r2, #14
 8000c14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0201 	bic.w	r2, r2, #1
 8000c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b64      	ldr	r3, [pc, #400]	; (8000dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d958      	bls.n	8000ce4 <HAL_DMA_Abort_IT+0x100>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a63      	ldr	r2, [pc, #396]	; (8000dc4 <HAL_DMA_Abort_IT+0x1e0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d04f      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xf8>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a61      	ldr	r2, [pc, #388]	; (8000dc8 <HAL_DMA_Abort_IT+0x1e4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d048      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0xf4>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a60      	ldr	r2, [pc, #384]	; (8000dcc <HAL_DMA_Abort_IT+0x1e8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d040      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0xee>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a5e      	ldr	r2, [pc, #376]	; (8000dd0 <HAL_DMA_Abort_IT+0x1ec>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d038      	beq.n	8000ccc <HAL_DMA_Abort_IT+0xe8>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a5d      	ldr	r2, [pc, #372]	; (8000dd4 <HAL_DMA_Abort_IT+0x1f0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d030      	beq.n	8000cc6 <HAL_DMA_Abort_IT+0xe2>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a5b      	ldr	r2, [pc, #364]	; (8000dd8 <HAL_DMA_Abort_IT+0x1f4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d028      	beq.n	8000cc0 <HAL_DMA_Abort_IT+0xdc>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a53      	ldr	r2, [pc, #332]	; (8000dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d020      	beq.n	8000cba <HAL_DMA_Abort_IT+0xd6>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a57      	ldr	r2, [pc, #348]	; (8000ddc <HAL_DMA_Abort_IT+0x1f8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d019      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0xd2>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a56      	ldr	r2, [pc, #344]	; (8000de0 <HAL_DMA_Abort_IT+0x1fc>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d012      	beq.n	8000cb2 <HAL_DMA_Abort_IT+0xce>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a54      	ldr	r2, [pc, #336]	; (8000de4 <HAL_DMA_Abort_IT+0x200>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d00a      	beq.n	8000cac <HAL_DMA_Abort_IT+0xc8>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a53      	ldr	r2, [pc, #332]	; (8000de8 <HAL_DMA_Abort_IT+0x204>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d102      	bne.n	8000ca6 <HAL_DMA_Abort_IT+0xc2>
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca4:	e01b      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000caa:	e018      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb0:	e015      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	e013      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e011      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cbe:	e00e      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000cc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cc4:	e00b      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cca:	e008      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	e005      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd6:	e002      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000cd8:	2310      	movs	r3, #16
 8000cda:	e000      	b.n	8000cde <HAL_DMA_Abort_IT+0xfa>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	4a43      	ldr	r2, [pc, #268]	; (8000dec <HAL_DMA_Abort_IT+0x208>)
 8000ce0:	6053      	str	r3, [r2, #4]
 8000ce2:	e057      	b.n	8000d94 <HAL_DMA_Abort_IT+0x1b0>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a36      	ldr	r2, [pc, #216]	; (8000dc4 <HAL_DMA_Abort_IT+0x1e0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d04f      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x1aa>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a35      	ldr	r2, [pc, #212]	; (8000dc8 <HAL_DMA_Abort_IT+0x1e4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d048      	beq.n	8000d8a <HAL_DMA_Abort_IT+0x1a6>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a33      	ldr	r2, [pc, #204]	; (8000dcc <HAL_DMA_Abort_IT+0x1e8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d040      	beq.n	8000d84 <HAL_DMA_Abort_IT+0x1a0>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <HAL_DMA_Abort_IT+0x1ec>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d038      	beq.n	8000d7e <HAL_DMA_Abort_IT+0x19a>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a30      	ldr	r2, [pc, #192]	; (8000dd4 <HAL_DMA_Abort_IT+0x1f0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d030      	beq.n	8000d78 <HAL_DMA_Abort_IT+0x194>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <HAL_DMA_Abort_IT+0x1f4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d028      	beq.n	8000d72 <HAL_DMA_Abort_IT+0x18e>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d020      	beq.n	8000d6c <HAL_DMA_Abort_IT+0x188>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <HAL_DMA_Abort_IT+0x1f8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d019      	beq.n	8000d68 <HAL_DMA_Abort_IT+0x184>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a29      	ldr	r2, [pc, #164]	; (8000de0 <HAL_DMA_Abort_IT+0x1fc>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d012      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x180>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <HAL_DMA_Abort_IT+0x200>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d00a      	beq.n	8000d5e <HAL_DMA_Abort_IT+0x17a>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <HAL_DMA_Abort_IT+0x204>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d102      	bne.n	8000d58 <HAL_DMA_Abort_IT+0x174>
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	e01b      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5c:	e018      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d62:	e015      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d64:	2310      	movs	r3, #16
 8000d66:	e013      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e011      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d70:	e00e      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d76:	e00b      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7c:	e008      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d82:	e005      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d88:	e002      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	e000      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1ac>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_DMA_Abort_IT+0x20c>)
 8000d92:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	4798      	blx	r3
    } 
  }
  return status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40020080 	.word	0x40020080
 8000dc4:	40020008 	.word	0x40020008
 8000dc8:	4002001c 	.word	0x4002001c
 8000dcc:	40020030 	.word	0x40020030
 8000dd0:	40020044 	.word	0x40020044
 8000dd4:	40020058 	.word	0x40020058
 8000dd8:	4002006c 	.word	0x4002006c
 8000ddc:	40020408 	.word	0x40020408
 8000de0:	4002041c 	.word	0x4002041c
 8000de4:	40020430 	.word	0x40020430
 8000de8:	40020444 	.word	0x40020444
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40020000 	.word	0x40020000

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b08b      	sub	sp, #44	; 0x2c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e179      	b.n	80010fc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8168 	bne.w	80010f6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4aa0      	ldr	r2, [pc, #640]	; (80010ac <HAL_GPIO_Init+0x2b8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d05e      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e30:	4a9e      	ldr	r2, [pc, #632]	; (80010ac <HAL_GPIO_Init+0x2b8>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d875      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e36:	4a9e      	ldr	r2, [pc, #632]	; (80010b0 <HAL_GPIO_Init+0x2bc>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d058      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e3c:	4a9c      	ldr	r2, [pc, #624]	; (80010b0 <HAL_GPIO_Init+0x2bc>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d86f      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e42:	4a9c      	ldr	r2, [pc, #624]	; (80010b4 <HAL_GPIO_Init+0x2c0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d052      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e48:	4a9a      	ldr	r2, [pc, #616]	; (80010b4 <HAL_GPIO_Init+0x2c0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d869      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e4e:	4a9a      	ldr	r2, [pc, #616]	; (80010b8 <HAL_GPIO_Init+0x2c4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d04c      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e54:	4a98      	ldr	r2, [pc, #608]	; (80010b8 <HAL_GPIO_Init+0x2c4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d863      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e5a:	4a98      	ldr	r2, [pc, #608]	; (80010bc <HAL_GPIO_Init+0x2c8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d046      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e60:	4a96      	ldr	r2, [pc, #600]	; (80010bc <HAL_GPIO_Init+0x2c8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d85d      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e66:	2b12      	cmp	r3, #18
 8000e68:	d82a      	bhi.n	8000ec0 <HAL_GPIO_Init+0xcc>
 8000e6a:	2b12      	cmp	r3, #18
 8000e6c:	d859      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e6e:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <HAL_GPIO_Init+0x80>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000eef 	.word	0x08000eef
 8000e78:	08000ec9 	.word	0x08000ec9
 8000e7c:	08000edb 	.word	0x08000edb
 8000e80:	08000f1d 	.word	0x08000f1d
 8000e84:	08000f23 	.word	0x08000f23
 8000e88:	08000f23 	.word	0x08000f23
 8000e8c:	08000f23 	.word	0x08000f23
 8000e90:	08000f23 	.word	0x08000f23
 8000e94:	08000f23 	.word	0x08000f23
 8000e98:	08000f23 	.word	0x08000f23
 8000e9c:	08000f23 	.word	0x08000f23
 8000ea0:	08000f23 	.word	0x08000f23
 8000ea4:	08000f23 	.word	0x08000f23
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000f23 	.word	0x08000f23
 8000eb0:	08000f23 	.word	0x08000f23
 8000eb4:	08000f23 	.word	0x08000f23
 8000eb8:	08000ed1 	.word	0x08000ed1
 8000ebc:	08000ee5 	.word	0x08000ee5
 8000ec0:	4a7f      	ldr	r2, [pc, #508]	; (80010c0 <HAL_GPIO_Init+0x2cc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ec6:	e02c      	b.n	8000f22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	623b      	str	r3, [r7, #32]
          break;
 8000ece:	e029      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	623b      	str	r3, [r7, #32]
          break;
 8000ed8:	e024      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	3308      	adds	r3, #8
 8000ee0:	623b      	str	r3, [r7, #32]
          break;
 8000ee2:	e01f      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	330c      	adds	r3, #12
 8000eea:	623b      	str	r3, [r7, #32]
          break;
 8000eec:	e01a      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d102      	bne.n	8000efc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e013      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d105      	bne.n	8000f10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f04:	2308      	movs	r3, #8
 8000f06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	611a      	str	r2, [r3, #16]
          break;
 8000f0e:	e009      	b.n	8000f24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f10:	2308      	movs	r3, #8
 8000f12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	615a      	str	r2, [r3, #20]
          break;
 8000f1a:	e003      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e000      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          break;
 8000f22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2bff      	cmp	r3, #255	; 0xff
 8000f28:	d801      	bhi.n	8000f2e <HAL_GPIO_Init+0x13a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	e001      	b.n	8000f32 <HAL_GPIO_Init+0x13e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3304      	adds	r3, #4
 8000f32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2bff      	cmp	r3, #255	; 0xff
 8000f38:	d802      	bhi.n	8000f40 <HAL_GPIO_Init+0x14c>
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0x152>
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	3b08      	subs	r3, #8
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	6a39      	ldr	r1, [r7, #32]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	431a      	orrs	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80c1 	beq.w	80010f6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f74:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b50      	ldr	r3, [pc, #320]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f8c:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <HAL_GPIO_Init+0x2d4>)
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a46      	ldr	r2, [pc, #280]	; (80010cc <HAL_GPIO_Init+0x2d8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d01f      	beq.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a45      	ldr	r2, [pc, #276]	; (80010d0 <HAL_GPIO_Init+0x2dc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d019      	beq.n	8000ff4 <HAL_GPIO_Init+0x200>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <HAL_GPIO_Init+0x2e0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_GPIO_Init+0x1fc>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a43      	ldr	r2, [pc, #268]	; (80010d8 <HAL_GPIO_Init+0x2e4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00d      	beq.n	8000fec <HAL_GPIO_Init+0x1f8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a42      	ldr	r2, [pc, #264]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x1f4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a41      	ldr	r2, [pc, #260]	; (80010e0 <HAL_GPIO_Init+0x2ec>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_GPIO_Init+0x1f0>
 8000fe0:	2305      	movs	r3, #5
 8000fe2:	e00a      	b.n	8000ffa <HAL_GPIO_Init+0x206>
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	e008      	b.n	8000ffa <HAL_GPIO_Init+0x206>
 8000fe8:	2304      	movs	r3, #4
 8000fea:	e006      	b.n	8000ffa <HAL_GPIO_Init+0x206>
 8000fec:	2303      	movs	r3, #3
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x206>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x206>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x206>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800100a:	492f      	ldr	r1, [pc, #188]	; (80010c8 <HAL_GPIO_Init+0x2d4>)
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	492e      	ldr	r1, [pc, #184]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	492a      	ldr	r1, [pc, #168]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 800103c:	4013      	ands	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4924      	ldr	r1, [pc, #144]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4920      	ldr	r1, [pc, #128]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8001064:	4013      	ands	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	491a      	ldr	r1, [pc, #104]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	608b      	str	r3, [r1, #8]
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	4916      	ldr	r1, [pc, #88]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 800108c:	4013      	ands	r3, r2
 800108e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d025      	beq.n	80010e8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	4910      	ldr	r1, [pc, #64]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60cb      	str	r3, [r1, #12]
 80010a8:	e025      	b.n	80010f6 <HAL_GPIO_Init+0x302>
 80010aa:	bf00      	nop
 80010ac:	10320000 	.word	0x10320000
 80010b0:	10310000 	.word	0x10310000
 80010b4:	10220000 	.word	0x10220000
 80010b8:	10210000 	.word	0x10210000
 80010bc:	10120000 	.word	0x10120000
 80010c0:	10110000 	.word	0x10110000
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40010800 	.word	0x40010800
 80010d0:	40010c00 	.word	0x40010c00
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40011400 	.word	0x40011400
 80010dc:	40011800 	.word	0x40011800
 80010e0:	40011c00 	.word	0x40011c00
 80010e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_GPIO_Init+0x324>)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	4909      	ldr	r1, [pc, #36]	; (8001118 <HAL_GPIO_Init+0x324>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	3301      	adds	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	fa22 f303 	lsr.w	r3, r2, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	f47f ae7e 	bne.w	8000e08 <HAL_GPIO_Init+0x14>
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	372c      	adds	r7, #44	; 0x2c
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	611a      	str	r2, [r3, #16]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e26c      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8087 	beq.w	800127a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800116c:	4b92      	ldr	r3, [pc, #584]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b04      	cmp	r3, #4
 8001176:	d00c      	beq.n	8001192 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001178:	4b8f      	ldr	r3, [pc, #572]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d112      	bne.n	80011aa <HAL_RCC_OscConfig+0x5e>
 8001184:	4b8c      	ldr	r3, [pc, #560]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d10b      	bne.n	80011aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001192:	4b89      	ldr	r3, [pc, #548]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d06c      	beq.n	8001278 <HAL_RCC_OscConfig+0x12c>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d168      	bne.n	8001278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e246      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x76>
 80011b4:	4b80      	ldr	r3, [pc, #512]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a7f      	ldr	r2, [pc, #508]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e02e      	b.n	8001220 <HAL_RCC_OscConfig+0xd4>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x98>
 80011ca:	4b7b      	ldr	r3, [pc, #492]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7a      	ldr	r2, [pc, #488]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b78      	ldr	r3, [pc, #480]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a77      	ldr	r2, [pc, #476]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xd4>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0xbc>
 80011ee:	4b72      	ldr	r3, [pc, #456]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a71      	ldr	r2, [pc, #452]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b6f      	ldr	r3, [pc, #444]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6e      	ldr	r2, [pc, #440]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xd4>
 8001208:	4b6b      	ldr	r3, [pc, #428]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a6a      	ldr	r2, [pc, #424]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a67      	ldr	r2, [pc, #412]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fbc4 	bl	80009b4 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fbc0 	bl	80009b4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1fa      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xe4>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fbb0 	bl	80009b4 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fbac 	bl	80009b4 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1e6      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x10c>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001286:	4b4c      	ldr	r3, [pc, #304]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001292:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x18c>
 800129e:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x176>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1ba      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4939      	ldr	r1, [pc, #228]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb65 	bl	80009b4 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fb61 	bl	80009b4 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e19b      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4927      	ldr	r1, [pc, #156]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fb44 	bl	80009b4 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fb40 	bl	80009b4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e17a      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d03a      	beq.n	80013d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d019      	beq.n	8001396 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_RCC_OscConfig+0x274>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001368:	f7ff fb24 	bl	80009b4 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fb20 	bl	80009b4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e15a      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f000 fad8 	bl	8001944 <RCC_Delay>
 8001394:	e01c      	b.n	80013d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_RCC_OscConfig+0x274>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff fb0a 	bl	80009b4 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a2:	e00f      	b.n	80013c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff fb06 	bl	80009b4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d908      	bls.n	80013c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e140      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	42420000 	.word	0x42420000
 80013c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	4b9e      	ldr	r3, [pc, #632]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e9      	bne.n	80013a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80a6 	beq.w	800152a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e2:	4b97      	ldr	r3, [pc, #604]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b94      	ldr	r3, [pc, #592]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a93      	ldr	r2, [pc, #588]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b91      	ldr	r3, [pc, #580]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b8e      	ldr	r3, [pc, #568]	; (8001644 <HAL_RCC_OscConfig+0x4f8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001416:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <HAL_RCC_OscConfig+0x4f8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a8a      	ldr	r2, [pc, #552]	; (8001644 <HAL_RCC_OscConfig+0x4f8>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001422:	f7ff fac7 	bl	80009b4 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142a:	f7ff fac3 	bl	80009b4 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b64      	cmp	r3, #100	; 0x64
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0fd      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	4b81      	ldr	r3, [pc, #516]	; (8001644 <HAL_RCC_OscConfig+0x4f8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x312>
 8001450:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4a7a      	ldr	r2, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6213      	str	r3, [r2, #32]
 800145c:	e02d      	b.n	80014ba <HAL_RCC_OscConfig+0x36e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x334>
 8001466:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	4a75      	ldr	r2, [pc, #468]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6213      	str	r3, [r2, #32]
 8001472:	4b73      	ldr	r3, [pc, #460]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4a72      	ldr	r2, [pc, #456]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	6213      	str	r3, [r2, #32]
 800147e:	e01c      	b.n	80014ba <HAL_RCC_OscConfig+0x36e>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d10c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x356>
 8001488:	4b6d      	ldr	r3, [pc, #436]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4a6c      	ldr	r2, [pc, #432]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6213      	str	r3, [r2, #32]
 8001494:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4a69      	ldr	r2, [pc, #420]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6213      	str	r3, [r2, #32]
 80014a0:	e00b      	b.n	80014ba <HAL_RCC_OscConfig+0x36e>
 80014a2:	4b67      	ldr	r3, [pc, #412]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a66      	ldr	r2, [pc, #408]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	4b64      	ldr	r3, [pc, #400]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a63      	ldr	r2, [pc, #396]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d015      	beq.n	80014ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fa77 	bl	80009b4 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	e00a      	b.n	80014e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff fa73 	bl	80009b4 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e0ab      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e0:	4b57      	ldr	r3, [pc, #348]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ee      	beq.n	80014ca <HAL_RCC_OscConfig+0x37e>
 80014ec:	e014      	b.n	8001518 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fa61 	bl	80009b4 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fa5d 	bl	80009b4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e095      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ee      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d105      	bne.n	800152a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151e:	4b48      	ldr	r3, [pc, #288]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a47      	ldr	r2, [pc, #284]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001528:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8081 	beq.w	8001636 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001534:	4b42      	ldr	r3, [pc, #264]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d061      	beq.n	8001604 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d146      	bne.n	80015d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_RCC_OscConfig+0x4fc>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fa31 	bl	80009b4 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001556:	f7ff fa2d 	bl	80009b4 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e067      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d108      	bne.n	8001590 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	492d      	ldr	r1, [pc, #180]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a19      	ldr	r1, [r3, #32]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	430b      	orrs	r3, r1
 80015a2:	4927      	ldr	r1, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x4fc>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fa01 	bl	80009b4 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff f9fd 	bl	80009b4 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e037      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x46a>
 80015d4:	e02f      	b.n	8001636 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_RCC_OscConfig+0x4fc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff f9ea 	bl	80009b4 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff f9e6 	bl	80009b4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e020      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x498>
 8001602:	e018      	b.n	8001636 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e013      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	429a      	cmp	r2, r3
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d001      	beq.n	8001636 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000
 8001648:	42420060 	.word	0x42420060

0800164c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0d0      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001660:	4b6a      	ldr	r3, [pc, #424]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d910      	bls.n	8001690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b67      	ldr	r3, [pc, #412]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 0207 	bic.w	r2, r3, #7
 8001676:	4965      	ldr	r1, [pc, #404]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0b8      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a8:	4b59      	ldr	r3, [pc, #356]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	494d      	ldr	r1, [pc, #308]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d040      	beq.n	800176c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d115      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e07f      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	4b41      	ldr	r3, [pc, #260]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e073      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e06b      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172a:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f023 0203 	bic.w	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4936      	ldr	r1, [pc, #216]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800173c:	f7ff f93a 	bl	80009b4 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	e00a      	b.n	800175a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7ff f936 	bl	80009b4 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e053      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 020c 	and.w	r2, r3, #12
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	429a      	cmp	r2, r3
 800176a:	d1eb      	bne.n	8001744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d210      	bcs.n	800179c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 0207 	bic.w	r2, r3, #7
 8001782:	4922      	ldr	r1, [pc, #136]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	4313      	orrs	r3, r2
 8001788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e032      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4916      	ldr	r1, [pc, #88]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	490e      	ldr	r1, [pc, #56]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017da:	f000 f821 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	490a      	ldr	r1, [pc, #40]	; (8001814 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	5ccb      	ldrb	r3, [r1, r3]
 80017ee:	fa22 f303 	lsr.w	r3, r2, r3
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1cc>)
 80017f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_ClockConfig+0x1d0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f898 	bl	8000930 <HAL_InitTick>

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000
 8001810:	40021000 	.word	0x40021000
 8001814:	08003330 	.word	0x08003330
 8001818:	20000000 	.word	0x20000000
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001820:	b490      	push	{r4, r7}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001828:	1d3c      	adds	r4, r7, #4
 800182a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800182c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001830:	f240 2301 	movw	r3, #513	; 0x201
 8001834:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x40>
 800185a:	2b08      	cmp	r3, #8
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x46>
 800185e:	e02d      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001862:	623b      	str	r3, [r7, #32]
      break;
 8001864:	e02d      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	0c9b      	lsrs	r3, r3, #18
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001872:	4413      	add	r3, r2
 8001874:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001878:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	0c5b      	lsrs	r3, r3, #17
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001892:	4413      	add	r3, r2
 8001894:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001898:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800189e:	fb02 f203 	mul.w	r2, r2, r3
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
 80018aa:	e004      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	623b      	str	r3, [r7, #32]
      break;
 80018ba:	e002      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018be:	623b      	str	r3, [r7, #32]
      break;
 80018c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c2:	6a3b      	ldr	r3, [r7, #32]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc90      	pop	{r4, r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	08003320 	.word	0x08003320
 80018d4:	40021000 	.word	0x40021000
 80018d8:	007a1200 	.word	0x007a1200
 80018dc:	003d0900 	.word	0x003d0900

080018e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000000 	.word	0x20000000

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018f8:	f7ff fff2 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	08003340 	.word	0x08003340

0800191c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001920:	f7ff ffde 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	0adb      	lsrs	r3, r3, #11
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	08003340 	.word	0x08003340

08001944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <RCC_Delay+0x34>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <RCC_Delay+0x38>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0a5b      	lsrs	r3, r3, #9
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001960:	bf00      	nop
  }
  while (Delay --);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	60fa      	str	r2, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f9      	bne.n	8001960 <RCC_Delay+0x1c>
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	20000000 	.word	0x20000000
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e03f      	b.n	8001a12 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe ff32 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2224      	movs	r2, #36	; 0x24
 80019b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fb83 	bl	80020d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b08a      	sub	sp, #40	; 0x28
 8001a1e:	af02      	add	r7, sp, #8
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4613      	mov	r3, r2
 8001a28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	d17c      	bne.n	8001b34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_UART_Transmit+0x2c>
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e075      	b.n	8001b36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_UART_Transmit+0x3e>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e06e      	b.n	8001b36 <HAL_UART_Transmit+0x11c>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2221      	movs	r2, #33	; 0x21
 8001a6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a6e:	f7fe ffa1 	bl	80009b4 <HAL_GetTick>
 8001a72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	88fa      	ldrh	r2, [r7, #6]
 8001a7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a88:	d108      	bne.n	8001a9c <HAL_UART_Transmit+0x82>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d104      	bne.n	8001a9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	e003      	b.n	8001aa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001aac:	e02a      	b.n	8001b04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9a7 	bl	8001e0c <UART_WaitOnFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e036      	b.n	8001b36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10b      	bne.n	8001ae6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001adc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	e007      	b.n	8001af6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	3301      	adds	r3, #1
 8001af4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1cf      	bne.n	8001aae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2200      	movs	r2, #0
 8001b16:	2140      	movs	r1, #64	; 0x40
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f977 	bl	8001e0c <UART_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e006      	b.n	8001b36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b34:	2302      	movs	r3, #2
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3720      	adds	r7, #32
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d140      	bne.n	8001bda <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_UART_Receive_IT+0x26>
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e039      	b.n	8001bdc <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_UART_Receive_IT+0x38>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e032      	b.n	8001bdc <HAL_UART_Receive_IT+0x9e>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	88fa      	ldrh	r2, [r7, #6]
 8001b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2222      	movs	r2, #34	; 0x22
 8001b9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bb4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0220 	orr.w	r2, r2, #32
 8001bd4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e000      	b.n	8001bdc <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001bda:	2302      	movs	r3, #2
  }
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10d      	bne.n	8001c3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_UART_IRQHandler+0x52>
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f9cc 	bl	8001fd0 <UART_Receive_IT>
      return;
 8001c38:	e0d0      	b.n	8001ddc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80b0 	beq.w	8001da2 <HAL_UART_IRQHandler+0x1ba>
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_UART_IRQHandler+0x70>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80a5 	beq.w	8001da2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <HAL_UART_IRQHandler+0x90>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <HAL_UART_IRQHandler+0xb0>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c90:	f043 0202 	orr.w	r2, r3, #2
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_UART_IRQHandler+0xd0>
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb0:	f043 0204 	orr.w	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00f      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xfa>
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d104      	bne.n	8001cd6 <HAL_UART_IRQHandler+0xee>
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cda:	f043 0208 	orr.w	r2, r3, #8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d077      	beq.n	8001dda <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_UART_IRQHandler+0x11c>
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f966 	bl	8001fd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf14      	ite	ne
 8001d12:	2301      	movne	r3, #1
 8001d14:	2300      	moveq	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_UART_IRQHandler+0x144>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d031      	beq.n	8001d90 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8b7 	bl	8001ea0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d023      	beq.n	8001d88 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d4e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5c:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <HAL_UART_IRQHandler+0x1fc>)
 8001d5e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe ff3d 	bl	8000be4 <HAL_DMA_Abort_IT>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d016      	beq.n	8001d9e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d7e:	e00e      	b.n	8001d9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f83a 	bl	8001dfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d86:	e00a      	b.n	8001d9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f836 	bl	8001dfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d8e:	e006      	b.n	8001d9e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f832 	bl	8001dfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d9c:	e01d      	b.n	8001dda <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d9e:	bf00      	nop
    return;
 8001da0:	e01b      	b.n	8001dda <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_UART_IRQHandler+0x1d6>
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8a3 	bl	8001f02 <UART_Transmit_IT>
    return;
 8001dbc:	e00e      	b.n	8001ddc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d009      	beq.n	8001ddc <HAL_UART_IRQHandler+0x1f4>
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8e4 	bl	8001fa0 <UART_EndTransmit_IT>
    return;
 8001dd8:	e000      	b.n	8001ddc <HAL_UART_IRQHandler+0x1f4>
    return;
 8001dda:	bf00      	nop
  }
}
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	08001edb 	.word	0x08001edb

08001de8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e1c:	e02c      	b.n	8001e78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d028      	beq.n	8001e78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8001e2c:	f7fe fdc2 	bl	80009b4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d21d      	bcs.n	8001e78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e00f      	b.n	8001e98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4013      	ands	r3, r2
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d0c3      	beq.n	8001e1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001eb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7ff ff80 	bl	8001dfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b21      	cmp	r3, #33	; 0x21
 8001f14:	d13e      	bne.n	8001f94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1e:	d114      	bne.n	8001f4a <UART_Transmit_IT+0x48>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d110      	bne.n	8001f4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	1c9a      	adds	r2, r3, #2
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	621a      	str	r2, [r3, #32]
 8001f48:	e008      	b.n	8001f5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	1c59      	adds	r1, r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6211      	str	r1, [r2, #32]
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff11 	bl	8001de8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b22      	cmp	r3, #34	; 0x22
 8001fe2:	d170      	bne.n	80020c6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fec:	d117      	bne.n	800201e <UART_Receive_IT+0x4e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d113      	bne.n	800201e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	b29b      	uxth	r3, r3
 8002008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800200c:	b29a      	uxth	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	1c9a      	adds	r2, r3, #2
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
 800201c:	e026      	b.n	800206c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002030:	d007      	beq.n	8002042 <UART_Receive_IT+0x72>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <UART_Receive_IT+0x80>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	e008      	b.n	8002062 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800205c:	b2da      	uxtb	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29b      	uxth	r3, r3
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4619      	mov	r1, r3
 800207a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800207c:	2b00      	cmp	r3, #0
 800207e:	d120      	bne.n	80020c2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0220 	bic.w	r2, r2, #32
 800208e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800209e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7fe f91d 	bl	80002f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e002      	b.n	80020c8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800210a:	f023 030c 	bic.w	r3, r3, #12
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	430b      	orrs	r3, r1
 8002116:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <UART_SetConfig+0x114>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d103      	bne.n	8002140 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002138:	f7ff fbf0 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	e002      	b.n	8002146 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002140:	f7ff fbd8 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 8002144:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <UART_SetConfig+0x118>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	0119      	lsls	r1, r3, #4
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	009a      	lsls	r2, r3, #2
 8002170:	441a      	add	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	fbb2 f2f3 	udiv	r2, r2, r3
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <UART_SetConfig+0x118>)
 800217e:	fba3 0302 	umull	r0, r3, r3, r2
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2064      	movs	r0, #100	; 0x64
 8002186:	fb00 f303 	mul.w	r3, r0, r3
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	3332      	adds	r3, #50	; 0x32
 8002190:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <UART_SetConfig+0x118>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219c:	4419      	add	r1, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	009a      	lsls	r2, r3, #2
 80021a8:	441a      	add	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <UART_SetConfig+0x118>)
 80021b6:	fba3 0302 	umull	r0, r3, r3, r2
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	2064      	movs	r0, #100	; 0x64
 80021be:	fb00 f303 	mul.w	r3, r0, r3
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	3332      	adds	r3, #50	; 0x32
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <UART_SetConfig+0x118>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	440a      	add	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40013800 	.word	0x40013800
 80021e8:	51eb851f 	.word	0x51eb851f

080021ec <__errno>:
 80021ec:	4b01      	ldr	r3, [pc, #4]	; (80021f4 <__errno+0x8>)
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <__libc_init_array>:
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	2600      	movs	r6, #0
 80021fc:	4d0c      	ldr	r5, [pc, #48]	; (8002230 <__libc_init_array+0x38>)
 80021fe:	4c0d      	ldr	r4, [pc, #52]	; (8002234 <__libc_init_array+0x3c>)
 8002200:	1b64      	subs	r4, r4, r5
 8002202:	10a4      	asrs	r4, r4, #2
 8002204:	42a6      	cmp	r6, r4
 8002206:	d109      	bne.n	800221c <__libc_init_array+0x24>
 8002208:	f001 f850 	bl	80032ac <_init>
 800220c:	2600      	movs	r6, #0
 800220e:	4d0a      	ldr	r5, [pc, #40]	; (8002238 <__libc_init_array+0x40>)
 8002210:	4c0a      	ldr	r4, [pc, #40]	; (800223c <__libc_init_array+0x44>)
 8002212:	1b64      	subs	r4, r4, r5
 8002214:	10a4      	asrs	r4, r4, #2
 8002216:	42a6      	cmp	r6, r4
 8002218:	d105      	bne.n	8002226 <__libc_init_array+0x2e>
 800221a:	bd70      	pop	{r4, r5, r6, pc}
 800221c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002220:	4798      	blx	r3
 8002222:	3601      	adds	r6, #1
 8002224:	e7ee      	b.n	8002204 <__libc_init_array+0xc>
 8002226:	f855 3b04 	ldr.w	r3, [r5], #4
 800222a:	4798      	blx	r3
 800222c:	3601      	adds	r6, #1
 800222e:	e7f2      	b.n	8002216 <__libc_init_array+0x1e>
 8002230:	080033e0 	.word	0x080033e0
 8002234:	080033e0 	.word	0x080033e0
 8002238:	080033e0 	.word	0x080033e0
 800223c:	080033e4 	.word	0x080033e4

08002240 <memset>:
 8002240:	4603      	mov	r3, r0
 8002242:	4402      	add	r2, r0
 8002244:	4293      	cmp	r3, r2
 8002246:	d100      	bne.n	800224a <memset+0xa>
 8002248:	4770      	bx	lr
 800224a:	f803 1b01 	strb.w	r1, [r3], #1
 800224e:	e7f9      	b.n	8002244 <memset+0x4>

08002250 <iprintf>:
 8002250:	b40f      	push	{r0, r1, r2, r3}
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <iprintf+0x2c>)
 8002254:	b513      	push	{r0, r1, r4, lr}
 8002256:	681c      	ldr	r4, [r3, #0]
 8002258:	b124      	cbz	r4, 8002264 <iprintf+0x14>
 800225a:	69a3      	ldr	r3, [r4, #24]
 800225c:	b913      	cbnz	r3, 8002264 <iprintf+0x14>
 800225e:	4620      	mov	r0, r4
 8002260:	f000 f9ee 	bl	8002640 <__sinit>
 8002264:	ab05      	add	r3, sp, #20
 8002266:	4620      	mov	r0, r4
 8002268:	9a04      	ldr	r2, [sp, #16]
 800226a:	68a1      	ldr	r1, [r4, #8]
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	f000 fbc1 	bl	80029f4 <_vfiprintf_r>
 8002272:	b002      	add	sp, #8
 8002274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002278:	b004      	add	sp, #16
 800227a:	4770      	bx	lr
 800227c:	2000000c 	.word	0x2000000c

08002280 <setvbuf>:
 8002280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002284:	461d      	mov	r5, r3
 8002286:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <setvbuf+0x17c>)
 8002288:	4604      	mov	r4, r0
 800228a:	681f      	ldr	r7, [r3, #0]
 800228c:	460e      	mov	r6, r1
 800228e:	4690      	mov	r8, r2
 8002290:	b127      	cbz	r7, 800229c <setvbuf+0x1c>
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	b913      	cbnz	r3, 800229c <setvbuf+0x1c>
 8002296:	4638      	mov	r0, r7
 8002298:	f000 f9d2 	bl	8002640 <__sinit>
 800229c:	4b58      	ldr	r3, [pc, #352]	; (8002400 <setvbuf+0x180>)
 800229e:	429c      	cmp	r4, r3
 80022a0:	d167      	bne.n	8002372 <setvbuf+0xf2>
 80022a2:	687c      	ldr	r4, [r7, #4]
 80022a4:	f1b8 0f02 	cmp.w	r8, #2
 80022a8:	d006      	beq.n	80022b8 <setvbuf+0x38>
 80022aa:	f1b8 0f01 	cmp.w	r8, #1
 80022ae:	f200 809f 	bhi.w	80023f0 <setvbuf+0x170>
 80022b2:	2d00      	cmp	r5, #0
 80022b4:	f2c0 809c 	blt.w	80023f0 <setvbuf+0x170>
 80022b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022ba:	07db      	lsls	r3, r3, #31
 80022bc:	d405      	bmi.n	80022ca <setvbuf+0x4a>
 80022be:	89a3      	ldrh	r3, [r4, #12]
 80022c0:	0598      	lsls	r0, r3, #22
 80022c2:	d402      	bmi.n	80022ca <setvbuf+0x4a>
 80022c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022c6:	f000 fa59 	bl	800277c <__retarget_lock_acquire_recursive>
 80022ca:	4621      	mov	r1, r4
 80022cc:	4638      	mov	r0, r7
 80022ce:	f000 f923 	bl	8002518 <_fflush_r>
 80022d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022d4:	b141      	cbz	r1, 80022e8 <setvbuf+0x68>
 80022d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022da:	4299      	cmp	r1, r3
 80022dc:	d002      	beq.n	80022e4 <setvbuf+0x64>
 80022de:	4638      	mov	r0, r7
 80022e0:	f000 faba 	bl	8002858 <_free_r>
 80022e4:	2300      	movs	r3, #0
 80022e6:	6363      	str	r3, [r4, #52]	; 0x34
 80022e8:	2300      	movs	r3, #0
 80022ea:	61a3      	str	r3, [r4, #24]
 80022ec:	6063      	str	r3, [r4, #4]
 80022ee:	89a3      	ldrh	r3, [r4, #12]
 80022f0:	0619      	lsls	r1, r3, #24
 80022f2:	d503      	bpl.n	80022fc <setvbuf+0x7c>
 80022f4:	4638      	mov	r0, r7
 80022f6:	6921      	ldr	r1, [r4, #16]
 80022f8:	f000 faae 	bl	8002858 <_free_r>
 80022fc:	89a3      	ldrh	r3, [r4, #12]
 80022fe:	f1b8 0f02 	cmp.w	r8, #2
 8002302:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	81a3      	strh	r3, [r4, #12]
 800230c:	d06c      	beq.n	80023e8 <setvbuf+0x168>
 800230e:	ab01      	add	r3, sp, #4
 8002310:	466a      	mov	r2, sp
 8002312:	4621      	mov	r1, r4
 8002314:	4638      	mov	r0, r7
 8002316:	f000 fa33 	bl	8002780 <__swhatbuf_r>
 800231a:	89a3      	ldrh	r3, [r4, #12]
 800231c:	4318      	orrs	r0, r3
 800231e:	81a0      	strh	r0, [r4, #12]
 8002320:	2d00      	cmp	r5, #0
 8002322:	d130      	bne.n	8002386 <setvbuf+0x106>
 8002324:	9d00      	ldr	r5, [sp, #0]
 8002326:	4628      	mov	r0, r5
 8002328:	f000 fa8e 	bl	8002848 <malloc>
 800232c:	4606      	mov	r6, r0
 800232e:	2800      	cmp	r0, #0
 8002330:	d155      	bne.n	80023de <setvbuf+0x15e>
 8002332:	f8dd 9000 	ldr.w	r9, [sp]
 8002336:	45a9      	cmp	r9, r5
 8002338:	d14a      	bne.n	80023d0 <setvbuf+0x150>
 800233a:	f04f 35ff 	mov.w	r5, #4294967295
 800233e:	2200      	movs	r2, #0
 8002340:	60a2      	str	r2, [r4, #8]
 8002342:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002346:	6022      	str	r2, [r4, #0]
 8002348:	6122      	str	r2, [r4, #16]
 800234a:	2201      	movs	r2, #1
 800234c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002350:	6162      	str	r2, [r4, #20]
 8002352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	07d2      	lsls	r2, r2, #31
 800235a:	81a3      	strh	r3, [r4, #12]
 800235c:	d405      	bmi.n	800236a <setvbuf+0xea>
 800235e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002362:	d102      	bne.n	800236a <setvbuf+0xea>
 8002364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002366:	f000 fa0a 	bl	800277e <__retarget_lock_release_recursive>
 800236a:	4628      	mov	r0, r5
 800236c:	b003      	add	sp, #12
 800236e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <setvbuf+0x184>)
 8002374:	429c      	cmp	r4, r3
 8002376:	d101      	bne.n	800237c <setvbuf+0xfc>
 8002378:	68bc      	ldr	r4, [r7, #8]
 800237a:	e793      	b.n	80022a4 <setvbuf+0x24>
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <setvbuf+0x188>)
 800237e:	429c      	cmp	r4, r3
 8002380:	bf08      	it	eq
 8002382:	68fc      	ldreq	r4, [r7, #12]
 8002384:	e78e      	b.n	80022a4 <setvbuf+0x24>
 8002386:	2e00      	cmp	r6, #0
 8002388:	d0cd      	beq.n	8002326 <setvbuf+0xa6>
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	b913      	cbnz	r3, 8002394 <setvbuf+0x114>
 800238e:	4638      	mov	r0, r7
 8002390:	f000 f956 	bl	8002640 <__sinit>
 8002394:	f1b8 0f01 	cmp.w	r8, #1
 8002398:	bf08      	it	eq
 800239a:	89a3      	ldrheq	r3, [r4, #12]
 800239c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80023a0:	bf04      	itt	eq
 80023a2:	f043 0301 	orreq.w	r3, r3, #1
 80023a6:	81a3      	strheq	r3, [r4, #12]
 80023a8:	89a2      	ldrh	r2, [r4, #12]
 80023aa:	6026      	str	r6, [r4, #0]
 80023ac:	f012 0308 	ands.w	r3, r2, #8
 80023b0:	d01c      	beq.n	80023ec <setvbuf+0x16c>
 80023b2:	07d3      	lsls	r3, r2, #31
 80023b4:	bf41      	itttt	mi
 80023b6:	2300      	movmi	r3, #0
 80023b8:	426d      	negmi	r5, r5
 80023ba:	60a3      	strmi	r3, [r4, #8]
 80023bc:	61a5      	strmi	r5, [r4, #24]
 80023be:	bf58      	it	pl
 80023c0:	60a5      	strpl	r5, [r4, #8]
 80023c2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80023c4:	f015 0501 	ands.w	r5, r5, #1
 80023c8:	d115      	bne.n	80023f6 <setvbuf+0x176>
 80023ca:	f412 7f00 	tst.w	r2, #512	; 0x200
 80023ce:	e7c8      	b.n	8002362 <setvbuf+0xe2>
 80023d0:	4648      	mov	r0, r9
 80023d2:	f000 fa39 	bl	8002848 <malloc>
 80023d6:	4606      	mov	r6, r0
 80023d8:	2800      	cmp	r0, #0
 80023da:	d0ae      	beq.n	800233a <setvbuf+0xba>
 80023dc:	464d      	mov	r5, r9
 80023de:	89a3      	ldrh	r3, [r4, #12]
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	81a3      	strh	r3, [r4, #12]
 80023e6:	e7d0      	b.n	800238a <setvbuf+0x10a>
 80023e8:	2500      	movs	r5, #0
 80023ea:	e7a8      	b.n	800233e <setvbuf+0xbe>
 80023ec:	60a3      	str	r3, [r4, #8]
 80023ee:	e7e8      	b.n	80023c2 <setvbuf+0x142>
 80023f0:	f04f 35ff 	mov.w	r5, #4294967295
 80023f4:	e7b9      	b.n	800236a <setvbuf+0xea>
 80023f6:	2500      	movs	r5, #0
 80023f8:	e7b7      	b.n	800236a <setvbuf+0xea>
 80023fa:	bf00      	nop
 80023fc:	2000000c 	.word	0x2000000c
 8002400:	0800336c 	.word	0x0800336c
 8002404:	0800338c 	.word	0x0800338c
 8002408:	0800334c 	.word	0x0800334c

0800240c <__sflush_r>:
 800240c:	898a      	ldrh	r2, [r1, #12]
 800240e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002412:	4605      	mov	r5, r0
 8002414:	0710      	lsls	r0, r2, #28
 8002416:	460c      	mov	r4, r1
 8002418:	d458      	bmi.n	80024cc <__sflush_r+0xc0>
 800241a:	684b      	ldr	r3, [r1, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	dc05      	bgt.n	800242c <__sflush_r+0x20>
 8002420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	dc02      	bgt.n	800242c <__sflush_r+0x20>
 8002426:	2000      	movs	r0, #0
 8002428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800242c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800242e:	2e00      	cmp	r6, #0
 8002430:	d0f9      	beq.n	8002426 <__sflush_r+0x1a>
 8002432:	2300      	movs	r3, #0
 8002434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002438:	682f      	ldr	r7, [r5, #0]
 800243a:	602b      	str	r3, [r5, #0]
 800243c:	d032      	beq.n	80024a4 <__sflush_r+0x98>
 800243e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002440:	89a3      	ldrh	r3, [r4, #12]
 8002442:	075a      	lsls	r2, r3, #29
 8002444:	d505      	bpl.n	8002452 <__sflush_r+0x46>
 8002446:	6863      	ldr	r3, [r4, #4]
 8002448:	1ac0      	subs	r0, r0, r3
 800244a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800244c:	b10b      	cbz	r3, 8002452 <__sflush_r+0x46>
 800244e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002450:	1ac0      	subs	r0, r0, r3
 8002452:	2300      	movs	r3, #0
 8002454:	4602      	mov	r2, r0
 8002456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002458:	4628      	mov	r0, r5
 800245a:	6a21      	ldr	r1, [r4, #32]
 800245c:	47b0      	blx	r6
 800245e:	1c43      	adds	r3, r0, #1
 8002460:	89a3      	ldrh	r3, [r4, #12]
 8002462:	d106      	bne.n	8002472 <__sflush_r+0x66>
 8002464:	6829      	ldr	r1, [r5, #0]
 8002466:	291d      	cmp	r1, #29
 8002468:	d82c      	bhi.n	80024c4 <__sflush_r+0xb8>
 800246a:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <__sflush_r+0x108>)
 800246c:	40ca      	lsrs	r2, r1
 800246e:	07d6      	lsls	r6, r2, #31
 8002470:	d528      	bpl.n	80024c4 <__sflush_r+0xb8>
 8002472:	2200      	movs	r2, #0
 8002474:	6062      	str	r2, [r4, #4]
 8002476:	6922      	ldr	r2, [r4, #16]
 8002478:	04d9      	lsls	r1, r3, #19
 800247a:	6022      	str	r2, [r4, #0]
 800247c:	d504      	bpl.n	8002488 <__sflush_r+0x7c>
 800247e:	1c42      	adds	r2, r0, #1
 8002480:	d101      	bne.n	8002486 <__sflush_r+0x7a>
 8002482:	682b      	ldr	r3, [r5, #0]
 8002484:	b903      	cbnz	r3, 8002488 <__sflush_r+0x7c>
 8002486:	6560      	str	r0, [r4, #84]	; 0x54
 8002488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800248a:	602f      	str	r7, [r5, #0]
 800248c:	2900      	cmp	r1, #0
 800248e:	d0ca      	beq.n	8002426 <__sflush_r+0x1a>
 8002490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002494:	4299      	cmp	r1, r3
 8002496:	d002      	beq.n	800249e <__sflush_r+0x92>
 8002498:	4628      	mov	r0, r5
 800249a:	f000 f9dd 	bl	8002858 <_free_r>
 800249e:	2000      	movs	r0, #0
 80024a0:	6360      	str	r0, [r4, #52]	; 0x34
 80024a2:	e7c1      	b.n	8002428 <__sflush_r+0x1c>
 80024a4:	6a21      	ldr	r1, [r4, #32]
 80024a6:	2301      	movs	r3, #1
 80024a8:	4628      	mov	r0, r5
 80024aa:	47b0      	blx	r6
 80024ac:	1c41      	adds	r1, r0, #1
 80024ae:	d1c7      	bne.n	8002440 <__sflush_r+0x34>
 80024b0:	682b      	ldr	r3, [r5, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0c4      	beq.n	8002440 <__sflush_r+0x34>
 80024b6:	2b1d      	cmp	r3, #29
 80024b8:	d001      	beq.n	80024be <__sflush_r+0xb2>
 80024ba:	2b16      	cmp	r3, #22
 80024bc:	d101      	bne.n	80024c2 <__sflush_r+0xb6>
 80024be:	602f      	str	r7, [r5, #0]
 80024c0:	e7b1      	b.n	8002426 <__sflush_r+0x1a>
 80024c2:	89a3      	ldrh	r3, [r4, #12]
 80024c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c8:	81a3      	strh	r3, [r4, #12]
 80024ca:	e7ad      	b.n	8002428 <__sflush_r+0x1c>
 80024cc:	690f      	ldr	r7, [r1, #16]
 80024ce:	2f00      	cmp	r7, #0
 80024d0:	d0a9      	beq.n	8002426 <__sflush_r+0x1a>
 80024d2:	0793      	lsls	r3, r2, #30
 80024d4:	bf18      	it	ne
 80024d6:	2300      	movne	r3, #0
 80024d8:	680e      	ldr	r6, [r1, #0]
 80024da:	bf08      	it	eq
 80024dc:	694b      	ldreq	r3, [r1, #20]
 80024de:	eba6 0807 	sub.w	r8, r6, r7
 80024e2:	600f      	str	r7, [r1, #0]
 80024e4:	608b      	str	r3, [r1, #8]
 80024e6:	f1b8 0f00 	cmp.w	r8, #0
 80024ea:	dd9c      	ble.n	8002426 <__sflush_r+0x1a>
 80024ec:	4643      	mov	r3, r8
 80024ee:	463a      	mov	r2, r7
 80024f0:	4628      	mov	r0, r5
 80024f2:	6a21      	ldr	r1, [r4, #32]
 80024f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80024f6:	47b0      	blx	r6
 80024f8:	2800      	cmp	r0, #0
 80024fa:	dc06      	bgt.n	800250a <__sflush_r+0xfe>
 80024fc:	89a3      	ldrh	r3, [r4, #12]
 80024fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002506:	81a3      	strh	r3, [r4, #12]
 8002508:	e78e      	b.n	8002428 <__sflush_r+0x1c>
 800250a:	4407      	add	r7, r0
 800250c:	eba8 0800 	sub.w	r8, r8, r0
 8002510:	e7e9      	b.n	80024e6 <__sflush_r+0xda>
 8002512:	bf00      	nop
 8002514:	20400001 	.word	0x20400001

08002518 <_fflush_r>:
 8002518:	b538      	push	{r3, r4, r5, lr}
 800251a:	690b      	ldr	r3, [r1, #16]
 800251c:	4605      	mov	r5, r0
 800251e:	460c      	mov	r4, r1
 8002520:	b913      	cbnz	r3, 8002528 <_fflush_r+0x10>
 8002522:	2500      	movs	r5, #0
 8002524:	4628      	mov	r0, r5
 8002526:	bd38      	pop	{r3, r4, r5, pc}
 8002528:	b118      	cbz	r0, 8002532 <_fflush_r+0x1a>
 800252a:	6983      	ldr	r3, [r0, #24]
 800252c:	b90b      	cbnz	r3, 8002532 <_fflush_r+0x1a>
 800252e:	f000 f887 	bl	8002640 <__sinit>
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <_fflush_r+0x6c>)
 8002534:	429c      	cmp	r4, r3
 8002536:	d11b      	bne.n	8002570 <_fflush_r+0x58>
 8002538:	686c      	ldr	r4, [r5, #4]
 800253a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0ef      	beq.n	8002522 <_fflush_r+0xa>
 8002542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002544:	07d0      	lsls	r0, r2, #31
 8002546:	d404      	bmi.n	8002552 <_fflush_r+0x3a>
 8002548:	0599      	lsls	r1, r3, #22
 800254a:	d402      	bmi.n	8002552 <_fflush_r+0x3a>
 800254c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800254e:	f000 f915 	bl	800277c <__retarget_lock_acquire_recursive>
 8002552:	4628      	mov	r0, r5
 8002554:	4621      	mov	r1, r4
 8002556:	f7ff ff59 	bl	800240c <__sflush_r>
 800255a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800255c:	4605      	mov	r5, r0
 800255e:	07da      	lsls	r2, r3, #31
 8002560:	d4e0      	bmi.n	8002524 <_fflush_r+0xc>
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	059b      	lsls	r3, r3, #22
 8002566:	d4dd      	bmi.n	8002524 <_fflush_r+0xc>
 8002568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800256a:	f000 f908 	bl	800277e <__retarget_lock_release_recursive>
 800256e:	e7d9      	b.n	8002524 <_fflush_r+0xc>
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <_fflush_r+0x70>)
 8002572:	429c      	cmp	r4, r3
 8002574:	d101      	bne.n	800257a <_fflush_r+0x62>
 8002576:	68ac      	ldr	r4, [r5, #8]
 8002578:	e7df      	b.n	800253a <_fflush_r+0x22>
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <_fflush_r+0x74>)
 800257c:	429c      	cmp	r4, r3
 800257e:	bf08      	it	eq
 8002580:	68ec      	ldreq	r4, [r5, #12]
 8002582:	e7da      	b.n	800253a <_fflush_r+0x22>
 8002584:	0800336c 	.word	0x0800336c
 8002588:	0800338c 	.word	0x0800338c
 800258c:	0800334c 	.word	0x0800334c

08002590 <std>:
 8002590:	2300      	movs	r3, #0
 8002592:	b510      	push	{r4, lr}
 8002594:	4604      	mov	r4, r0
 8002596:	e9c0 3300 	strd	r3, r3, [r0]
 800259a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800259e:	6083      	str	r3, [r0, #8]
 80025a0:	8181      	strh	r1, [r0, #12]
 80025a2:	6643      	str	r3, [r0, #100]	; 0x64
 80025a4:	81c2      	strh	r2, [r0, #14]
 80025a6:	6183      	str	r3, [r0, #24]
 80025a8:	4619      	mov	r1, r3
 80025aa:	2208      	movs	r2, #8
 80025ac:	305c      	adds	r0, #92	; 0x5c
 80025ae:	f7ff fe47 	bl	8002240 <memset>
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <std+0x38>)
 80025b4:	6224      	str	r4, [r4, #32]
 80025b6:	6263      	str	r3, [r4, #36]	; 0x24
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <std+0x3c>)
 80025ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <std+0x40>)
 80025be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <std+0x44>)
 80025c2:	6323      	str	r3, [r4, #48]	; 0x30
 80025c4:	bd10      	pop	{r4, pc}
 80025c6:	bf00      	nop
 80025c8:	08002fa1 	.word	0x08002fa1
 80025cc:	08002fc3 	.word	0x08002fc3
 80025d0:	08002ffb 	.word	0x08002ffb
 80025d4:	0800301f 	.word	0x0800301f

080025d8 <_cleanup_r>:
 80025d8:	4901      	ldr	r1, [pc, #4]	; (80025e0 <_cleanup_r+0x8>)
 80025da:	f000 b8af 	b.w	800273c <_fwalk_reent>
 80025de:	bf00      	nop
 80025e0:	08002519 	.word	0x08002519

080025e4 <__sfmoreglue>:
 80025e4:	b570      	push	{r4, r5, r6, lr}
 80025e6:	2568      	movs	r5, #104	; 0x68
 80025e8:	1e4a      	subs	r2, r1, #1
 80025ea:	4355      	muls	r5, r2
 80025ec:	460e      	mov	r6, r1
 80025ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025f2:	f000 f97d 	bl	80028f0 <_malloc_r>
 80025f6:	4604      	mov	r4, r0
 80025f8:	b140      	cbz	r0, 800260c <__sfmoreglue+0x28>
 80025fa:	2100      	movs	r1, #0
 80025fc:	e9c0 1600 	strd	r1, r6, [r0]
 8002600:	300c      	adds	r0, #12
 8002602:	60a0      	str	r0, [r4, #8]
 8002604:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002608:	f7ff fe1a 	bl	8002240 <memset>
 800260c:	4620      	mov	r0, r4
 800260e:	bd70      	pop	{r4, r5, r6, pc}

08002610 <__sfp_lock_acquire>:
 8002610:	4801      	ldr	r0, [pc, #4]	; (8002618 <__sfp_lock_acquire+0x8>)
 8002612:	f000 b8b3 	b.w	800277c <__retarget_lock_acquire_recursive>
 8002616:	bf00      	nop
 8002618:	20000100 	.word	0x20000100

0800261c <__sfp_lock_release>:
 800261c:	4801      	ldr	r0, [pc, #4]	; (8002624 <__sfp_lock_release+0x8>)
 800261e:	f000 b8ae 	b.w	800277e <__retarget_lock_release_recursive>
 8002622:	bf00      	nop
 8002624:	20000100 	.word	0x20000100

08002628 <__sinit_lock_acquire>:
 8002628:	4801      	ldr	r0, [pc, #4]	; (8002630 <__sinit_lock_acquire+0x8>)
 800262a:	f000 b8a7 	b.w	800277c <__retarget_lock_acquire_recursive>
 800262e:	bf00      	nop
 8002630:	200000fb 	.word	0x200000fb

08002634 <__sinit_lock_release>:
 8002634:	4801      	ldr	r0, [pc, #4]	; (800263c <__sinit_lock_release+0x8>)
 8002636:	f000 b8a2 	b.w	800277e <__retarget_lock_release_recursive>
 800263a:	bf00      	nop
 800263c:	200000fb 	.word	0x200000fb

08002640 <__sinit>:
 8002640:	b510      	push	{r4, lr}
 8002642:	4604      	mov	r4, r0
 8002644:	f7ff fff0 	bl	8002628 <__sinit_lock_acquire>
 8002648:	69a3      	ldr	r3, [r4, #24]
 800264a:	b11b      	cbz	r3, 8002654 <__sinit+0x14>
 800264c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002650:	f7ff bff0 	b.w	8002634 <__sinit_lock_release>
 8002654:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002658:	6523      	str	r3, [r4, #80]	; 0x50
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <__sinit+0x68>)
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <__sinit+0x6c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	62a2      	str	r2, [r4, #40]	; 0x28
 8002662:	42a3      	cmp	r3, r4
 8002664:	bf08      	it	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	4620      	mov	r0, r4
 800266a:	bf08      	it	eq
 800266c:	61a3      	streq	r3, [r4, #24]
 800266e:	f000 f81f 	bl	80026b0 <__sfp>
 8002672:	6060      	str	r0, [r4, #4]
 8002674:	4620      	mov	r0, r4
 8002676:	f000 f81b 	bl	80026b0 <__sfp>
 800267a:	60a0      	str	r0, [r4, #8]
 800267c:	4620      	mov	r0, r4
 800267e:	f000 f817 	bl	80026b0 <__sfp>
 8002682:	2200      	movs	r2, #0
 8002684:	2104      	movs	r1, #4
 8002686:	60e0      	str	r0, [r4, #12]
 8002688:	6860      	ldr	r0, [r4, #4]
 800268a:	f7ff ff81 	bl	8002590 <std>
 800268e:	2201      	movs	r2, #1
 8002690:	2109      	movs	r1, #9
 8002692:	68a0      	ldr	r0, [r4, #8]
 8002694:	f7ff ff7c 	bl	8002590 <std>
 8002698:	2202      	movs	r2, #2
 800269a:	2112      	movs	r1, #18
 800269c:	68e0      	ldr	r0, [r4, #12]
 800269e:	f7ff ff77 	bl	8002590 <std>
 80026a2:	2301      	movs	r3, #1
 80026a4:	61a3      	str	r3, [r4, #24]
 80026a6:	e7d1      	b.n	800264c <__sinit+0xc>
 80026a8:	08003348 	.word	0x08003348
 80026ac:	080025d9 	.word	0x080025d9

080026b0 <__sfp>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	4607      	mov	r7, r0
 80026b4:	f7ff ffac 	bl	8002610 <__sfp_lock_acquire>
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <__sfp+0x84>)
 80026ba:	681e      	ldr	r6, [r3, #0]
 80026bc:	69b3      	ldr	r3, [r6, #24]
 80026be:	b913      	cbnz	r3, 80026c6 <__sfp+0x16>
 80026c0:	4630      	mov	r0, r6
 80026c2:	f7ff ffbd 	bl	8002640 <__sinit>
 80026c6:	3648      	adds	r6, #72	; 0x48
 80026c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	d503      	bpl.n	80026d8 <__sfp+0x28>
 80026d0:	6833      	ldr	r3, [r6, #0]
 80026d2:	b30b      	cbz	r3, 8002718 <__sfp+0x68>
 80026d4:	6836      	ldr	r6, [r6, #0]
 80026d6:	e7f7      	b.n	80026c8 <__sfp+0x18>
 80026d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026dc:	b9d5      	cbnz	r5, 8002714 <__sfp+0x64>
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <__sfp+0x88>)
 80026e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026e4:	60e3      	str	r3, [r4, #12]
 80026e6:	6665      	str	r5, [r4, #100]	; 0x64
 80026e8:	f000 f847 	bl	800277a <__retarget_lock_init_recursive>
 80026ec:	f7ff ff96 	bl	800261c <__sfp_lock_release>
 80026f0:	2208      	movs	r2, #8
 80026f2:	4629      	mov	r1, r5
 80026f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026fc:	6025      	str	r5, [r4, #0]
 80026fe:	61a5      	str	r5, [r4, #24]
 8002700:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002704:	f7ff fd9c 	bl	8002240 <memset>
 8002708:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800270c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002710:	4620      	mov	r0, r4
 8002712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002714:	3468      	adds	r4, #104	; 0x68
 8002716:	e7d9      	b.n	80026cc <__sfp+0x1c>
 8002718:	2104      	movs	r1, #4
 800271a:	4638      	mov	r0, r7
 800271c:	f7ff ff62 	bl	80025e4 <__sfmoreglue>
 8002720:	4604      	mov	r4, r0
 8002722:	6030      	str	r0, [r6, #0]
 8002724:	2800      	cmp	r0, #0
 8002726:	d1d5      	bne.n	80026d4 <__sfp+0x24>
 8002728:	f7ff ff78 	bl	800261c <__sfp_lock_release>
 800272c:	230c      	movs	r3, #12
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	e7ee      	b.n	8002710 <__sfp+0x60>
 8002732:	bf00      	nop
 8002734:	08003348 	.word	0x08003348
 8002738:	ffff0001 	.word	0xffff0001

0800273c <_fwalk_reent>:
 800273c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002740:	4606      	mov	r6, r0
 8002742:	4688      	mov	r8, r1
 8002744:	2700      	movs	r7, #0
 8002746:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800274a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800274e:	f1b9 0901 	subs.w	r9, r9, #1
 8002752:	d505      	bpl.n	8002760 <_fwalk_reent+0x24>
 8002754:	6824      	ldr	r4, [r4, #0]
 8002756:	2c00      	cmp	r4, #0
 8002758:	d1f7      	bne.n	800274a <_fwalk_reent+0xe>
 800275a:	4638      	mov	r0, r7
 800275c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002760:	89ab      	ldrh	r3, [r5, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d907      	bls.n	8002776 <_fwalk_reent+0x3a>
 8002766:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800276a:	3301      	adds	r3, #1
 800276c:	d003      	beq.n	8002776 <_fwalk_reent+0x3a>
 800276e:	4629      	mov	r1, r5
 8002770:	4630      	mov	r0, r6
 8002772:	47c0      	blx	r8
 8002774:	4307      	orrs	r7, r0
 8002776:	3568      	adds	r5, #104	; 0x68
 8002778:	e7e9      	b.n	800274e <_fwalk_reent+0x12>

0800277a <__retarget_lock_init_recursive>:
 800277a:	4770      	bx	lr

0800277c <__retarget_lock_acquire_recursive>:
 800277c:	4770      	bx	lr

0800277e <__retarget_lock_release_recursive>:
 800277e:	4770      	bx	lr

08002780 <__swhatbuf_r>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	460e      	mov	r6, r1
 8002784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002788:	4614      	mov	r4, r2
 800278a:	2900      	cmp	r1, #0
 800278c:	461d      	mov	r5, r3
 800278e:	b096      	sub	sp, #88	; 0x58
 8002790:	da07      	bge.n	80027a2 <__swhatbuf_r+0x22>
 8002792:	2300      	movs	r3, #0
 8002794:	602b      	str	r3, [r5, #0]
 8002796:	89b3      	ldrh	r3, [r6, #12]
 8002798:	061a      	lsls	r2, r3, #24
 800279a:	d410      	bmi.n	80027be <__swhatbuf_r+0x3e>
 800279c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a0:	e00e      	b.n	80027c0 <__swhatbuf_r+0x40>
 80027a2:	466a      	mov	r2, sp
 80027a4:	f000 fd22 	bl	80031ec <_fstat_r>
 80027a8:	2800      	cmp	r0, #0
 80027aa:	dbf2      	blt.n	8002792 <__swhatbuf_r+0x12>
 80027ac:	9a01      	ldr	r2, [sp, #4]
 80027ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80027b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80027b6:	425a      	negs	r2, r3
 80027b8:	415a      	adcs	r2, r3
 80027ba:	602a      	str	r2, [r5, #0]
 80027bc:	e7ee      	b.n	800279c <__swhatbuf_r+0x1c>
 80027be:	2340      	movs	r3, #64	; 0x40
 80027c0:	2000      	movs	r0, #0
 80027c2:	6023      	str	r3, [r4, #0]
 80027c4:	b016      	add	sp, #88	; 0x58
 80027c6:	bd70      	pop	{r4, r5, r6, pc}

080027c8 <__smakebuf_r>:
 80027c8:	898b      	ldrh	r3, [r1, #12]
 80027ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027cc:	079d      	lsls	r5, r3, #30
 80027ce:	4606      	mov	r6, r0
 80027d0:	460c      	mov	r4, r1
 80027d2:	d507      	bpl.n	80027e4 <__smakebuf_r+0x1c>
 80027d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	6123      	str	r3, [r4, #16]
 80027dc:	2301      	movs	r3, #1
 80027de:	6163      	str	r3, [r4, #20]
 80027e0:	b002      	add	sp, #8
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	466a      	mov	r2, sp
 80027e6:	ab01      	add	r3, sp, #4
 80027e8:	f7ff ffca 	bl	8002780 <__swhatbuf_r>
 80027ec:	9900      	ldr	r1, [sp, #0]
 80027ee:	4605      	mov	r5, r0
 80027f0:	4630      	mov	r0, r6
 80027f2:	f000 f87d 	bl	80028f0 <_malloc_r>
 80027f6:	b948      	cbnz	r0, 800280c <__smakebuf_r+0x44>
 80027f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027fc:	059a      	lsls	r2, r3, #22
 80027fe:	d4ef      	bmi.n	80027e0 <__smakebuf_r+0x18>
 8002800:	f023 0303 	bic.w	r3, r3, #3
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	81a3      	strh	r3, [r4, #12]
 800280a:	e7e3      	b.n	80027d4 <__smakebuf_r+0xc>
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <__smakebuf_r+0x7c>)
 800280e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	6020      	str	r0, [r4, #0]
 8002814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002818:	81a3      	strh	r3, [r4, #12]
 800281a:	9b00      	ldr	r3, [sp, #0]
 800281c:	6120      	str	r0, [r4, #16]
 800281e:	6163      	str	r3, [r4, #20]
 8002820:	9b01      	ldr	r3, [sp, #4]
 8002822:	b15b      	cbz	r3, 800283c <__smakebuf_r+0x74>
 8002824:	4630      	mov	r0, r6
 8002826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800282a:	f000 fcf1 	bl	8003210 <_isatty_r>
 800282e:	b128      	cbz	r0, 800283c <__smakebuf_r+0x74>
 8002830:	89a3      	ldrh	r3, [r4, #12]
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	81a3      	strh	r3, [r4, #12]
 800283c:	89a0      	ldrh	r0, [r4, #12]
 800283e:	4305      	orrs	r5, r0
 8002840:	81a5      	strh	r5, [r4, #12]
 8002842:	e7cd      	b.n	80027e0 <__smakebuf_r+0x18>
 8002844:	080025d9 	.word	0x080025d9

08002848 <malloc>:
 8002848:	4b02      	ldr	r3, [pc, #8]	; (8002854 <malloc+0xc>)
 800284a:	4601      	mov	r1, r0
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	f000 b84f 	b.w	80028f0 <_malloc_r>
 8002852:	bf00      	nop
 8002854:	2000000c 	.word	0x2000000c

08002858 <_free_r>:
 8002858:	b538      	push	{r3, r4, r5, lr}
 800285a:	4605      	mov	r5, r0
 800285c:	2900      	cmp	r1, #0
 800285e:	d043      	beq.n	80028e8 <_free_r+0x90>
 8002860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002864:	1f0c      	subs	r4, r1, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	bfb8      	it	lt
 800286a:	18e4      	addlt	r4, r4, r3
 800286c:	f000 fd00 	bl	8003270 <__malloc_lock>
 8002870:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <_free_r+0x94>)
 8002872:	6813      	ldr	r3, [r2, #0]
 8002874:	4610      	mov	r0, r2
 8002876:	b933      	cbnz	r3, 8002886 <_free_r+0x2e>
 8002878:	6063      	str	r3, [r4, #4]
 800287a:	6014      	str	r4, [r2, #0]
 800287c:	4628      	mov	r0, r5
 800287e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002882:	f000 bcfb 	b.w	800327c <__malloc_unlock>
 8002886:	42a3      	cmp	r3, r4
 8002888:	d90a      	bls.n	80028a0 <_free_r+0x48>
 800288a:	6821      	ldr	r1, [r4, #0]
 800288c:	1862      	adds	r2, r4, r1
 800288e:	4293      	cmp	r3, r2
 8002890:	bf01      	itttt	eq
 8002892:	681a      	ldreq	r2, [r3, #0]
 8002894:	685b      	ldreq	r3, [r3, #4]
 8002896:	1852      	addeq	r2, r2, r1
 8002898:	6022      	streq	r2, [r4, #0]
 800289a:	6063      	str	r3, [r4, #4]
 800289c:	6004      	str	r4, [r0, #0]
 800289e:	e7ed      	b.n	800287c <_free_r+0x24>
 80028a0:	461a      	mov	r2, r3
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	b10b      	cbz	r3, 80028aa <_free_r+0x52>
 80028a6:	42a3      	cmp	r3, r4
 80028a8:	d9fa      	bls.n	80028a0 <_free_r+0x48>
 80028aa:	6811      	ldr	r1, [r2, #0]
 80028ac:	1850      	adds	r0, r2, r1
 80028ae:	42a0      	cmp	r0, r4
 80028b0:	d10b      	bne.n	80028ca <_free_r+0x72>
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	4401      	add	r1, r0
 80028b6:	1850      	adds	r0, r2, r1
 80028b8:	4283      	cmp	r3, r0
 80028ba:	6011      	str	r1, [r2, #0]
 80028bc:	d1de      	bne.n	800287c <_free_r+0x24>
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4401      	add	r1, r0
 80028c4:	6011      	str	r1, [r2, #0]
 80028c6:	6053      	str	r3, [r2, #4]
 80028c8:	e7d8      	b.n	800287c <_free_r+0x24>
 80028ca:	d902      	bls.n	80028d2 <_free_r+0x7a>
 80028cc:	230c      	movs	r3, #12
 80028ce:	602b      	str	r3, [r5, #0]
 80028d0:	e7d4      	b.n	800287c <_free_r+0x24>
 80028d2:	6820      	ldr	r0, [r4, #0]
 80028d4:	1821      	adds	r1, r4, r0
 80028d6:	428b      	cmp	r3, r1
 80028d8:	bf01      	itttt	eq
 80028da:	6819      	ldreq	r1, [r3, #0]
 80028dc:	685b      	ldreq	r3, [r3, #4]
 80028de:	1809      	addeq	r1, r1, r0
 80028e0:	6021      	streq	r1, [r4, #0]
 80028e2:	6063      	str	r3, [r4, #4]
 80028e4:	6054      	str	r4, [r2, #4]
 80028e6:	e7c9      	b.n	800287c <_free_r+0x24>
 80028e8:	bd38      	pop	{r3, r4, r5, pc}
 80028ea:	bf00      	nop
 80028ec:	20000094 	.word	0x20000094

080028f0 <_malloc_r>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	1ccd      	adds	r5, r1, #3
 80028f4:	f025 0503 	bic.w	r5, r5, #3
 80028f8:	3508      	adds	r5, #8
 80028fa:	2d0c      	cmp	r5, #12
 80028fc:	bf38      	it	cc
 80028fe:	250c      	movcc	r5, #12
 8002900:	2d00      	cmp	r5, #0
 8002902:	4606      	mov	r6, r0
 8002904:	db01      	blt.n	800290a <_malloc_r+0x1a>
 8002906:	42a9      	cmp	r1, r5
 8002908:	d903      	bls.n	8002912 <_malloc_r+0x22>
 800290a:	230c      	movs	r3, #12
 800290c:	6033      	str	r3, [r6, #0]
 800290e:	2000      	movs	r0, #0
 8002910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002912:	f000 fcad 	bl	8003270 <__malloc_lock>
 8002916:	4921      	ldr	r1, [pc, #132]	; (800299c <_malloc_r+0xac>)
 8002918:	680a      	ldr	r2, [r1, #0]
 800291a:	4614      	mov	r4, r2
 800291c:	b99c      	cbnz	r4, 8002946 <_malloc_r+0x56>
 800291e:	4f20      	ldr	r7, [pc, #128]	; (80029a0 <_malloc_r+0xb0>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b923      	cbnz	r3, 800292e <_malloc_r+0x3e>
 8002924:	4621      	mov	r1, r4
 8002926:	4630      	mov	r0, r6
 8002928:	f000 fb2a 	bl	8002f80 <_sbrk_r>
 800292c:	6038      	str	r0, [r7, #0]
 800292e:	4629      	mov	r1, r5
 8002930:	4630      	mov	r0, r6
 8002932:	f000 fb25 	bl	8002f80 <_sbrk_r>
 8002936:	1c43      	adds	r3, r0, #1
 8002938:	d123      	bne.n	8002982 <_malloc_r+0x92>
 800293a:	230c      	movs	r3, #12
 800293c:	4630      	mov	r0, r6
 800293e:	6033      	str	r3, [r6, #0]
 8002940:	f000 fc9c 	bl	800327c <__malloc_unlock>
 8002944:	e7e3      	b.n	800290e <_malloc_r+0x1e>
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	1b5b      	subs	r3, r3, r5
 800294a:	d417      	bmi.n	800297c <_malloc_r+0x8c>
 800294c:	2b0b      	cmp	r3, #11
 800294e:	d903      	bls.n	8002958 <_malloc_r+0x68>
 8002950:	6023      	str	r3, [r4, #0]
 8002952:	441c      	add	r4, r3
 8002954:	6025      	str	r5, [r4, #0]
 8002956:	e004      	b.n	8002962 <_malloc_r+0x72>
 8002958:	6863      	ldr	r3, [r4, #4]
 800295a:	42a2      	cmp	r2, r4
 800295c:	bf0c      	ite	eq
 800295e:	600b      	streq	r3, [r1, #0]
 8002960:	6053      	strne	r3, [r2, #4]
 8002962:	4630      	mov	r0, r6
 8002964:	f000 fc8a 	bl	800327c <__malloc_unlock>
 8002968:	f104 000b 	add.w	r0, r4, #11
 800296c:	1d23      	adds	r3, r4, #4
 800296e:	f020 0007 	bic.w	r0, r0, #7
 8002972:	1ac2      	subs	r2, r0, r3
 8002974:	d0cc      	beq.n	8002910 <_malloc_r+0x20>
 8002976:	1a1b      	subs	r3, r3, r0
 8002978:	50a3      	str	r3, [r4, r2]
 800297a:	e7c9      	b.n	8002910 <_malloc_r+0x20>
 800297c:	4622      	mov	r2, r4
 800297e:	6864      	ldr	r4, [r4, #4]
 8002980:	e7cc      	b.n	800291c <_malloc_r+0x2c>
 8002982:	1cc4      	adds	r4, r0, #3
 8002984:	f024 0403 	bic.w	r4, r4, #3
 8002988:	42a0      	cmp	r0, r4
 800298a:	d0e3      	beq.n	8002954 <_malloc_r+0x64>
 800298c:	1a21      	subs	r1, r4, r0
 800298e:	4630      	mov	r0, r6
 8002990:	f000 faf6 	bl	8002f80 <_sbrk_r>
 8002994:	3001      	adds	r0, #1
 8002996:	d1dd      	bne.n	8002954 <_malloc_r+0x64>
 8002998:	e7cf      	b.n	800293a <_malloc_r+0x4a>
 800299a:	bf00      	nop
 800299c:	20000094 	.word	0x20000094
 80029a0:	20000098 	.word	0x20000098

080029a4 <__sfputc_r>:
 80029a4:	6893      	ldr	r3, [r2, #8]
 80029a6:	b410      	push	{r4}
 80029a8:	3b01      	subs	r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	6093      	str	r3, [r2, #8]
 80029ae:	da07      	bge.n	80029c0 <__sfputc_r+0x1c>
 80029b0:	6994      	ldr	r4, [r2, #24]
 80029b2:	42a3      	cmp	r3, r4
 80029b4:	db01      	blt.n	80029ba <__sfputc_r+0x16>
 80029b6:	290a      	cmp	r1, #10
 80029b8:	d102      	bne.n	80029c0 <__sfputc_r+0x1c>
 80029ba:	bc10      	pop	{r4}
 80029bc:	f000 bb34 	b.w	8003028 <__swbuf_r>
 80029c0:	6813      	ldr	r3, [r2, #0]
 80029c2:	1c58      	adds	r0, r3, #1
 80029c4:	6010      	str	r0, [r2, #0]
 80029c6:	7019      	strb	r1, [r3, #0]
 80029c8:	4608      	mov	r0, r1
 80029ca:	bc10      	pop	{r4}
 80029cc:	4770      	bx	lr

080029ce <__sfputs_r>:
 80029ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d0:	4606      	mov	r6, r0
 80029d2:	460f      	mov	r7, r1
 80029d4:	4614      	mov	r4, r2
 80029d6:	18d5      	adds	r5, r2, r3
 80029d8:	42ac      	cmp	r4, r5
 80029da:	d101      	bne.n	80029e0 <__sfputs_r+0x12>
 80029dc:	2000      	movs	r0, #0
 80029de:	e007      	b.n	80029f0 <__sfputs_r+0x22>
 80029e0:	463a      	mov	r2, r7
 80029e2:	4630      	mov	r0, r6
 80029e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029e8:	f7ff ffdc 	bl	80029a4 <__sfputc_r>
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	d1f3      	bne.n	80029d8 <__sfputs_r+0xa>
 80029f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029f4 <_vfiprintf_r>:
 80029f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f8:	460d      	mov	r5, r1
 80029fa:	4614      	mov	r4, r2
 80029fc:	4698      	mov	r8, r3
 80029fe:	4606      	mov	r6, r0
 8002a00:	b09d      	sub	sp, #116	; 0x74
 8002a02:	b118      	cbz	r0, 8002a0c <_vfiprintf_r+0x18>
 8002a04:	6983      	ldr	r3, [r0, #24]
 8002a06:	b90b      	cbnz	r3, 8002a0c <_vfiprintf_r+0x18>
 8002a08:	f7ff fe1a 	bl	8002640 <__sinit>
 8002a0c:	4b89      	ldr	r3, [pc, #548]	; (8002c34 <_vfiprintf_r+0x240>)
 8002a0e:	429d      	cmp	r5, r3
 8002a10:	d11b      	bne.n	8002a4a <_vfiprintf_r+0x56>
 8002a12:	6875      	ldr	r5, [r6, #4]
 8002a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a16:	07d9      	lsls	r1, r3, #31
 8002a18:	d405      	bmi.n	8002a26 <_vfiprintf_r+0x32>
 8002a1a:	89ab      	ldrh	r3, [r5, #12]
 8002a1c:	059a      	lsls	r2, r3, #22
 8002a1e:	d402      	bmi.n	8002a26 <_vfiprintf_r+0x32>
 8002a20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a22:	f7ff feab 	bl	800277c <__retarget_lock_acquire_recursive>
 8002a26:	89ab      	ldrh	r3, [r5, #12]
 8002a28:	071b      	lsls	r3, r3, #28
 8002a2a:	d501      	bpl.n	8002a30 <_vfiprintf_r+0x3c>
 8002a2c:	692b      	ldr	r3, [r5, #16]
 8002a2e:	b9eb      	cbnz	r3, 8002a6c <_vfiprintf_r+0x78>
 8002a30:	4629      	mov	r1, r5
 8002a32:	4630      	mov	r0, r6
 8002a34:	f000 fb5c 	bl	80030f0 <__swsetup_r>
 8002a38:	b1c0      	cbz	r0, 8002a6c <_vfiprintf_r+0x78>
 8002a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a3c:	07dc      	lsls	r4, r3, #31
 8002a3e:	d50e      	bpl.n	8002a5e <_vfiprintf_r+0x6a>
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	b01d      	add	sp, #116	; 0x74
 8002a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a4a:	4b7b      	ldr	r3, [pc, #492]	; (8002c38 <_vfiprintf_r+0x244>)
 8002a4c:	429d      	cmp	r5, r3
 8002a4e:	d101      	bne.n	8002a54 <_vfiprintf_r+0x60>
 8002a50:	68b5      	ldr	r5, [r6, #8]
 8002a52:	e7df      	b.n	8002a14 <_vfiprintf_r+0x20>
 8002a54:	4b79      	ldr	r3, [pc, #484]	; (8002c3c <_vfiprintf_r+0x248>)
 8002a56:	429d      	cmp	r5, r3
 8002a58:	bf08      	it	eq
 8002a5a:	68f5      	ldreq	r5, [r6, #12]
 8002a5c:	e7da      	b.n	8002a14 <_vfiprintf_r+0x20>
 8002a5e:	89ab      	ldrh	r3, [r5, #12]
 8002a60:	0598      	lsls	r0, r3, #22
 8002a62:	d4ed      	bmi.n	8002a40 <_vfiprintf_r+0x4c>
 8002a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a66:	f7ff fe8a 	bl	800277e <__retarget_lock_release_recursive>
 8002a6a:	e7e9      	b.n	8002a40 <_vfiprintf_r+0x4c>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a70:	2320      	movs	r3, #32
 8002a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a76:	2330      	movs	r3, #48	; 0x30
 8002a78:	f04f 0901 	mov.w	r9, #1
 8002a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002c40 <_vfiprintf_r+0x24c>
 8002a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a88:	4623      	mov	r3, r4
 8002a8a:	469a      	mov	sl, r3
 8002a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a90:	b10a      	cbz	r2, 8002a96 <_vfiprintf_r+0xa2>
 8002a92:	2a25      	cmp	r2, #37	; 0x25
 8002a94:	d1f9      	bne.n	8002a8a <_vfiprintf_r+0x96>
 8002a96:	ebba 0b04 	subs.w	fp, sl, r4
 8002a9a:	d00b      	beq.n	8002ab4 <_vfiprintf_r+0xc0>
 8002a9c:	465b      	mov	r3, fp
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f7ff ff93 	bl	80029ce <__sfputs_r>
 8002aa8:	3001      	adds	r0, #1
 8002aaa:	f000 80aa 	beq.w	8002c02 <_vfiprintf_r+0x20e>
 8002aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ab0:	445a      	add	r2, fp
 8002ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80a2 	beq.w	8002c02 <_vfiprintf_r+0x20e>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ac8:	f10a 0a01 	add.w	sl, sl, #1
 8002acc:	9304      	str	r3, [sp, #16]
 8002ace:	9307      	str	r3, [sp, #28]
 8002ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8002ad6:	4654      	mov	r4, sl
 8002ad8:	2205      	movs	r2, #5
 8002ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ade:	4858      	ldr	r0, [pc, #352]	; (8002c40 <_vfiprintf_r+0x24c>)
 8002ae0:	f000 fbb8 	bl	8003254 <memchr>
 8002ae4:	9a04      	ldr	r2, [sp, #16]
 8002ae6:	b9d8      	cbnz	r0, 8002b20 <_vfiprintf_r+0x12c>
 8002ae8:	06d1      	lsls	r1, r2, #27
 8002aea:	bf44      	itt	mi
 8002aec:	2320      	movmi	r3, #32
 8002aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002af2:	0713      	lsls	r3, r2, #28
 8002af4:	bf44      	itt	mi
 8002af6:	232b      	movmi	r3, #43	; 0x2b
 8002af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002afc:	f89a 3000 	ldrb.w	r3, [sl]
 8002b00:	2b2a      	cmp	r3, #42	; 0x2a
 8002b02:	d015      	beq.n	8002b30 <_vfiprintf_r+0x13c>
 8002b04:	4654      	mov	r4, sl
 8002b06:	2000      	movs	r0, #0
 8002b08:	f04f 0c0a 	mov.w	ip, #10
 8002b0c:	9a07      	ldr	r2, [sp, #28]
 8002b0e:	4621      	mov	r1, r4
 8002b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b14:	3b30      	subs	r3, #48	; 0x30
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d94e      	bls.n	8002bb8 <_vfiprintf_r+0x1c4>
 8002b1a:	b1b0      	cbz	r0, 8002b4a <_vfiprintf_r+0x156>
 8002b1c:	9207      	str	r2, [sp, #28]
 8002b1e:	e014      	b.n	8002b4a <_vfiprintf_r+0x156>
 8002b20:	eba0 0308 	sub.w	r3, r0, r8
 8002b24:	fa09 f303 	lsl.w	r3, r9, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	46a2      	mov	sl, r4
 8002b2c:	9304      	str	r3, [sp, #16]
 8002b2e:	e7d2      	b.n	8002ad6 <_vfiprintf_r+0xe2>
 8002b30:	9b03      	ldr	r3, [sp, #12]
 8002b32:	1d19      	adds	r1, r3, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	9103      	str	r1, [sp, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bfbb      	ittet	lt
 8002b3c:	425b      	neglt	r3, r3
 8002b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8002b42:	9307      	strge	r3, [sp, #28]
 8002b44:	9307      	strlt	r3, [sp, #28]
 8002b46:	bfb8      	it	lt
 8002b48:	9204      	strlt	r2, [sp, #16]
 8002b4a:	7823      	ldrb	r3, [r4, #0]
 8002b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b4e:	d10c      	bne.n	8002b6a <_vfiprintf_r+0x176>
 8002b50:	7863      	ldrb	r3, [r4, #1]
 8002b52:	2b2a      	cmp	r3, #42	; 0x2a
 8002b54:	d135      	bne.n	8002bc2 <_vfiprintf_r+0x1ce>
 8002b56:	9b03      	ldr	r3, [sp, #12]
 8002b58:	3402      	adds	r4, #2
 8002b5a:	1d1a      	adds	r2, r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	9203      	str	r2, [sp, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bfb8      	it	lt
 8002b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b68:	9305      	str	r3, [sp, #20]
 8002b6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002c50 <_vfiprintf_r+0x25c>
 8002b6e:	2203      	movs	r2, #3
 8002b70:	4650      	mov	r0, sl
 8002b72:	7821      	ldrb	r1, [r4, #0]
 8002b74:	f000 fb6e 	bl	8003254 <memchr>
 8002b78:	b140      	cbz	r0, 8002b8c <_vfiprintf_r+0x198>
 8002b7a:	2340      	movs	r3, #64	; 0x40
 8002b7c:	eba0 000a 	sub.w	r0, r0, sl
 8002b80:	fa03 f000 	lsl.w	r0, r3, r0
 8002b84:	9b04      	ldr	r3, [sp, #16]
 8002b86:	3401      	adds	r4, #1
 8002b88:	4303      	orrs	r3, r0
 8002b8a:	9304      	str	r3, [sp, #16]
 8002b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b90:	2206      	movs	r2, #6
 8002b92:	482c      	ldr	r0, [pc, #176]	; (8002c44 <_vfiprintf_r+0x250>)
 8002b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b98:	f000 fb5c 	bl	8003254 <memchr>
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d03f      	beq.n	8002c20 <_vfiprintf_r+0x22c>
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <_vfiprintf_r+0x254>)
 8002ba2:	bb1b      	cbnz	r3, 8002bec <_vfiprintf_r+0x1f8>
 8002ba4:	9b03      	ldr	r3, [sp, #12]
 8002ba6:	3307      	adds	r3, #7
 8002ba8:	f023 0307 	bic.w	r3, r3, #7
 8002bac:	3308      	adds	r3, #8
 8002bae:	9303      	str	r3, [sp, #12]
 8002bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bb2:	443b      	add	r3, r7
 8002bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8002bb6:	e767      	b.n	8002a88 <_vfiprintf_r+0x94>
 8002bb8:	460c      	mov	r4, r1
 8002bba:	2001      	movs	r0, #1
 8002bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bc0:	e7a5      	b.n	8002b0e <_vfiprintf_r+0x11a>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f04f 0c0a 	mov.w	ip, #10
 8002bc8:	4619      	mov	r1, r3
 8002bca:	3401      	adds	r4, #1
 8002bcc:	9305      	str	r3, [sp, #20]
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bd4:	3a30      	subs	r2, #48	; 0x30
 8002bd6:	2a09      	cmp	r2, #9
 8002bd8:	d903      	bls.n	8002be2 <_vfiprintf_r+0x1ee>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0c5      	beq.n	8002b6a <_vfiprintf_r+0x176>
 8002bde:	9105      	str	r1, [sp, #20]
 8002be0:	e7c3      	b.n	8002b6a <_vfiprintf_r+0x176>
 8002be2:	4604      	mov	r4, r0
 8002be4:	2301      	movs	r3, #1
 8002be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bea:	e7f0      	b.n	8002bce <_vfiprintf_r+0x1da>
 8002bec:	ab03      	add	r3, sp, #12
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	462a      	mov	r2, r5
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <_vfiprintf_r+0x258>)
 8002bf6:	a904      	add	r1, sp, #16
 8002bf8:	f3af 8000 	nop.w
 8002bfc:	4607      	mov	r7, r0
 8002bfe:	1c78      	adds	r0, r7, #1
 8002c00:	d1d6      	bne.n	8002bb0 <_vfiprintf_r+0x1bc>
 8002c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c04:	07d9      	lsls	r1, r3, #31
 8002c06:	d405      	bmi.n	8002c14 <_vfiprintf_r+0x220>
 8002c08:	89ab      	ldrh	r3, [r5, #12]
 8002c0a:	059a      	lsls	r2, r3, #22
 8002c0c:	d402      	bmi.n	8002c14 <_vfiprintf_r+0x220>
 8002c0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c10:	f7ff fdb5 	bl	800277e <__retarget_lock_release_recursive>
 8002c14:	89ab      	ldrh	r3, [r5, #12]
 8002c16:	065b      	lsls	r3, r3, #25
 8002c18:	f53f af12 	bmi.w	8002a40 <_vfiprintf_r+0x4c>
 8002c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c1e:	e711      	b.n	8002a44 <_vfiprintf_r+0x50>
 8002c20:	ab03      	add	r3, sp, #12
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	462a      	mov	r2, r5
 8002c26:	4630      	mov	r0, r6
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <_vfiprintf_r+0x258>)
 8002c2a:	a904      	add	r1, sp, #16
 8002c2c:	f000 f882 	bl	8002d34 <_printf_i>
 8002c30:	e7e4      	b.n	8002bfc <_vfiprintf_r+0x208>
 8002c32:	bf00      	nop
 8002c34:	0800336c 	.word	0x0800336c
 8002c38:	0800338c 	.word	0x0800338c
 8002c3c:	0800334c 	.word	0x0800334c
 8002c40:	080033ac 	.word	0x080033ac
 8002c44:	080033b6 	.word	0x080033b6
 8002c48:	00000000 	.word	0x00000000
 8002c4c:	080029cf 	.word	0x080029cf
 8002c50:	080033b2 	.word	0x080033b2

08002c54 <_printf_common>:
 8002c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c58:	4616      	mov	r6, r2
 8002c5a:	4699      	mov	r9, r3
 8002c5c:	688a      	ldr	r2, [r1, #8]
 8002c5e:	690b      	ldr	r3, [r1, #16]
 8002c60:	4607      	mov	r7, r0
 8002c62:	4293      	cmp	r3, r2
 8002c64:	bfb8      	it	lt
 8002c66:	4613      	movlt	r3, r2
 8002c68:	6033      	str	r3, [r6, #0]
 8002c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c6e:	460c      	mov	r4, r1
 8002c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c74:	b10a      	cbz	r2, 8002c7a <_printf_common+0x26>
 8002c76:	3301      	adds	r3, #1
 8002c78:	6033      	str	r3, [r6, #0]
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	0699      	lsls	r1, r3, #26
 8002c7e:	bf42      	ittt	mi
 8002c80:	6833      	ldrmi	r3, [r6, #0]
 8002c82:	3302      	addmi	r3, #2
 8002c84:	6033      	strmi	r3, [r6, #0]
 8002c86:	6825      	ldr	r5, [r4, #0]
 8002c88:	f015 0506 	ands.w	r5, r5, #6
 8002c8c:	d106      	bne.n	8002c9c <_printf_common+0x48>
 8002c8e:	f104 0a19 	add.w	sl, r4, #25
 8002c92:	68e3      	ldr	r3, [r4, #12]
 8002c94:	6832      	ldr	r2, [r6, #0]
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	42ab      	cmp	r3, r5
 8002c9a:	dc28      	bgt.n	8002cee <_printf_common+0x9a>
 8002c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ca0:	1e13      	subs	r3, r2, #0
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	bf18      	it	ne
 8002ca6:	2301      	movne	r3, #1
 8002ca8:	0692      	lsls	r2, r2, #26
 8002caa:	d42d      	bmi.n	8002d08 <_printf_common+0xb4>
 8002cac:	4649      	mov	r1, r9
 8002cae:	4638      	mov	r0, r7
 8002cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cb4:	47c0      	blx	r8
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d020      	beq.n	8002cfc <_printf_common+0xa8>
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	68e5      	ldr	r5, [r4, #12]
 8002cbe:	f003 0306 	and.w	r3, r3, #6
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf18      	it	ne
 8002cc6:	2500      	movne	r5, #0
 8002cc8:	6832      	ldr	r2, [r6, #0]
 8002cca:	f04f 0600 	mov.w	r6, #0
 8002cce:	68a3      	ldr	r3, [r4, #8]
 8002cd0:	bf08      	it	eq
 8002cd2:	1aad      	subeq	r5, r5, r2
 8002cd4:	6922      	ldr	r2, [r4, #16]
 8002cd6:	bf08      	it	eq
 8002cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	bfc4      	itt	gt
 8002ce0:	1a9b      	subgt	r3, r3, r2
 8002ce2:	18ed      	addgt	r5, r5, r3
 8002ce4:	341a      	adds	r4, #26
 8002ce6:	42b5      	cmp	r5, r6
 8002ce8:	d11a      	bne.n	8002d20 <_printf_common+0xcc>
 8002cea:	2000      	movs	r0, #0
 8002cec:	e008      	b.n	8002d00 <_printf_common+0xac>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	4652      	mov	r2, sl
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	4638      	mov	r0, r7
 8002cf6:	47c0      	blx	r8
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d103      	bne.n	8002d04 <_printf_common+0xb0>
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d04:	3501      	adds	r5, #1
 8002d06:	e7c4      	b.n	8002c92 <_printf_common+0x3e>
 8002d08:	2030      	movs	r0, #48	; 0x30
 8002d0a:	18e1      	adds	r1, r4, r3
 8002d0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d16:	4422      	add	r2, r4
 8002d18:	3302      	adds	r3, #2
 8002d1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d1e:	e7c5      	b.n	8002cac <_printf_common+0x58>
 8002d20:	2301      	movs	r3, #1
 8002d22:	4622      	mov	r2, r4
 8002d24:	4649      	mov	r1, r9
 8002d26:	4638      	mov	r0, r7
 8002d28:	47c0      	blx	r8
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	d0e6      	beq.n	8002cfc <_printf_common+0xa8>
 8002d2e:	3601      	adds	r6, #1
 8002d30:	e7d9      	b.n	8002ce6 <_printf_common+0x92>
	...

08002d34 <_printf_i>:
 8002d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d38:	460c      	mov	r4, r1
 8002d3a:	7e27      	ldrb	r7, [r4, #24]
 8002d3c:	4691      	mov	r9, r2
 8002d3e:	2f78      	cmp	r7, #120	; 0x78
 8002d40:	4680      	mov	r8, r0
 8002d42:	469a      	mov	sl, r3
 8002d44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d4a:	d807      	bhi.n	8002d5c <_printf_i+0x28>
 8002d4c:	2f62      	cmp	r7, #98	; 0x62
 8002d4e:	d80a      	bhi.n	8002d66 <_printf_i+0x32>
 8002d50:	2f00      	cmp	r7, #0
 8002d52:	f000 80d9 	beq.w	8002f08 <_printf_i+0x1d4>
 8002d56:	2f58      	cmp	r7, #88	; 0x58
 8002d58:	f000 80a4 	beq.w	8002ea4 <_printf_i+0x170>
 8002d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d64:	e03a      	b.n	8002ddc <_printf_i+0xa8>
 8002d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d6a:	2b15      	cmp	r3, #21
 8002d6c:	d8f6      	bhi.n	8002d5c <_printf_i+0x28>
 8002d6e:	a001      	add	r0, pc, #4	; (adr r0, 8002d74 <_printf_i+0x40>)
 8002d70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d74:	08002dcd 	.word	0x08002dcd
 8002d78:	08002de1 	.word	0x08002de1
 8002d7c:	08002d5d 	.word	0x08002d5d
 8002d80:	08002d5d 	.word	0x08002d5d
 8002d84:	08002d5d 	.word	0x08002d5d
 8002d88:	08002d5d 	.word	0x08002d5d
 8002d8c:	08002de1 	.word	0x08002de1
 8002d90:	08002d5d 	.word	0x08002d5d
 8002d94:	08002d5d 	.word	0x08002d5d
 8002d98:	08002d5d 	.word	0x08002d5d
 8002d9c:	08002d5d 	.word	0x08002d5d
 8002da0:	08002eef 	.word	0x08002eef
 8002da4:	08002e11 	.word	0x08002e11
 8002da8:	08002ed1 	.word	0x08002ed1
 8002dac:	08002d5d 	.word	0x08002d5d
 8002db0:	08002d5d 	.word	0x08002d5d
 8002db4:	08002f11 	.word	0x08002f11
 8002db8:	08002d5d 	.word	0x08002d5d
 8002dbc:	08002e11 	.word	0x08002e11
 8002dc0:	08002d5d 	.word	0x08002d5d
 8002dc4:	08002d5d 	.word	0x08002d5d
 8002dc8:	08002ed9 	.word	0x08002ed9
 8002dcc:	680b      	ldr	r3, [r1, #0]
 8002dce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dd2:	1d1a      	adds	r2, r3, #4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	600a      	str	r2, [r1, #0]
 8002dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0a4      	b.n	8002f2a <_printf_i+0x1f6>
 8002de0:	6825      	ldr	r5, [r4, #0]
 8002de2:	6808      	ldr	r0, [r1, #0]
 8002de4:	062e      	lsls	r6, r5, #24
 8002de6:	f100 0304 	add.w	r3, r0, #4
 8002dea:	d50a      	bpl.n	8002e02 <_printf_i+0xce>
 8002dec:	6805      	ldr	r5, [r0, #0]
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	da03      	bge.n	8002dfc <_printf_i+0xc8>
 8002df4:	232d      	movs	r3, #45	; 0x2d
 8002df6:	426d      	negs	r5, r5
 8002df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	485e      	ldr	r0, [pc, #376]	; (8002f78 <_printf_i+0x244>)
 8002e00:	e019      	b.n	8002e36 <_printf_i+0x102>
 8002e02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e06:	6805      	ldr	r5, [r0, #0]
 8002e08:	600b      	str	r3, [r1, #0]
 8002e0a:	bf18      	it	ne
 8002e0c:	b22d      	sxthne	r5, r5
 8002e0e:	e7ef      	b.n	8002df0 <_printf_i+0xbc>
 8002e10:	680b      	ldr	r3, [r1, #0]
 8002e12:	6825      	ldr	r5, [r4, #0]
 8002e14:	1d18      	adds	r0, r3, #4
 8002e16:	6008      	str	r0, [r1, #0]
 8002e18:	0628      	lsls	r0, r5, #24
 8002e1a:	d501      	bpl.n	8002e20 <_printf_i+0xec>
 8002e1c:	681d      	ldr	r5, [r3, #0]
 8002e1e:	e002      	b.n	8002e26 <_printf_i+0xf2>
 8002e20:	0669      	lsls	r1, r5, #25
 8002e22:	d5fb      	bpl.n	8002e1c <_printf_i+0xe8>
 8002e24:	881d      	ldrh	r5, [r3, #0]
 8002e26:	2f6f      	cmp	r7, #111	; 0x6f
 8002e28:	bf0c      	ite	eq
 8002e2a:	2308      	moveq	r3, #8
 8002e2c:	230a      	movne	r3, #10
 8002e2e:	4852      	ldr	r0, [pc, #328]	; (8002f78 <_printf_i+0x244>)
 8002e30:	2100      	movs	r1, #0
 8002e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e36:	6866      	ldr	r6, [r4, #4]
 8002e38:	2e00      	cmp	r6, #0
 8002e3a:	bfa8      	it	ge
 8002e3c:	6821      	ldrge	r1, [r4, #0]
 8002e3e:	60a6      	str	r6, [r4, #8]
 8002e40:	bfa4      	itt	ge
 8002e42:	f021 0104 	bicge.w	r1, r1, #4
 8002e46:	6021      	strge	r1, [r4, #0]
 8002e48:	b90d      	cbnz	r5, 8002e4e <_printf_i+0x11a>
 8002e4a:	2e00      	cmp	r6, #0
 8002e4c:	d04d      	beq.n	8002eea <_printf_i+0x1b6>
 8002e4e:	4616      	mov	r6, r2
 8002e50:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e54:	fb03 5711 	mls	r7, r3, r1, r5
 8002e58:	5dc7      	ldrb	r7, [r0, r7]
 8002e5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e5e:	462f      	mov	r7, r5
 8002e60:	42bb      	cmp	r3, r7
 8002e62:	460d      	mov	r5, r1
 8002e64:	d9f4      	bls.n	8002e50 <_printf_i+0x11c>
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d10b      	bne.n	8002e82 <_printf_i+0x14e>
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	07df      	lsls	r7, r3, #31
 8002e6e:	d508      	bpl.n	8002e82 <_printf_i+0x14e>
 8002e70:	6923      	ldr	r3, [r4, #16]
 8002e72:	6861      	ldr	r1, [r4, #4]
 8002e74:	4299      	cmp	r1, r3
 8002e76:	bfde      	ittt	le
 8002e78:	2330      	movle	r3, #48	; 0x30
 8002e7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e82:	1b92      	subs	r2, r2, r6
 8002e84:	6122      	str	r2, [r4, #16]
 8002e86:	464b      	mov	r3, r9
 8002e88:	4621      	mov	r1, r4
 8002e8a:	4640      	mov	r0, r8
 8002e8c:	f8cd a000 	str.w	sl, [sp]
 8002e90:	aa03      	add	r2, sp, #12
 8002e92:	f7ff fedf 	bl	8002c54 <_printf_common>
 8002e96:	3001      	adds	r0, #1
 8002e98:	d14c      	bne.n	8002f34 <_printf_i+0x200>
 8002e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9e:	b004      	add	sp, #16
 8002ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea4:	4834      	ldr	r0, [pc, #208]	; (8002f78 <_printf_i+0x244>)
 8002ea6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002eaa:	680e      	ldr	r6, [r1, #0]
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	f856 5b04 	ldr.w	r5, [r6], #4
 8002eb2:	061f      	lsls	r7, r3, #24
 8002eb4:	600e      	str	r6, [r1, #0]
 8002eb6:	d514      	bpl.n	8002ee2 <_printf_i+0x1ae>
 8002eb8:	07d9      	lsls	r1, r3, #31
 8002eba:	bf44      	itt	mi
 8002ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8002ec0:	6023      	strmi	r3, [r4, #0]
 8002ec2:	b91d      	cbnz	r5, 8002ecc <_printf_i+0x198>
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	f023 0320 	bic.w	r3, r3, #32
 8002eca:	6023      	str	r3, [r4, #0]
 8002ecc:	2310      	movs	r3, #16
 8002ece:	e7af      	b.n	8002e30 <_printf_i+0xfc>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	f043 0320 	orr.w	r3, r3, #32
 8002ed6:	6023      	str	r3, [r4, #0]
 8002ed8:	2378      	movs	r3, #120	; 0x78
 8002eda:	4828      	ldr	r0, [pc, #160]	; (8002f7c <_printf_i+0x248>)
 8002edc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ee0:	e7e3      	b.n	8002eaa <_printf_i+0x176>
 8002ee2:	065e      	lsls	r6, r3, #25
 8002ee4:	bf48      	it	mi
 8002ee6:	b2ad      	uxthmi	r5, r5
 8002ee8:	e7e6      	b.n	8002eb8 <_printf_i+0x184>
 8002eea:	4616      	mov	r6, r2
 8002eec:	e7bb      	b.n	8002e66 <_printf_i+0x132>
 8002eee:	680b      	ldr	r3, [r1, #0]
 8002ef0:	6826      	ldr	r6, [r4, #0]
 8002ef2:	1d1d      	adds	r5, r3, #4
 8002ef4:	6960      	ldr	r0, [r4, #20]
 8002ef6:	600d      	str	r5, [r1, #0]
 8002ef8:	0635      	lsls	r5, r6, #24
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	d501      	bpl.n	8002f02 <_printf_i+0x1ce>
 8002efe:	6018      	str	r0, [r3, #0]
 8002f00:	e002      	b.n	8002f08 <_printf_i+0x1d4>
 8002f02:	0671      	lsls	r1, r6, #25
 8002f04:	d5fb      	bpl.n	8002efe <_printf_i+0x1ca>
 8002f06:	8018      	strh	r0, [r3, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	4616      	mov	r6, r2
 8002f0c:	6123      	str	r3, [r4, #16]
 8002f0e:	e7ba      	b.n	8002e86 <_printf_i+0x152>
 8002f10:	680b      	ldr	r3, [r1, #0]
 8002f12:	1d1a      	adds	r2, r3, #4
 8002f14:	600a      	str	r2, [r1, #0]
 8002f16:	681e      	ldr	r6, [r3, #0]
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	6862      	ldr	r2, [r4, #4]
 8002f1e:	f000 f999 	bl	8003254 <memchr>
 8002f22:	b108      	cbz	r0, 8002f28 <_printf_i+0x1f4>
 8002f24:	1b80      	subs	r0, r0, r6
 8002f26:	6060      	str	r0, [r4, #4]
 8002f28:	6863      	ldr	r3, [r4, #4]
 8002f2a:	6123      	str	r3, [r4, #16]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f32:	e7a8      	b.n	8002e86 <_printf_i+0x152>
 8002f34:	4632      	mov	r2, r6
 8002f36:	4649      	mov	r1, r9
 8002f38:	4640      	mov	r0, r8
 8002f3a:	6923      	ldr	r3, [r4, #16]
 8002f3c:	47d0      	blx	sl
 8002f3e:	3001      	adds	r0, #1
 8002f40:	d0ab      	beq.n	8002e9a <_printf_i+0x166>
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	079b      	lsls	r3, r3, #30
 8002f46:	d413      	bmi.n	8002f70 <_printf_i+0x23c>
 8002f48:	68e0      	ldr	r0, [r4, #12]
 8002f4a:	9b03      	ldr	r3, [sp, #12]
 8002f4c:	4298      	cmp	r0, r3
 8002f4e:	bfb8      	it	lt
 8002f50:	4618      	movlt	r0, r3
 8002f52:	e7a4      	b.n	8002e9e <_printf_i+0x16a>
 8002f54:	2301      	movs	r3, #1
 8002f56:	4632      	mov	r2, r6
 8002f58:	4649      	mov	r1, r9
 8002f5a:	4640      	mov	r0, r8
 8002f5c:	47d0      	blx	sl
 8002f5e:	3001      	adds	r0, #1
 8002f60:	d09b      	beq.n	8002e9a <_printf_i+0x166>
 8002f62:	3501      	adds	r5, #1
 8002f64:	68e3      	ldr	r3, [r4, #12]
 8002f66:	9903      	ldr	r1, [sp, #12]
 8002f68:	1a5b      	subs	r3, r3, r1
 8002f6a:	42ab      	cmp	r3, r5
 8002f6c:	dcf2      	bgt.n	8002f54 <_printf_i+0x220>
 8002f6e:	e7eb      	b.n	8002f48 <_printf_i+0x214>
 8002f70:	2500      	movs	r5, #0
 8002f72:	f104 0619 	add.w	r6, r4, #25
 8002f76:	e7f5      	b.n	8002f64 <_printf_i+0x230>
 8002f78:	080033bd 	.word	0x080033bd
 8002f7c:	080033ce 	.word	0x080033ce

08002f80 <_sbrk_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	2300      	movs	r3, #0
 8002f84:	4d05      	ldr	r5, [pc, #20]	; (8002f9c <_sbrk_r+0x1c>)
 8002f86:	4604      	mov	r4, r0
 8002f88:	4608      	mov	r0, r1
 8002f8a:	602b      	str	r3, [r5, #0]
 8002f8c:	f7fd fbda 	bl	8000744 <_sbrk>
 8002f90:	1c43      	adds	r3, r0, #1
 8002f92:	d102      	bne.n	8002f9a <_sbrk_r+0x1a>
 8002f94:	682b      	ldr	r3, [r5, #0]
 8002f96:	b103      	cbz	r3, 8002f9a <_sbrk_r+0x1a>
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	bd38      	pop	{r3, r4, r5, pc}
 8002f9c:	20000104 	.word	0x20000104

08002fa0 <__sread>:
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa8:	f000 f96e 	bl	8003288 <_read_r>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	bfab      	itete	ge
 8002fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8002fb4:	181b      	addge	r3, r3, r0
 8002fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fba:	bfac      	ite	ge
 8002fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fbe:	81a3      	strhlt	r3, [r4, #12]
 8002fc0:	bd10      	pop	{r4, pc}

08002fc2 <__swrite>:
 8002fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc6:	461f      	mov	r7, r3
 8002fc8:	898b      	ldrh	r3, [r1, #12]
 8002fca:	4605      	mov	r5, r0
 8002fcc:	05db      	lsls	r3, r3, #23
 8002fce:	460c      	mov	r4, r1
 8002fd0:	4616      	mov	r6, r2
 8002fd2:	d505      	bpl.n	8002fe0 <__swrite+0x1e>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fdc:	f000 f928 	bl	8003230 <_lseek_r>
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	4632      	mov	r2, r6
 8002fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe8:	81a3      	strh	r3, [r4, #12]
 8002fea:	4628      	mov	r0, r5
 8002fec:	463b      	mov	r3, r7
 8002fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff6:	f000 b869 	b.w	80030cc <_write_r>

08002ffa <__sseek>:
 8002ffa:	b510      	push	{r4, lr}
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003002:	f000 f915 	bl	8003230 <_lseek_r>
 8003006:	1c43      	adds	r3, r0, #1
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	bf15      	itete	ne
 800300c:	6560      	strne	r0, [r4, #84]	; 0x54
 800300e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003016:	81a3      	strheq	r3, [r4, #12]
 8003018:	bf18      	it	ne
 800301a:	81a3      	strhne	r3, [r4, #12]
 800301c:	bd10      	pop	{r4, pc}

0800301e <__sclose>:
 800301e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003022:	f000 b8d3 	b.w	80031cc <_close_r>
	...

08003028 <__swbuf_r>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	460e      	mov	r6, r1
 800302c:	4614      	mov	r4, r2
 800302e:	4605      	mov	r5, r0
 8003030:	b118      	cbz	r0, 800303a <__swbuf_r+0x12>
 8003032:	6983      	ldr	r3, [r0, #24]
 8003034:	b90b      	cbnz	r3, 800303a <__swbuf_r+0x12>
 8003036:	f7ff fb03 	bl	8002640 <__sinit>
 800303a:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <__swbuf_r+0x98>)
 800303c:	429c      	cmp	r4, r3
 800303e:	d12b      	bne.n	8003098 <__swbuf_r+0x70>
 8003040:	686c      	ldr	r4, [r5, #4]
 8003042:	69a3      	ldr	r3, [r4, #24]
 8003044:	60a3      	str	r3, [r4, #8]
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	071a      	lsls	r2, r3, #28
 800304a:	d52f      	bpl.n	80030ac <__swbuf_r+0x84>
 800304c:	6923      	ldr	r3, [r4, #16]
 800304e:	b36b      	cbz	r3, 80030ac <__swbuf_r+0x84>
 8003050:	6923      	ldr	r3, [r4, #16]
 8003052:	6820      	ldr	r0, [r4, #0]
 8003054:	b2f6      	uxtb	r6, r6
 8003056:	1ac0      	subs	r0, r0, r3
 8003058:	6963      	ldr	r3, [r4, #20]
 800305a:	4637      	mov	r7, r6
 800305c:	4283      	cmp	r3, r0
 800305e:	dc04      	bgt.n	800306a <__swbuf_r+0x42>
 8003060:	4621      	mov	r1, r4
 8003062:	4628      	mov	r0, r5
 8003064:	f7ff fa58 	bl	8002518 <_fflush_r>
 8003068:	bb30      	cbnz	r0, 80030b8 <__swbuf_r+0x90>
 800306a:	68a3      	ldr	r3, [r4, #8]
 800306c:	3001      	adds	r0, #1
 800306e:	3b01      	subs	r3, #1
 8003070:	60a3      	str	r3, [r4, #8]
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	6022      	str	r2, [r4, #0]
 8003078:	701e      	strb	r6, [r3, #0]
 800307a:	6963      	ldr	r3, [r4, #20]
 800307c:	4283      	cmp	r3, r0
 800307e:	d004      	beq.n	800308a <__swbuf_r+0x62>
 8003080:	89a3      	ldrh	r3, [r4, #12]
 8003082:	07db      	lsls	r3, r3, #31
 8003084:	d506      	bpl.n	8003094 <__swbuf_r+0x6c>
 8003086:	2e0a      	cmp	r6, #10
 8003088:	d104      	bne.n	8003094 <__swbuf_r+0x6c>
 800308a:	4621      	mov	r1, r4
 800308c:	4628      	mov	r0, r5
 800308e:	f7ff fa43 	bl	8002518 <_fflush_r>
 8003092:	b988      	cbnz	r0, 80030b8 <__swbuf_r+0x90>
 8003094:	4638      	mov	r0, r7
 8003096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <__swbuf_r+0x9c>)
 800309a:	429c      	cmp	r4, r3
 800309c:	d101      	bne.n	80030a2 <__swbuf_r+0x7a>
 800309e:	68ac      	ldr	r4, [r5, #8]
 80030a0:	e7cf      	b.n	8003042 <__swbuf_r+0x1a>
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <__swbuf_r+0xa0>)
 80030a4:	429c      	cmp	r4, r3
 80030a6:	bf08      	it	eq
 80030a8:	68ec      	ldreq	r4, [r5, #12]
 80030aa:	e7ca      	b.n	8003042 <__swbuf_r+0x1a>
 80030ac:	4621      	mov	r1, r4
 80030ae:	4628      	mov	r0, r5
 80030b0:	f000 f81e 	bl	80030f0 <__swsetup_r>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d0cb      	beq.n	8003050 <__swbuf_r+0x28>
 80030b8:	f04f 37ff 	mov.w	r7, #4294967295
 80030bc:	e7ea      	b.n	8003094 <__swbuf_r+0x6c>
 80030be:	bf00      	nop
 80030c0:	0800336c 	.word	0x0800336c
 80030c4:	0800338c 	.word	0x0800338c
 80030c8:	0800334c 	.word	0x0800334c

080030cc <_write_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4604      	mov	r4, r0
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	2200      	movs	r2, #0
 80030d6:	4d05      	ldr	r5, [pc, #20]	; (80030ec <_write_r+0x20>)
 80030d8:	602a      	str	r2, [r5, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	f7fd fae5 	bl	80006aa <_write>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d102      	bne.n	80030ea <_write_r+0x1e>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	b103      	cbz	r3, 80030ea <_write_r+0x1e>
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	20000104 	.word	0x20000104

080030f0 <__swsetup_r>:
 80030f0:	4b32      	ldr	r3, [pc, #200]	; (80031bc <__swsetup_r+0xcc>)
 80030f2:	b570      	push	{r4, r5, r6, lr}
 80030f4:	681d      	ldr	r5, [r3, #0]
 80030f6:	4606      	mov	r6, r0
 80030f8:	460c      	mov	r4, r1
 80030fa:	b125      	cbz	r5, 8003106 <__swsetup_r+0x16>
 80030fc:	69ab      	ldr	r3, [r5, #24]
 80030fe:	b913      	cbnz	r3, 8003106 <__swsetup_r+0x16>
 8003100:	4628      	mov	r0, r5
 8003102:	f7ff fa9d 	bl	8002640 <__sinit>
 8003106:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <__swsetup_r+0xd0>)
 8003108:	429c      	cmp	r4, r3
 800310a:	d10f      	bne.n	800312c <__swsetup_r+0x3c>
 800310c:	686c      	ldr	r4, [r5, #4]
 800310e:	89a3      	ldrh	r3, [r4, #12]
 8003110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003114:	0719      	lsls	r1, r3, #28
 8003116:	d42c      	bmi.n	8003172 <__swsetup_r+0x82>
 8003118:	06dd      	lsls	r5, r3, #27
 800311a:	d411      	bmi.n	8003140 <__swsetup_r+0x50>
 800311c:	2309      	movs	r3, #9
 800311e:	6033      	str	r3, [r6, #0]
 8003120:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	e03e      	b.n	80031aa <__swsetup_r+0xba>
 800312c:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <__swsetup_r+0xd4>)
 800312e:	429c      	cmp	r4, r3
 8003130:	d101      	bne.n	8003136 <__swsetup_r+0x46>
 8003132:	68ac      	ldr	r4, [r5, #8]
 8003134:	e7eb      	b.n	800310e <__swsetup_r+0x1e>
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <__swsetup_r+0xd8>)
 8003138:	429c      	cmp	r4, r3
 800313a:	bf08      	it	eq
 800313c:	68ec      	ldreq	r4, [r5, #12]
 800313e:	e7e6      	b.n	800310e <__swsetup_r+0x1e>
 8003140:	0758      	lsls	r0, r3, #29
 8003142:	d512      	bpl.n	800316a <__swsetup_r+0x7a>
 8003144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003146:	b141      	cbz	r1, 800315a <__swsetup_r+0x6a>
 8003148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800314c:	4299      	cmp	r1, r3
 800314e:	d002      	beq.n	8003156 <__swsetup_r+0x66>
 8003150:	4630      	mov	r0, r6
 8003152:	f7ff fb81 	bl	8002858 <_free_r>
 8003156:	2300      	movs	r3, #0
 8003158:	6363      	str	r3, [r4, #52]	; 0x34
 800315a:	89a3      	ldrh	r3, [r4, #12]
 800315c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003160:	81a3      	strh	r3, [r4, #12]
 8003162:	2300      	movs	r3, #0
 8003164:	6063      	str	r3, [r4, #4]
 8003166:	6923      	ldr	r3, [r4, #16]
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	81a3      	strh	r3, [r4, #12]
 8003172:	6923      	ldr	r3, [r4, #16]
 8003174:	b94b      	cbnz	r3, 800318a <__swsetup_r+0x9a>
 8003176:	89a3      	ldrh	r3, [r4, #12]
 8003178:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800317c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003180:	d003      	beq.n	800318a <__swsetup_r+0x9a>
 8003182:	4621      	mov	r1, r4
 8003184:	4630      	mov	r0, r6
 8003186:	f7ff fb1f 	bl	80027c8 <__smakebuf_r>
 800318a:	89a0      	ldrh	r0, [r4, #12]
 800318c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003190:	f010 0301 	ands.w	r3, r0, #1
 8003194:	d00a      	beq.n	80031ac <__swsetup_r+0xbc>
 8003196:	2300      	movs	r3, #0
 8003198:	60a3      	str	r3, [r4, #8]
 800319a:	6963      	ldr	r3, [r4, #20]
 800319c:	425b      	negs	r3, r3
 800319e:	61a3      	str	r3, [r4, #24]
 80031a0:	6923      	ldr	r3, [r4, #16]
 80031a2:	b943      	cbnz	r3, 80031b6 <__swsetup_r+0xc6>
 80031a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031a8:	d1ba      	bne.n	8003120 <__swsetup_r+0x30>
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	0781      	lsls	r1, r0, #30
 80031ae:	bf58      	it	pl
 80031b0:	6963      	ldrpl	r3, [r4, #20]
 80031b2:	60a3      	str	r3, [r4, #8]
 80031b4:	e7f4      	b.n	80031a0 <__swsetup_r+0xb0>
 80031b6:	2000      	movs	r0, #0
 80031b8:	e7f7      	b.n	80031aa <__swsetup_r+0xba>
 80031ba:	bf00      	nop
 80031bc:	2000000c 	.word	0x2000000c
 80031c0:	0800336c 	.word	0x0800336c
 80031c4:	0800338c 	.word	0x0800338c
 80031c8:	0800334c 	.word	0x0800334c

080031cc <_close_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	2300      	movs	r3, #0
 80031d0:	4d05      	ldr	r5, [pc, #20]	; (80031e8 <_close_r+0x1c>)
 80031d2:	4604      	mov	r4, r0
 80031d4:	4608      	mov	r0, r1
 80031d6:	602b      	str	r3, [r5, #0]
 80031d8:	f7fd fa83 	bl	80006e2 <_close>
 80031dc:	1c43      	adds	r3, r0, #1
 80031de:	d102      	bne.n	80031e6 <_close_r+0x1a>
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	b103      	cbz	r3, 80031e6 <_close_r+0x1a>
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	bd38      	pop	{r3, r4, r5, pc}
 80031e8:	20000104 	.word	0x20000104

080031ec <_fstat_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	2300      	movs	r3, #0
 80031f0:	4d06      	ldr	r5, [pc, #24]	; (800320c <_fstat_r+0x20>)
 80031f2:	4604      	mov	r4, r0
 80031f4:	4608      	mov	r0, r1
 80031f6:	4611      	mov	r1, r2
 80031f8:	602b      	str	r3, [r5, #0]
 80031fa:	f7fd fa7d 	bl	80006f8 <_fstat>
 80031fe:	1c43      	adds	r3, r0, #1
 8003200:	d102      	bne.n	8003208 <_fstat_r+0x1c>
 8003202:	682b      	ldr	r3, [r5, #0]
 8003204:	b103      	cbz	r3, 8003208 <_fstat_r+0x1c>
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	bd38      	pop	{r3, r4, r5, pc}
 800320a:	bf00      	nop
 800320c:	20000104 	.word	0x20000104

08003210 <_isatty_r>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	2300      	movs	r3, #0
 8003214:	4d05      	ldr	r5, [pc, #20]	; (800322c <_isatty_r+0x1c>)
 8003216:	4604      	mov	r4, r0
 8003218:	4608      	mov	r0, r1
 800321a:	602b      	str	r3, [r5, #0]
 800321c:	f7fd fa7b 	bl	8000716 <_isatty>
 8003220:	1c43      	adds	r3, r0, #1
 8003222:	d102      	bne.n	800322a <_isatty_r+0x1a>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	b103      	cbz	r3, 800322a <_isatty_r+0x1a>
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	20000104 	.word	0x20000104

08003230 <_lseek_r>:
 8003230:	b538      	push	{r3, r4, r5, lr}
 8003232:	4604      	mov	r4, r0
 8003234:	4608      	mov	r0, r1
 8003236:	4611      	mov	r1, r2
 8003238:	2200      	movs	r2, #0
 800323a:	4d05      	ldr	r5, [pc, #20]	; (8003250 <_lseek_r+0x20>)
 800323c:	602a      	str	r2, [r5, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	f7fd fa73 	bl	800072a <_lseek>
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	d102      	bne.n	800324e <_lseek_r+0x1e>
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	b103      	cbz	r3, 800324e <_lseek_r+0x1e>
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	bd38      	pop	{r3, r4, r5, pc}
 8003250:	20000104 	.word	0x20000104

08003254 <memchr>:
 8003254:	4603      	mov	r3, r0
 8003256:	b510      	push	{r4, lr}
 8003258:	b2c9      	uxtb	r1, r1
 800325a:	4402      	add	r2, r0
 800325c:	4293      	cmp	r3, r2
 800325e:	4618      	mov	r0, r3
 8003260:	d101      	bne.n	8003266 <memchr+0x12>
 8003262:	2000      	movs	r0, #0
 8003264:	e003      	b.n	800326e <memchr+0x1a>
 8003266:	7804      	ldrb	r4, [r0, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	428c      	cmp	r4, r1
 800326c:	d1f6      	bne.n	800325c <memchr+0x8>
 800326e:	bd10      	pop	{r4, pc}

08003270 <__malloc_lock>:
 8003270:	4801      	ldr	r0, [pc, #4]	; (8003278 <__malloc_lock+0x8>)
 8003272:	f7ff ba83 	b.w	800277c <__retarget_lock_acquire_recursive>
 8003276:	bf00      	nop
 8003278:	200000fc 	.word	0x200000fc

0800327c <__malloc_unlock>:
 800327c:	4801      	ldr	r0, [pc, #4]	; (8003284 <__malloc_unlock+0x8>)
 800327e:	f7ff ba7e 	b.w	800277e <__retarget_lock_release_recursive>
 8003282:	bf00      	nop
 8003284:	200000fc 	.word	0x200000fc

08003288 <_read_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	4604      	mov	r4, r0
 800328c:	4608      	mov	r0, r1
 800328e:	4611      	mov	r1, r2
 8003290:	2200      	movs	r2, #0
 8003292:	4d05      	ldr	r5, [pc, #20]	; (80032a8 <_read_r+0x20>)
 8003294:	602a      	str	r2, [r5, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	f7fd f9ea 	bl	8000670 <_read>
 800329c:	1c43      	adds	r3, r0, #1
 800329e:	d102      	bne.n	80032a6 <_read_r+0x1e>
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	b103      	cbz	r3, 80032a6 <_read_r+0x1e>
 80032a4:	6023      	str	r3, [r4, #0]
 80032a6:	bd38      	pop	{r3, r4, r5, pc}
 80032a8:	20000104 	.word	0x20000104

080032ac <_init>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	bf00      	nop
 80032b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b2:	bc08      	pop	{r3}
 80032b4:	469e      	mov	lr, r3
 80032b6:	4770      	bx	lr

080032b8 <_fini>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr
