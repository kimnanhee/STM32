
Flask_control_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  080056a0  080056a0  000156a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005adc  08005adc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005adc  08005adc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005adc  08005adc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005adc  08005adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  200001dc  08005cc0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005cc0  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000846d  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb0  00000000  00000000  00028672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002a228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ec0  00000000  00000000  0002afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c30  00000000  00000000  00044ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009184a  00000000  00000000  0004dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df31a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c58  00000000  00000000  000df370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08005684 	.word	0x08005684

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08005684 	.word	0x08005684

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_GPIO_Init+0x78>)
 8000bbe:	f000 ff13 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_GPIO_Init+0x78>)
 8000bda:	f000 fd71 	bl	80016c0 <HAL_GPIO_Init>

}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40011800 	.word	0x40011800

08000bf0 <HAL_UART_RxCpltCallback>:
uint8_t Rx_Buffer[20];
uint8_t USART1_len=0;
uint8_t USART1_rx_end=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  static uint8_t usart1_chk=0;
  if(huart -> Instance == USART1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <HAL_UART_RxCpltCallback+0xa4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d144      	bne.n	8000c8c <HAL_UART_RxCpltCallback+0x9c>
  {
      USART1_rx_end=0;
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_UART_RxCpltCallback+0xa8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
      switch(usart1_chk)
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <HAL_UART_RxCpltCallback+0x26>
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d019      	beq.n	8000c48 <HAL_UART_RxCpltCallback+0x58>
 8000c14:	e030      	b.n	8000c78 <HAL_UART_RxCpltCallback+0x88>
      {
          case 0:
            if(Rx_Data[0]==0x02)
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d110      	bne.n	8000c40 <HAL_UART_RxCpltCallback+0x50>
            {
            	Rx_Buffer[USART1_len]=Rx_Data[0];
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c26:	7819      	ldrb	r1, [r3, #0]
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_UART_RxCpltCallback+0xb8>)
 8000c2a:	5499      	strb	r1, [r3, r2]
                USART1_len++;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c36:	701a      	strb	r2, [r3, #0]
                usart1_chk=1;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
            }
            else usart1_chk=0;
            break;
 8000c3e:	e020      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x92>
            else usart1_chk=0;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
            break;
 8000c46:	e01c      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x92>
          case 1:
            Rx_Buffer[USART1_len]=Rx_Data[0];
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c50:	7819      	ldrb	r1, [r3, #0]
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_RxCpltCallback+0xb8>)
 8000c54:	5499      	strb	r1, [r3, r2]
            USART1_len++;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c60:	701a      	strb	r2, [r3, #0]

            if(Rx_Data[0]==0x03)
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d10a      	bne.n	8000c80 <HAL_UART_RxCpltCallback+0x90>
            {
              USART1_rx_end=1;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_UART_RxCpltCallback+0xa8>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
              usart1_chk=0;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000c76:	e003      	b.n	8000c80 <HAL_UART_RxCpltCallback+0x90>
          default:
            usart1_chk=0;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
            break;
 8000c7e:	e000      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x92>
            break;
 8000c80:	bf00      	nop
      }
      HAL_UART_Receive_IT(&huart1, Rx_Data, 1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_UART_RxCpltCallback+0xbc>)
 8000c88:	f001 fbbf 	bl	800240a <HAL_UART_Receive_IT>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013800 	.word	0x40013800
 8000c98:	200001f9 	.word	0x200001f9
 8000c9c:	200001fa 	.word	0x200001fa
 8000ca0:	2000021c 	.word	0x2000021c
 8000ca4:	200001f8 	.word	0x200001f8
 8000ca8:	20000208 	.word	0x20000208
 8000cac:	20000220 	.word	0x20000220

08000cb0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)  //for printf
#endif
PUTCHAR_PROTOTYPE
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb8:	1d39      	adds	r1, r7, #4
 8000cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <__io_putchar+0x20>)
 8000cc2:	f001 fb10 	bl	80022e6 <HAL_UART_Transmit>
  return ch;
 8000cc6:	687b      	ldr	r3, [r7, #4]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000220 	.word	0x20000220

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 fa7a 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f860 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f7ff ff48 	bl	8000b74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ce4:	f000 f9d0 	bl	8001088 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  setvbuf(stdout, NULL, _IONBF, 0);
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <main+0xa0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6898      	ldr	r0, [r3, #8]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f002 fb8a 	bl	800340c <setvbuf>

  //main 함수 while() 문 위에 수신 인터럽트 enable 설정
  HAL_UART_Receive_IT(&huart1, Rx_Data, 1);       // 수신 interrupt Enable 설정
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	491f      	ldr	r1, [pc, #124]	; (8000d78 <main+0xa4>)
 8000cfc:	481f      	ldr	r0, [pc, #124]	; (8000d7c <main+0xa8>)
 8000cfe:	f001 fb84 	bl	800240a <HAL_UART_Receive_IT>
  printf("Program start...  ");
 8000d02:	481f      	ldr	r0, [pc, #124]	; (8000d80 <main+0xac>)
 8000d04:	f002 fb6a 	bl	80033dc <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// main함수 while문 내에서 주기적으로 USART1_rx_end flag 검사
	if(USART1_rx_end)
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <main+0xb0>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0fb      	beq.n	8000d08 <main+0x34>
	{
	  // 입력 문자열 비교
	  if(!strcmp(Rx_Buffer, "\x02LED ON\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 , GPIO_PIN_SET);
 8000d10:	491d      	ldr	r1, [pc, #116]	; (8000d88 <main+0xb4>)
 8000d12:	481e      	ldr	r0, [pc, #120]	; (8000d8c <main+0xb8>)
 8000d14:	f7ff fa88 	bl	8000228 <strcmp>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d105      	bne.n	8000d2a <main+0x56>
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2104      	movs	r1, #4
 8000d22:	481b      	ldr	r0, [pc, #108]	; (8000d90 <main+0xbc>)
 8000d24:	f000 fe60 	bl	80019e8 <HAL_GPIO_WritePin>
 8000d28:	e00b      	b.n	8000d42 <main+0x6e>
	  else if(!strcmp(Rx_Buffer, "\x02LED OFF\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 , GPIO_PIN_RESET);
 8000d2a:	491a      	ldr	r1, [pc, #104]	; (8000d94 <main+0xc0>)
 8000d2c:	4817      	ldr	r0, [pc, #92]	; (8000d8c <main+0xb8>)
 8000d2e:	f7ff fa7b 	bl	8000228 <strcmp>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d104      	bne.n	8000d42 <main+0x6e>
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	4814      	ldr	r0, [pc, #80]	; (8000d90 <main+0xbc>)
 8000d3e:	f000 fe53 	bl	80019e8 <HAL_GPIO_WritePin>

	  // 받은 데이터, 전송
	  HAL_UART_Transmit(&huart1, Rx_Buffer, USART1_len, 2);
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <main+0xc4>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	2302      	movs	r3, #2
 8000d4a:	4910      	ldr	r1, [pc, #64]	; (8000d8c <main+0xb8>)
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <main+0xa8>)
 8000d4e:	f001 faca 	bl	80022e6 <HAL_UART_Transmit>
	  USART1_len=0;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <main+0xc4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
	  USART1_rx_end=0;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <main+0xb0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]

	  printf("%s", Rx_Buffer);
 8000d5e:	490b      	ldr	r1, [pc, #44]	; (8000d8c <main+0xb8>)
 8000d60:	480e      	ldr	r0, [pc, #56]	; (8000d9c <main+0xc8>)
 8000d62:	f002 fb3b 	bl	80033dc <iprintf>

	  memset(Rx_Buffer, 0, 20); // 초기화
 8000d66:	2214      	movs	r2, #20
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4808      	ldr	r0, [pc, #32]	; (8000d8c <main+0xb8>)
 8000d6c:	f001 fece 	bl	8002b0c <memset>
	if(USART1_rx_end)
 8000d70:	e7ca      	b.n	8000d08 <main+0x34>
 8000d72:	bf00      	nop
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	2000021c 	.word	0x2000021c
 8000d7c:	20000220 	.word	0x20000220
 8000d80:	080056a0 	.word	0x080056a0
 8000d84:	200001f9 	.word	0x200001f9
 8000d88:	080056b4 	.word	0x080056b4
 8000d8c:	20000208 	.word	0x20000208
 8000d90:	40011800 	.word	0x40011800
 8000d94:	080056c0 	.word	0x080056c0
 8000d98:	200001f8 	.word	0x200001f8
 8000d9c:	080056cc 	.word	0x080056cc

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b090      	sub	sp, #64	; 0x40
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	2228      	movs	r2, #40	; 0x28
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 feac 	bl	8002b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dde:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 fe15 	bl	8001a18 <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000df4:	f000 f819 	bl	8000e2a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	230f      	movs	r3, #15
 8000dfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2102      	movs	r1, #2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 f880 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e1e:	f000 f804 	bl	8000e2a <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3740      	adds	r7, #64	; 0x40
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2e:	b672      	cpsid	i
}
 8000e30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <Error_Handler+0x8>

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6193      	str	r3, [r2, #24]
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_MspInit+0x5c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_MspInit+0x60>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_MspInit+0x60>)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ede:	f000 f9bd 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <USART1_IRQHandler+0x10>)
 8000eee:	f001 fae1 	bl	80024b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000220 	.word	0x20000220

08000efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	return 1;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <_kill>:

int _kill(int pid, int sig)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f14:	f001 fdd0 	bl	8002ab8 <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2216      	movs	r2, #22
 8000f1c:	601a      	str	r2, [r3, #0]
	return -1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_exit>:

void _exit (int status)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f32:	f04f 31ff 	mov.w	r1, #4294967295
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffe7 	bl	8000f0a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f3c:	e7fe      	b.n	8000f3c <_exit+0x12>

08000f3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	e00a      	b.n	8000f66 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f50:	f3af 8000 	nop.w
 8000f54:	4601      	mov	r1, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	60ba      	str	r2, [r7, #8]
 8000f5c:	b2ca      	uxtb	r2, r1
 8000f5e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3301      	adds	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbf0      	blt.n	8000f50 <_read+0x12>
	}

return len;
 8000f6e:	687b      	ldr	r3, [r7, #4]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e009      	b.n	8000f9e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fe8c 	bl	8000cb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dbf1      	blt.n	8000f8a <_write+0x12>
	}
	return len;
 8000fa6:	687b      	ldr	r3, [r7, #4]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_close>:

int _close(int file)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <_isatty>:

int _isatty(int file)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	return 1;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f001 fd3a 	bl	8002ab8 <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2000c000 	.word	0x2000c000
 8001070:	00000400 	.word	0x00000400
 8001074:	200001fc 	.word	0x200001fc
 8001078:	20000278 	.word	0x20000278

0800107c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_USART1_UART_Init+0x50>)
 8001090:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 8001094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001098:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART1_UART_Init+0x4c>)
 80010c0:	f001 f8c4 	bl	800224c <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ca:	f7ff feae 	bl	8000e2a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000220 	.word	0x20000220
 80010d8:	40013800 	.word	0x40013800

080010dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a20      	ldr	r2, [pc, #128]	; (8001178 <HAL_UART_MspInit+0x9c>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d139      	bne.n	8001170 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_UART_MspInit+0xa0>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_UART_MspInit+0xa0>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_UART_MspInit+0xa0>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_UART_MspInit+0xa0>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_UART_MspInit+0xa0>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_UART_MspInit+0xa0>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001130:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <HAL_UART_MspInit+0xa4>)
 8001142:	f000 fabd 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4619      	mov	r1, r3
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <HAL_UART_MspInit+0xa4>)
 800115c:	f000 fab0 	bl	80016c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	2025      	movs	r0, #37	; 0x25
 8001166:	f000 f96c 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800116a:	2025      	movs	r0, #37	; 0x25
 800116c:	f000 f985 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40013800 	.word	0x40013800
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800

08001184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001184:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001186:	e003      	b.n	8001190 <LoopCopyDataInit>

08001188 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800118a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800118c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800118e:	3104      	adds	r1, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001190:	480a      	ldr	r0, [pc, #40]	; (80011bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001194:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001196:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001198:	d3f6      	bcc.n	8001188 <CopyDataInit>
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800119c:	e002      	b.n	80011a4 <LoopFillZerobss>

0800119e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011a0:	f842 3b04 	str.w	r3, [r2], #4

080011a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011a8:	d3f9      	bcc.n	800119e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011aa:	f7ff ff67 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f001 fc89 	bl	8002ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b2:	f7ff fd8f 	bl	8000cd4 <main>
  bx lr
 80011b6:	4770      	bx	lr
  ldr r3, =_sidata
 80011b8:	08005ae4 	.word	0x08005ae4
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011c0:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80011c4:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80011c8:	20000274 	.word	0x20000274

080011cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_2_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x28>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_Init+0x28>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f923 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fe22 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40022000 	.word	0x40022000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f93b 	bl	8001496 <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f903 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x1c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x20>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_IncTick+0x20>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000008 	.word	0x20000008
 800127c:	20000260 	.word	0x20000260

08001280 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <HAL_GetTick+0x10>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000260 	.word	0x20000260

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4906      	ldr	r1, [pc, #24]	; (800132c <__NVIC_EnableIRQ+0x34>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f7ff ff90 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff2d 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff42 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff90 	bl	8001384 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5f 	bl	8001330 <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff35 	bl	80012f8 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d005      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2204      	movs	r2, #4
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e0d6      	b.n	8001680 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 020e 	bic.w	r2, r2, #14
 80014e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0201 	bic.w	r2, r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b64      	ldr	r3, [pc, #400]	; (800168c <HAL_DMA_Abort_IT+0x1dc>)
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d958      	bls.n	80015b0 <HAL_DMA_Abort_IT+0x100>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a63      	ldr	r2, [pc, #396]	; (8001690 <HAL_DMA_Abort_IT+0x1e0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d04f      	beq.n	80015a8 <HAL_DMA_Abort_IT+0xf8>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a61      	ldr	r2, [pc, #388]	; (8001694 <HAL_DMA_Abort_IT+0x1e4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d048      	beq.n	80015a4 <HAL_DMA_Abort_IT+0xf4>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a60      	ldr	r2, [pc, #384]	; (8001698 <HAL_DMA_Abort_IT+0x1e8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d040      	beq.n	800159e <HAL_DMA_Abort_IT+0xee>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a5e      	ldr	r2, [pc, #376]	; (800169c <HAL_DMA_Abort_IT+0x1ec>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d038      	beq.n	8001598 <HAL_DMA_Abort_IT+0xe8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a5d      	ldr	r2, [pc, #372]	; (80016a0 <HAL_DMA_Abort_IT+0x1f0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d030      	beq.n	8001592 <HAL_DMA_Abort_IT+0xe2>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a5b      	ldr	r2, [pc, #364]	; (80016a4 <HAL_DMA_Abort_IT+0x1f4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d028      	beq.n	800158c <HAL_DMA_Abort_IT+0xdc>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a53      	ldr	r2, [pc, #332]	; (800168c <HAL_DMA_Abort_IT+0x1dc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d020      	beq.n	8001586 <HAL_DMA_Abort_IT+0xd6>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_DMA_Abort_IT+0x1f8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_DMA_Abort_IT+0xd2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a56      	ldr	r2, [pc, #344]	; (80016ac <HAL_DMA_Abort_IT+0x1fc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d012      	beq.n	800157e <HAL_DMA_Abort_IT+0xce>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_DMA_Abort_IT+0x200>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00a      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a53      	ldr	r2, [pc, #332]	; (80016b4 <HAL_DMA_Abort_IT+0x204>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d102      	bne.n	8001572 <HAL_DMA_Abort_IT+0xc2>
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	e01b      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 8001572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001576:	e018      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 8001578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157c:	e015      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 800157e:	2310      	movs	r3, #16
 8001580:	e013      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 8001582:	2301      	movs	r3, #1
 8001584:	e011      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 8001586:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800158a:	e00e      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 800158c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001590:	e00b      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 8001592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001596:	e008      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	e005      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	e002      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 80015a4:	2310      	movs	r3, #16
 80015a6:	e000      	b.n	80015aa <HAL_DMA_Abort_IT+0xfa>
 80015a8:	2301      	movs	r3, #1
 80015aa:	4a43      	ldr	r2, [pc, #268]	; (80016b8 <HAL_DMA_Abort_IT+0x208>)
 80015ac:	6053      	str	r3, [r2, #4]
 80015ae:	e057      	b.n	8001660 <HAL_DMA_Abort_IT+0x1b0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a36      	ldr	r2, [pc, #216]	; (8001690 <HAL_DMA_Abort_IT+0x1e0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d04f      	beq.n	800165a <HAL_DMA_Abort_IT+0x1aa>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a35      	ldr	r2, [pc, #212]	; (8001694 <HAL_DMA_Abort_IT+0x1e4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d048      	beq.n	8001656 <HAL_DMA_Abort_IT+0x1a6>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a33      	ldr	r2, [pc, #204]	; (8001698 <HAL_DMA_Abort_IT+0x1e8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d040      	beq.n	8001650 <HAL_DMA_Abort_IT+0x1a0>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <HAL_DMA_Abort_IT+0x1ec>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d038      	beq.n	800164a <HAL_DMA_Abort_IT+0x19a>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <HAL_DMA_Abort_IT+0x1f0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d030      	beq.n	8001644 <HAL_DMA_Abort_IT+0x194>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a2f      	ldr	r2, [pc, #188]	; (80016a4 <HAL_DMA_Abort_IT+0x1f4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d028      	beq.n	800163e <HAL_DMA_Abort_IT+0x18e>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a26      	ldr	r2, [pc, #152]	; (800168c <HAL_DMA_Abort_IT+0x1dc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d020      	beq.n	8001638 <HAL_DMA_Abort_IT+0x188>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2b      	ldr	r2, [pc, #172]	; (80016a8 <HAL_DMA_Abort_IT+0x1f8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d019      	beq.n	8001634 <HAL_DMA_Abort_IT+0x184>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a29      	ldr	r2, [pc, #164]	; (80016ac <HAL_DMA_Abort_IT+0x1fc>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d012      	beq.n	8001630 <HAL_DMA_Abort_IT+0x180>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a28      	ldr	r2, [pc, #160]	; (80016b0 <HAL_DMA_Abort_IT+0x200>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00a      	beq.n	800162a <HAL_DMA_Abort_IT+0x17a>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <HAL_DMA_Abort_IT+0x204>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d102      	bne.n	8001624 <HAL_DMA_Abort_IT+0x174>
 800161e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001622:	e01b      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 8001624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001628:	e018      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 800162a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162e:	e015      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 8001630:	2310      	movs	r3, #16
 8001632:	e013      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 8001634:	2301      	movs	r3, #1
 8001636:	e011      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 8001638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800163c:	e00e      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 800163e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001642:	e00b      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	e008      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	e005      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 8001650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001654:	e002      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 8001656:	2310      	movs	r3, #16
 8001658:	e000      	b.n	800165c <HAL_DMA_Abort_IT+0x1ac>
 800165a:	2301      	movs	r3, #1
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_DMA_Abort_IT+0x20c>)
 800165e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
    } 
  }
  return status;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40020080 	.word	0x40020080
 8001690:	40020008 	.word	0x40020008
 8001694:	4002001c 	.word	0x4002001c
 8001698:	40020030 	.word	0x40020030
 800169c:	40020044 	.word	0x40020044
 80016a0:	40020058 	.word	0x40020058
 80016a4:	4002006c 	.word	0x4002006c
 80016a8:	40020408 	.word	0x40020408
 80016ac:	4002041c 	.word	0x4002041c
 80016b0:	40020430 	.word	0x40020430
 80016b4:	40020444 	.word	0x40020444
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020000 	.word	0x40020000

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e179      	b.n	80019c8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8168 	bne.w	80019c2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4aa0      	ldr	r2, [pc, #640]	; (8001978 <HAL_GPIO_Init+0x2b8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 80016fc:	4a9e      	ldr	r2, [pc, #632]	; (8001978 <HAL_GPIO_Init+0x2b8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d875      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001702:	4a9e      	ldr	r2, [pc, #632]	; (800197c <HAL_GPIO_Init+0x2bc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d058      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001708:	4a9c      	ldr	r2, [pc, #624]	; (800197c <HAL_GPIO_Init+0x2bc>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d86f      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800170e:	4a9c      	ldr	r2, [pc, #624]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d052      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001714:	4a9a      	ldr	r2, [pc, #616]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d869      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800171a:	4a9a      	ldr	r2, [pc, #616]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04c      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001720:	4a98      	ldr	r2, [pc, #608]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d863      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001726:	4a98      	ldr	r2, [pc, #608]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 800172c:	4a96      	ldr	r2, [pc, #600]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d85d      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d82a      	bhi.n	800178c <HAL_GPIO_Init+0xcc>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d859      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_GPIO_Init+0x80>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	080017bb 	.word	0x080017bb
 8001744:	08001795 	.word	0x08001795
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017e9 	.word	0x080017e9
 8001750:	080017ef 	.word	0x080017ef
 8001754:	080017ef 	.word	0x080017ef
 8001758:	080017ef 	.word	0x080017ef
 800175c:	080017ef 	.word	0x080017ef
 8001760:	080017ef 	.word	0x080017ef
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017ef 	.word	0x080017ef
 800176c:	080017ef 	.word	0x080017ef
 8001770:	080017ef 	.word	0x080017ef
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017ef 	.word	0x080017ef
 800177c:	080017ef 	.word	0x080017ef
 8001780:	080017ef 	.word	0x080017ef
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017b1 	.word	0x080017b1
 800178c:	4a7f      	ldr	r2, [pc, #508]	; (800198c <HAL_GPIO_Init+0x2cc>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e029      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e024      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01f      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e01a      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e013      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e009      	b.n	80017f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e003      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          break;
 80017ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d801      	bhi.n	80017fa <HAL_GPIO_Init+0x13a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_Init+0x13e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d802      	bhi.n	800180c <HAL_GPIO_Init+0x14c>
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x152>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3b08      	subs	r3, #8
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	210f      	movs	r1, #15
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80c1 	beq.w	80019c2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001858:	4a4e      	ldr	r2, [pc, #312]	; (8001994 <HAL_GPIO_Init+0x2d4>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a46      	ldr	r2, [pc, #280]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d01f      	beq.n	80018c4 <HAL_GPIO_Init+0x204>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_GPIO_Init+0x2dc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d019      	beq.n	80018c0 <HAL_GPIO_Init+0x200>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a44      	ldr	r2, [pc, #272]	; (80019a0 <HAL_GPIO_Init+0x2e0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d013      	beq.n	80018bc <HAL_GPIO_Init+0x1fc>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a43      	ldr	r2, [pc, #268]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d00d      	beq.n	80018b8 <HAL_GPIO_Init+0x1f8>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d007      	beq.n	80018b4 <HAL_GPIO_Init+0x1f4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a41      	ldr	r2, [pc, #260]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_GPIO_Init+0x1f0>
 80018ac:	2305      	movs	r3, #5
 80018ae:	e00a      	b.n	80018c6 <HAL_GPIO_Init+0x206>
 80018b0:	2306      	movs	r3, #6
 80018b2:	e008      	b.n	80018c6 <HAL_GPIO_Init+0x206>
 80018b4:	2304      	movs	r3, #4
 80018b6:	e006      	b.n	80018c6 <HAL_GPIO_Init+0x206>
 80018b8:	2303      	movs	r3, #3
 80018ba:	e004      	b.n	80018c6 <HAL_GPIO_Init+0x206>
 80018bc:	2302      	movs	r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_Init+0x206>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_GPIO_Init+0x206>
 80018c4:	2300      	movs	r3, #0
 80018c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c8:	f002 0203 	and.w	r2, r2, #3
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	4093      	lsls	r3, r2
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018d6:	492f      	ldr	r1, [pc, #188]	; (8001994 <HAL_GPIO_Init+0x2d4>)
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d006      	beq.n	80018fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	492e      	ldr	r1, [pc, #184]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	43db      	mvns	r3, r3
 8001906:	492a      	ldr	r1, [pc, #168]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001908:	4013      	ands	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4924      	ldr	r1, [pc, #144]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	4920      	ldr	r1, [pc, #128]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001930:	4013      	ands	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	491a      	ldr	r1, [pc, #104]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	4916      	ldr	r1, [pc, #88]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001958:	4013      	ands	r3, r2
 800195a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d025      	beq.n	80019b4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4910      	ldr	r1, [pc, #64]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
 8001974:	e025      	b.n	80019c2 <HAL_GPIO_Init+0x302>
 8001976:	bf00      	nop
 8001978:	10320000 	.word	0x10320000
 800197c:	10310000 	.word	0x10310000
 8001980:	10220000 	.word	0x10220000
 8001984:	10210000 	.word	0x10210000
 8001988:	10120000 	.word	0x10120000
 800198c:	10110000 	.word	0x10110000
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000
 8001998:	40010800 	.word	0x40010800
 800199c:	40010c00 	.word	0x40010c00
 80019a0:	40011000 	.word	0x40011000
 80019a4:	40011400 	.word	0x40011400
 80019a8:	40011800 	.word	0x40011800
 80019ac:	40011c00 	.word	0x40011c00
 80019b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_GPIO_Init+0x324>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4909      	ldr	r1, [pc, #36]	; (80019e4 <HAL_GPIO_Init+0x324>)
 80019be:	4013      	ands	r3, r2
 80019c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	3301      	adds	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f47f ae7e 	bne.w	80016d4 <HAL_GPIO_Init+0x14>
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	372c      	adds	r7, #44	; 0x2c
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a04:	e003      	b.n	8001a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e26c      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8087 	beq.w	8001b46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a38:	4b92      	ldr	r3, [pc, #584]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a44:	4b8f      	ldr	r3, [pc, #572]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d112      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5e>
 8001a50:	4b8c      	ldr	r3, [pc, #560]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d10b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5e:	4b89      	ldr	r3, [pc, #548]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d06c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x12c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d168      	bne.n	8001b44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e246      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x76>
 8001a80:	4b80      	ldr	r3, [pc, #512]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a7f      	ldr	r2, [pc, #508]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e02e      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x98>
 8001a96:	4b7b      	ldr	r3, [pc, #492]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7a      	ldr	r2, [pc, #488]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b78      	ldr	r3, [pc, #480]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a77      	ldr	r2, [pc, #476]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xbc>
 8001aba:	4b72      	ldr	r3, [pc, #456]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a71      	ldr	r2, [pc, #452]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6f      	ldr	r3, [pc, #444]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6e      	ldr	r2, [pc, #440]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001ad4:	4b6b      	ldr	r3, [pc, #428]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6a      	ldr	r2, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a67      	ldr	r2, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fbc4 	bl	8001280 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fbc0 	bl	8001280 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e1fa      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xe4>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fbb0 	bl	8001280 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fbac 	bl	8001280 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1e6      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x10c>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b52:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b5e:	4b49      	ldr	r3, [pc, #292]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x18c>
 8001b6a:	4b46      	ldr	r3, [pc, #280]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1ba      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4939      	ldr	r1, [pc, #228]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fb65 	bl	8001280 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fb61 	bl	8001280 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e19b      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4927      	ldr	r1, [pc, #156]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fb44 	bl	8001280 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fb40 	bl	8001280 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e17a      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d03a      	beq.n	8001c9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d019      	beq.n	8001c62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff fb24 	bl	8001280 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fb20 	bl	8001280 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e15a      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f000 fad8 	bl	8002210 <RCC_Delay>
 8001c60:	e01c      	b.n	8001c9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_RCC_OscConfig+0x274>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c68:	f7ff fb0a 	bl	8001280 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6e:	e00f      	b.n	8001c90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff fb06 	bl	8001280 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d908      	bls.n	8001c90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e140      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	42420000 	.word	0x42420000
 8001c8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c90:	4b9e      	ldr	r3, [pc, #632]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e9      	bne.n	8001c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80a6 	beq.w	8001df6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b97      	ldr	r3, [pc, #604]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b94      	ldr	r3, [pc, #592]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4a93      	ldr	r2, [pc, #588]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	61d3      	str	r3, [r2, #28]
 8001cc6:	4b91      	ldr	r3, [pc, #580]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd6:	4b8e      	ldr	r3, [pc, #568]	; (8001f10 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d118      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x4f8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a8a      	ldr	r2, [pc, #552]	; (8001f10 <HAL_RCC_OscConfig+0x4f8>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cee:	f7ff fac7 	bl	8001280 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf6:	f7ff fac3 	bl	8001280 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b64      	cmp	r3, #100	; 0x64
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0fd      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b81      	ldr	r3, [pc, #516]	; (8001f10 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x312>
 8001d1c:	4b7b      	ldr	r3, [pc, #492]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a7a      	ldr	r2, [pc, #488]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e02d      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x334>
 8001d32:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a75      	ldr	r2, [pc, #468]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	4b73      	ldr	r3, [pc, #460]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a72      	ldr	r2, [pc, #456]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	e01c      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x356>
 8001d54:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a6c      	ldr	r2, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	4b6a      	ldr	r3, [pc, #424]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	e00b      	b.n	8001d86 <HAL_RCC_OscConfig+0x36e>
 8001d6e:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a66      	ldr	r2, [pc, #408]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	4b64      	ldr	r3, [pc, #400]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4a63      	ldr	r2, [pc, #396]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d015      	beq.n	8001dba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fa77 	bl	8001280 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7ff fa73 	bl	8001280 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0ab      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dac:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ee      	beq.n	8001d96 <HAL_RCC_OscConfig+0x37e>
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fa61 	bl	8001280 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fa5d 	bl	8001280 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e095      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1ee      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b48      	ldr	r3, [pc, #288]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a47      	ldr	r2, [pc, #284]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8081 	beq.w	8001f02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d061      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d146      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e14:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_OscConfig+0x4fc>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fa31 	bl	8001280 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff fa2d 	bl	8001280 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e067      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e34:	4b35      	ldr	r3, [pc, #212]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d108      	bne.n	8001e5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e4a:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	492d      	ldr	r1, [pc, #180]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a19      	ldr	r1, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	4927      	ldr	r1, [pc, #156]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_OscConfig+0x4fc>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fa01 	bl	8001280 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff f9fd 	bl	8001280 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e037      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x46a>
 8001ea0:	e02f      	b.n	8001f02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_RCC_OscConfig+0x4fc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f9ea 	bl	8001280 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f9e6 	bl	8001280 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e020      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x498>
 8001ece:	e018      	b.n	8001f02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e013      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40007000 	.word	0x40007000
 8001f14:	42420060 	.word	0x42420060

08001f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0d0      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b6a      	ldr	r3, [pc, #424]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d910      	bls.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b67      	ldr	r3, [pc, #412]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4965      	ldr	r1, [pc, #404]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b63      	ldr	r3, [pc, #396]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0b8      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a58      	ldr	r2, [pc, #352]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	494d      	ldr	r1, [pc, #308]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d040      	beq.n	8002038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d115      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07f      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e073      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06b      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4936      	ldr	r1, [pc, #216]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7ff f93a 	bl	8001280 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7ff f936 	bl	8001280 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e053      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d210      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e032      	b.n	80020ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	490e      	ldr	r1, [pc, #56]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020a6:	f000 f821 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	490a      	ldr	r1, [pc, #40]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	5ccb      	ldrb	r3, [r1, r3]
 80020ba:	fa22 f303 	lsr.w	r3, r2, r3
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_RCC_ClockConfig+0x1cc>)
 80020c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1d0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f898 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022000 	.word	0x40022000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080056e0 	.word	0x080056e0
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000004 	.word	0x20000004

080020ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b490      	push	{r4, r7}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020f2:	4b2a      	ldr	r3, [pc, #168]	; (800219c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020f4:	1d3c      	adds	r4, r7, #4
 80020f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020fc:	f240 2301 	movw	r3, #513	; 0x201
 8002100:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002116:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x40>
 8002126:	2b08      	cmp	r3, #8
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x46>
 800212a:	e02d      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800212e:	623b      	str	r3, [r7, #32]
      break;
 8002130:	e02d      	b.n	800218e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800213e:	4413      	add	r3, r2
 8002140:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002144:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0c5b      	lsrs	r3, r3, #17
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800215e:	4413      	add	r3, r2
 8002160:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002164:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216a:	fb02 f203 	mul.w	r2, r2, r3
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	e004      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	623b      	str	r3, [r7, #32]
      break;
 8002186:	e002      	b.n	800218e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800218a:	623b      	str	r3, [r7, #32]
      break;
 800218c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218e:	6a3b      	ldr	r3, [r7, #32]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bc90      	pop	{r4, r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	080056d0 	.word	0x080056d0
 80021a0:	40021000 	.word	0x40021000
 80021a4:	007a1200 	.word	0x007a1200
 80021a8:	003d0900 	.word	0x003d0900

080021ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b02      	ldr	r3, [pc, #8]	; (80021bc <HAL_RCC_GetHCLKFreq+0x10>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	20000000 	.word	0x20000000

080021c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021c4:	f7ff fff2 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	080056f0 	.word	0x080056f0

080021e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ec:	f7ff ffde 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	0adb      	lsrs	r3, r3, #11
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	; (800220c <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	080056f0 	.word	0x080056f0

08002210 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <RCC_Delay+0x34>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <RCC_Delay+0x38>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0a5b      	lsrs	r3, r3, #9
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800222c:	bf00      	nop
  }
  while (Delay --);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e5a      	subs	r2, r3, #1
 8002232:	60fa      	str	r2, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f9      	bne.n	800222c <RCC_Delay+0x1c>
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000000 	.word	0x20000000
 8002248:	10624dd3 	.word	0x10624dd3

0800224c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e03f      	b.n	80022de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe ff32 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2224      	movs	r2, #36	; 0x24
 800227c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800228e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fb83 	bl	800299c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b08a      	sub	sp, #40	; 0x28
 80022ea:	af02      	add	r7, sp, #8
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	d17c      	bne.n	8002400 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_UART_Transmit+0x2c>
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e075      	b.n	8002402 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_UART_Transmit+0x3e>
 8002320:	2302      	movs	r3, #2
 8002322:	e06e      	b.n	8002402 <HAL_UART_Transmit+0x11c>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2221      	movs	r2, #33	; 0x21
 8002336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800233a:	f7fe ffa1 	bl	8001280 <HAL_GetTick>
 800233e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	88fa      	ldrh	r2, [r7, #6]
 800234a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002354:	d108      	bne.n	8002368 <HAL_UART_Transmit+0x82>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d104      	bne.n	8002368 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	e003      	b.n	8002370 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002378:	e02a      	b.n	80023d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 f9a7 	bl	80026d8 <UART_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e036      	b.n	8002402 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10b      	bne.n	80023b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	3302      	adds	r3, #2
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	e007      	b.n	80023c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	3301      	adds	r3, #1
 80023c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1cf      	bne.n	800237a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2140      	movs	r1, #64	; 0x40
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f977 	bl	80026d8 <UART_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e006      	b.n	8002402 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e000      	b.n	8002402 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
  }
}
 8002402:	4618      	mov	r0, r3
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	4613      	mov	r3, r2
 8002416:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b20      	cmp	r3, #32
 8002422:	d140      	bne.n	80024a6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_UART_Receive_IT+0x26>
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e039      	b.n	80024a8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_UART_Receive_IT+0x38>
 800243e:	2302      	movs	r3, #2
 8002440:	e032      	b.n	80024a8 <HAL_UART_Receive_IT+0x9e>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	88fa      	ldrh	r2, [r7, #6]
 800245a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2222      	movs	r2, #34	; 0x22
 8002466:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002480:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0220 	orr.w	r2, r2, #32
 80024a0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_UART_IRQHandler+0x52>
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9cc 	bl	800289c <UART_Receive_IT>
      return;
 8002504:	e0d0      	b.n	80026a8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80b0 	beq.w	800266e <HAL_UART_IRQHandler+0x1ba>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_UART_IRQHandler+0x70>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80a5 	beq.w	800266e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_UART_IRQHandler+0x90>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_UART_IRQHandler+0xb0>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	f043 0202 	orr.w	r2, r3, #2
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_UART_IRQHandler+0xd0>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	f043 0204 	orr.w	r2, r3, #4
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00f      	beq.n	80025ae <HAL_UART_IRQHandler+0xfa>
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <HAL_UART_IRQHandler+0xee>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	f043 0208 	orr.w	r2, r3, #8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d077      	beq.n	80026a6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <HAL_UART_IRQHandler+0x11c>
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f966 	bl	800289c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <HAL_UART_IRQHandler+0x144>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d031      	beq.n	800265c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8b7 	bl	800276c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d023      	beq.n	8002654 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800261a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <HAL_UART_IRQHandler+0x1fc>)
 800262a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe ff3d 	bl	80014b0 <HAL_DMA_Abort_IT>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d016      	beq.n	800266a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002646:	4610      	mov	r0, r2
 8002648:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264a:	e00e      	b.n	800266a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f83a 	bl	80026c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002652:	e00a      	b.n	800266a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f836 	bl	80026c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265a:	e006      	b.n	800266a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f832 	bl	80026c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002668:	e01d      	b.n	80026a6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266a:	bf00      	nop
    return;
 800266c:	e01b      	b.n	80026a6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_UART_IRQHandler+0x1d6>
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f8a3 	bl	80027ce <UART_Transmit_IT>
    return;
 8002688:	e00e      	b.n	80026a8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_UART_IRQHandler+0x1f4>
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8e4 	bl	800286c <UART_EndTransmit_IT>
    return;
 80026a4:	e000      	b.n	80026a8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80026a6:	bf00      	nop
  }
}
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	080027a7 	.word	0x080027a7

080026b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e8:	e02c      	b.n	8002744 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d028      	beq.n	8002744 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <UART_WaitOnFlagUntilTimeout+0x30>
 80026f8:	f7fe fdc2 	bl	8001280 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d21d      	bcs.n	8002744 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002716:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e00f      	b.n	8002764 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	429a      	cmp	r2, r3
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	429a      	cmp	r2, r3
 8002760:	d0c3      	beq.n	80026ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002782:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f7ff ff80 	bl	80026c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b21      	cmp	r3, #33	; 0x21
 80027e0:	d13e      	bne.n	8002860 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ea:	d114      	bne.n	8002816 <UART_Transmit_IT+0x48>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d110      	bne.n	8002816 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002808:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	1c9a      	adds	r2, r3, #2
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	621a      	str	r2, [r3, #32]
 8002814:	e008      	b.n	8002828 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	1c59      	adds	r1, r3, #1
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6211      	str	r1, [r2, #32]
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29b      	uxth	r3, r3
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4619      	mov	r1, r3
 8002836:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10f      	bne.n	800285c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800284a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800285a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002882:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff11 	bl	80026b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b22      	cmp	r3, #34	; 0x22
 80028ae:	d170      	bne.n	8002992 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b8:	d117      	bne.n	80028ea <UART_Receive_IT+0x4e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d113      	bne.n	80028ea <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	1c9a      	adds	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
 80028e8:	e026      	b.n	8002938 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fc:	d007      	beq.n	800290e <UART_Receive_IT+0x72>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <UART_Receive_IT+0x80>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e008      	b.n	800292e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4619      	mov	r1, r3
 8002946:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002948:	2b00      	cmp	r3, #0
 800294a:	d120      	bne.n	800298e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0220 	bic.w	r2, r2, #32
 800295a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7fe f933 	bl	8000bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e002      	b.n	8002994 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002992:	2302      	movs	r3, #2
  }
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029d6:	f023 030c 	bic.w	r3, r3, #12
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2c      	ldr	r2, [pc, #176]	; (8002ab0 <UART_SetConfig+0x114>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d103      	bne.n	8002a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a04:	f7ff fbf0 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	e002      	b.n	8002a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f7ff fbd8 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8002a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009a      	lsls	r2, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	0119      	lsls	r1, r3, #4
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	009a      	lsls	r2, r3, #2
 8002a3c:	441a      	add	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2064      	movs	r0, #100	; 0x64
 8002a52:	fb00 f303 	mul.w	r3, r0, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	3332      	adds	r3, #50	; 0x32
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a68:	4419      	add	r1, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009a      	lsls	r2, r3, #2
 8002a74:	441a      	add	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a82:	fba3 0302 	umull	r0, r3, r3, r2
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2064      	movs	r0, #100	; 0x64
 8002a8a:	fb00 f303 	mul.w	r3, r0, r3
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	440a      	add	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	51eb851f 	.word	0x51eb851f

08002ab8 <__errno>:
 8002ab8:	4b01      	ldr	r3, [pc, #4]	; (8002ac0 <__errno+0x8>)
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	2000000c 	.word	0x2000000c

08002ac4 <__libc_init_array>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	4d0c      	ldr	r5, [pc, #48]	; (8002afc <__libc_init_array+0x38>)
 8002aca:	4c0d      	ldr	r4, [pc, #52]	; (8002b00 <__libc_init_array+0x3c>)
 8002acc:	1b64      	subs	r4, r4, r5
 8002ace:	10a4      	asrs	r4, r4, #2
 8002ad0:	42a6      	cmp	r6, r4
 8002ad2:	d109      	bne.n	8002ae8 <__libc_init_array+0x24>
 8002ad4:	f002 fdd6 	bl	8005684 <_init>
 8002ad8:	2600      	movs	r6, #0
 8002ada:	4d0a      	ldr	r5, [pc, #40]	; (8002b04 <__libc_init_array+0x40>)
 8002adc:	4c0a      	ldr	r4, [pc, #40]	; (8002b08 <__libc_init_array+0x44>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	42a6      	cmp	r6, r4
 8002ae4:	d105      	bne.n	8002af2 <__libc_init_array+0x2e>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aec:	4798      	blx	r3
 8002aee:	3601      	adds	r6, #1
 8002af0:	e7ee      	b.n	8002ad0 <__libc_init_array+0xc>
 8002af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af6:	4798      	blx	r3
 8002af8:	3601      	adds	r6, #1
 8002afa:	e7f2      	b.n	8002ae2 <__libc_init_array+0x1e>
 8002afc:	08005adc 	.word	0x08005adc
 8002b00:	08005adc 	.word	0x08005adc
 8002b04:	08005adc 	.word	0x08005adc
 8002b08:	08005ae0 	.word	0x08005ae0

08002b0c <memset>:
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4402      	add	r2, r0
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d100      	bne.n	8002b16 <memset+0xa>
 8002b14:	4770      	bx	lr
 8002b16:	f803 1b01 	strb.w	r1, [r3], #1
 8002b1a:	e7f9      	b.n	8002b10 <memset+0x4>

08002b1c <__cvt>:
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b22:	461f      	mov	r7, r3
 8002b24:	bfbb      	ittet	lt
 8002b26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002b2a:	461f      	movlt	r7, r3
 8002b2c:	2300      	movge	r3, #0
 8002b2e:	232d      	movlt	r3, #45	; 0x2d
 8002b30:	b088      	sub	sp, #32
 8002b32:	4614      	mov	r4, r2
 8002b34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002b36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002b38:	7013      	strb	r3, [r2, #0]
 8002b3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002b40:	f023 0820 	bic.w	r8, r3, #32
 8002b44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b48:	d005      	beq.n	8002b56 <__cvt+0x3a>
 8002b4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b4e:	d100      	bne.n	8002b52 <__cvt+0x36>
 8002b50:	3501      	adds	r5, #1
 8002b52:	2302      	movs	r3, #2
 8002b54:	e000      	b.n	8002b58 <__cvt+0x3c>
 8002b56:	2303      	movs	r3, #3
 8002b58:	aa07      	add	r2, sp, #28
 8002b5a:	9204      	str	r2, [sp, #16]
 8002b5c:	aa06      	add	r2, sp, #24
 8002b5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002b62:	e9cd 3500 	strd	r3, r5, [sp]
 8002b66:	4622      	mov	r2, r4
 8002b68:	463b      	mov	r3, r7
 8002b6a:	f000 fda5 	bl	80036b8 <_dtoa_r>
 8002b6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b72:	4606      	mov	r6, r0
 8002b74:	d102      	bne.n	8002b7c <__cvt+0x60>
 8002b76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b78:	07db      	lsls	r3, r3, #31
 8002b7a:	d522      	bpl.n	8002bc2 <__cvt+0xa6>
 8002b7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b80:	eb06 0905 	add.w	r9, r6, r5
 8002b84:	d110      	bne.n	8002ba8 <__cvt+0x8c>
 8002b86:	7833      	ldrb	r3, [r6, #0]
 8002b88:	2b30      	cmp	r3, #48	; 0x30
 8002b8a:	d10a      	bne.n	8002ba2 <__cvt+0x86>
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2300      	movs	r3, #0
 8002b90:	4620      	mov	r0, r4
 8002b92:	4639      	mov	r1, r7
 8002b94:	f7fd ff7e 	bl	8000a94 <__aeabi_dcmpeq>
 8002b98:	b918      	cbnz	r0, 8002ba2 <__cvt+0x86>
 8002b9a:	f1c5 0501 	rsb	r5, r5, #1
 8002b9e:	f8ca 5000 	str.w	r5, [sl]
 8002ba2:	f8da 3000 	ldr.w	r3, [sl]
 8002ba6:	4499      	add	r9, r3
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2300      	movs	r3, #0
 8002bac:	4620      	mov	r0, r4
 8002bae:	4639      	mov	r1, r7
 8002bb0:	f7fd ff70 	bl	8000a94 <__aeabi_dcmpeq>
 8002bb4:	b108      	cbz	r0, 8002bba <__cvt+0x9e>
 8002bb6:	f8cd 901c 	str.w	r9, [sp, #28]
 8002bba:	2230      	movs	r2, #48	; 0x30
 8002bbc:	9b07      	ldr	r3, [sp, #28]
 8002bbe:	454b      	cmp	r3, r9
 8002bc0:	d307      	bcc.n	8002bd2 <__cvt+0xb6>
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	9b07      	ldr	r3, [sp, #28]
 8002bc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002bc8:	1b9b      	subs	r3, r3, r6
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	b008      	add	sp, #32
 8002bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	9107      	str	r1, [sp, #28]
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e7f0      	b.n	8002bbc <__cvt+0xa0>

08002bda <__exponent>:
 8002bda:	4603      	mov	r3, r0
 8002bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bde:	2900      	cmp	r1, #0
 8002be0:	f803 2b02 	strb.w	r2, [r3], #2
 8002be4:	bfb6      	itet	lt
 8002be6:	222d      	movlt	r2, #45	; 0x2d
 8002be8:	222b      	movge	r2, #43	; 0x2b
 8002bea:	4249      	neglt	r1, r1
 8002bec:	2909      	cmp	r1, #9
 8002bee:	7042      	strb	r2, [r0, #1]
 8002bf0:	dd2b      	ble.n	8002c4a <__exponent+0x70>
 8002bf2:	f10d 0407 	add.w	r4, sp, #7
 8002bf6:	46a4      	mov	ip, r4
 8002bf8:	270a      	movs	r7, #10
 8002bfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8002bfe:	460a      	mov	r2, r1
 8002c00:	46a6      	mov	lr, r4
 8002c02:	fb07 1516 	mls	r5, r7, r6, r1
 8002c06:	2a63      	cmp	r2, #99	; 0x63
 8002c08:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002c0c:	4631      	mov	r1, r6
 8002c0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002c12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002c16:	dcf0      	bgt.n	8002bfa <__exponent+0x20>
 8002c18:	3130      	adds	r1, #48	; 0x30
 8002c1a:	f1ae 0502 	sub.w	r5, lr, #2
 8002c1e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c22:	4629      	mov	r1, r5
 8002c24:	1c44      	adds	r4, r0, #1
 8002c26:	4561      	cmp	r1, ip
 8002c28:	d30a      	bcc.n	8002c40 <__exponent+0x66>
 8002c2a:	f10d 0209 	add.w	r2, sp, #9
 8002c2e:	eba2 020e 	sub.w	r2, r2, lr
 8002c32:	4565      	cmp	r5, ip
 8002c34:	bf88      	it	hi
 8002c36:	2200      	movhi	r2, #0
 8002c38:	4413      	add	r3, r2
 8002c3a:	1a18      	subs	r0, r3, r0
 8002c3c:	b003      	add	sp, #12
 8002c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c44:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002c48:	e7ed      	b.n	8002c26 <__exponent+0x4c>
 8002c4a:	2330      	movs	r3, #48	; 0x30
 8002c4c:	3130      	adds	r1, #48	; 0x30
 8002c4e:	7083      	strb	r3, [r0, #2]
 8002c50:	70c1      	strb	r1, [r0, #3]
 8002c52:	1d03      	adds	r3, r0, #4
 8002c54:	e7f1      	b.n	8002c3a <__exponent+0x60>
	...

08002c58 <_printf_float>:
 8002c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5c:	b091      	sub	sp, #68	; 0x44
 8002c5e:	460c      	mov	r4, r1
 8002c60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002c64:	4616      	mov	r6, r2
 8002c66:	461f      	mov	r7, r3
 8002c68:	4605      	mov	r5, r0
 8002c6a:	f001 fccb 	bl	8004604 <_localeconv_r>
 8002c6e:	6803      	ldr	r3, [r0, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	9309      	str	r3, [sp, #36]	; 0x24
 8002c74:	f7fd fae2 	bl	800023c <strlen>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	930e      	str	r3, [sp, #56]	; 0x38
 8002c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8002c80:	900a      	str	r0, [sp, #40]	; 0x28
 8002c82:	3307      	adds	r3, #7
 8002c84:	f023 0307 	bic.w	r3, r3, #7
 8002c88:	f103 0208 	add.w	r2, r3, #8
 8002c8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002c90:	f8d4 b000 	ldr.w	fp, [r4]
 8002c94:	f8c8 2000 	str.w	r2, [r8]
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002ca0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002ca4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002ca8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002caa:	f04f 32ff 	mov.w	r2, #4294967295
 8002cae:	4640      	mov	r0, r8
 8002cb0:	4b9c      	ldr	r3, [pc, #624]	; (8002f24 <_printf_float+0x2cc>)
 8002cb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cb4:	f7fd ff20 	bl	8000af8 <__aeabi_dcmpun>
 8002cb8:	bb70      	cbnz	r0, 8002d18 <_printf_float+0xc0>
 8002cba:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbe:	4640      	mov	r0, r8
 8002cc0:	4b98      	ldr	r3, [pc, #608]	; (8002f24 <_printf_float+0x2cc>)
 8002cc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cc4:	f7fd fefa 	bl	8000abc <__aeabi_dcmple>
 8002cc8:	bb30      	cbnz	r0, 8002d18 <_printf_float+0xc0>
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2300      	movs	r3, #0
 8002cce:	4640      	mov	r0, r8
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	f7fd fee9 	bl	8000aa8 <__aeabi_dcmplt>
 8002cd6:	b110      	cbz	r0, 8002cde <_printf_float+0x86>
 8002cd8:	232d      	movs	r3, #45	; 0x2d
 8002cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cde:	4b92      	ldr	r3, [pc, #584]	; (8002f28 <_printf_float+0x2d0>)
 8002ce0:	4892      	ldr	r0, [pc, #584]	; (8002f2c <_printf_float+0x2d4>)
 8002ce2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002ce6:	bf94      	ite	ls
 8002ce8:	4698      	movls	r8, r3
 8002cea:	4680      	movhi	r8, r0
 8002cec:	2303      	movs	r3, #3
 8002cee:	f04f 0a00 	mov.w	sl, #0
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	f02b 0304 	bic.w	r3, fp, #4
 8002cf8:	6023      	str	r3, [r4, #0]
 8002cfa:	4633      	mov	r3, r6
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	4628      	mov	r0, r5
 8002d00:	9700      	str	r7, [sp, #0]
 8002d02:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d04:	f000 f9d4 	bl	80030b0 <_printf_common>
 8002d08:	3001      	adds	r0, #1
 8002d0a:	f040 8090 	bne.w	8002e2e <_printf_float+0x1d6>
 8002d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d12:	b011      	add	sp, #68	; 0x44
 8002d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d18:	4642      	mov	r2, r8
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	4651      	mov	r1, sl
 8002d20:	f7fd feea 	bl	8000af8 <__aeabi_dcmpun>
 8002d24:	b148      	cbz	r0, 8002d3a <_printf_float+0xe2>
 8002d26:	f1ba 0f00 	cmp.w	sl, #0
 8002d2a:	bfb8      	it	lt
 8002d2c:	232d      	movlt	r3, #45	; 0x2d
 8002d2e:	4880      	ldr	r0, [pc, #512]	; (8002f30 <_printf_float+0x2d8>)
 8002d30:	bfb8      	it	lt
 8002d32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d36:	4b7f      	ldr	r3, [pc, #508]	; (8002f34 <_printf_float+0x2dc>)
 8002d38:	e7d3      	b.n	8002ce2 <_printf_float+0x8a>
 8002d3a:	6863      	ldr	r3, [r4, #4]
 8002d3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	d142      	bne.n	8002dca <_printf_float+0x172>
 8002d44:	2306      	movs	r3, #6
 8002d46:	6063      	str	r3, [r4, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	9206      	str	r2, [sp, #24]
 8002d4c:	aa0e      	add	r2, sp, #56	; 0x38
 8002d4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002d52:	aa0d      	add	r2, sp, #52	; 0x34
 8002d54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002d58:	9203      	str	r2, [sp, #12]
 8002d5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002d5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d62:	6023      	str	r3, [r4, #0]
 8002d64:	6863      	ldr	r3, [r4, #4]
 8002d66:	4642      	mov	r2, r8
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	4653      	mov	r3, sl
 8002d6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002d70:	f7ff fed4 	bl	8002b1c <__cvt>
 8002d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d76:	4680      	mov	r8, r0
 8002d78:	2947      	cmp	r1, #71	; 0x47
 8002d7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d7c:	d108      	bne.n	8002d90 <_printf_float+0x138>
 8002d7e:	1cc8      	adds	r0, r1, #3
 8002d80:	db02      	blt.n	8002d88 <_printf_float+0x130>
 8002d82:	6863      	ldr	r3, [r4, #4]
 8002d84:	4299      	cmp	r1, r3
 8002d86:	dd40      	ble.n	8002e0a <_printf_float+0x1b2>
 8002d88:	f1a9 0902 	sub.w	r9, r9, #2
 8002d8c:	fa5f f989 	uxtb.w	r9, r9
 8002d90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002d94:	d81f      	bhi.n	8002dd6 <_printf_float+0x17e>
 8002d96:	464a      	mov	r2, r9
 8002d98:	3901      	subs	r1, #1
 8002d9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d9e:	910d      	str	r1, [sp, #52]	; 0x34
 8002da0:	f7ff ff1b 	bl	8002bda <__exponent>
 8002da4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002da6:	4682      	mov	sl, r0
 8002da8:	1813      	adds	r3, r2, r0
 8002daa:	2a01      	cmp	r2, #1
 8002dac:	6123      	str	r3, [r4, #16]
 8002dae:	dc02      	bgt.n	8002db6 <_printf_float+0x15e>
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	07d2      	lsls	r2, r2, #31
 8002db4:	d501      	bpl.n	8002dba <_printf_float+0x162>
 8002db6:	3301      	adds	r3, #1
 8002db8:	6123      	str	r3, [r4, #16]
 8002dba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d09b      	beq.n	8002cfa <_printf_float+0xa2>
 8002dc2:	232d      	movs	r3, #45	; 0x2d
 8002dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dc8:	e797      	b.n	8002cfa <_printf_float+0xa2>
 8002dca:	2947      	cmp	r1, #71	; 0x47
 8002dcc:	d1bc      	bne.n	8002d48 <_printf_float+0xf0>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ba      	bne.n	8002d48 <_printf_float+0xf0>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e7b7      	b.n	8002d46 <_printf_float+0xee>
 8002dd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002dda:	d118      	bne.n	8002e0e <_printf_float+0x1b6>
 8002ddc:	2900      	cmp	r1, #0
 8002dde:	6863      	ldr	r3, [r4, #4]
 8002de0:	dd0b      	ble.n	8002dfa <_printf_float+0x1a2>
 8002de2:	6121      	str	r1, [r4, #16]
 8002de4:	b913      	cbnz	r3, 8002dec <_printf_float+0x194>
 8002de6:	6822      	ldr	r2, [r4, #0]
 8002de8:	07d0      	lsls	r0, r2, #31
 8002dea:	d502      	bpl.n	8002df2 <_printf_float+0x19a>
 8002dec:	3301      	adds	r3, #1
 8002dee:	440b      	add	r3, r1
 8002df0:	6123      	str	r3, [r4, #16]
 8002df2:	f04f 0a00 	mov.w	sl, #0
 8002df6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002df8:	e7df      	b.n	8002dba <_printf_float+0x162>
 8002dfa:	b913      	cbnz	r3, 8002e02 <_printf_float+0x1aa>
 8002dfc:	6822      	ldr	r2, [r4, #0]
 8002dfe:	07d2      	lsls	r2, r2, #31
 8002e00:	d501      	bpl.n	8002e06 <_printf_float+0x1ae>
 8002e02:	3302      	adds	r3, #2
 8002e04:	e7f4      	b.n	8002df0 <_printf_float+0x198>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e7f2      	b.n	8002df0 <_printf_float+0x198>
 8002e0a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e10:	4299      	cmp	r1, r3
 8002e12:	db05      	blt.n	8002e20 <_printf_float+0x1c8>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	6121      	str	r1, [r4, #16]
 8002e18:	07d8      	lsls	r0, r3, #31
 8002e1a:	d5ea      	bpl.n	8002df2 <_printf_float+0x19a>
 8002e1c:	1c4b      	adds	r3, r1, #1
 8002e1e:	e7e7      	b.n	8002df0 <_printf_float+0x198>
 8002e20:	2900      	cmp	r1, #0
 8002e22:	bfcc      	ite	gt
 8002e24:	2201      	movgt	r2, #1
 8002e26:	f1c1 0202 	rsble	r2, r1, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	e7e0      	b.n	8002df0 <_printf_float+0x198>
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	055a      	lsls	r2, r3, #21
 8002e32:	d407      	bmi.n	8002e44 <_printf_float+0x1ec>
 8002e34:	6923      	ldr	r3, [r4, #16]
 8002e36:	4642      	mov	r2, r8
 8002e38:	4631      	mov	r1, r6
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	47b8      	blx	r7
 8002e3e:	3001      	adds	r0, #1
 8002e40:	d12b      	bne.n	8002e9a <_printf_float+0x242>
 8002e42:	e764      	b.n	8002d0e <_printf_float+0xb6>
 8002e44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002e48:	f240 80dd 	bls.w	8003006 <_printf_float+0x3ae>
 8002e4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e50:	2200      	movs	r2, #0
 8002e52:	2300      	movs	r3, #0
 8002e54:	f7fd fe1e 	bl	8000a94 <__aeabi_dcmpeq>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d033      	beq.n	8002ec4 <_printf_float+0x26c>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	4631      	mov	r1, r6
 8002e60:	4628      	mov	r0, r5
 8002e62:	4a35      	ldr	r2, [pc, #212]	; (8002f38 <_printf_float+0x2e0>)
 8002e64:	47b8      	blx	r7
 8002e66:	3001      	adds	r0, #1
 8002e68:	f43f af51 	beq.w	8002d0e <_printf_float+0xb6>
 8002e6c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e70:	429a      	cmp	r2, r3
 8002e72:	db02      	blt.n	8002e7a <_printf_float+0x222>
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	07d8      	lsls	r0, r3, #31
 8002e78:	d50f      	bpl.n	8002e9a <_printf_float+0x242>
 8002e7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e7e:	4631      	mov	r1, r6
 8002e80:	4628      	mov	r0, r5
 8002e82:	47b8      	blx	r7
 8002e84:	3001      	adds	r0, #1
 8002e86:	f43f af42 	beq.w	8002d0e <_printf_float+0xb6>
 8002e8a:	f04f 0800 	mov.w	r8, #0
 8002e8e:	f104 091a 	add.w	r9, r4, #26
 8002e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e94:	3b01      	subs	r3, #1
 8002e96:	4543      	cmp	r3, r8
 8002e98:	dc09      	bgt.n	8002eae <_printf_float+0x256>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	079b      	lsls	r3, r3, #30
 8002e9e:	f100 8102 	bmi.w	80030a6 <_printf_float+0x44e>
 8002ea2:	68e0      	ldr	r0, [r4, #12]
 8002ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ea6:	4298      	cmp	r0, r3
 8002ea8:	bfb8      	it	lt
 8002eaa:	4618      	movlt	r0, r3
 8002eac:	e731      	b.n	8002d12 <_printf_float+0xba>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	464a      	mov	r2, r9
 8002eb2:	4631      	mov	r1, r6
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	47b8      	blx	r7
 8002eb8:	3001      	adds	r0, #1
 8002eba:	f43f af28 	beq.w	8002d0e <_printf_float+0xb6>
 8002ebe:	f108 0801 	add.w	r8, r8, #1
 8002ec2:	e7e6      	b.n	8002e92 <_printf_float+0x23a>
 8002ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	dc38      	bgt.n	8002f3c <_printf_float+0x2e4>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	4631      	mov	r1, r6
 8002ece:	4628      	mov	r0, r5
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <_printf_float+0x2e0>)
 8002ed2:	47b8      	blx	r7
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	f43f af1a 	beq.w	8002d0e <_printf_float+0xb6>
 8002eda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	d102      	bne.n	8002ee8 <_printf_float+0x290>
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	07d9      	lsls	r1, r3, #31
 8002ee6:	d5d8      	bpl.n	8002e9a <_printf_float+0x242>
 8002ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002eec:	4631      	mov	r1, r6
 8002eee:	4628      	mov	r0, r5
 8002ef0:	47b8      	blx	r7
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	f43f af0b 	beq.w	8002d0e <_printf_float+0xb6>
 8002ef8:	f04f 0900 	mov.w	r9, #0
 8002efc:	f104 0a1a 	add.w	sl, r4, #26
 8002f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f02:	425b      	negs	r3, r3
 8002f04:	454b      	cmp	r3, r9
 8002f06:	dc01      	bgt.n	8002f0c <_printf_float+0x2b4>
 8002f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f0a:	e794      	b.n	8002e36 <_printf_float+0x1de>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4652      	mov	r2, sl
 8002f10:	4631      	mov	r1, r6
 8002f12:	4628      	mov	r0, r5
 8002f14:	47b8      	blx	r7
 8002f16:	3001      	adds	r0, #1
 8002f18:	f43f aef9 	beq.w	8002d0e <_printf_float+0xb6>
 8002f1c:	f109 0901 	add.w	r9, r9, #1
 8002f20:	e7ee      	b.n	8002f00 <_printf_float+0x2a8>
 8002f22:	bf00      	nop
 8002f24:	7fefffff 	.word	0x7fefffff
 8002f28:	080056fc 	.word	0x080056fc
 8002f2c:	08005700 	.word	0x08005700
 8002f30:	08005708 	.word	0x08005708
 8002f34:	08005704 	.word	0x08005704
 8002f38:	0800570c 	.word	0x0800570c
 8002f3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f40:	429a      	cmp	r2, r3
 8002f42:	bfa8      	it	ge
 8002f44:	461a      	movge	r2, r3
 8002f46:	2a00      	cmp	r2, #0
 8002f48:	4691      	mov	r9, r2
 8002f4a:	dc37      	bgt.n	8002fbc <_printf_float+0x364>
 8002f4c:	f04f 0b00 	mov.w	fp, #0
 8002f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f54:	f104 021a 	add.w	r2, r4, #26
 8002f58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002f5c:	ebaa 0309 	sub.w	r3, sl, r9
 8002f60:	455b      	cmp	r3, fp
 8002f62:	dc33      	bgt.n	8002fcc <_printf_float+0x374>
 8002f64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	db3b      	blt.n	8002fe4 <_printf_float+0x38c>
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	07da      	lsls	r2, r3, #31
 8002f70:	d438      	bmi.n	8002fe4 <_printf_float+0x38c>
 8002f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f76:	eba2 030a 	sub.w	r3, r2, sl
 8002f7a:	eba2 0901 	sub.w	r9, r2, r1
 8002f7e:	4599      	cmp	r9, r3
 8002f80:	bfa8      	it	ge
 8002f82:	4699      	movge	r9, r3
 8002f84:	f1b9 0f00 	cmp.w	r9, #0
 8002f88:	dc34      	bgt.n	8002ff4 <_printf_float+0x39c>
 8002f8a:	f04f 0800 	mov.w	r8, #0
 8002f8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f92:	f104 0a1a 	add.w	sl, r4, #26
 8002f96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	eba3 0309 	sub.w	r3, r3, r9
 8002fa0:	4543      	cmp	r3, r8
 8002fa2:	f77f af7a 	ble.w	8002e9a <_printf_float+0x242>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	4652      	mov	r2, sl
 8002faa:	4631      	mov	r1, r6
 8002fac:	4628      	mov	r0, r5
 8002fae:	47b8      	blx	r7
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	f43f aeac 	beq.w	8002d0e <_printf_float+0xb6>
 8002fb6:	f108 0801 	add.w	r8, r8, #1
 8002fba:	e7ec      	b.n	8002f96 <_printf_float+0x33e>
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4642      	mov	r2, r8
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	47b8      	blx	r7
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	d1c0      	bne.n	8002f4c <_printf_float+0x2f4>
 8002fca:	e6a0      	b.n	8002d0e <_printf_float+0xb6>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4631      	mov	r1, r6
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8002fd4:	47b8      	blx	r7
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	f43f ae99 	beq.w	8002d0e <_printf_float+0xb6>
 8002fdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002fde:	f10b 0b01 	add.w	fp, fp, #1
 8002fe2:	e7b9      	b.n	8002f58 <_printf_float+0x300>
 8002fe4:	4631      	mov	r1, r6
 8002fe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fea:	4628      	mov	r0, r5
 8002fec:	47b8      	blx	r7
 8002fee:	3001      	adds	r0, #1
 8002ff0:	d1bf      	bne.n	8002f72 <_printf_float+0x31a>
 8002ff2:	e68c      	b.n	8002d0e <_printf_float+0xb6>
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	4631      	mov	r1, r6
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	eb08 020a 	add.w	r2, r8, sl
 8002ffe:	47b8      	blx	r7
 8003000:	3001      	adds	r0, #1
 8003002:	d1c2      	bne.n	8002f8a <_printf_float+0x332>
 8003004:	e683      	b.n	8002d0e <_printf_float+0xb6>
 8003006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003008:	2a01      	cmp	r2, #1
 800300a:	dc01      	bgt.n	8003010 <_printf_float+0x3b8>
 800300c:	07db      	lsls	r3, r3, #31
 800300e:	d537      	bpl.n	8003080 <_printf_float+0x428>
 8003010:	2301      	movs	r3, #1
 8003012:	4642      	mov	r2, r8
 8003014:	4631      	mov	r1, r6
 8003016:	4628      	mov	r0, r5
 8003018:	47b8      	blx	r7
 800301a:	3001      	adds	r0, #1
 800301c:	f43f ae77 	beq.w	8002d0e <_printf_float+0xb6>
 8003020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003024:	4631      	mov	r1, r6
 8003026:	4628      	mov	r0, r5
 8003028:	47b8      	blx	r7
 800302a:	3001      	adds	r0, #1
 800302c:	f43f ae6f 	beq.w	8002d0e <_printf_float+0xb6>
 8003030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003034:	2200      	movs	r2, #0
 8003036:	2300      	movs	r3, #0
 8003038:	f7fd fd2c 	bl	8000a94 <__aeabi_dcmpeq>
 800303c:	b9d8      	cbnz	r0, 8003076 <_printf_float+0x41e>
 800303e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003040:	f108 0201 	add.w	r2, r8, #1
 8003044:	3b01      	subs	r3, #1
 8003046:	4631      	mov	r1, r6
 8003048:	4628      	mov	r0, r5
 800304a:	47b8      	blx	r7
 800304c:	3001      	adds	r0, #1
 800304e:	d10e      	bne.n	800306e <_printf_float+0x416>
 8003050:	e65d      	b.n	8002d0e <_printf_float+0xb6>
 8003052:	2301      	movs	r3, #1
 8003054:	464a      	mov	r2, r9
 8003056:	4631      	mov	r1, r6
 8003058:	4628      	mov	r0, r5
 800305a:	47b8      	blx	r7
 800305c:	3001      	adds	r0, #1
 800305e:	f43f ae56 	beq.w	8002d0e <_printf_float+0xb6>
 8003062:	f108 0801 	add.w	r8, r8, #1
 8003066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003068:	3b01      	subs	r3, #1
 800306a:	4543      	cmp	r3, r8
 800306c:	dcf1      	bgt.n	8003052 <_printf_float+0x3fa>
 800306e:	4653      	mov	r3, sl
 8003070:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003074:	e6e0      	b.n	8002e38 <_printf_float+0x1e0>
 8003076:	f04f 0800 	mov.w	r8, #0
 800307a:	f104 091a 	add.w	r9, r4, #26
 800307e:	e7f2      	b.n	8003066 <_printf_float+0x40e>
 8003080:	2301      	movs	r3, #1
 8003082:	4642      	mov	r2, r8
 8003084:	e7df      	b.n	8003046 <_printf_float+0x3ee>
 8003086:	2301      	movs	r3, #1
 8003088:	464a      	mov	r2, r9
 800308a:	4631      	mov	r1, r6
 800308c:	4628      	mov	r0, r5
 800308e:	47b8      	blx	r7
 8003090:	3001      	adds	r0, #1
 8003092:	f43f ae3c 	beq.w	8002d0e <_printf_float+0xb6>
 8003096:	f108 0801 	add.w	r8, r8, #1
 800309a:	68e3      	ldr	r3, [r4, #12]
 800309c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800309e:	1a5b      	subs	r3, r3, r1
 80030a0:	4543      	cmp	r3, r8
 80030a2:	dcf0      	bgt.n	8003086 <_printf_float+0x42e>
 80030a4:	e6fd      	b.n	8002ea2 <_printf_float+0x24a>
 80030a6:	f04f 0800 	mov.w	r8, #0
 80030aa:	f104 0919 	add.w	r9, r4, #25
 80030ae:	e7f4      	b.n	800309a <_printf_float+0x442>

080030b0 <_printf_common>:
 80030b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b4:	4616      	mov	r6, r2
 80030b6:	4699      	mov	r9, r3
 80030b8:	688a      	ldr	r2, [r1, #8]
 80030ba:	690b      	ldr	r3, [r1, #16]
 80030bc:	4607      	mov	r7, r0
 80030be:	4293      	cmp	r3, r2
 80030c0:	bfb8      	it	lt
 80030c2:	4613      	movlt	r3, r2
 80030c4:	6033      	str	r3, [r6, #0]
 80030c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030ca:	460c      	mov	r4, r1
 80030cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030d0:	b10a      	cbz	r2, 80030d6 <_printf_common+0x26>
 80030d2:	3301      	adds	r3, #1
 80030d4:	6033      	str	r3, [r6, #0]
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	0699      	lsls	r1, r3, #26
 80030da:	bf42      	ittt	mi
 80030dc:	6833      	ldrmi	r3, [r6, #0]
 80030de:	3302      	addmi	r3, #2
 80030e0:	6033      	strmi	r3, [r6, #0]
 80030e2:	6825      	ldr	r5, [r4, #0]
 80030e4:	f015 0506 	ands.w	r5, r5, #6
 80030e8:	d106      	bne.n	80030f8 <_printf_common+0x48>
 80030ea:	f104 0a19 	add.w	sl, r4, #25
 80030ee:	68e3      	ldr	r3, [r4, #12]
 80030f0:	6832      	ldr	r2, [r6, #0]
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	42ab      	cmp	r3, r5
 80030f6:	dc28      	bgt.n	800314a <_printf_common+0x9a>
 80030f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030fc:	1e13      	subs	r3, r2, #0
 80030fe:	6822      	ldr	r2, [r4, #0]
 8003100:	bf18      	it	ne
 8003102:	2301      	movne	r3, #1
 8003104:	0692      	lsls	r2, r2, #26
 8003106:	d42d      	bmi.n	8003164 <_printf_common+0xb4>
 8003108:	4649      	mov	r1, r9
 800310a:	4638      	mov	r0, r7
 800310c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003110:	47c0      	blx	r8
 8003112:	3001      	adds	r0, #1
 8003114:	d020      	beq.n	8003158 <_printf_common+0xa8>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	68e5      	ldr	r5, [r4, #12]
 800311a:	f003 0306 	and.w	r3, r3, #6
 800311e:	2b04      	cmp	r3, #4
 8003120:	bf18      	it	ne
 8003122:	2500      	movne	r5, #0
 8003124:	6832      	ldr	r2, [r6, #0]
 8003126:	f04f 0600 	mov.w	r6, #0
 800312a:	68a3      	ldr	r3, [r4, #8]
 800312c:	bf08      	it	eq
 800312e:	1aad      	subeq	r5, r5, r2
 8003130:	6922      	ldr	r2, [r4, #16]
 8003132:	bf08      	it	eq
 8003134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003138:	4293      	cmp	r3, r2
 800313a:	bfc4      	itt	gt
 800313c:	1a9b      	subgt	r3, r3, r2
 800313e:	18ed      	addgt	r5, r5, r3
 8003140:	341a      	adds	r4, #26
 8003142:	42b5      	cmp	r5, r6
 8003144:	d11a      	bne.n	800317c <_printf_common+0xcc>
 8003146:	2000      	movs	r0, #0
 8003148:	e008      	b.n	800315c <_printf_common+0xac>
 800314a:	2301      	movs	r3, #1
 800314c:	4652      	mov	r2, sl
 800314e:	4649      	mov	r1, r9
 8003150:	4638      	mov	r0, r7
 8003152:	47c0      	blx	r8
 8003154:	3001      	adds	r0, #1
 8003156:	d103      	bne.n	8003160 <_printf_common+0xb0>
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003160:	3501      	adds	r5, #1
 8003162:	e7c4      	b.n	80030ee <_printf_common+0x3e>
 8003164:	2030      	movs	r0, #48	; 0x30
 8003166:	18e1      	adds	r1, r4, r3
 8003168:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003172:	4422      	add	r2, r4
 8003174:	3302      	adds	r3, #2
 8003176:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800317a:	e7c5      	b.n	8003108 <_printf_common+0x58>
 800317c:	2301      	movs	r3, #1
 800317e:	4622      	mov	r2, r4
 8003180:	4649      	mov	r1, r9
 8003182:	4638      	mov	r0, r7
 8003184:	47c0      	blx	r8
 8003186:	3001      	adds	r0, #1
 8003188:	d0e6      	beq.n	8003158 <_printf_common+0xa8>
 800318a:	3601      	adds	r6, #1
 800318c:	e7d9      	b.n	8003142 <_printf_common+0x92>
	...

08003190 <_printf_i>:
 8003190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003194:	460c      	mov	r4, r1
 8003196:	7e27      	ldrb	r7, [r4, #24]
 8003198:	4691      	mov	r9, r2
 800319a:	2f78      	cmp	r7, #120	; 0x78
 800319c:	4680      	mov	r8, r0
 800319e:	469a      	mov	sl, r3
 80031a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031a6:	d807      	bhi.n	80031b8 <_printf_i+0x28>
 80031a8:	2f62      	cmp	r7, #98	; 0x62
 80031aa:	d80a      	bhi.n	80031c2 <_printf_i+0x32>
 80031ac:	2f00      	cmp	r7, #0
 80031ae:	f000 80d9 	beq.w	8003364 <_printf_i+0x1d4>
 80031b2:	2f58      	cmp	r7, #88	; 0x58
 80031b4:	f000 80a4 	beq.w	8003300 <_printf_i+0x170>
 80031b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031c0:	e03a      	b.n	8003238 <_printf_i+0xa8>
 80031c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031c6:	2b15      	cmp	r3, #21
 80031c8:	d8f6      	bhi.n	80031b8 <_printf_i+0x28>
 80031ca:	a001      	add	r0, pc, #4	; (adr r0, 80031d0 <_printf_i+0x40>)
 80031cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80031d0:	08003229 	.word	0x08003229
 80031d4:	0800323d 	.word	0x0800323d
 80031d8:	080031b9 	.word	0x080031b9
 80031dc:	080031b9 	.word	0x080031b9
 80031e0:	080031b9 	.word	0x080031b9
 80031e4:	080031b9 	.word	0x080031b9
 80031e8:	0800323d 	.word	0x0800323d
 80031ec:	080031b9 	.word	0x080031b9
 80031f0:	080031b9 	.word	0x080031b9
 80031f4:	080031b9 	.word	0x080031b9
 80031f8:	080031b9 	.word	0x080031b9
 80031fc:	0800334b 	.word	0x0800334b
 8003200:	0800326d 	.word	0x0800326d
 8003204:	0800332d 	.word	0x0800332d
 8003208:	080031b9 	.word	0x080031b9
 800320c:	080031b9 	.word	0x080031b9
 8003210:	0800336d 	.word	0x0800336d
 8003214:	080031b9 	.word	0x080031b9
 8003218:	0800326d 	.word	0x0800326d
 800321c:	080031b9 	.word	0x080031b9
 8003220:	080031b9 	.word	0x080031b9
 8003224:	08003335 	.word	0x08003335
 8003228:	680b      	ldr	r3, [r1, #0]
 800322a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	600a      	str	r2, [r1, #0]
 8003234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003238:	2301      	movs	r3, #1
 800323a:	e0a4      	b.n	8003386 <_printf_i+0x1f6>
 800323c:	6825      	ldr	r5, [r4, #0]
 800323e:	6808      	ldr	r0, [r1, #0]
 8003240:	062e      	lsls	r6, r5, #24
 8003242:	f100 0304 	add.w	r3, r0, #4
 8003246:	d50a      	bpl.n	800325e <_printf_i+0xce>
 8003248:	6805      	ldr	r5, [r0, #0]
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	2d00      	cmp	r5, #0
 800324e:	da03      	bge.n	8003258 <_printf_i+0xc8>
 8003250:	232d      	movs	r3, #45	; 0x2d
 8003252:	426d      	negs	r5, r5
 8003254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003258:	230a      	movs	r3, #10
 800325a:	485e      	ldr	r0, [pc, #376]	; (80033d4 <_printf_i+0x244>)
 800325c:	e019      	b.n	8003292 <_printf_i+0x102>
 800325e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003262:	6805      	ldr	r5, [r0, #0]
 8003264:	600b      	str	r3, [r1, #0]
 8003266:	bf18      	it	ne
 8003268:	b22d      	sxthne	r5, r5
 800326a:	e7ef      	b.n	800324c <_printf_i+0xbc>
 800326c:	680b      	ldr	r3, [r1, #0]
 800326e:	6825      	ldr	r5, [r4, #0]
 8003270:	1d18      	adds	r0, r3, #4
 8003272:	6008      	str	r0, [r1, #0]
 8003274:	0628      	lsls	r0, r5, #24
 8003276:	d501      	bpl.n	800327c <_printf_i+0xec>
 8003278:	681d      	ldr	r5, [r3, #0]
 800327a:	e002      	b.n	8003282 <_printf_i+0xf2>
 800327c:	0669      	lsls	r1, r5, #25
 800327e:	d5fb      	bpl.n	8003278 <_printf_i+0xe8>
 8003280:	881d      	ldrh	r5, [r3, #0]
 8003282:	2f6f      	cmp	r7, #111	; 0x6f
 8003284:	bf0c      	ite	eq
 8003286:	2308      	moveq	r3, #8
 8003288:	230a      	movne	r3, #10
 800328a:	4852      	ldr	r0, [pc, #328]	; (80033d4 <_printf_i+0x244>)
 800328c:	2100      	movs	r1, #0
 800328e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003292:	6866      	ldr	r6, [r4, #4]
 8003294:	2e00      	cmp	r6, #0
 8003296:	bfa8      	it	ge
 8003298:	6821      	ldrge	r1, [r4, #0]
 800329a:	60a6      	str	r6, [r4, #8]
 800329c:	bfa4      	itt	ge
 800329e:	f021 0104 	bicge.w	r1, r1, #4
 80032a2:	6021      	strge	r1, [r4, #0]
 80032a4:	b90d      	cbnz	r5, 80032aa <_printf_i+0x11a>
 80032a6:	2e00      	cmp	r6, #0
 80032a8:	d04d      	beq.n	8003346 <_printf_i+0x1b6>
 80032aa:	4616      	mov	r6, r2
 80032ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80032b0:	fb03 5711 	mls	r7, r3, r1, r5
 80032b4:	5dc7      	ldrb	r7, [r0, r7]
 80032b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032ba:	462f      	mov	r7, r5
 80032bc:	42bb      	cmp	r3, r7
 80032be:	460d      	mov	r5, r1
 80032c0:	d9f4      	bls.n	80032ac <_printf_i+0x11c>
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d10b      	bne.n	80032de <_printf_i+0x14e>
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	07df      	lsls	r7, r3, #31
 80032ca:	d508      	bpl.n	80032de <_printf_i+0x14e>
 80032cc:	6923      	ldr	r3, [r4, #16]
 80032ce:	6861      	ldr	r1, [r4, #4]
 80032d0:	4299      	cmp	r1, r3
 80032d2:	bfde      	ittt	le
 80032d4:	2330      	movle	r3, #48	; 0x30
 80032d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032de:	1b92      	subs	r2, r2, r6
 80032e0:	6122      	str	r2, [r4, #16]
 80032e2:	464b      	mov	r3, r9
 80032e4:	4621      	mov	r1, r4
 80032e6:	4640      	mov	r0, r8
 80032e8:	f8cd a000 	str.w	sl, [sp]
 80032ec:	aa03      	add	r2, sp, #12
 80032ee:	f7ff fedf 	bl	80030b0 <_printf_common>
 80032f2:	3001      	adds	r0, #1
 80032f4:	d14c      	bne.n	8003390 <_printf_i+0x200>
 80032f6:	f04f 30ff 	mov.w	r0, #4294967295
 80032fa:	b004      	add	sp, #16
 80032fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003300:	4834      	ldr	r0, [pc, #208]	; (80033d4 <_printf_i+0x244>)
 8003302:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003306:	680e      	ldr	r6, [r1, #0]
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	f856 5b04 	ldr.w	r5, [r6], #4
 800330e:	061f      	lsls	r7, r3, #24
 8003310:	600e      	str	r6, [r1, #0]
 8003312:	d514      	bpl.n	800333e <_printf_i+0x1ae>
 8003314:	07d9      	lsls	r1, r3, #31
 8003316:	bf44      	itt	mi
 8003318:	f043 0320 	orrmi.w	r3, r3, #32
 800331c:	6023      	strmi	r3, [r4, #0]
 800331e:	b91d      	cbnz	r5, 8003328 <_printf_i+0x198>
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	f023 0320 	bic.w	r3, r3, #32
 8003326:	6023      	str	r3, [r4, #0]
 8003328:	2310      	movs	r3, #16
 800332a:	e7af      	b.n	800328c <_printf_i+0xfc>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	f043 0320 	orr.w	r3, r3, #32
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	2378      	movs	r3, #120	; 0x78
 8003336:	4828      	ldr	r0, [pc, #160]	; (80033d8 <_printf_i+0x248>)
 8003338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800333c:	e7e3      	b.n	8003306 <_printf_i+0x176>
 800333e:	065e      	lsls	r6, r3, #25
 8003340:	bf48      	it	mi
 8003342:	b2ad      	uxthmi	r5, r5
 8003344:	e7e6      	b.n	8003314 <_printf_i+0x184>
 8003346:	4616      	mov	r6, r2
 8003348:	e7bb      	b.n	80032c2 <_printf_i+0x132>
 800334a:	680b      	ldr	r3, [r1, #0]
 800334c:	6826      	ldr	r6, [r4, #0]
 800334e:	1d1d      	adds	r5, r3, #4
 8003350:	6960      	ldr	r0, [r4, #20]
 8003352:	600d      	str	r5, [r1, #0]
 8003354:	0635      	lsls	r5, r6, #24
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	d501      	bpl.n	800335e <_printf_i+0x1ce>
 800335a:	6018      	str	r0, [r3, #0]
 800335c:	e002      	b.n	8003364 <_printf_i+0x1d4>
 800335e:	0671      	lsls	r1, r6, #25
 8003360:	d5fb      	bpl.n	800335a <_printf_i+0x1ca>
 8003362:	8018      	strh	r0, [r3, #0]
 8003364:	2300      	movs	r3, #0
 8003366:	4616      	mov	r6, r2
 8003368:	6123      	str	r3, [r4, #16]
 800336a:	e7ba      	b.n	80032e2 <_printf_i+0x152>
 800336c:	680b      	ldr	r3, [r1, #0]
 800336e:	1d1a      	adds	r2, r3, #4
 8003370:	600a      	str	r2, [r1, #0]
 8003372:	681e      	ldr	r6, [r3, #0]
 8003374:	2100      	movs	r1, #0
 8003376:	4630      	mov	r0, r6
 8003378:	6862      	ldr	r2, [r4, #4]
 800337a:	f001 f9b7 	bl	80046ec <memchr>
 800337e:	b108      	cbz	r0, 8003384 <_printf_i+0x1f4>
 8003380:	1b80      	subs	r0, r0, r6
 8003382:	6060      	str	r0, [r4, #4]
 8003384:	6863      	ldr	r3, [r4, #4]
 8003386:	6123      	str	r3, [r4, #16]
 8003388:	2300      	movs	r3, #0
 800338a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800338e:	e7a8      	b.n	80032e2 <_printf_i+0x152>
 8003390:	4632      	mov	r2, r6
 8003392:	4649      	mov	r1, r9
 8003394:	4640      	mov	r0, r8
 8003396:	6923      	ldr	r3, [r4, #16]
 8003398:	47d0      	blx	sl
 800339a:	3001      	adds	r0, #1
 800339c:	d0ab      	beq.n	80032f6 <_printf_i+0x166>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	079b      	lsls	r3, r3, #30
 80033a2:	d413      	bmi.n	80033cc <_printf_i+0x23c>
 80033a4:	68e0      	ldr	r0, [r4, #12]
 80033a6:	9b03      	ldr	r3, [sp, #12]
 80033a8:	4298      	cmp	r0, r3
 80033aa:	bfb8      	it	lt
 80033ac:	4618      	movlt	r0, r3
 80033ae:	e7a4      	b.n	80032fa <_printf_i+0x16a>
 80033b0:	2301      	movs	r3, #1
 80033b2:	4632      	mov	r2, r6
 80033b4:	4649      	mov	r1, r9
 80033b6:	4640      	mov	r0, r8
 80033b8:	47d0      	blx	sl
 80033ba:	3001      	adds	r0, #1
 80033bc:	d09b      	beq.n	80032f6 <_printf_i+0x166>
 80033be:	3501      	adds	r5, #1
 80033c0:	68e3      	ldr	r3, [r4, #12]
 80033c2:	9903      	ldr	r1, [sp, #12]
 80033c4:	1a5b      	subs	r3, r3, r1
 80033c6:	42ab      	cmp	r3, r5
 80033c8:	dcf2      	bgt.n	80033b0 <_printf_i+0x220>
 80033ca:	e7eb      	b.n	80033a4 <_printf_i+0x214>
 80033cc:	2500      	movs	r5, #0
 80033ce:	f104 0619 	add.w	r6, r4, #25
 80033d2:	e7f5      	b.n	80033c0 <_printf_i+0x230>
 80033d4:	0800570e 	.word	0x0800570e
 80033d8:	0800571f 	.word	0x0800571f

080033dc <iprintf>:
 80033dc:	b40f      	push	{r0, r1, r2, r3}
 80033de:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <iprintf+0x2c>)
 80033e0:	b513      	push	{r0, r1, r4, lr}
 80033e2:	681c      	ldr	r4, [r3, #0]
 80033e4:	b124      	cbz	r4, 80033f0 <iprintf+0x14>
 80033e6:	69a3      	ldr	r3, [r4, #24]
 80033e8:	b913      	cbnz	r3, 80033f0 <iprintf+0x14>
 80033ea:	4620      	mov	r0, r4
 80033ec:	f001 f86c 	bl	80044c8 <__sinit>
 80033f0:	ab05      	add	r3, sp, #20
 80033f2:	4620      	mov	r0, r4
 80033f4:	9a04      	ldr	r2, [sp, #16]
 80033f6:	68a1      	ldr	r1, [r4, #8]
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	f001 fdf1 	bl	8004fe0 <_vfiprintf_r>
 80033fe:	b002      	add	sp, #8
 8003400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003404:	b004      	add	sp, #16
 8003406:	4770      	bx	lr
 8003408:	2000000c 	.word	0x2000000c

0800340c <setvbuf>:
 800340c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003410:	461d      	mov	r5, r3
 8003412:	4b5d      	ldr	r3, [pc, #372]	; (8003588 <setvbuf+0x17c>)
 8003414:	4604      	mov	r4, r0
 8003416:	681f      	ldr	r7, [r3, #0]
 8003418:	460e      	mov	r6, r1
 800341a:	4690      	mov	r8, r2
 800341c:	b127      	cbz	r7, 8003428 <setvbuf+0x1c>
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	b913      	cbnz	r3, 8003428 <setvbuf+0x1c>
 8003422:	4638      	mov	r0, r7
 8003424:	f001 f850 	bl	80044c8 <__sinit>
 8003428:	4b58      	ldr	r3, [pc, #352]	; (800358c <setvbuf+0x180>)
 800342a:	429c      	cmp	r4, r3
 800342c:	d167      	bne.n	80034fe <setvbuf+0xf2>
 800342e:	687c      	ldr	r4, [r7, #4]
 8003430:	f1b8 0f02 	cmp.w	r8, #2
 8003434:	d006      	beq.n	8003444 <setvbuf+0x38>
 8003436:	f1b8 0f01 	cmp.w	r8, #1
 800343a:	f200 809f 	bhi.w	800357c <setvbuf+0x170>
 800343e:	2d00      	cmp	r5, #0
 8003440:	f2c0 809c 	blt.w	800357c <setvbuf+0x170>
 8003444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003446:	07db      	lsls	r3, r3, #31
 8003448:	d405      	bmi.n	8003456 <setvbuf+0x4a>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	0598      	lsls	r0, r3, #22
 800344e:	d402      	bmi.n	8003456 <setvbuf+0x4a>
 8003450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003452:	f001 f8dc 	bl	800460e <__retarget_lock_acquire_recursive>
 8003456:	4621      	mov	r1, r4
 8003458:	4638      	mov	r0, r7
 800345a:	f000 ffa1 	bl	80043a0 <_fflush_r>
 800345e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003460:	b141      	cbz	r1, 8003474 <setvbuf+0x68>
 8003462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003466:	4299      	cmp	r1, r3
 8003468:	d002      	beq.n	8003470 <setvbuf+0x64>
 800346a:	4638      	mov	r0, r7
 800346c:	f001 fcea 	bl	8004e44 <_free_r>
 8003470:	2300      	movs	r3, #0
 8003472:	6363      	str	r3, [r4, #52]	; 0x34
 8003474:	2300      	movs	r3, #0
 8003476:	61a3      	str	r3, [r4, #24]
 8003478:	6063      	str	r3, [r4, #4]
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	0619      	lsls	r1, r3, #24
 800347e:	d503      	bpl.n	8003488 <setvbuf+0x7c>
 8003480:	4638      	mov	r0, r7
 8003482:	6921      	ldr	r1, [r4, #16]
 8003484:	f001 fcde 	bl	8004e44 <_free_r>
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	f1b8 0f02 	cmp.w	r8, #2
 800348e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	81a3      	strh	r3, [r4, #12]
 8003498:	d06c      	beq.n	8003574 <setvbuf+0x168>
 800349a:	ab01      	add	r3, sp, #4
 800349c:	466a      	mov	r2, sp
 800349e:	4621      	mov	r1, r4
 80034a0:	4638      	mov	r0, r7
 80034a2:	f001 f8b6 	bl	8004612 <__swhatbuf_r>
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	4318      	orrs	r0, r3
 80034aa:	81a0      	strh	r0, [r4, #12]
 80034ac:	2d00      	cmp	r5, #0
 80034ae:	d130      	bne.n	8003512 <setvbuf+0x106>
 80034b0:	9d00      	ldr	r5, [sp, #0]
 80034b2:	4628      	mov	r0, r5
 80034b4:	f001 f912 	bl	80046dc <malloc>
 80034b8:	4606      	mov	r6, r0
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d155      	bne.n	800356a <setvbuf+0x15e>
 80034be:	f8dd 9000 	ldr.w	r9, [sp]
 80034c2:	45a9      	cmp	r9, r5
 80034c4:	d14a      	bne.n	800355c <setvbuf+0x150>
 80034c6:	f04f 35ff 	mov.w	r5, #4294967295
 80034ca:	2200      	movs	r2, #0
 80034cc:	60a2      	str	r2, [r4, #8]
 80034ce:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80034d2:	6022      	str	r2, [r4, #0]
 80034d4:	6122      	str	r2, [r4, #16]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034dc:	6162      	str	r2, [r4, #20]
 80034de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	07d2      	lsls	r2, r2, #31
 80034e6:	81a3      	strh	r3, [r4, #12]
 80034e8:	d405      	bmi.n	80034f6 <setvbuf+0xea>
 80034ea:	f413 7f00 	tst.w	r3, #512	; 0x200
 80034ee:	d102      	bne.n	80034f6 <setvbuf+0xea>
 80034f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034f2:	f001 f88d 	bl	8004610 <__retarget_lock_release_recursive>
 80034f6:	4628      	mov	r0, r5
 80034f8:	b003      	add	sp, #12
 80034fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <setvbuf+0x184>)
 8003500:	429c      	cmp	r4, r3
 8003502:	d101      	bne.n	8003508 <setvbuf+0xfc>
 8003504:	68bc      	ldr	r4, [r7, #8]
 8003506:	e793      	b.n	8003430 <setvbuf+0x24>
 8003508:	4b22      	ldr	r3, [pc, #136]	; (8003594 <setvbuf+0x188>)
 800350a:	429c      	cmp	r4, r3
 800350c:	bf08      	it	eq
 800350e:	68fc      	ldreq	r4, [r7, #12]
 8003510:	e78e      	b.n	8003430 <setvbuf+0x24>
 8003512:	2e00      	cmp	r6, #0
 8003514:	d0cd      	beq.n	80034b2 <setvbuf+0xa6>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	b913      	cbnz	r3, 8003520 <setvbuf+0x114>
 800351a:	4638      	mov	r0, r7
 800351c:	f000 ffd4 	bl	80044c8 <__sinit>
 8003520:	f1b8 0f01 	cmp.w	r8, #1
 8003524:	bf08      	it	eq
 8003526:	89a3      	ldrheq	r3, [r4, #12]
 8003528:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800352c:	bf04      	itt	eq
 800352e:	f043 0301 	orreq.w	r3, r3, #1
 8003532:	81a3      	strheq	r3, [r4, #12]
 8003534:	89a2      	ldrh	r2, [r4, #12]
 8003536:	6026      	str	r6, [r4, #0]
 8003538:	f012 0308 	ands.w	r3, r2, #8
 800353c:	d01c      	beq.n	8003578 <setvbuf+0x16c>
 800353e:	07d3      	lsls	r3, r2, #31
 8003540:	bf41      	itttt	mi
 8003542:	2300      	movmi	r3, #0
 8003544:	426d      	negmi	r5, r5
 8003546:	60a3      	strmi	r3, [r4, #8]
 8003548:	61a5      	strmi	r5, [r4, #24]
 800354a:	bf58      	it	pl
 800354c:	60a5      	strpl	r5, [r4, #8]
 800354e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003550:	f015 0501 	ands.w	r5, r5, #1
 8003554:	d115      	bne.n	8003582 <setvbuf+0x176>
 8003556:	f412 7f00 	tst.w	r2, #512	; 0x200
 800355a:	e7c8      	b.n	80034ee <setvbuf+0xe2>
 800355c:	4648      	mov	r0, r9
 800355e:	f001 f8bd 	bl	80046dc <malloc>
 8003562:	4606      	mov	r6, r0
 8003564:	2800      	cmp	r0, #0
 8003566:	d0ae      	beq.n	80034c6 <setvbuf+0xba>
 8003568:	464d      	mov	r5, r9
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003570:	81a3      	strh	r3, [r4, #12]
 8003572:	e7d0      	b.n	8003516 <setvbuf+0x10a>
 8003574:	2500      	movs	r5, #0
 8003576:	e7a8      	b.n	80034ca <setvbuf+0xbe>
 8003578:	60a3      	str	r3, [r4, #8]
 800357a:	e7e8      	b.n	800354e <setvbuf+0x142>
 800357c:	f04f 35ff 	mov.w	r5, #4294967295
 8003580:	e7b9      	b.n	80034f6 <setvbuf+0xea>
 8003582:	2500      	movs	r5, #0
 8003584:	e7b7      	b.n	80034f6 <setvbuf+0xea>
 8003586:	bf00      	nop
 8003588:	2000000c 	.word	0x2000000c
 800358c:	080057e4 	.word	0x080057e4
 8003590:	08005804 	.word	0x08005804
 8003594:	080057c4 	.word	0x080057c4

08003598 <quorem>:
 8003598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359c:	6903      	ldr	r3, [r0, #16]
 800359e:	690c      	ldr	r4, [r1, #16]
 80035a0:	4607      	mov	r7, r0
 80035a2:	42a3      	cmp	r3, r4
 80035a4:	f2c0 8083 	blt.w	80036ae <quorem+0x116>
 80035a8:	3c01      	subs	r4, #1
 80035aa:	f100 0514 	add.w	r5, r0, #20
 80035ae:	f101 0814 	add.w	r8, r1, #20
 80035b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80035bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80035c0:	3301      	adds	r3, #1
 80035c2:	429a      	cmp	r2, r3
 80035c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80035c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80035cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80035d0:	d332      	bcc.n	8003638 <quorem+0xa0>
 80035d2:	f04f 0e00 	mov.w	lr, #0
 80035d6:	4640      	mov	r0, r8
 80035d8:	46ac      	mov	ip, r5
 80035da:	46f2      	mov	sl, lr
 80035dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80035e0:	b293      	uxth	r3, r2
 80035e2:	fb06 e303 	mla	r3, r6, r3, lr
 80035e6:	0c12      	lsrs	r2, r2, #16
 80035e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80035ec:	fb06 e202 	mla	r2, r6, r2, lr
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	ebaa 0303 	sub.w	r3, sl, r3
 80035f6:	f8dc a000 	ldr.w	sl, [ip]
 80035fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80035fe:	fa1f fa8a 	uxth.w	sl, sl
 8003602:	4453      	add	r3, sl
 8003604:	fa1f fa82 	uxth.w	sl, r2
 8003608:	f8dc 2000 	ldr.w	r2, [ip]
 800360c:	4581      	cmp	r9, r0
 800360e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003616:	b29b      	uxth	r3, r3
 8003618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800361c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003620:	f84c 3b04 	str.w	r3, [ip], #4
 8003624:	d2da      	bcs.n	80035dc <quorem+0x44>
 8003626:	f855 300b 	ldr.w	r3, [r5, fp]
 800362a:	b92b      	cbnz	r3, 8003638 <quorem+0xa0>
 800362c:	9b01      	ldr	r3, [sp, #4]
 800362e:	3b04      	subs	r3, #4
 8003630:	429d      	cmp	r5, r3
 8003632:	461a      	mov	r2, r3
 8003634:	d32f      	bcc.n	8003696 <quorem+0xfe>
 8003636:	613c      	str	r4, [r7, #16]
 8003638:	4638      	mov	r0, r7
 800363a:	f001 faed 	bl	8004c18 <__mcmp>
 800363e:	2800      	cmp	r0, #0
 8003640:	db25      	blt.n	800368e <quorem+0xf6>
 8003642:	4628      	mov	r0, r5
 8003644:	f04f 0c00 	mov.w	ip, #0
 8003648:	3601      	adds	r6, #1
 800364a:	f858 1b04 	ldr.w	r1, [r8], #4
 800364e:	f8d0 e000 	ldr.w	lr, [r0]
 8003652:	b28b      	uxth	r3, r1
 8003654:	ebac 0303 	sub.w	r3, ip, r3
 8003658:	fa1f f28e 	uxth.w	r2, lr
 800365c:	4413      	add	r3, r2
 800365e:	0c0a      	lsrs	r2, r1, #16
 8003660:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003664:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003668:	b29b      	uxth	r3, r3
 800366a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800366e:	45c1      	cmp	r9, r8
 8003670:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003674:	f840 3b04 	str.w	r3, [r0], #4
 8003678:	d2e7      	bcs.n	800364a <quorem+0xb2>
 800367a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800367e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003682:	b922      	cbnz	r2, 800368e <quorem+0xf6>
 8003684:	3b04      	subs	r3, #4
 8003686:	429d      	cmp	r5, r3
 8003688:	461a      	mov	r2, r3
 800368a:	d30a      	bcc.n	80036a2 <quorem+0x10a>
 800368c:	613c      	str	r4, [r7, #16]
 800368e:	4630      	mov	r0, r6
 8003690:	b003      	add	sp, #12
 8003692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	3b04      	subs	r3, #4
 800369a:	2a00      	cmp	r2, #0
 800369c:	d1cb      	bne.n	8003636 <quorem+0x9e>
 800369e:	3c01      	subs	r4, #1
 80036a0:	e7c6      	b.n	8003630 <quorem+0x98>
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	3b04      	subs	r3, #4
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	d1f0      	bne.n	800368c <quorem+0xf4>
 80036aa:	3c01      	subs	r4, #1
 80036ac:	e7eb      	b.n	8003686 <quorem+0xee>
 80036ae:	2000      	movs	r0, #0
 80036b0:	e7ee      	b.n	8003690 <quorem+0xf8>
 80036b2:	0000      	movs	r0, r0
 80036b4:	0000      	movs	r0, r0
	...

080036b8 <_dtoa_r>:
 80036b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036bc:	4616      	mov	r6, r2
 80036be:	461f      	mov	r7, r3
 80036c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80036c2:	b099      	sub	sp, #100	; 0x64
 80036c4:	4605      	mov	r5, r0
 80036c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80036ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80036ce:	b974      	cbnz	r4, 80036ee <_dtoa_r+0x36>
 80036d0:	2010      	movs	r0, #16
 80036d2:	f001 f803 	bl	80046dc <malloc>
 80036d6:	4602      	mov	r2, r0
 80036d8:	6268      	str	r0, [r5, #36]	; 0x24
 80036da:	b920      	cbnz	r0, 80036e6 <_dtoa_r+0x2e>
 80036dc:	21ea      	movs	r1, #234	; 0xea
 80036de:	4bae      	ldr	r3, [pc, #696]	; (8003998 <_dtoa_r+0x2e0>)
 80036e0:	48ae      	ldr	r0, [pc, #696]	; (800399c <_dtoa_r+0x2e4>)
 80036e2:	f001 fed3 	bl	800548c <__assert_func>
 80036e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80036ea:	6004      	str	r4, [r0, #0]
 80036ec:	60c4      	str	r4, [r0, #12]
 80036ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80036f0:	6819      	ldr	r1, [r3, #0]
 80036f2:	b151      	cbz	r1, 800370a <_dtoa_r+0x52>
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	2301      	movs	r3, #1
 80036f8:	4093      	lsls	r3, r2
 80036fa:	604a      	str	r2, [r1, #4]
 80036fc:	608b      	str	r3, [r1, #8]
 80036fe:	4628      	mov	r0, r5
 8003700:	f001 f850 	bl	80047a4 <_Bfree>
 8003704:	2200      	movs	r2, #0
 8003706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	1e3b      	subs	r3, r7, #0
 800370c:	bfaf      	iteee	ge
 800370e:	2300      	movge	r3, #0
 8003710:	2201      	movlt	r2, #1
 8003712:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003716:	9305      	strlt	r3, [sp, #20]
 8003718:	bfa8      	it	ge
 800371a:	f8c8 3000 	strge.w	r3, [r8]
 800371e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003722:	4b9f      	ldr	r3, [pc, #636]	; (80039a0 <_dtoa_r+0x2e8>)
 8003724:	bfb8      	it	lt
 8003726:	f8c8 2000 	strlt.w	r2, [r8]
 800372a:	ea33 0309 	bics.w	r3, r3, r9
 800372e:	d119      	bne.n	8003764 <_dtoa_r+0xac>
 8003730:	f242 730f 	movw	r3, #9999	; 0x270f
 8003734:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800373c:	4333      	orrs	r3, r6
 800373e:	f000 8580 	beq.w	8004242 <_dtoa_r+0xb8a>
 8003742:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003744:	b953      	cbnz	r3, 800375c <_dtoa_r+0xa4>
 8003746:	4b97      	ldr	r3, [pc, #604]	; (80039a4 <_dtoa_r+0x2ec>)
 8003748:	e022      	b.n	8003790 <_dtoa_r+0xd8>
 800374a:	4b97      	ldr	r3, [pc, #604]	; (80039a8 <_dtoa_r+0x2f0>)
 800374c:	9308      	str	r3, [sp, #32]
 800374e:	3308      	adds	r3, #8
 8003750:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	9808      	ldr	r0, [sp, #32]
 8003756:	b019      	add	sp, #100	; 0x64
 8003758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375c:	4b91      	ldr	r3, [pc, #580]	; (80039a4 <_dtoa_r+0x2ec>)
 800375e:	9308      	str	r3, [sp, #32]
 8003760:	3303      	adds	r3, #3
 8003762:	e7f5      	b.n	8003750 <_dtoa_r+0x98>
 8003764:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003768:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800376c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003770:	2200      	movs	r2, #0
 8003772:	2300      	movs	r3, #0
 8003774:	f7fd f98e 	bl	8000a94 <__aeabi_dcmpeq>
 8003778:	4680      	mov	r8, r0
 800377a:	b158      	cbz	r0, 8003794 <_dtoa_r+0xdc>
 800377c:	2301      	movs	r3, #1
 800377e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8559 	beq.w	800423c <_dtoa_r+0xb84>
 800378a:	4888      	ldr	r0, [pc, #544]	; (80039ac <_dtoa_r+0x2f4>)
 800378c:	6018      	str	r0, [r3, #0]
 800378e:	1e43      	subs	r3, r0, #1
 8003790:	9308      	str	r3, [sp, #32]
 8003792:	e7df      	b.n	8003754 <_dtoa_r+0x9c>
 8003794:	ab16      	add	r3, sp, #88	; 0x58
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	ab17      	add	r3, sp, #92	; 0x5c
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4628      	mov	r0, r5
 800379e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80037a2:	f001 fae5 	bl	8004d70 <__d2b>
 80037a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80037aa:	4682      	mov	sl, r0
 80037ac:	2c00      	cmp	r4, #0
 80037ae:	d07e      	beq.n	80038ae <_dtoa_r+0x1f6>
 80037b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80037b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80037ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80037c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80037c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80037ca:	2200      	movs	r2, #0
 80037cc:	4b78      	ldr	r3, [pc, #480]	; (80039b0 <_dtoa_r+0x2f8>)
 80037ce:	f7fc fd41 	bl	8000254 <__aeabi_dsub>
 80037d2:	a36b      	add	r3, pc, #428	; (adr r3, 8003980 <_dtoa_r+0x2c8>)
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f7fc fef4 	bl	80005c4 <__aeabi_dmul>
 80037dc:	a36a      	add	r3, pc, #424	; (adr r3, 8003988 <_dtoa_r+0x2d0>)
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f7fc fd39 	bl	8000258 <__adddf3>
 80037e6:	4606      	mov	r6, r0
 80037e8:	4620      	mov	r0, r4
 80037ea:	460f      	mov	r7, r1
 80037ec:	f7fc fe80 	bl	80004f0 <__aeabi_i2d>
 80037f0:	a367      	add	r3, pc, #412	; (adr r3, 8003990 <_dtoa_r+0x2d8>)
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f7fc fee5 	bl	80005c4 <__aeabi_dmul>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4630      	mov	r0, r6
 8003800:	4639      	mov	r1, r7
 8003802:	f7fc fd29 	bl	8000258 <__adddf3>
 8003806:	4606      	mov	r6, r0
 8003808:	460f      	mov	r7, r1
 800380a:	f7fd f98b 	bl	8000b24 <__aeabi_d2iz>
 800380e:	2200      	movs	r2, #0
 8003810:	4681      	mov	r9, r0
 8003812:	2300      	movs	r3, #0
 8003814:	4630      	mov	r0, r6
 8003816:	4639      	mov	r1, r7
 8003818:	f7fd f946 	bl	8000aa8 <__aeabi_dcmplt>
 800381c:	b148      	cbz	r0, 8003832 <_dtoa_r+0x17a>
 800381e:	4648      	mov	r0, r9
 8003820:	f7fc fe66 	bl	80004f0 <__aeabi_i2d>
 8003824:	4632      	mov	r2, r6
 8003826:	463b      	mov	r3, r7
 8003828:	f7fd f934 	bl	8000a94 <__aeabi_dcmpeq>
 800382c:	b908      	cbnz	r0, 8003832 <_dtoa_r+0x17a>
 800382e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003832:	f1b9 0f16 	cmp.w	r9, #22
 8003836:	d857      	bhi.n	80038e8 <_dtoa_r+0x230>
 8003838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800383c:	4b5d      	ldr	r3, [pc, #372]	; (80039b4 <_dtoa_r+0x2fc>)
 800383e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f7fd f92f 	bl	8000aa8 <__aeabi_dcmplt>
 800384a:	2800      	cmp	r0, #0
 800384c:	d04e      	beq.n	80038ec <_dtoa_r+0x234>
 800384e:	2300      	movs	r3, #0
 8003850:	f109 39ff 	add.w	r9, r9, #4294967295
 8003854:	930f      	str	r3, [sp, #60]	; 0x3c
 8003856:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003858:	1b1c      	subs	r4, r3, r4
 800385a:	1e63      	subs	r3, r4, #1
 800385c:	9309      	str	r3, [sp, #36]	; 0x24
 800385e:	bf49      	itett	mi
 8003860:	f1c4 0301 	rsbmi	r3, r4, #1
 8003864:	2300      	movpl	r3, #0
 8003866:	9306      	strmi	r3, [sp, #24]
 8003868:	2300      	movmi	r3, #0
 800386a:	bf54      	ite	pl
 800386c:	9306      	strpl	r3, [sp, #24]
 800386e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003870:	f1b9 0f00 	cmp.w	r9, #0
 8003874:	db3c      	blt.n	80038f0 <_dtoa_r+0x238>
 8003876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003878:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800387c:	444b      	add	r3, r9
 800387e:	9309      	str	r3, [sp, #36]	; 0x24
 8003880:	2300      	movs	r3, #0
 8003882:	930a      	str	r3, [sp, #40]	; 0x28
 8003884:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003886:	2b09      	cmp	r3, #9
 8003888:	d86c      	bhi.n	8003964 <_dtoa_r+0x2ac>
 800388a:	2b05      	cmp	r3, #5
 800388c:	bfc4      	itt	gt
 800388e:	3b04      	subgt	r3, #4
 8003890:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003894:	bfc8      	it	gt
 8003896:	2400      	movgt	r4, #0
 8003898:	f1a3 0302 	sub.w	r3, r3, #2
 800389c:	bfd8      	it	le
 800389e:	2401      	movle	r4, #1
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	f200 808b 	bhi.w	80039bc <_dtoa_r+0x304>
 80038a6:	e8df f003 	tbb	[pc, r3]
 80038aa:	4f2d      	.short	0x4f2d
 80038ac:	5b4d      	.short	0x5b4d
 80038ae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80038b2:	441c      	add	r4, r3
 80038b4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	bfc3      	ittte	gt
 80038bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80038c0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80038c4:	fa09 f303 	lslgt.w	r3, r9, r3
 80038c8:	f1c3 0320 	rsble	r3, r3, #32
 80038cc:	bfc6      	itte	gt
 80038ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80038d2:	4318      	orrgt	r0, r3
 80038d4:	fa06 f003 	lslle.w	r0, r6, r3
 80038d8:	f7fc fdfa 	bl	80004d0 <__aeabi_ui2d>
 80038dc:	2301      	movs	r3, #1
 80038de:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80038e2:	3c01      	subs	r4, #1
 80038e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80038e6:	e770      	b.n	80037ca <_dtoa_r+0x112>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e7b3      	b.n	8003854 <_dtoa_r+0x19c>
 80038ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80038ee:	e7b2      	b.n	8003856 <_dtoa_r+0x19e>
 80038f0:	9b06      	ldr	r3, [sp, #24]
 80038f2:	eba3 0309 	sub.w	r3, r3, r9
 80038f6:	9306      	str	r3, [sp, #24]
 80038f8:	f1c9 0300 	rsb	r3, r9, #0
 80038fc:	930a      	str	r3, [sp, #40]	; 0x28
 80038fe:	2300      	movs	r3, #0
 8003900:	930e      	str	r3, [sp, #56]	; 0x38
 8003902:	e7bf      	b.n	8003884 <_dtoa_r+0x1cc>
 8003904:	2300      	movs	r3, #0
 8003906:	930b      	str	r3, [sp, #44]	; 0x2c
 8003908:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800390a:	2b00      	cmp	r3, #0
 800390c:	dc59      	bgt.n	80039c2 <_dtoa_r+0x30a>
 800390e:	f04f 0b01 	mov.w	fp, #1
 8003912:	465b      	mov	r3, fp
 8003914:	f8cd b008 	str.w	fp, [sp, #8]
 8003918:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800391c:	2200      	movs	r2, #0
 800391e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003920:	6042      	str	r2, [r0, #4]
 8003922:	2204      	movs	r2, #4
 8003924:	f102 0614 	add.w	r6, r2, #20
 8003928:	429e      	cmp	r6, r3
 800392a:	6841      	ldr	r1, [r0, #4]
 800392c:	d94f      	bls.n	80039ce <_dtoa_r+0x316>
 800392e:	4628      	mov	r0, r5
 8003930:	f000 fef8 	bl	8004724 <_Balloc>
 8003934:	9008      	str	r0, [sp, #32]
 8003936:	2800      	cmp	r0, #0
 8003938:	d14d      	bne.n	80039d6 <_dtoa_r+0x31e>
 800393a:	4602      	mov	r2, r0
 800393c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <_dtoa_r+0x300>)
 8003942:	e6cd      	b.n	80036e0 <_dtoa_r+0x28>
 8003944:	2301      	movs	r3, #1
 8003946:	e7de      	b.n	8003906 <_dtoa_r+0x24e>
 8003948:	2300      	movs	r3, #0
 800394a:	930b      	str	r3, [sp, #44]	; 0x2c
 800394c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800394e:	eb09 0b03 	add.w	fp, r9, r3
 8003952:	f10b 0301 	add.w	r3, fp, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	9302      	str	r3, [sp, #8]
 800395a:	bfb8      	it	lt
 800395c:	2301      	movlt	r3, #1
 800395e:	e7dd      	b.n	800391c <_dtoa_r+0x264>
 8003960:	2301      	movs	r3, #1
 8003962:	e7f2      	b.n	800394a <_dtoa_r+0x292>
 8003964:	2401      	movs	r4, #1
 8003966:	2300      	movs	r3, #0
 8003968:	940b      	str	r4, [sp, #44]	; 0x2c
 800396a:	9322      	str	r3, [sp, #136]	; 0x88
 800396c:	f04f 3bff 	mov.w	fp, #4294967295
 8003970:	2200      	movs	r2, #0
 8003972:	2312      	movs	r3, #18
 8003974:	f8cd b008 	str.w	fp, [sp, #8]
 8003978:	9223      	str	r2, [sp, #140]	; 0x8c
 800397a:	e7cf      	b.n	800391c <_dtoa_r+0x264>
 800397c:	f3af 8000 	nop.w
 8003980:	636f4361 	.word	0x636f4361
 8003984:	3fd287a7 	.word	0x3fd287a7
 8003988:	8b60c8b3 	.word	0x8b60c8b3
 800398c:	3fc68a28 	.word	0x3fc68a28
 8003990:	509f79fb 	.word	0x509f79fb
 8003994:	3fd34413 	.word	0x3fd34413
 8003998:	0800573d 	.word	0x0800573d
 800399c:	08005754 	.word	0x08005754
 80039a0:	7ff00000 	.word	0x7ff00000
 80039a4:	08005739 	.word	0x08005739
 80039a8:	08005730 	.word	0x08005730
 80039ac:	0800570d 	.word	0x0800570d
 80039b0:	3ff80000 	.word	0x3ff80000
 80039b4:	080058b0 	.word	0x080058b0
 80039b8:	080057b3 	.word	0x080057b3
 80039bc:	2301      	movs	r3, #1
 80039be:	930b      	str	r3, [sp, #44]	; 0x2c
 80039c0:	e7d4      	b.n	800396c <_dtoa_r+0x2b4>
 80039c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80039c6:	465b      	mov	r3, fp
 80039c8:	f8cd b008 	str.w	fp, [sp, #8]
 80039cc:	e7a6      	b.n	800391c <_dtoa_r+0x264>
 80039ce:	3101      	adds	r1, #1
 80039d0:	6041      	str	r1, [r0, #4]
 80039d2:	0052      	lsls	r2, r2, #1
 80039d4:	e7a6      	b.n	8003924 <_dtoa_r+0x26c>
 80039d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039d8:	9a08      	ldr	r2, [sp, #32]
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	9b02      	ldr	r3, [sp, #8]
 80039de:	2b0e      	cmp	r3, #14
 80039e0:	f200 80a8 	bhi.w	8003b34 <_dtoa_r+0x47c>
 80039e4:	2c00      	cmp	r4, #0
 80039e6:	f000 80a5 	beq.w	8003b34 <_dtoa_r+0x47c>
 80039ea:	f1b9 0f00 	cmp.w	r9, #0
 80039ee:	dd34      	ble.n	8003a5a <_dtoa_r+0x3a2>
 80039f0:	4a9a      	ldr	r2, [pc, #616]	; (8003c5c <_dtoa_r+0x5a4>)
 80039f2:	f009 030f 	and.w	r3, r9, #15
 80039f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80039fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80039fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003a06:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003a0a:	d016      	beq.n	8003a3a <_dtoa_r+0x382>
 8003a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a10:	4b93      	ldr	r3, [pc, #588]	; (8003c60 <_dtoa_r+0x5a8>)
 8003a12:	2703      	movs	r7, #3
 8003a14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a18:	f7fc fefe 	bl	8000818 <__aeabi_ddiv>
 8003a1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a20:	f004 040f 	and.w	r4, r4, #15
 8003a24:	4e8e      	ldr	r6, [pc, #568]	; (8003c60 <_dtoa_r+0x5a8>)
 8003a26:	b954      	cbnz	r4, 8003a3e <_dtoa_r+0x386>
 8003a28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a30:	f7fc fef2 	bl	8000818 <__aeabi_ddiv>
 8003a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a38:	e029      	b.n	8003a8e <_dtoa_r+0x3d6>
 8003a3a:	2702      	movs	r7, #2
 8003a3c:	e7f2      	b.n	8003a24 <_dtoa_r+0x36c>
 8003a3e:	07e1      	lsls	r1, r4, #31
 8003a40:	d508      	bpl.n	8003a54 <_dtoa_r+0x39c>
 8003a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003a46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a4a:	f7fc fdbb 	bl	80005c4 <__aeabi_dmul>
 8003a4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a52:	3701      	adds	r7, #1
 8003a54:	1064      	asrs	r4, r4, #1
 8003a56:	3608      	adds	r6, #8
 8003a58:	e7e5      	b.n	8003a26 <_dtoa_r+0x36e>
 8003a5a:	f000 80a5 	beq.w	8003ba8 <_dtoa_r+0x4f0>
 8003a5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a62:	f1c9 0400 	rsb	r4, r9, #0
 8003a66:	4b7d      	ldr	r3, [pc, #500]	; (8003c5c <_dtoa_r+0x5a4>)
 8003a68:	f004 020f 	and.w	r2, r4, #15
 8003a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fda6 	bl	80005c4 <__aeabi_dmul>
 8003a78:	2702      	movs	r7, #2
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a80:	4e77      	ldr	r6, [pc, #476]	; (8003c60 <_dtoa_r+0x5a8>)
 8003a82:	1124      	asrs	r4, r4, #4
 8003a84:	2c00      	cmp	r4, #0
 8003a86:	f040 8084 	bne.w	8003b92 <_dtoa_r+0x4da>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1d2      	bne.n	8003a34 <_dtoa_r+0x37c>
 8003a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 808b 	beq.w	8003bac <_dtoa_r+0x4f4>
 8003a96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003a9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003a9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	4b6f      	ldr	r3, [pc, #444]	; (8003c64 <_dtoa_r+0x5ac>)
 8003aa6:	f7fc ffff 	bl	8000aa8 <__aeabi_dcmplt>
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d07e      	beq.n	8003bac <_dtoa_r+0x4f4>
 8003aae:	9b02      	ldr	r3, [sp, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d07b      	beq.n	8003bac <_dtoa_r+0x4f4>
 8003ab4:	f1bb 0f00 	cmp.w	fp, #0
 8003ab8:	dd38      	ble.n	8003b2c <_dtoa_r+0x474>
 8003aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003abe:	2200      	movs	r2, #0
 8003ac0:	4b69      	ldr	r3, [pc, #420]	; (8003c68 <_dtoa_r+0x5b0>)
 8003ac2:	f7fc fd7f 	bl	80005c4 <__aeabi_dmul>
 8003ac6:	465c      	mov	r4, fp
 8003ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003acc:	f109 38ff 	add.w	r8, r9, #4294967295
 8003ad0:	3701      	adds	r7, #1
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	f7fc fd0c 	bl	80004f0 <__aeabi_i2d>
 8003ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003adc:	f7fc fd72 	bl	80005c4 <__aeabi_dmul>
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <_dtoa_r+0x5b4>)
 8003ae4:	f7fc fbb8 	bl	8000258 <__adddf3>
 8003ae8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003aec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003af0:	9611      	str	r6, [sp, #68]	; 0x44
 8003af2:	2c00      	cmp	r4, #0
 8003af4:	d15d      	bne.n	8003bb2 <_dtoa_r+0x4fa>
 8003af6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003afa:	2200      	movs	r2, #0
 8003afc:	4b5c      	ldr	r3, [pc, #368]	; (8003c70 <_dtoa_r+0x5b8>)
 8003afe:	f7fc fba9 	bl	8000254 <__aeabi_dsub>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b0a:	4633      	mov	r3, r6
 8003b0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b0e:	f7fc ffe9 	bl	8000ae4 <__aeabi_dcmpgt>
 8003b12:	2800      	cmp	r0, #0
 8003b14:	f040 829e 	bne.w	8004054 <_dtoa_r+0x99c>
 8003b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003b22:	f7fc ffc1 	bl	8000aa8 <__aeabi_dcmplt>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f040 8292 	bne.w	8004050 <_dtoa_r+0x998>
 8003b2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003b30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003b34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f2c0 8153 	blt.w	8003de2 <_dtoa_r+0x72a>
 8003b3c:	f1b9 0f0e 	cmp.w	r9, #14
 8003b40:	f300 814f 	bgt.w	8003de2 <_dtoa_r+0x72a>
 8003b44:	4b45      	ldr	r3, [pc, #276]	; (8003c5c <_dtoa_r+0x5a4>)
 8003b46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003b4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003b52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f280 80db 	bge.w	8003d10 <_dtoa_r+0x658>
 8003b5a:	9b02      	ldr	r3, [sp, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f300 80d7 	bgt.w	8003d10 <_dtoa_r+0x658>
 8003b62:	f040 8274 	bne.w	800404e <_dtoa_r+0x996>
 8003b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <_dtoa_r+0x5b8>)
 8003b6e:	f7fc fd29 	bl	80005c4 <__aeabi_dmul>
 8003b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b76:	f7fc ffab 	bl	8000ad0 <__aeabi_dcmpge>
 8003b7a:	9c02      	ldr	r4, [sp, #8]
 8003b7c:	4626      	mov	r6, r4
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	f040 824a 	bne.w	8004018 <_dtoa_r+0x960>
 8003b84:	2331      	movs	r3, #49	; 0x31
 8003b86:	9f08      	ldr	r7, [sp, #32]
 8003b88:	f109 0901 	add.w	r9, r9, #1
 8003b8c:	f807 3b01 	strb.w	r3, [r7], #1
 8003b90:	e246      	b.n	8004020 <_dtoa_r+0x968>
 8003b92:	07e2      	lsls	r2, r4, #31
 8003b94:	d505      	bpl.n	8003ba2 <_dtoa_r+0x4ea>
 8003b96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003b9a:	f7fc fd13 	bl	80005c4 <__aeabi_dmul>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	3701      	adds	r7, #1
 8003ba2:	1064      	asrs	r4, r4, #1
 8003ba4:	3608      	adds	r6, #8
 8003ba6:	e76d      	b.n	8003a84 <_dtoa_r+0x3cc>
 8003ba8:	2702      	movs	r7, #2
 8003baa:	e770      	b.n	8003a8e <_dtoa_r+0x3d6>
 8003bac:	46c8      	mov	r8, r9
 8003bae:	9c02      	ldr	r4, [sp, #8]
 8003bb0:	e78f      	b.n	8003ad2 <_dtoa_r+0x41a>
 8003bb2:	9908      	ldr	r1, [sp, #32]
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <_dtoa_r+0x5a4>)
 8003bb6:	4421      	add	r1, r4
 8003bb8:	9112      	str	r1, [sp, #72]	; 0x48
 8003bba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003bc0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003bc4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d055      	beq.n	8003c78 <_dtoa_r+0x5c0>
 8003bcc:	2000      	movs	r0, #0
 8003bce:	4929      	ldr	r1, [pc, #164]	; (8003c74 <_dtoa_r+0x5bc>)
 8003bd0:	f7fc fe22 	bl	8000818 <__aeabi_ddiv>
 8003bd4:	463b      	mov	r3, r7
 8003bd6:	4632      	mov	r2, r6
 8003bd8:	f7fc fb3c 	bl	8000254 <__aeabi_dsub>
 8003bdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003be0:	9f08      	ldr	r7, [sp, #32]
 8003be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003be6:	f7fc ff9d 	bl	8000b24 <__aeabi_d2iz>
 8003bea:	4604      	mov	r4, r0
 8003bec:	f7fc fc80 	bl	80004f0 <__aeabi_i2d>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bf8:	f7fc fb2c 	bl	8000254 <__aeabi_dsub>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	3430      	adds	r4, #48	; 0x30
 8003c02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c0a:	f807 4b01 	strb.w	r4, [r7], #1
 8003c0e:	f7fc ff4b 	bl	8000aa8 <__aeabi_dcmplt>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d174      	bne.n	8003d00 <_dtoa_r+0x648>
 8003c16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	4911      	ldr	r1, [pc, #68]	; (8003c64 <_dtoa_r+0x5ac>)
 8003c1e:	f7fc fb19 	bl	8000254 <__aeabi_dsub>
 8003c22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c26:	f7fc ff3f 	bl	8000aa8 <__aeabi_dcmplt>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	f040 80b6 	bne.w	8003d9c <_dtoa_r+0x6e4>
 8003c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c32:	429f      	cmp	r7, r3
 8003c34:	f43f af7a 	beq.w	8003b2c <_dtoa_r+0x474>
 8003c38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <_dtoa_r+0x5b0>)
 8003c40:	f7fc fcc0 	bl	80005c4 <__aeabi_dmul>
 8003c44:	2200      	movs	r2, #0
 8003c46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <_dtoa_r+0x5b0>)
 8003c50:	f7fc fcb8 	bl	80005c4 <__aeabi_dmul>
 8003c54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c58:	e7c3      	b.n	8003be2 <_dtoa_r+0x52a>
 8003c5a:	bf00      	nop
 8003c5c:	080058b0 	.word	0x080058b0
 8003c60:	08005888 	.word	0x08005888
 8003c64:	3ff00000 	.word	0x3ff00000
 8003c68:	40240000 	.word	0x40240000
 8003c6c:	401c0000 	.word	0x401c0000
 8003c70:	40140000 	.word	0x40140000
 8003c74:	3fe00000 	.word	0x3fe00000
 8003c78:	4630      	mov	r0, r6
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	f7fc fca2 	bl	80005c4 <__aeabi_dmul>
 8003c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c86:	9c08      	ldr	r4, [sp, #32]
 8003c88:	9314      	str	r3, [sp, #80]	; 0x50
 8003c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c8e:	f7fc ff49 	bl	8000b24 <__aeabi_d2iz>
 8003c92:	9015      	str	r0, [sp, #84]	; 0x54
 8003c94:	f7fc fc2c 	bl	80004f0 <__aeabi_i2d>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ca0:	f7fc fad8 	bl	8000254 <__aeabi_dsub>
 8003ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	3330      	adds	r3, #48	; 0x30
 8003caa:	f804 3b01 	strb.w	r3, [r4], #1
 8003cae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cb0:	460f      	mov	r7, r1
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	d124      	bne.n	8003d04 <_dtoa_r+0x64c>
 8003cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003cbe:	4bb3      	ldr	r3, [pc, #716]	; (8003f8c <_dtoa_r+0x8d4>)
 8003cc0:	f7fc faca 	bl	8000258 <__adddf3>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4630      	mov	r0, r6
 8003cca:	4639      	mov	r1, r7
 8003ccc:	f7fc ff0a 	bl	8000ae4 <__aeabi_dcmpgt>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d162      	bne.n	8003d9a <_dtoa_r+0x6e2>
 8003cd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003cd8:	2000      	movs	r0, #0
 8003cda:	49ac      	ldr	r1, [pc, #688]	; (8003f8c <_dtoa_r+0x8d4>)
 8003cdc:	f7fc faba 	bl	8000254 <__aeabi_dsub>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	4639      	mov	r1, r7
 8003ce8:	f7fc fede 	bl	8000aa8 <__aeabi_dcmplt>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	f43f af1d 	beq.w	8003b2c <_dtoa_r+0x474>
 8003cf2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003cf4:	1e7b      	subs	r3, r7, #1
 8003cf6:	9314      	str	r3, [sp, #80]	; 0x50
 8003cf8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003cfc:	2b30      	cmp	r3, #48	; 0x30
 8003cfe:	d0f8      	beq.n	8003cf2 <_dtoa_r+0x63a>
 8003d00:	46c1      	mov	r9, r8
 8003d02:	e03a      	b.n	8003d7a <_dtoa_r+0x6c2>
 8003d04:	4ba2      	ldr	r3, [pc, #648]	; (8003f90 <_dtoa_r+0x8d8>)
 8003d06:	f7fc fc5d 	bl	80005c4 <__aeabi_dmul>
 8003d0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d0e:	e7bc      	b.n	8003c8a <_dtoa_r+0x5d2>
 8003d10:	9f08      	ldr	r7, [sp, #32]
 8003d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d1a:	f7fc fd7d 	bl	8000818 <__aeabi_ddiv>
 8003d1e:	f7fc ff01 	bl	8000b24 <__aeabi_d2iz>
 8003d22:	4604      	mov	r4, r0
 8003d24:	f7fc fbe4 	bl	80004f0 <__aeabi_i2d>
 8003d28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d2c:	f7fc fc4a 	bl	80005c4 <__aeabi_dmul>
 8003d30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003d34:	460b      	mov	r3, r1
 8003d36:	4602      	mov	r2, r0
 8003d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d3c:	f7fc fa8a 	bl	8000254 <__aeabi_dsub>
 8003d40:	f807 6b01 	strb.w	r6, [r7], #1
 8003d44:	9e08      	ldr	r6, [sp, #32]
 8003d46:	9b02      	ldr	r3, [sp, #8]
 8003d48:	1bbe      	subs	r6, r7, r6
 8003d4a:	42b3      	cmp	r3, r6
 8003d4c:	d13a      	bne.n	8003dc4 <_dtoa_r+0x70c>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	f7fc fa81 	bl	8000258 <__adddf3>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d62:	f7fc febf 	bl	8000ae4 <__aeabi_dcmpgt>
 8003d66:	bb58      	cbnz	r0, 8003dc0 <_dtoa_r+0x708>
 8003d68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d70:	f7fc fe90 	bl	8000a94 <__aeabi_dcmpeq>
 8003d74:	b108      	cbz	r0, 8003d7a <_dtoa_r+0x6c2>
 8003d76:	07e1      	lsls	r1, r4, #31
 8003d78:	d422      	bmi.n	8003dc0 <_dtoa_r+0x708>
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	4651      	mov	r1, sl
 8003d7e:	f000 fd11 	bl	80047a4 <_Bfree>
 8003d82:	2300      	movs	r3, #0
 8003d84:	703b      	strb	r3, [r7, #0]
 8003d86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003d88:	f109 0001 	add.w	r0, r9, #1
 8003d8c:	6018      	str	r0, [r3, #0]
 8003d8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f43f acdf 	beq.w	8003754 <_dtoa_r+0x9c>
 8003d96:	601f      	str	r7, [r3, #0]
 8003d98:	e4dc      	b.n	8003754 <_dtoa_r+0x9c>
 8003d9a:	4627      	mov	r7, r4
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	461f      	mov	r7, r3
 8003da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003da4:	2a39      	cmp	r2, #57	; 0x39
 8003da6:	d107      	bne.n	8003db8 <_dtoa_r+0x700>
 8003da8:	9a08      	ldr	r2, [sp, #32]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d1f7      	bne.n	8003d9e <_dtoa_r+0x6e6>
 8003dae:	2230      	movs	r2, #48	; 0x30
 8003db0:	9908      	ldr	r1, [sp, #32]
 8003db2:	f108 0801 	add.w	r8, r8, #1
 8003db6:	700a      	strb	r2, [r1, #0]
 8003db8:	781a      	ldrb	r2, [r3, #0]
 8003dba:	3201      	adds	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e79f      	b.n	8003d00 <_dtoa_r+0x648>
 8003dc0:	46c8      	mov	r8, r9
 8003dc2:	e7eb      	b.n	8003d9c <_dtoa_r+0x6e4>
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	4b72      	ldr	r3, [pc, #456]	; (8003f90 <_dtoa_r+0x8d8>)
 8003dc8:	f7fc fbfc 	bl	80005c4 <__aeabi_dmul>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f7fc fe5c 	bl	8000a94 <__aeabi_dcmpeq>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d098      	beq.n	8003d12 <_dtoa_r+0x65a>
 8003de0:	e7cb      	b.n	8003d7a <_dtoa_r+0x6c2>
 8003de2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003de4:	2a00      	cmp	r2, #0
 8003de6:	f000 80cd 	beq.w	8003f84 <_dtoa_r+0x8cc>
 8003dea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003dec:	2a01      	cmp	r2, #1
 8003dee:	f300 80af 	bgt.w	8003f50 <_dtoa_r+0x898>
 8003df2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003df4:	2a00      	cmp	r2, #0
 8003df6:	f000 80a7 	beq.w	8003f48 <_dtoa_r+0x890>
 8003dfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003dfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003e00:	9f06      	ldr	r7, [sp, #24]
 8003e02:	9a06      	ldr	r2, [sp, #24]
 8003e04:	2101      	movs	r1, #1
 8003e06:	441a      	add	r2, r3
 8003e08:	9206      	str	r2, [sp, #24]
 8003e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	441a      	add	r2, r3
 8003e10:	9209      	str	r2, [sp, #36]	; 0x24
 8003e12:	f000 fd81 	bl	8004918 <__i2b>
 8003e16:	4606      	mov	r6, r0
 8003e18:	2f00      	cmp	r7, #0
 8003e1a:	dd0c      	ble.n	8003e36 <_dtoa_r+0x77e>
 8003e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	dd09      	ble.n	8003e36 <_dtoa_r+0x77e>
 8003e22:	42bb      	cmp	r3, r7
 8003e24:	bfa8      	it	ge
 8003e26:	463b      	movge	r3, r7
 8003e28:	9a06      	ldr	r2, [sp, #24]
 8003e2a:	1aff      	subs	r7, r7, r3
 8003e2c:	1ad2      	subs	r2, r2, r3
 8003e2e:	9206      	str	r2, [sp, #24]
 8003e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	9309      	str	r3, [sp, #36]	; 0x24
 8003e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e38:	b1f3      	cbz	r3, 8003e78 <_dtoa_r+0x7c0>
 8003e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a9 	beq.w	8003f94 <_dtoa_r+0x8dc>
 8003e42:	2c00      	cmp	r4, #0
 8003e44:	dd10      	ble.n	8003e68 <_dtoa_r+0x7b0>
 8003e46:	4631      	mov	r1, r6
 8003e48:	4622      	mov	r2, r4
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f000 fe1e 	bl	8004a8c <__pow5mult>
 8003e50:	4652      	mov	r2, sl
 8003e52:	4601      	mov	r1, r0
 8003e54:	4606      	mov	r6, r0
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 fd74 	bl	8004944 <__multiply>
 8003e5c:	4680      	mov	r8, r0
 8003e5e:	4651      	mov	r1, sl
 8003e60:	4628      	mov	r0, r5
 8003e62:	f000 fc9f 	bl	80047a4 <_Bfree>
 8003e66:	46c2      	mov	sl, r8
 8003e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e6a:	1b1a      	subs	r2, r3, r4
 8003e6c:	d004      	beq.n	8003e78 <_dtoa_r+0x7c0>
 8003e6e:	4651      	mov	r1, sl
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 fe0b 	bl	8004a8c <__pow5mult>
 8003e76:	4682      	mov	sl, r0
 8003e78:	2101      	movs	r1, #1
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f000 fd4c 	bl	8004918 <__i2b>
 8003e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e82:	4604      	mov	r4, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f340 8087 	ble.w	8003f98 <_dtoa_r+0x8e0>
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 fdfc 	bl	8004a8c <__pow5mult>
 8003e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e96:	4604      	mov	r4, r0
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f340 8080 	ble.w	8003f9e <_dtoa_r+0x8e6>
 8003e9e:	f04f 0800 	mov.w	r8, #0
 8003ea2:	6923      	ldr	r3, [r4, #16]
 8003ea4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003ea8:	6918      	ldr	r0, [r3, #16]
 8003eaa:	f000 fce7 	bl	800487c <__hi0bits>
 8003eae:	f1c0 0020 	rsb	r0, r0, #32
 8003eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb4:	4418      	add	r0, r3
 8003eb6:	f010 001f 	ands.w	r0, r0, #31
 8003eba:	f000 8092 	beq.w	8003fe2 <_dtoa_r+0x92a>
 8003ebe:	f1c0 0320 	rsb	r3, r0, #32
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	f340 808a 	ble.w	8003fdc <_dtoa_r+0x924>
 8003ec8:	f1c0 001c 	rsb	r0, r0, #28
 8003ecc:	9b06      	ldr	r3, [sp, #24]
 8003ece:	4407      	add	r7, r0
 8003ed0:	4403      	add	r3, r0
 8003ed2:	9306      	str	r3, [sp, #24]
 8003ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed6:	4403      	add	r3, r0
 8003ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eda:	9b06      	ldr	r3, [sp, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	dd05      	ble.n	8003eec <_dtoa_r+0x834>
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 fe2b 	bl	8004b40 <__lshift>
 8003eea:	4682      	mov	sl, r0
 8003eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	dd05      	ble.n	8003efe <_dtoa_r+0x846>
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f000 fe22 	bl	8004b40 <__lshift>
 8003efc:	4604      	mov	r4, r0
 8003efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d070      	beq.n	8003fe6 <_dtoa_r+0x92e>
 8003f04:	4621      	mov	r1, r4
 8003f06:	4650      	mov	r0, sl
 8003f08:	f000 fe86 	bl	8004c18 <__mcmp>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	da6a      	bge.n	8003fe6 <_dtoa_r+0x92e>
 8003f10:	2300      	movs	r3, #0
 8003f12:	4651      	mov	r1, sl
 8003f14:	220a      	movs	r2, #10
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 fc66 	bl	80047e8 <__multadd>
 8003f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f1e:	4682      	mov	sl, r0
 8003f20:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8193 	beq.w	8004250 <_dtoa_r+0xb98>
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	220a      	movs	r2, #10
 8003f30:	4628      	mov	r0, r5
 8003f32:	f000 fc59 	bl	80047e8 <__multadd>
 8003f36:	f1bb 0f00 	cmp.w	fp, #0
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	f300 8093 	bgt.w	8004066 <_dtoa_r+0x9ae>
 8003f40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	dc57      	bgt.n	8003ff6 <_dtoa_r+0x93e>
 8003f46:	e08e      	b.n	8004066 <_dtoa_r+0x9ae>
 8003f48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003f4e:	e756      	b.n	8003dfe <_dtoa_r+0x746>
 8003f50:	9b02      	ldr	r3, [sp, #8]
 8003f52:	1e5c      	subs	r4, r3, #1
 8003f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	bfb7      	itett	lt
 8003f5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003f5c:	1b1c      	subge	r4, r3, r4
 8003f5e:	1ae2      	sublt	r2, r4, r3
 8003f60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003f62:	bfbe      	ittt	lt
 8003f64:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003f66:	189b      	addlt	r3, r3, r2
 8003f68:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003f6a:	9b02      	ldr	r3, [sp, #8]
 8003f6c:	bfb8      	it	lt
 8003f6e:	2400      	movlt	r4, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bfbb      	ittet	lt
 8003f74:	9b06      	ldrlt	r3, [sp, #24]
 8003f76:	9a02      	ldrlt	r2, [sp, #8]
 8003f78:	9f06      	ldrge	r7, [sp, #24]
 8003f7a:	1a9f      	sublt	r7, r3, r2
 8003f7c:	bfac      	ite	ge
 8003f7e:	9b02      	ldrge	r3, [sp, #8]
 8003f80:	2300      	movlt	r3, #0
 8003f82:	e73e      	b.n	8003e02 <_dtoa_r+0x74a>
 8003f84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003f86:	9f06      	ldr	r7, [sp, #24]
 8003f88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003f8a:	e745      	b.n	8003e18 <_dtoa_r+0x760>
 8003f8c:	3fe00000 	.word	0x3fe00000
 8003f90:	40240000 	.word	0x40240000
 8003f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f96:	e76a      	b.n	8003e6e <_dtoa_r+0x7b6>
 8003f98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	dc19      	bgt.n	8003fd2 <_dtoa_r+0x91a>
 8003f9e:	9b04      	ldr	r3, [sp, #16]
 8003fa0:	b9bb      	cbnz	r3, 8003fd2 <_dtoa_r+0x91a>
 8003fa2:	9b05      	ldr	r3, [sp, #20]
 8003fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa8:	b99b      	cbnz	r3, 8003fd2 <_dtoa_r+0x91a>
 8003faa:	9b05      	ldr	r3, [sp, #20]
 8003fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fb0:	0d1b      	lsrs	r3, r3, #20
 8003fb2:	051b      	lsls	r3, r3, #20
 8003fb4:	b183      	cbz	r3, 8003fd8 <_dtoa_r+0x920>
 8003fb6:	f04f 0801 	mov.w	r8, #1
 8003fba:	9b06      	ldr	r3, [sp, #24]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	9306      	str	r3, [sp, #24]
 8003fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f47f af6a 	bne.w	8003ea2 <_dtoa_r+0x7ea>
 8003fce:	2001      	movs	r0, #1
 8003fd0:	e76f      	b.n	8003eb2 <_dtoa_r+0x7fa>
 8003fd2:	f04f 0800 	mov.w	r8, #0
 8003fd6:	e7f6      	b.n	8003fc6 <_dtoa_r+0x90e>
 8003fd8:	4698      	mov	r8, r3
 8003fda:	e7f4      	b.n	8003fc6 <_dtoa_r+0x90e>
 8003fdc:	f43f af7d 	beq.w	8003eda <_dtoa_r+0x822>
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	301c      	adds	r0, #28
 8003fe4:	e772      	b.n	8003ecc <_dtoa_r+0x814>
 8003fe6:	9b02      	ldr	r3, [sp, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dc36      	bgt.n	800405a <_dtoa_r+0x9a2>
 8003fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	dd33      	ble.n	800405a <_dtoa_r+0x9a2>
 8003ff2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003ff6:	f1bb 0f00 	cmp.w	fp, #0
 8003ffa:	d10d      	bne.n	8004018 <_dtoa_r+0x960>
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	465b      	mov	r3, fp
 8004000:	2205      	movs	r2, #5
 8004002:	4628      	mov	r0, r5
 8004004:	f000 fbf0 	bl	80047e8 <__multadd>
 8004008:	4601      	mov	r1, r0
 800400a:	4604      	mov	r4, r0
 800400c:	4650      	mov	r0, sl
 800400e:	f000 fe03 	bl	8004c18 <__mcmp>
 8004012:	2800      	cmp	r0, #0
 8004014:	f73f adb6 	bgt.w	8003b84 <_dtoa_r+0x4cc>
 8004018:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800401a:	9f08      	ldr	r7, [sp, #32]
 800401c:	ea6f 0903 	mvn.w	r9, r3
 8004020:	f04f 0800 	mov.w	r8, #0
 8004024:	4621      	mov	r1, r4
 8004026:	4628      	mov	r0, r5
 8004028:	f000 fbbc 	bl	80047a4 <_Bfree>
 800402c:	2e00      	cmp	r6, #0
 800402e:	f43f aea4 	beq.w	8003d7a <_dtoa_r+0x6c2>
 8004032:	f1b8 0f00 	cmp.w	r8, #0
 8004036:	d005      	beq.n	8004044 <_dtoa_r+0x98c>
 8004038:	45b0      	cmp	r8, r6
 800403a:	d003      	beq.n	8004044 <_dtoa_r+0x98c>
 800403c:	4641      	mov	r1, r8
 800403e:	4628      	mov	r0, r5
 8004040:	f000 fbb0 	bl	80047a4 <_Bfree>
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	f000 fbac 	bl	80047a4 <_Bfree>
 800404c:	e695      	b.n	8003d7a <_dtoa_r+0x6c2>
 800404e:	2400      	movs	r4, #0
 8004050:	4626      	mov	r6, r4
 8004052:	e7e1      	b.n	8004018 <_dtoa_r+0x960>
 8004054:	46c1      	mov	r9, r8
 8004056:	4626      	mov	r6, r4
 8004058:	e594      	b.n	8003b84 <_dtoa_r+0x4cc>
 800405a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800405c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80fc 	beq.w	800425e <_dtoa_r+0xba6>
 8004066:	2f00      	cmp	r7, #0
 8004068:	dd05      	ble.n	8004076 <_dtoa_r+0x9be>
 800406a:	4631      	mov	r1, r6
 800406c:	463a      	mov	r2, r7
 800406e:	4628      	mov	r0, r5
 8004070:	f000 fd66 	bl	8004b40 <__lshift>
 8004074:	4606      	mov	r6, r0
 8004076:	f1b8 0f00 	cmp.w	r8, #0
 800407a:	d05c      	beq.n	8004136 <_dtoa_r+0xa7e>
 800407c:	4628      	mov	r0, r5
 800407e:	6871      	ldr	r1, [r6, #4]
 8004080:	f000 fb50 	bl	8004724 <_Balloc>
 8004084:	4607      	mov	r7, r0
 8004086:	b928      	cbnz	r0, 8004094 <_dtoa_r+0x9dc>
 8004088:	4602      	mov	r2, r0
 800408a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800408e:	4b7e      	ldr	r3, [pc, #504]	; (8004288 <_dtoa_r+0xbd0>)
 8004090:	f7ff bb26 	b.w	80036e0 <_dtoa_r+0x28>
 8004094:	6932      	ldr	r2, [r6, #16]
 8004096:	f106 010c 	add.w	r1, r6, #12
 800409a:	3202      	adds	r2, #2
 800409c:	0092      	lsls	r2, r2, #2
 800409e:	300c      	adds	r0, #12
 80040a0:	f000 fb32 	bl	8004708 <memcpy>
 80040a4:	2201      	movs	r2, #1
 80040a6:	4639      	mov	r1, r7
 80040a8:	4628      	mov	r0, r5
 80040aa:	f000 fd49 	bl	8004b40 <__lshift>
 80040ae:	46b0      	mov	r8, r6
 80040b0:	4606      	mov	r6, r0
 80040b2:	9b08      	ldr	r3, [sp, #32]
 80040b4:	3301      	adds	r3, #1
 80040b6:	9302      	str	r3, [sp, #8]
 80040b8:	9b08      	ldr	r3, [sp, #32]
 80040ba:	445b      	add	r3, fp
 80040bc:	930a      	str	r3, [sp, #40]	; 0x28
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	9309      	str	r3, [sp, #36]	; 0x24
 80040c6:	9b02      	ldr	r3, [sp, #8]
 80040c8:	4621      	mov	r1, r4
 80040ca:	4650      	mov	r0, sl
 80040cc:	f103 3bff 	add.w	fp, r3, #4294967295
 80040d0:	f7ff fa62 	bl	8003598 <quorem>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4641      	mov	r1, r8
 80040d8:	3330      	adds	r3, #48	; 0x30
 80040da:	9004      	str	r0, [sp, #16]
 80040dc:	4650      	mov	r0, sl
 80040de:	930b      	str	r3, [sp, #44]	; 0x2c
 80040e0:	f000 fd9a 	bl	8004c18 <__mcmp>
 80040e4:	4632      	mov	r2, r6
 80040e6:	9006      	str	r0, [sp, #24]
 80040e8:	4621      	mov	r1, r4
 80040ea:	4628      	mov	r0, r5
 80040ec:	f000 fdb0 	bl	8004c50 <__mdiff>
 80040f0:	68c2      	ldr	r2, [r0, #12]
 80040f2:	4607      	mov	r7, r0
 80040f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040f6:	bb02      	cbnz	r2, 800413a <_dtoa_r+0xa82>
 80040f8:	4601      	mov	r1, r0
 80040fa:	4650      	mov	r0, sl
 80040fc:	f000 fd8c 	bl	8004c18 <__mcmp>
 8004100:	4602      	mov	r2, r0
 8004102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004104:	4639      	mov	r1, r7
 8004106:	4628      	mov	r0, r5
 8004108:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800410c:	f000 fb4a 	bl	80047a4 <_Bfree>
 8004110:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004114:	9f02      	ldr	r7, [sp, #8]
 8004116:	ea43 0102 	orr.w	r1, r3, r2
 800411a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800411c:	430b      	orrs	r3, r1
 800411e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004120:	d10d      	bne.n	800413e <_dtoa_r+0xa86>
 8004122:	2b39      	cmp	r3, #57	; 0x39
 8004124:	d027      	beq.n	8004176 <_dtoa_r+0xabe>
 8004126:	9a06      	ldr	r2, [sp, #24]
 8004128:	2a00      	cmp	r2, #0
 800412a:	dd01      	ble.n	8004130 <_dtoa_r+0xa78>
 800412c:	9b04      	ldr	r3, [sp, #16]
 800412e:	3331      	adds	r3, #49	; 0x31
 8004130:	f88b 3000 	strb.w	r3, [fp]
 8004134:	e776      	b.n	8004024 <_dtoa_r+0x96c>
 8004136:	4630      	mov	r0, r6
 8004138:	e7b9      	b.n	80040ae <_dtoa_r+0x9f6>
 800413a:	2201      	movs	r2, #1
 800413c:	e7e2      	b.n	8004104 <_dtoa_r+0xa4c>
 800413e:	9906      	ldr	r1, [sp, #24]
 8004140:	2900      	cmp	r1, #0
 8004142:	db04      	blt.n	800414e <_dtoa_r+0xa96>
 8004144:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004146:	4301      	orrs	r1, r0
 8004148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800414a:	4301      	orrs	r1, r0
 800414c:	d120      	bne.n	8004190 <_dtoa_r+0xad8>
 800414e:	2a00      	cmp	r2, #0
 8004150:	ddee      	ble.n	8004130 <_dtoa_r+0xa78>
 8004152:	4651      	mov	r1, sl
 8004154:	2201      	movs	r2, #1
 8004156:	4628      	mov	r0, r5
 8004158:	9302      	str	r3, [sp, #8]
 800415a:	f000 fcf1 	bl	8004b40 <__lshift>
 800415e:	4621      	mov	r1, r4
 8004160:	4682      	mov	sl, r0
 8004162:	f000 fd59 	bl	8004c18 <__mcmp>
 8004166:	2800      	cmp	r0, #0
 8004168:	9b02      	ldr	r3, [sp, #8]
 800416a:	dc02      	bgt.n	8004172 <_dtoa_r+0xaba>
 800416c:	d1e0      	bne.n	8004130 <_dtoa_r+0xa78>
 800416e:	07da      	lsls	r2, r3, #31
 8004170:	d5de      	bpl.n	8004130 <_dtoa_r+0xa78>
 8004172:	2b39      	cmp	r3, #57	; 0x39
 8004174:	d1da      	bne.n	800412c <_dtoa_r+0xa74>
 8004176:	2339      	movs	r3, #57	; 0x39
 8004178:	f88b 3000 	strb.w	r3, [fp]
 800417c:	463b      	mov	r3, r7
 800417e:	461f      	mov	r7, r3
 8004180:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004184:	3b01      	subs	r3, #1
 8004186:	2a39      	cmp	r2, #57	; 0x39
 8004188:	d050      	beq.n	800422c <_dtoa_r+0xb74>
 800418a:	3201      	adds	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	e749      	b.n	8004024 <_dtoa_r+0x96c>
 8004190:	2a00      	cmp	r2, #0
 8004192:	dd03      	ble.n	800419c <_dtoa_r+0xae4>
 8004194:	2b39      	cmp	r3, #57	; 0x39
 8004196:	d0ee      	beq.n	8004176 <_dtoa_r+0xabe>
 8004198:	3301      	adds	r3, #1
 800419a:	e7c9      	b.n	8004130 <_dtoa_r+0xa78>
 800419c:	9a02      	ldr	r2, [sp, #8]
 800419e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80041a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80041a4:	428a      	cmp	r2, r1
 80041a6:	d02a      	beq.n	80041fe <_dtoa_r+0xb46>
 80041a8:	4651      	mov	r1, sl
 80041aa:	2300      	movs	r3, #0
 80041ac:	220a      	movs	r2, #10
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 fb1a 	bl	80047e8 <__multadd>
 80041b4:	45b0      	cmp	r8, r6
 80041b6:	4682      	mov	sl, r0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	f04f 020a 	mov.w	r2, #10
 80041c0:	4641      	mov	r1, r8
 80041c2:	4628      	mov	r0, r5
 80041c4:	d107      	bne.n	80041d6 <_dtoa_r+0xb1e>
 80041c6:	f000 fb0f 	bl	80047e8 <__multadd>
 80041ca:	4680      	mov	r8, r0
 80041cc:	4606      	mov	r6, r0
 80041ce:	9b02      	ldr	r3, [sp, #8]
 80041d0:	3301      	adds	r3, #1
 80041d2:	9302      	str	r3, [sp, #8]
 80041d4:	e777      	b.n	80040c6 <_dtoa_r+0xa0e>
 80041d6:	f000 fb07 	bl	80047e8 <__multadd>
 80041da:	4631      	mov	r1, r6
 80041dc:	4680      	mov	r8, r0
 80041de:	2300      	movs	r3, #0
 80041e0:	220a      	movs	r2, #10
 80041e2:	4628      	mov	r0, r5
 80041e4:	f000 fb00 	bl	80047e8 <__multadd>
 80041e8:	4606      	mov	r6, r0
 80041ea:	e7f0      	b.n	80041ce <_dtoa_r+0xb16>
 80041ec:	f1bb 0f00 	cmp.w	fp, #0
 80041f0:	bfcc      	ite	gt
 80041f2:	465f      	movgt	r7, fp
 80041f4:	2701      	movle	r7, #1
 80041f6:	f04f 0800 	mov.w	r8, #0
 80041fa:	9a08      	ldr	r2, [sp, #32]
 80041fc:	4417      	add	r7, r2
 80041fe:	4651      	mov	r1, sl
 8004200:	2201      	movs	r2, #1
 8004202:	4628      	mov	r0, r5
 8004204:	9302      	str	r3, [sp, #8]
 8004206:	f000 fc9b 	bl	8004b40 <__lshift>
 800420a:	4621      	mov	r1, r4
 800420c:	4682      	mov	sl, r0
 800420e:	f000 fd03 	bl	8004c18 <__mcmp>
 8004212:	2800      	cmp	r0, #0
 8004214:	dcb2      	bgt.n	800417c <_dtoa_r+0xac4>
 8004216:	d102      	bne.n	800421e <_dtoa_r+0xb66>
 8004218:	9b02      	ldr	r3, [sp, #8]
 800421a:	07db      	lsls	r3, r3, #31
 800421c:	d4ae      	bmi.n	800417c <_dtoa_r+0xac4>
 800421e:	463b      	mov	r3, r7
 8004220:	461f      	mov	r7, r3
 8004222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004226:	2a30      	cmp	r2, #48	; 0x30
 8004228:	d0fa      	beq.n	8004220 <_dtoa_r+0xb68>
 800422a:	e6fb      	b.n	8004024 <_dtoa_r+0x96c>
 800422c:	9a08      	ldr	r2, [sp, #32]
 800422e:	429a      	cmp	r2, r3
 8004230:	d1a5      	bne.n	800417e <_dtoa_r+0xac6>
 8004232:	2331      	movs	r3, #49	; 0x31
 8004234:	f109 0901 	add.w	r9, r9, #1
 8004238:	7013      	strb	r3, [r2, #0]
 800423a:	e6f3      	b.n	8004024 <_dtoa_r+0x96c>
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <_dtoa_r+0xbd4>)
 800423e:	f7ff baa7 	b.w	8003790 <_dtoa_r+0xd8>
 8004242:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f aa80 	bne.w	800374a <_dtoa_r+0x92>
 800424a:	4b11      	ldr	r3, [pc, #68]	; (8004290 <_dtoa_r+0xbd8>)
 800424c:	f7ff baa0 	b.w	8003790 <_dtoa_r+0xd8>
 8004250:	f1bb 0f00 	cmp.w	fp, #0
 8004254:	dc03      	bgt.n	800425e <_dtoa_r+0xba6>
 8004256:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004258:	2b02      	cmp	r3, #2
 800425a:	f73f aecc 	bgt.w	8003ff6 <_dtoa_r+0x93e>
 800425e:	9f08      	ldr	r7, [sp, #32]
 8004260:	4621      	mov	r1, r4
 8004262:	4650      	mov	r0, sl
 8004264:	f7ff f998 	bl	8003598 <quorem>
 8004268:	9a08      	ldr	r2, [sp, #32]
 800426a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800426e:	f807 3b01 	strb.w	r3, [r7], #1
 8004272:	1aba      	subs	r2, r7, r2
 8004274:	4593      	cmp	fp, r2
 8004276:	ddb9      	ble.n	80041ec <_dtoa_r+0xb34>
 8004278:	4651      	mov	r1, sl
 800427a:	2300      	movs	r3, #0
 800427c:	220a      	movs	r2, #10
 800427e:	4628      	mov	r0, r5
 8004280:	f000 fab2 	bl	80047e8 <__multadd>
 8004284:	4682      	mov	sl, r0
 8004286:	e7eb      	b.n	8004260 <_dtoa_r+0xba8>
 8004288:	080057b3 	.word	0x080057b3
 800428c:	0800570c 	.word	0x0800570c
 8004290:	08005730 	.word	0x08005730

08004294 <__sflush_r>:
 8004294:	898a      	ldrh	r2, [r1, #12]
 8004296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429a:	4605      	mov	r5, r0
 800429c:	0710      	lsls	r0, r2, #28
 800429e:	460c      	mov	r4, r1
 80042a0:	d458      	bmi.n	8004354 <__sflush_r+0xc0>
 80042a2:	684b      	ldr	r3, [r1, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	dc05      	bgt.n	80042b4 <__sflush_r+0x20>
 80042a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	dc02      	bgt.n	80042b4 <__sflush_r+0x20>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042b6:	2e00      	cmp	r6, #0
 80042b8:	d0f9      	beq.n	80042ae <__sflush_r+0x1a>
 80042ba:	2300      	movs	r3, #0
 80042bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042c0:	682f      	ldr	r7, [r5, #0]
 80042c2:	602b      	str	r3, [r5, #0]
 80042c4:	d032      	beq.n	800432c <__sflush_r+0x98>
 80042c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	075a      	lsls	r2, r3, #29
 80042cc:	d505      	bpl.n	80042da <__sflush_r+0x46>
 80042ce:	6863      	ldr	r3, [r4, #4]
 80042d0:	1ac0      	subs	r0, r0, r3
 80042d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042d4:	b10b      	cbz	r3, 80042da <__sflush_r+0x46>
 80042d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042d8:	1ac0      	subs	r0, r0, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	4602      	mov	r2, r0
 80042de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042e0:	4628      	mov	r0, r5
 80042e2:	6a21      	ldr	r1, [r4, #32]
 80042e4:	47b0      	blx	r6
 80042e6:	1c43      	adds	r3, r0, #1
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	d106      	bne.n	80042fa <__sflush_r+0x66>
 80042ec:	6829      	ldr	r1, [r5, #0]
 80042ee:	291d      	cmp	r1, #29
 80042f0:	d82c      	bhi.n	800434c <__sflush_r+0xb8>
 80042f2:	4a2a      	ldr	r2, [pc, #168]	; (800439c <__sflush_r+0x108>)
 80042f4:	40ca      	lsrs	r2, r1
 80042f6:	07d6      	lsls	r6, r2, #31
 80042f8:	d528      	bpl.n	800434c <__sflush_r+0xb8>
 80042fa:	2200      	movs	r2, #0
 80042fc:	6062      	str	r2, [r4, #4]
 80042fe:	6922      	ldr	r2, [r4, #16]
 8004300:	04d9      	lsls	r1, r3, #19
 8004302:	6022      	str	r2, [r4, #0]
 8004304:	d504      	bpl.n	8004310 <__sflush_r+0x7c>
 8004306:	1c42      	adds	r2, r0, #1
 8004308:	d101      	bne.n	800430e <__sflush_r+0x7a>
 800430a:	682b      	ldr	r3, [r5, #0]
 800430c:	b903      	cbnz	r3, 8004310 <__sflush_r+0x7c>
 800430e:	6560      	str	r0, [r4, #84]	; 0x54
 8004310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004312:	602f      	str	r7, [r5, #0]
 8004314:	2900      	cmp	r1, #0
 8004316:	d0ca      	beq.n	80042ae <__sflush_r+0x1a>
 8004318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800431c:	4299      	cmp	r1, r3
 800431e:	d002      	beq.n	8004326 <__sflush_r+0x92>
 8004320:	4628      	mov	r0, r5
 8004322:	f000 fd8f 	bl	8004e44 <_free_r>
 8004326:	2000      	movs	r0, #0
 8004328:	6360      	str	r0, [r4, #52]	; 0x34
 800432a:	e7c1      	b.n	80042b0 <__sflush_r+0x1c>
 800432c:	6a21      	ldr	r1, [r4, #32]
 800432e:	2301      	movs	r3, #1
 8004330:	4628      	mov	r0, r5
 8004332:	47b0      	blx	r6
 8004334:	1c41      	adds	r1, r0, #1
 8004336:	d1c7      	bne.n	80042c8 <__sflush_r+0x34>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0c4      	beq.n	80042c8 <__sflush_r+0x34>
 800433e:	2b1d      	cmp	r3, #29
 8004340:	d001      	beq.n	8004346 <__sflush_r+0xb2>
 8004342:	2b16      	cmp	r3, #22
 8004344:	d101      	bne.n	800434a <__sflush_r+0xb6>
 8004346:	602f      	str	r7, [r5, #0]
 8004348:	e7b1      	b.n	80042ae <__sflush_r+0x1a>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004350:	81a3      	strh	r3, [r4, #12]
 8004352:	e7ad      	b.n	80042b0 <__sflush_r+0x1c>
 8004354:	690f      	ldr	r7, [r1, #16]
 8004356:	2f00      	cmp	r7, #0
 8004358:	d0a9      	beq.n	80042ae <__sflush_r+0x1a>
 800435a:	0793      	lsls	r3, r2, #30
 800435c:	bf18      	it	ne
 800435e:	2300      	movne	r3, #0
 8004360:	680e      	ldr	r6, [r1, #0]
 8004362:	bf08      	it	eq
 8004364:	694b      	ldreq	r3, [r1, #20]
 8004366:	eba6 0807 	sub.w	r8, r6, r7
 800436a:	600f      	str	r7, [r1, #0]
 800436c:	608b      	str	r3, [r1, #8]
 800436e:	f1b8 0f00 	cmp.w	r8, #0
 8004372:	dd9c      	ble.n	80042ae <__sflush_r+0x1a>
 8004374:	4643      	mov	r3, r8
 8004376:	463a      	mov	r2, r7
 8004378:	4628      	mov	r0, r5
 800437a:	6a21      	ldr	r1, [r4, #32]
 800437c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800437e:	47b0      	blx	r6
 8004380:	2800      	cmp	r0, #0
 8004382:	dc06      	bgt.n	8004392 <__sflush_r+0xfe>
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	f04f 30ff 	mov.w	r0, #4294967295
 800438a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438e:	81a3      	strh	r3, [r4, #12]
 8004390:	e78e      	b.n	80042b0 <__sflush_r+0x1c>
 8004392:	4407      	add	r7, r0
 8004394:	eba8 0800 	sub.w	r8, r8, r0
 8004398:	e7e9      	b.n	800436e <__sflush_r+0xda>
 800439a:	bf00      	nop
 800439c:	20400001 	.word	0x20400001

080043a0 <_fflush_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	690b      	ldr	r3, [r1, #16]
 80043a4:	4605      	mov	r5, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	b913      	cbnz	r3, 80043b0 <_fflush_r+0x10>
 80043aa:	2500      	movs	r5, #0
 80043ac:	4628      	mov	r0, r5
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	b118      	cbz	r0, 80043ba <_fflush_r+0x1a>
 80043b2:	6983      	ldr	r3, [r0, #24]
 80043b4:	b90b      	cbnz	r3, 80043ba <_fflush_r+0x1a>
 80043b6:	f000 f887 	bl	80044c8 <__sinit>
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <_fflush_r+0x6c>)
 80043bc:	429c      	cmp	r4, r3
 80043be:	d11b      	bne.n	80043f8 <_fflush_r+0x58>
 80043c0:	686c      	ldr	r4, [r5, #4]
 80043c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0ef      	beq.n	80043aa <_fflush_r+0xa>
 80043ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043cc:	07d0      	lsls	r0, r2, #31
 80043ce:	d404      	bmi.n	80043da <_fflush_r+0x3a>
 80043d0:	0599      	lsls	r1, r3, #22
 80043d2:	d402      	bmi.n	80043da <_fflush_r+0x3a>
 80043d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043d6:	f000 f91a 	bl	800460e <__retarget_lock_acquire_recursive>
 80043da:	4628      	mov	r0, r5
 80043dc:	4621      	mov	r1, r4
 80043de:	f7ff ff59 	bl	8004294 <__sflush_r>
 80043e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043e4:	4605      	mov	r5, r0
 80043e6:	07da      	lsls	r2, r3, #31
 80043e8:	d4e0      	bmi.n	80043ac <_fflush_r+0xc>
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	059b      	lsls	r3, r3, #22
 80043ee:	d4dd      	bmi.n	80043ac <_fflush_r+0xc>
 80043f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043f2:	f000 f90d 	bl	8004610 <__retarget_lock_release_recursive>
 80043f6:	e7d9      	b.n	80043ac <_fflush_r+0xc>
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <_fflush_r+0x70>)
 80043fa:	429c      	cmp	r4, r3
 80043fc:	d101      	bne.n	8004402 <_fflush_r+0x62>
 80043fe:	68ac      	ldr	r4, [r5, #8]
 8004400:	e7df      	b.n	80043c2 <_fflush_r+0x22>
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <_fflush_r+0x74>)
 8004404:	429c      	cmp	r4, r3
 8004406:	bf08      	it	eq
 8004408:	68ec      	ldreq	r4, [r5, #12]
 800440a:	e7da      	b.n	80043c2 <_fflush_r+0x22>
 800440c:	080057e4 	.word	0x080057e4
 8004410:	08005804 	.word	0x08005804
 8004414:	080057c4 	.word	0x080057c4

08004418 <std>:
 8004418:	2300      	movs	r3, #0
 800441a:	b510      	push	{r4, lr}
 800441c:	4604      	mov	r4, r0
 800441e:	e9c0 3300 	strd	r3, r3, [r0]
 8004422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004426:	6083      	str	r3, [r0, #8]
 8004428:	8181      	strh	r1, [r0, #12]
 800442a:	6643      	str	r3, [r0, #100]	; 0x64
 800442c:	81c2      	strh	r2, [r0, #14]
 800442e:	6183      	str	r3, [r0, #24]
 8004430:	4619      	mov	r1, r3
 8004432:	2208      	movs	r2, #8
 8004434:	305c      	adds	r0, #92	; 0x5c
 8004436:	f7fe fb69 	bl	8002b0c <memset>
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <std+0x38>)
 800443c:	6224      	str	r4, [r4, #32]
 800443e:	6263      	str	r3, [r4, #36]	; 0x24
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <std+0x3c>)
 8004442:	62a3      	str	r3, [r4, #40]	; 0x28
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <std+0x40>)
 8004446:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <std+0x44>)
 800444a:	6323      	str	r3, [r4, #48]	; 0x30
 800444c:	bd10      	pop	{r4, pc}
 800444e:	bf00      	nop
 8004450:	08005261 	.word	0x08005261
 8004454:	08005283 	.word	0x08005283
 8004458:	080052bb 	.word	0x080052bb
 800445c:	080052df 	.word	0x080052df

08004460 <_cleanup_r>:
 8004460:	4901      	ldr	r1, [pc, #4]	; (8004468 <_cleanup_r+0x8>)
 8004462:	f000 b8af 	b.w	80045c4 <_fwalk_reent>
 8004466:	bf00      	nop
 8004468:	080043a1 	.word	0x080043a1

0800446c <__sfmoreglue>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	2568      	movs	r5, #104	; 0x68
 8004470:	1e4a      	subs	r2, r1, #1
 8004472:	4355      	muls	r5, r2
 8004474:	460e      	mov	r6, r1
 8004476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800447a:	f000 fd2f 	bl	8004edc <_malloc_r>
 800447e:	4604      	mov	r4, r0
 8004480:	b140      	cbz	r0, 8004494 <__sfmoreglue+0x28>
 8004482:	2100      	movs	r1, #0
 8004484:	e9c0 1600 	strd	r1, r6, [r0]
 8004488:	300c      	adds	r0, #12
 800448a:	60a0      	str	r0, [r4, #8]
 800448c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004490:	f7fe fb3c 	bl	8002b0c <memset>
 8004494:	4620      	mov	r0, r4
 8004496:	bd70      	pop	{r4, r5, r6, pc}

08004498 <__sfp_lock_acquire>:
 8004498:	4801      	ldr	r0, [pc, #4]	; (80044a0 <__sfp_lock_acquire+0x8>)
 800449a:	f000 b8b8 	b.w	800460e <__retarget_lock_acquire_recursive>
 800449e:	bf00      	nop
 80044a0:	2000026c 	.word	0x2000026c

080044a4 <__sfp_lock_release>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__sfp_lock_release+0x8>)
 80044a6:	f000 b8b3 	b.w	8004610 <__retarget_lock_release_recursive>
 80044aa:	bf00      	nop
 80044ac:	2000026c 	.word	0x2000026c

080044b0 <__sinit_lock_acquire>:
 80044b0:	4801      	ldr	r0, [pc, #4]	; (80044b8 <__sinit_lock_acquire+0x8>)
 80044b2:	f000 b8ac 	b.w	800460e <__retarget_lock_acquire_recursive>
 80044b6:	bf00      	nop
 80044b8:	20000267 	.word	0x20000267

080044bc <__sinit_lock_release>:
 80044bc:	4801      	ldr	r0, [pc, #4]	; (80044c4 <__sinit_lock_release+0x8>)
 80044be:	f000 b8a7 	b.w	8004610 <__retarget_lock_release_recursive>
 80044c2:	bf00      	nop
 80044c4:	20000267 	.word	0x20000267

080044c8 <__sinit>:
 80044c8:	b510      	push	{r4, lr}
 80044ca:	4604      	mov	r4, r0
 80044cc:	f7ff fff0 	bl	80044b0 <__sinit_lock_acquire>
 80044d0:	69a3      	ldr	r3, [r4, #24]
 80044d2:	b11b      	cbz	r3, 80044dc <__sinit+0x14>
 80044d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d8:	f7ff bff0 	b.w	80044bc <__sinit_lock_release>
 80044dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044e0:	6523      	str	r3, [r4, #80]	; 0x50
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <__sinit+0x68>)
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <__sinit+0x6c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80044ea:	42a3      	cmp	r3, r4
 80044ec:	bf08      	it	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	4620      	mov	r0, r4
 80044f2:	bf08      	it	eq
 80044f4:	61a3      	streq	r3, [r4, #24]
 80044f6:	f000 f81f 	bl	8004538 <__sfp>
 80044fa:	6060      	str	r0, [r4, #4]
 80044fc:	4620      	mov	r0, r4
 80044fe:	f000 f81b 	bl	8004538 <__sfp>
 8004502:	60a0      	str	r0, [r4, #8]
 8004504:	4620      	mov	r0, r4
 8004506:	f000 f817 	bl	8004538 <__sfp>
 800450a:	2200      	movs	r2, #0
 800450c:	2104      	movs	r1, #4
 800450e:	60e0      	str	r0, [r4, #12]
 8004510:	6860      	ldr	r0, [r4, #4]
 8004512:	f7ff ff81 	bl	8004418 <std>
 8004516:	2201      	movs	r2, #1
 8004518:	2109      	movs	r1, #9
 800451a:	68a0      	ldr	r0, [r4, #8]
 800451c:	f7ff ff7c 	bl	8004418 <std>
 8004520:	2202      	movs	r2, #2
 8004522:	2112      	movs	r1, #18
 8004524:	68e0      	ldr	r0, [r4, #12]
 8004526:	f7ff ff77 	bl	8004418 <std>
 800452a:	2301      	movs	r3, #1
 800452c:	61a3      	str	r3, [r4, #24]
 800452e:	e7d1      	b.n	80044d4 <__sinit+0xc>
 8004530:	080056f8 	.word	0x080056f8
 8004534:	08004461 	.word	0x08004461

08004538 <__sfp>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	4607      	mov	r7, r0
 800453c:	f7ff ffac 	bl	8004498 <__sfp_lock_acquire>
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <__sfp+0x84>)
 8004542:	681e      	ldr	r6, [r3, #0]
 8004544:	69b3      	ldr	r3, [r6, #24]
 8004546:	b913      	cbnz	r3, 800454e <__sfp+0x16>
 8004548:	4630      	mov	r0, r6
 800454a:	f7ff ffbd 	bl	80044c8 <__sinit>
 800454e:	3648      	adds	r6, #72	; 0x48
 8004550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004554:	3b01      	subs	r3, #1
 8004556:	d503      	bpl.n	8004560 <__sfp+0x28>
 8004558:	6833      	ldr	r3, [r6, #0]
 800455a:	b30b      	cbz	r3, 80045a0 <__sfp+0x68>
 800455c:	6836      	ldr	r6, [r6, #0]
 800455e:	e7f7      	b.n	8004550 <__sfp+0x18>
 8004560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004564:	b9d5      	cbnz	r5, 800459c <__sfp+0x64>
 8004566:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <__sfp+0x88>)
 8004568:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800456c:	60e3      	str	r3, [r4, #12]
 800456e:	6665      	str	r5, [r4, #100]	; 0x64
 8004570:	f000 f84c 	bl	800460c <__retarget_lock_init_recursive>
 8004574:	f7ff ff96 	bl	80044a4 <__sfp_lock_release>
 8004578:	2208      	movs	r2, #8
 800457a:	4629      	mov	r1, r5
 800457c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004580:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004584:	6025      	str	r5, [r4, #0]
 8004586:	61a5      	str	r5, [r4, #24]
 8004588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800458c:	f7fe fabe 	bl	8002b0c <memset>
 8004590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004598:	4620      	mov	r0, r4
 800459a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800459c:	3468      	adds	r4, #104	; 0x68
 800459e:	e7d9      	b.n	8004554 <__sfp+0x1c>
 80045a0:	2104      	movs	r1, #4
 80045a2:	4638      	mov	r0, r7
 80045a4:	f7ff ff62 	bl	800446c <__sfmoreglue>
 80045a8:	4604      	mov	r4, r0
 80045aa:	6030      	str	r0, [r6, #0]
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d1d5      	bne.n	800455c <__sfp+0x24>
 80045b0:	f7ff ff78 	bl	80044a4 <__sfp_lock_release>
 80045b4:	230c      	movs	r3, #12
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	e7ee      	b.n	8004598 <__sfp+0x60>
 80045ba:	bf00      	nop
 80045bc:	080056f8 	.word	0x080056f8
 80045c0:	ffff0001 	.word	0xffff0001

080045c4 <_fwalk_reent>:
 80045c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c8:	4606      	mov	r6, r0
 80045ca:	4688      	mov	r8, r1
 80045cc:	2700      	movs	r7, #0
 80045ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045d6:	f1b9 0901 	subs.w	r9, r9, #1
 80045da:	d505      	bpl.n	80045e8 <_fwalk_reent+0x24>
 80045dc:	6824      	ldr	r4, [r4, #0]
 80045de:	2c00      	cmp	r4, #0
 80045e0:	d1f7      	bne.n	80045d2 <_fwalk_reent+0xe>
 80045e2:	4638      	mov	r0, r7
 80045e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045e8:	89ab      	ldrh	r3, [r5, #12]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d907      	bls.n	80045fe <_fwalk_reent+0x3a>
 80045ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045f2:	3301      	adds	r3, #1
 80045f4:	d003      	beq.n	80045fe <_fwalk_reent+0x3a>
 80045f6:	4629      	mov	r1, r5
 80045f8:	4630      	mov	r0, r6
 80045fa:	47c0      	blx	r8
 80045fc:	4307      	orrs	r7, r0
 80045fe:	3568      	adds	r5, #104	; 0x68
 8004600:	e7e9      	b.n	80045d6 <_fwalk_reent+0x12>
	...

08004604 <_localeconv_r>:
 8004604:	4800      	ldr	r0, [pc, #0]	; (8004608 <_localeconv_r+0x4>)
 8004606:	4770      	bx	lr
 8004608:	20000160 	.word	0x20000160

0800460c <__retarget_lock_init_recursive>:
 800460c:	4770      	bx	lr

0800460e <__retarget_lock_acquire_recursive>:
 800460e:	4770      	bx	lr

08004610 <__retarget_lock_release_recursive>:
 8004610:	4770      	bx	lr

08004612 <__swhatbuf_r>:
 8004612:	b570      	push	{r4, r5, r6, lr}
 8004614:	460e      	mov	r6, r1
 8004616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800461a:	4614      	mov	r4, r2
 800461c:	2900      	cmp	r1, #0
 800461e:	461d      	mov	r5, r3
 8004620:	b096      	sub	sp, #88	; 0x58
 8004622:	da07      	bge.n	8004634 <__swhatbuf_r+0x22>
 8004624:	2300      	movs	r3, #0
 8004626:	602b      	str	r3, [r5, #0]
 8004628:	89b3      	ldrh	r3, [r6, #12]
 800462a:	061a      	lsls	r2, r3, #24
 800462c:	d410      	bmi.n	8004650 <__swhatbuf_r+0x3e>
 800462e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004632:	e00e      	b.n	8004652 <__swhatbuf_r+0x40>
 8004634:	466a      	mov	r2, sp
 8004636:	f000 ff69 	bl	800550c <_fstat_r>
 800463a:	2800      	cmp	r0, #0
 800463c:	dbf2      	blt.n	8004624 <__swhatbuf_r+0x12>
 800463e:	9a01      	ldr	r2, [sp, #4]
 8004640:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004644:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004648:	425a      	negs	r2, r3
 800464a:	415a      	adcs	r2, r3
 800464c:	602a      	str	r2, [r5, #0]
 800464e:	e7ee      	b.n	800462e <__swhatbuf_r+0x1c>
 8004650:	2340      	movs	r3, #64	; 0x40
 8004652:	2000      	movs	r0, #0
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	b016      	add	sp, #88	; 0x58
 8004658:	bd70      	pop	{r4, r5, r6, pc}
	...

0800465c <__smakebuf_r>:
 800465c:	898b      	ldrh	r3, [r1, #12]
 800465e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004660:	079d      	lsls	r5, r3, #30
 8004662:	4606      	mov	r6, r0
 8004664:	460c      	mov	r4, r1
 8004666:	d507      	bpl.n	8004678 <__smakebuf_r+0x1c>
 8004668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	6123      	str	r3, [r4, #16]
 8004670:	2301      	movs	r3, #1
 8004672:	6163      	str	r3, [r4, #20]
 8004674:	b002      	add	sp, #8
 8004676:	bd70      	pop	{r4, r5, r6, pc}
 8004678:	466a      	mov	r2, sp
 800467a:	ab01      	add	r3, sp, #4
 800467c:	f7ff ffc9 	bl	8004612 <__swhatbuf_r>
 8004680:	9900      	ldr	r1, [sp, #0]
 8004682:	4605      	mov	r5, r0
 8004684:	4630      	mov	r0, r6
 8004686:	f000 fc29 	bl	8004edc <_malloc_r>
 800468a:	b948      	cbnz	r0, 80046a0 <__smakebuf_r+0x44>
 800468c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004690:	059a      	lsls	r2, r3, #22
 8004692:	d4ef      	bmi.n	8004674 <__smakebuf_r+0x18>
 8004694:	f023 0303 	bic.w	r3, r3, #3
 8004698:	f043 0302 	orr.w	r3, r3, #2
 800469c:	81a3      	strh	r3, [r4, #12]
 800469e:	e7e3      	b.n	8004668 <__smakebuf_r+0xc>
 80046a0:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <__smakebuf_r+0x7c>)
 80046a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	6020      	str	r0, [r4, #0]
 80046a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ac:	81a3      	strh	r3, [r4, #12]
 80046ae:	9b00      	ldr	r3, [sp, #0]
 80046b0:	6120      	str	r0, [r4, #16]
 80046b2:	6163      	str	r3, [r4, #20]
 80046b4:	9b01      	ldr	r3, [sp, #4]
 80046b6:	b15b      	cbz	r3, 80046d0 <__smakebuf_r+0x74>
 80046b8:	4630      	mov	r0, r6
 80046ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046be:	f000 ff37 	bl	8005530 <_isatty_r>
 80046c2:	b128      	cbz	r0, 80046d0 <__smakebuf_r+0x74>
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	f023 0303 	bic.w	r3, r3, #3
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	89a0      	ldrh	r0, [r4, #12]
 80046d2:	4305      	orrs	r5, r0
 80046d4:	81a5      	strh	r5, [r4, #12]
 80046d6:	e7cd      	b.n	8004674 <__smakebuf_r+0x18>
 80046d8:	08004461 	.word	0x08004461

080046dc <malloc>:
 80046dc:	4b02      	ldr	r3, [pc, #8]	; (80046e8 <malloc+0xc>)
 80046de:	4601      	mov	r1, r0
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	f000 bbfb 	b.w	8004edc <_malloc_r>
 80046e6:	bf00      	nop
 80046e8:	2000000c 	.word	0x2000000c

080046ec <memchr>:
 80046ec:	4603      	mov	r3, r0
 80046ee:	b510      	push	{r4, lr}
 80046f0:	b2c9      	uxtb	r1, r1
 80046f2:	4402      	add	r2, r0
 80046f4:	4293      	cmp	r3, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	d101      	bne.n	80046fe <memchr+0x12>
 80046fa:	2000      	movs	r0, #0
 80046fc:	e003      	b.n	8004706 <memchr+0x1a>
 80046fe:	7804      	ldrb	r4, [r0, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	428c      	cmp	r4, r1
 8004704:	d1f6      	bne.n	80046f4 <memchr+0x8>
 8004706:	bd10      	pop	{r4, pc}

08004708 <memcpy>:
 8004708:	440a      	add	r2, r1
 800470a:	4291      	cmp	r1, r2
 800470c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004710:	d100      	bne.n	8004714 <memcpy+0xc>
 8004712:	4770      	bx	lr
 8004714:	b510      	push	{r4, lr}
 8004716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800471a:	4291      	cmp	r1, r2
 800471c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004720:	d1f9      	bne.n	8004716 <memcpy+0xe>
 8004722:	bd10      	pop	{r4, pc}

08004724 <_Balloc>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004728:	4604      	mov	r4, r0
 800472a:	460d      	mov	r5, r1
 800472c:	b976      	cbnz	r6, 800474c <_Balloc+0x28>
 800472e:	2010      	movs	r0, #16
 8004730:	f7ff ffd4 	bl	80046dc <malloc>
 8004734:	4602      	mov	r2, r0
 8004736:	6260      	str	r0, [r4, #36]	; 0x24
 8004738:	b920      	cbnz	r0, 8004744 <_Balloc+0x20>
 800473a:	2166      	movs	r1, #102	; 0x66
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <_Balloc+0x78>)
 800473e:	4818      	ldr	r0, [pc, #96]	; (80047a0 <_Balloc+0x7c>)
 8004740:	f000 fea4 	bl	800548c <__assert_func>
 8004744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004748:	6006      	str	r6, [r0, #0]
 800474a:	60c6      	str	r6, [r0, #12]
 800474c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800474e:	68f3      	ldr	r3, [r6, #12]
 8004750:	b183      	cbz	r3, 8004774 <_Balloc+0x50>
 8004752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800475a:	b9b8      	cbnz	r0, 800478c <_Balloc+0x68>
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f605 	lsl.w	r6, r1, r5
 8004762:	1d72      	adds	r2, r6, #5
 8004764:	4620      	mov	r0, r4
 8004766:	0092      	lsls	r2, r2, #2
 8004768:	f000 fb5e 	bl	8004e28 <_calloc_r>
 800476c:	b160      	cbz	r0, 8004788 <_Balloc+0x64>
 800476e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004772:	e00e      	b.n	8004792 <_Balloc+0x6e>
 8004774:	2221      	movs	r2, #33	; 0x21
 8004776:	2104      	movs	r1, #4
 8004778:	4620      	mov	r0, r4
 800477a:	f000 fb55 	bl	8004e28 <_calloc_r>
 800477e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004780:	60f0      	str	r0, [r6, #12]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e4      	bne.n	8004752 <_Balloc+0x2e>
 8004788:	2000      	movs	r0, #0
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	6802      	ldr	r2, [r0, #0]
 800478e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004792:	2300      	movs	r3, #0
 8004794:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004798:	e7f7      	b.n	800478a <_Balloc+0x66>
 800479a:	bf00      	nop
 800479c:	0800573d 	.word	0x0800573d
 80047a0:	08005824 	.word	0x08005824

080047a4 <_Bfree>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80047a8:	4605      	mov	r5, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	b976      	cbnz	r6, 80047cc <_Bfree+0x28>
 80047ae:	2010      	movs	r0, #16
 80047b0:	f7ff ff94 	bl	80046dc <malloc>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6268      	str	r0, [r5, #36]	; 0x24
 80047b8:	b920      	cbnz	r0, 80047c4 <_Bfree+0x20>
 80047ba:	218a      	movs	r1, #138	; 0x8a
 80047bc:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <_Bfree+0x3c>)
 80047be:	4809      	ldr	r0, [pc, #36]	; (80047e4 <_Bfree+0x40>)
 80047c0:	f000 fe64 	bl	800548c <__assert_func>
 80047c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047c8:	6006      	str	r6, [r0, #0]
 80047ca:	60c6      	str	r6, [r0, #12]
 80047cc:	b13c      	cbz	r4, 80047de <_Bfree+0x3a>
 80047ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047d0:	6862      	ldr	r2, [r4, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047d8:	6021      	str	r1, [r4, #0]
 80047da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	0800573d 	.word	0x0800573d
 80047e4:	08005824 	.word	0x08005824

080047e8 <__multadd>:
 80047e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ec:	4698      	mov	r8, r3
 80047ee:	460c      	mov	r4, r1
 80047f0:	2300      	movs	r3, #0
 80047f2:	690e      	ldr	r6, [r1, #16]
 80047f4:	4607      	mov	r7, r0
 80047f6:	f101 0014 	add.w	r0, r1, #20
 80047fa:	6805      	ldr	r5, [r0, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	b2a9      	uxth	r1, r5
 8004800:	fb02 8101 	mla	r1, r2, r1, r8
 8004804:	0c2d      	lsrs	r5, r5, #16
 8004806:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800480a:	fb02 c505 	mla	r5, r2, r5, ip
 800480e:	b289      	uxth	r1, r1
 8004810:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004814:	429e      	cmp	r6, r3
 8004816:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800481a:	f840 1b04 	str.w	r1, [r0], #4
 800481e:	dcec      	bgt.n	80047fa <__multadd+0x12>
 8004820:	f1b8 0f00 	cmp.w	r8, #0
 8004824:	d022      	beq.n	800486c <__multadd+0x84>
 8004826:	68a3      	ldr	r3, [r4, #8]
 8004828:	42b3      	cmp	r3, r6
 800482a:	dc19      	bgt.n	8004860 <__multadd+0x78>
 800482c:	6861      	ldr	r1, [r4, #4]
 800482e:	4638      	mov	r0, r7
 8004830:	3101      	adds	r1, #1
 8004832:	f7ff ff77 	bl	8004724 <_Balloc>
 8004836:	4605      	mov	r5, r0
 8004838:	b928      	cbnz	r0, 8004846 <__multadd+0x5e>
 800483a:	4602      	mov	r2, r0
 800483c:	21b5      	movs	r1, #181	; 0xb5
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <__multadd+0x8c>)
 8004840:	480d      	ldr	r0, [pc, #52]	; (8004878 <__multadd+0x90>)
 8004842:	f000 fe23 	bl	800548c <__assert_func>
 8004846:	6922      	ldr	r2, [r4, #16]
 8004848:	f104 010c 	add.w	r1, r4, #12
 800484c:	3202      	adds	r2, #2
 800484e:	0092      	lsls	r2, r2, #2
 8004850:	300c      	adds	r0, #12
 8004852:	f7ff ff59 	bl	8004708 <memcpy>
 8004856:	4621      	mov	r1, r4
 8004858:	4638      	mov	r0, r7
 800485a:	f7ff ffa3 	bl	80047a4 <_Bfree>
 800485e:	462c      	mov	r4, r5
 8004860:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004864:	3601      	adds	r6, #1
 8004866:	f8c3 8014 	str.w	r8, [r3, #20]
 800486a:	6126      	str	r6, [r4, #16]
 800486c:	4620      	mov	r0, r4
 800486e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004872:	bf00      	nop
 8004874:	080057b3 	.word	0x080057b3
 8004878:	08005824 	.word	0x08005824

0800487c <__hi0bits>:
 800487c:	0c02      	lsrs	r2, r0, #16
 800487e:	0412      	lsls	r2, r2, #16
 8004880:	4603      	mov	r3, r0
 8004882:	b9ca      	cbnz	r2, 80048b8 <__hi0bits+0x3c>
 8004884:	0403      	lsls	r3, r0, #16
 8004886:	2010      	movs	r0, #16
 8004888:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800488c:	bf04      	itt	eq
 800488e:	021b      	lsleq	r3, r3, #8
 8004890:	3008      	addeq	r0, #8
 8004892:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004896:	bf04      	itt	eq
 8004898:	011b      	lsleq	r3, r3, #4
 800489a:	3004      	addeq	r0, #4
 800489c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80048a0:	bf04      	itt	eq
 80048a2:	009b      	lsleq	r3, r3, #2
 80048a4:	3002      	addeq	r0, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	db05      	blt.n	80048b6 <__hi0bits+0x3a>
 80048aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80048ae:	f100 0001 	add.w	r0, r0, #1
 80048b2:	bf08      	it	eq
 80048b4:	2020      	moveq	r0, #32
 80048b6:	4770      	bx	lr
 80048b8:	2000      	movs	r0, #0
 80048ba:	e7e5      	b.n	8004888 <__hi0bits+0xc>

080048bc <__lo0bits>:
 80048bc:	6803      	ldr	r3, [r0, #0]
 80048be:	4602      	mov	r2, r0
 80048c0:	f013 0007 	ands.w	r0, r3, #7
 80048c4:	d00b      	beq.n	80048de <__lo0bits+0x22>
 80048c6:	07d9      	lsls	r1, r3, #31
 80048c8:	d422      	bmi.n	8004910 <__lo0bits+0x54>
 80048ca:	0798      	lsls	r0, r3, #30
 80048cc:	bf49      	itett	mi
 80048ce:	085b      	lsrmi	r3, r3, #1
 80048d0:	089b      	lsrpl	r3, r3, #2
 80048d2:	2001      	movmi	r0, #1
 80048d4:	6013      	strmi	r3, [r2, #0]
 80048d6:	bf5c      	itt	pl
 80048d8:	2002      	movpl	r0, #2
 80048da:	6013      	strpl	r3, [r2, #0]
 80048dc:	4770      	bx	lr
 80048de:	b299      	uxth	r1, r3
 80048e0:	b909      	cbnz	r1, 80048e6 <__lo0bits+0x2a>
 80048e2:	2010      	movs	r0, #16
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80048ea:	bf04      	itt	eq
 80048ec:	0a1b      	lsreq	r3, r3, #8
 80048ee:	3008      	addeq	r0, #8
 80048f0:	0719      	lsls	r1, r3, #28
 80048f2:	bf04      	itt	eq
 80048f4:	091b      	lsreq	r3, r3, #4
 80048f6:	3004      	addeq	r0, #4
 80048f8:	0799      	lsls	r1, r3, #30
 80048fa:	bf04      	itt	eq
 80048fc:	089b      	lsreq	r3, r3, #2
 80048fe:	3002      	addeq	r0, #2
 8004900:	07d9      	lsls	r1, r3, #31
 8004902:	d403      	bmi.n	800490c <__lo0bits+0x50>
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	f100 0001 	add.w	r0, r0, #1
 800490a:	d003      	beq.n	8004914 <__lo0bits+0x58>
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	4770      	bx	lr
 8004910:	2000      	movs	r0, #0
 8004912:	4770      	bx	lr
 8004914:	2020      	movs	r0, #32
 8004916:	4770      	bx	lr

08004918 <__i2b>:
 8004918:	b510      	push	{r4, lr}
 800491a:	460c      	mov	r4, r1
 800491c:	2101      	movs	r1, #1
 800491e:	f7ff ff01 	bl	8004724 <_Balloc>
 8004922:	4602      	mov	r2, r0
 8004924:	b928      	cbnz	r0, 8004932 <__i2b+0x1a>
 8004926:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800492a:	4b04      	ldr	r3, [pc, #16]	; (800493c <__i2b+0x24>)
 800492c:	4804      	ldr	r0, [pc, #16]	; (8004940 <__i2b+0x28>)
 800492e:	f000 fdad 	bl	800548c <__assert_func>
 8004932:	2301      	movs	r3, #1
 8004934:	6144      	str	r4, [r0, #20]
 8004936:	6103      	str	r3, [r0, #16]
 8004938:	bd10      	pop	{r4, pc}
 800493a:	bf00      	nop
 800493c:	080057b3 	.word	0x080057b3
 8004940:	08005824 	.word	0x08005824

08004944 <__multiply>:
 8004944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	4614      	mov	r4, r2
 800494a:	690a      	ldr	r2, [r1, #16]
 800494c:	6923      	ldr	r3, [r4, #16]
 800494e:	460d      	mov	r5, r1
 8004950:	429a      	cmp	r2, r3
 8004952:	bfbe      	ittt	lt
 8004954:	460b      	movlt	r3, r1
 8004956:	4625      	movlt	r5, r4
 8004958:	461c      	movlt	r4, r3
 800495a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800495e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004962:	68ab      	ldr	r3, [r5, #8]
 8004964:	6869      	ldr	r1, [r5, #4]
 8004966:	eb0a 0709 	add.w	r7, sl, r9
 800496a:	42bb      	cmp	r3, r7
 800496c:	b085      	sub	sp, #20
 800496e:	bfb8      	it	lt
 8004970:	3101      	addlt	r1, #1
 8004972:	f7ff fed7 	bl	8004724 <_Balloc>
 8004976:	b930      	cbnz	r0, 8004986 <__multiply+0x42>
 8004978:	4602      	mov	r2, r0
 800497a:	f240 115d 	movw	r1, #349	; 0x15d
 800497e:	4b41      	ldr	r3, [pc, #260]	; (8004a84 <__multiply+0x140>)
 8004980:	4841      	ldr	r0, [pc, #260]	; (8004a88 <__multiply+0x144>)
 8004982:	f000 fd83 	bl	800548c <__assert_func>
 8004986:	f100 0614 	add.w	r6, r0, #20
 800498a:	4633      	mov	r3, r6
 800498c:	2200      	movs	r2, #0
 800498e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004992:	4543      	cmp	r3, r8
 8004994:	d31e      	bcc.n	80049d4 <__multiply+0x90>
 8004996:	f105 0c14 	add.w	ip, r5, #20
 800499a:	f104 0314 	add.w	r3, r4, #20
 800499e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80049a2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80049a6:	9202      	str	r2, [sp, #8]
 80049a8:	ebac 0205 	sub.w	r2, ip, r5
 80049ac:	3a15      	subs	r2, #21
 80049ae:	f022 0203 	bic.w	r2, r2, #3
 80049b2:	3204      	adds	r2, #4
 80049b4:	f105 0115 	add.w	r1, r5, #21
 80049b8:	458c      	cmp	ip, r1
 80049ba:	bf38      	it	cc
 80049bc:	2204      	movcc	r2, #4
 80049be:	9201      	str	r2, [sp, #4]
 80049c0:	9a02      	ldr	r2, [sp, #8]
 80049c2:	9303      	str	r3, [sp, #12]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d808      	bhi.n	80049da <__multiply+0x96>
 80049c8:	2f00      	cmp	r7, #0
 80049ca:	dc55      	bgt.n	8004a78 <__multiply+0x134>
 80049cc:	6107      	str	r7, [r0, #16]
 80049ce:	b005      	add	sp, #20
 80049d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d4:	f843 2b04 	str.w	r2, [r3], #4
 80049d8:	e7db      	b.n	8004992 <__multiply+0x4e>
 80049da:	f8b3 a000 	ldrh.w	sl, [r3]
 80049de:	f1ba 0f00 	cmp.w	sl, #0
 80049e2:	d020      	beq.n	8004a26 <__multiply+0xe2>
 80049e4:	46b1      	mov	r9, r6
 80049e6:	2200      	movs	r2, #0
 80049e8:	f105 0e14 	add.w	lr, r5, #20
 80049ec:	f85e 4b04 	ldr.w	r4, [lr], #4
 80049f0:	f8d9 b000 	ldr.w	fp, [r9]
 80049f4:	b2a1      	uxth	r1, r4
 80049f6:	fa1f fb8b 	uxth.w	fp, fp
 80049fa:	fb0a b101 	mla	r1, sl, r1, fp
 80049fe:	4411      	add	r1, r2
 8004a00:	f8d9 2000 	ldr.w	r2, [r9]
 8004a04:	0c24      	lsrs	r4, r4, #16
 8004a06:	0c12      	lsrs	r2, r2, #16
 8004a08:	fb0a 2404 	mla	r4, sl, r4, r2
 8004a0c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004a10:	b289      	uxth	r1, r1
 8004a12:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004a16:	45f4      	cmp	ip, lr
 8004a18:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004a1c:	f849 1b04 	str.w	r1, [r9], #4
 8004a20:	d8e4      	bhi.n	80049ec <__multiply+0xa8>
 8004a22:	9901      	ldr	r1, [sp, #4]
 8004a24:	5072      	str	r2, [r6, r1]
 8004a26:	9a03      	ldr	r2, [sp, #12]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004a2e:	f1b9 0f00 	cmp.w	r9, #0
 8004a32:	d01f      	beq.n	8004a74 <__multiply+0x130>
 8004a34:	46b6      	mov	lr, r6
 8004a36:	f04f 0a00 	mov.w	sl, #0
 8004a3a:	6834      	ldr	r4, [r6, #0]
 8004a3c:	f105 0114 	add.w	r1, r5, #20
 8004a40:	880a      	ldrh	r2, [r1, #0]
 8004a42:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004a46:	b2a4      	uxth	r4, r4
 8004a48:	fb09 b202 	mla	r2, r9, r2, fp
 8004a4c:	4492      	add	sl, r2
 8004a4e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004a52:	f84e 4b04 	str.w	r4, [lr], #4
 8004a56:	f851 4b04 	ldr.w	r4, [r1], #4
 8004a5a:	f8be 2000 	ldrh.w	r2, [lr]
 8004a5e:	0c24      	lsrs	r4, r4, #16
 8004a60:	fb09 2404 	mla	r4, r9, r4, r2
 8004a64:	458c      	cmp	ip, r1
 8004a66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004a6a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004a6e:	d8e7      	bhi.n	8004a40 <__multiply+0xfc>
 8004a70:	9a01      	ldr	r2, [sp, #4]
 8004a72:	50b4      	str	r4, [r6, r2]
 8004a74:	3604      	adds	r6, #4
 8004a76:	e7a3      	b.n	80049c0 <__multiply+0x7c>
 8004a78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1a5      	bne.n	80049cc <__multiply+0x88>
 8004a80:	3f01      	subs	r7, #1
 8004a82:	e7a1      	b.n	80049c8 <__multiply+0x84>
 8004a84:	080057b3 	.word	0x080057b3
 8004a88:	08005824 	.word	0x08005824

08004a8c <__pow5mult>:
 8004a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a90:	4615      	mov	r5, r2
 8004a92:	f012 0203 	ands.w	r2, r2, #3
 8004a96:	4606      	mov	r6, r0
 8004a98:	460f      	mov	r7, r1
 8004a9a:	d007      	beq.n	8004aac <__pow5mult+0x20>
 8004a9c:	4c25      	ldr	r4, [pc, #148]	; (8004b34 <__pow5mult+0xa8>)
 8004a9e:	3a01      	subs	r2, #1
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004aa6:	f7ff fe9f 	bl	80047e8 <__multadd>
 8004aaa:	4607      	mov	r7, r0
 8004aac:	10ad      	asrs	r5, r5, #2
 8004aae:	d03d      	beq.n	8004b2c <__pow5mult+0xa0>
 8004ab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004ab2:	b97c      	cbnz	r4, 8004ad4 <__pow5mult+0x48>
 8004ab4:	2010      	movs	r0, #16
 8004ab6:	f7ff fe11 	bl	80046dc <malloc>
 8004aba:	4602      	mov	r2, r0
 8004abc:	6270      	str	r0, [r6, #36]	; 0x24
 8004abe:	b928      	cbnz	r0, 8004acc <__pow5mult+0x40>
 8004ac0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <__pow5mult+0xac>)
 8004ac6:	481d      	ldr	r0, [pc, #116]	; (8004b3c <__pow5mult+0xb0>)
 8004ac8:	f000 fce0 	bl	800548c <__assert_func>
 8004acc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ad0:	6004      	str	r4, [r0, #0]
 8004ad2:	60c4      	str	r4, [r0, #12]
 8004ad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004adc:	b94c      	cbnz	r4, 8004af2 <__pow5mult+0x66>
 8004ade:	f240 2171 	movw	r1, #625	; 0x271
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f7ff ff18 	bl	8004918 <__i2b>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4604      	mov	r4, r0
 8004aec:	f8c8 0008 	str.w	r0, [r8, #8]
 8004af0:	6003      	str	r3, [r0, #0]
 8004af2:	f04f 0900 	mov.w	r9, #0
 8004af6:	07eb      	lsls	r3, r5, #31
 8004af8:	d50a      	bpl.n	8004b10 <__pow5mult+0x84>
 8004afa:	4639      	mov	r1, r7
 8004afc:	4622      	mov	r2, r4
 8004afe:	4630      	mov	r0, r6
 8004b00:	f7ff ff20 	bl	8004944 <__multiply>
 8004b04:	4680      	mov	r8, r0
 8004b06:	4639      	mov	r1, r7
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f7ff fe4b 	bl	80047a4 <_Bfree>
 8004b0e:	4647      	mov	r7, r8
 8004b10:	106d      	asrs	r5, r5, #1
 8004b12:	d00b      	beq.n	8004b2c <__pow5mult+0xa0>
 8004b14:	6820      	ldr	r0, [r4, #0]
 8004b16:	b938      	cbnz	r0, 8004b28 <__pow5mult+0x9c>
 8004b18:	4622      	mov	r2, r4
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f7ff ff11 	bl	8004944 <__multiply>
 8004b22:	6020      	str	r0, [r4, #0]
 8004b24:	f8c0 9000 	str.w	r9, [r0]
 8004b28:	4604      	mov	r4, r0
 8004b2a:	e7e4      	b.n	8004af6 <__pow5mult+0x6a>
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b32:	bf00      	nop
 8004b34:	08005978 	.word	0x08005978
 8004b38:	0800573d 	.word	0x0800573d
 8004b3c:	08005824 	.word	0x08005824

08004b40 <__lshift>:
 8004b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	460c      	mov	r4, r1
 8004b46:	4607      	mov	r7, r0
 8004b48:	4691      	mov	r9, r2
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	6849      	ldr	r1, [r1, #4]
 8004b4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b58:	f108 0601 	add.w	r6, r8, #1
 8004b5c:	42b3      	cmp	r3, r6
 8004b5e:	db0b      	blt.n	8004b78 <__lshift+0x38>
 8004b60:	4638      	mov	r0, r7
 8004b62:	f7ff fddf 	bl	8004724 <_Balloc>
 8004b66:	4605      	mov	r5, r0
 8004b68:	b948      	cbnz	r0, 8004b7e <__lshift+0x3e>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b70:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <__lshift+0xd0>)
 8004b72:	4828      	ldr	r0, [pc, #160]	; (8004c14 <__lshift+0xd4>)
 8004b74:	f000 fc8a 	bl	800548c <__assert_func>
 8004b78:	3101      	adds	r1, #1
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	e7ee      	b.n	8004b5c <__lshift+0x1c>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f100 0114 	add.w	r1, r0, #20
 8004b84:	f100 0210 	add.w	r2, r0, #16
 8004b88:	4618      	mov	r0, r3
 8004b8a:	4553      	cmp	r3, sl
 8004b8c:	db33      	blt.n	8004bf6 <__lshift+0xb6>
 8004b8e:	6920      	ldr	r0, [r4, #16]
 8004b90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b94:	f104 0314 	add.w	r3, r4, #20
 8004b98:	f019 091f 	ands.w	r9, r9, #31
 8004b9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ba0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ba4:	d02b      	beq.n	8004bfe <__lshift+0xbe>
 8004ba6:	468a      	mov	sl, r1
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f1c9 0e20 	rsb	lr, r9, #32
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	fa00 f009 	lsl.w	r0, r0, r9
 8004bb4:	4302      	orrs	r2, r0
 8004bb6:	f84a 2b04 	str.w	r2, [sl], #4
 8004bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bbe:	459c      	cmp	ip, r3
 8004bc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8004bc4:	d8f3      	bhi.n	8004bae <__lshift+0x6e>
 8004bc6:	ebac 0304 	sub.w	r3, ip, r4
 8004bca:	3b15      	subs	r3, #21
 8004bcc:	f023 0303 	bic.w	r3, r3, #3
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	f104 0015 	add.w	r0, r4, #21
 8004bd6:	4584      	cmp	ip, r0
 8004bd8:	bf38      	it	cc
 8004bda:	2304      	movcc	r3, #4
 8004bdc:	50ca      	str	r2, [r1, r3]
 8004bde:	b10a      	cbz	r2, 8004be4 <__lshift+0xa4>
 8004be0:	f108 0602 	add.w	r6, r8, #2
 8004be4:	3e01      	subs	r6, #1
 8004be6:	4638      	mov	r0, r7
 8004be8:	4621      	mov	r1, r4
 8004bea:	612e      	str	r6, [r5, #16]
 8004bec:	f7ff fdda 	bl	80047a4 <_Bfree>
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	e7c5      	b.n	8004b8a <__lshift+0x4a>
 8004bfe:	3904      	subs	r1, #4
 8004c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c04:	459c      	cmp	ip, r3
 8004c06:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c0a:	d8f9      	bhi.n	8004c00 <__lshift+0xc0>
 8004c0c:	e7ea      	b.n	8004be4 <__lshift+0xa4>
 8004c0e:	bf00      	nop
 8004c10:	080057b3 	.word	0x080057b3
 8004c14:	08005824 	.word	0x08005824

08004c18 <__mcmp>:
 8004c18:	4603      	mov	r3, r0
 8004c1a:	690a      	ldr	r2, [r1, #16]
 8004c1c:	6900      	ldr	r0, [r0, #16]
 8004c1e:	b530      	push	{r4, r5, lr}
 8004c20:	1a80      	subs	r0, r0, r2
 8004c22:	d10d      	bne.n	8004c40 <__mcmp+0x28>
 8004c24:	3314      	adds	r3, #20
 8004c26:	3114      	adds	r1, #20
 8004c28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004c2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c38:	4295      	cmp	r5, r2
 8004c3a:	d002      	beq.n	8004c42 <__mcmp+0x2a>
 8004c3c:	d304      	bcc.n	8004c48 <__mcmp+0x30>
 8004c3e:	2001      	movs	r0, #1
 8004c40:	bd30      	pop	{r4, r5, pc}
 8004c42:	42a3      	cmp	r3, r4
 8004c44:	d3f4      	bcc.n	8004c30 <__mcmp+0x18>
 8004c46:	e7fb      	b.n	8004c40 <__mcmp+0x28>
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	e7f8      	b.n	8004c40 <__mcmp+0x28>
	...

08004c50 <__mdiff>:
 8004c50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	460c      	mov	r4, r1
 8004c56:	4606      	mov	r6, r0
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4692      	mov	sl, r2
 8004c5e:	f7ff ffdb 	bl	8004c18 <__mcmp>
 8004c62:	1e05      	subs	r5, r0, #0
 8004c64:	d111      	bne.n	8004c8a <__mdiff+0x3a>
 8004c66:	4629      	mov	r1, r5
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f7ff fd5b 	bl	8004724 <_Balloc>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	b928      	cbnz	r0, 8004c7e <__mdiff+0x2e>
 8004c72:	f240 2132 	movw	r1, #562	; 0x232
 8004c76:	4b3c      	ldr	r3, [pc, #240]	; (8004d68 <__mdiff+0x118>)
 8004c78:	483c      	ldr	r0, [pc, #240]	; (8004d6c <__mdiff+0x11c>)
 8004c7a:	f000 fc07 	bl	800548c <__assert_func>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c84:	4610      	mov	r0, r2
 8004c86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8a:	bfa4      	itt	ge
 8004c8c:	4653      	movge	r3, sl
 8004c8e:	46a2      	movge	sl, r4
 8004c90:	4630      	mov	r0, r6
 8004c92:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004c96:	bfa6      	itte	ge
 8004c98:	461c      	movge	r4, r3
 8004c9a:	2500      	movge	r5, #0
 8004c9c:	2501      	movlt	r5, #1
 8004c9e:	f7ff fd41 	bl	8004724 <_Balloc>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	b918      	cbnz	r0, 8004cae <__mdiff+0x5e>
 8004ca6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004caa:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <__mdiff+0x118>)
 8004cac:	e7e4      	b.n	8004c78 <__mdiff+0x28>
 8004cae:	f100 0814 	add.w	r8, r0, #20
 8004cb2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004cb6:	60c5      	str	r5, [r0, #12]
 8004cb8:	f04f 0c00 	mov.w	ip, #0
 8004cbc:	f10a 0514 	add.w	r5, sl, #20
 8004cc0:	f10a 0010 	add.w	r0, sl, #16
 8004cc4:	46c2      	mov	sl, r8
 8004cc6:	6926      	ldr	r6, [r4, #16]
 8004cc8:	f104 0914 	add.w	r9, r4, #20
 8004ccc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004cd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004cd4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004cd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8004cdc:	fa1f f18b 	uxth.w	r1, fp
 8004ce0:	4461      	add	r1, ip
 8004ce2:	fa1f fc83 	uxth.w	ip, r3
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	eba1 010c 	sub.w	r1, r1, ip
 8004cec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004cf0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004cf4:	b289      	uxth	r1, r1
 8004cf6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004cfa:	454e      	cmp	r6, r9
 8004cfc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004d00:	f84a 3b04 	str.w	r3, [sl], #4
 8004d04:	d8e6      	bhi.n	8004cd4 <__mdiff+0x84>
 8004d06:	1b33      	subs	r3, r6, r4
 8004d08:	3b15      	subs	r3, #21
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	3415      	adds	r4, #21
 8004d10:	3304      	adds	r3, #4
 8004d12:	42a6      	cmp	r6, r4
 8004d14:	bf38      	it	cc
 8004d16:	2304      	movcc	r3, #4
 8004d18:	441d      	add	r5, r3
 8004d1a:	4443      	add	r3, r8
 8004d1c:	461e      	mov	r6, r3
 8004d1e:	462c      	mov	r4, r5
 8004d20:	4574      	cmp	r4, lr
 8004d22:	d30e      	bcc.n	8004d42 <__mdiff+0xf2>
 8004d24:	f10e 0103 	add.w	r1, lr, #3
 8004d28:	1b49      	subs	r1, r1, r5
 8004d2a:	f021 0103 	bic.w	r1, r1, #3
 8004d2e:	3d03      	subs	r5, #3
 8004d30:	45ae      	cmp	lr, r5
 8004d32:	bf38      	it	cc
 8004d34:	2100      	movcc	r1, #0
 8004d36:	4419      	add	r1, r3
 8004d38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004d3c:	b18b      	cbz	r3, 8004d62 <__mdiff+0x112>
 8004d3e:	6117      	str	r7, [r2, #16]
 8004d40:	e7a0      	b.n	8004c84 <__mdiff+0x34>
 8004d42:	f854 8b04 	ldr.w	r8, [r4], #4
 8004d46:	fa1f f188 	uxth.w	r1, r8
 8004d4a:	4461      	add	r1, ip
 8004d4c:	1408      	asrs	r0, r1, #16
 8004d4e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004d52:	b289      	uxth	r1, r1
 8004d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004d58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004d5c:	f846 1b04 	str.w	r1, [r6], #4
 8004d60:	e7de      	b.n	8004d20 <__mdiff+0xd0>
 8004d62:	3f01      	subs	r7, #1
 8004d64:	e7e8      	b.n	8004d38 <__mdiff+0xe8>
 8004d66:	bf00      	nop
 8004d68:	080057b3 	.word	0x080057b3
 8004d6c:	08005824 	.word	0x08005824

08004d70 <__d2b>:
 8004d70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d74:	2101      	movs	r1, #1
 8004d76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004d7a:	4690      	mov	r8, r2
 8004d7c:	461d      	mov	r5, r3
 8004d7e:	f7ff fcd1 	bl	8004724 <_Balloc>
 8004d82:	4604      	mov	r4, r0
 8004d84:	b930      	cbnz	r0, 8004d94 <__d2b+0x24>
 8004d86:	4602      	mov	r2, r0
 8004d88:	f240 310a 	movw	r1, #778	; 0x30a
 8004d8c:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <__d2b+0xb0>)
 8004d8e:	4825      	ldr	r0, [pc, #148]	; (8004e24 <__d2b+0xb4>)
 8004d90:	f000 fb7c 	bl	800548c <__assert_func>
 8004d94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004d98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004d9c:	bb2d      	cbnz	r5, 8004dea <__d2b+0x7a>
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	f1b8 0300 	subs.w	r3, r8, #0
 8004da4:	d026      	beq.n	8004df4 <__d2b+0x84>
 8004da6:	4668      	mov	r0, sp
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	f7ff fd87 	bl	80048bc <__lo0bits>
 8004dae:	9900      	ldr	r1, [sp, #0]
 8004db0:	b1f0      	cbz	r0, 8004df0 <__d2b+0x80>
 8004db2:	9a01      	ldr	r2, [sp, #4]
 8004db4:	f1c0 0320 	rsb	r3, r0, #32
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	40c2      	lsrs	r2, r0
 8004dc0:	6163      	str	r3, [r4, #20]
 8004dc2:	9201      	str	r2, [sp, #4]
 8004dc4:	9b01      	ldr	r3, [sp, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bf14      	ite	ne
 8004dca:	2102      	movne	r1, #2
 8004dcc:	2101      	moveq	r1, #1
 8004dce:	61a3      	str	r3, [r4, #24]
 8004dd0:	6121      	str	r1, [r4, #16]
 8004dd2:	b1c5      	cbz	r5, 8004e06 <__d2b+0x96>
 8004dd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004dd8:	4405      	add	r5, r0
 8004dda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004dde:	603d      	str	r5, [r7, #0]
 8004de0:	6030      	str	r0, [r6, #0]
 8004de2:	4620      	mov	r0, r4
 8004de4:	b002      	add	sp, #8
 8004de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dee:	e7d6      	b.n	8004d9e <__d2b+0x2e>
 8004df0:	6161      	str	r1, [r4, #20]
 8004df2:	e7e7      	b.n	8004dc4 <__d2b+0x54>
 8004df4:	a801      	add	r0, sp, #4
 8004df6:	f7ff fd61 	bl	80048bc <__lo0bits>
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	9b01      	ldr	r3, [sp, #4]
 8004dfe:	6121      	str	r1, [r4, #16]
 8004e00:	6163      	str	r3, [r4, #20]
 8004e02:	3020      	adds	r0, #32
 8004e04:	e7e5      	b.n	8004dd2 <__d2b+0x62>
 8004e06:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004e0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e0e:	6038      	str	r0, [r7, #0]
 8004e10:	6918      	ldr	r0, [r3, #16]
 8004e12:	f7ff fd33 	bl	800487c <__hi0bits>
 8004e16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004e1a:	6031      	str	r1, [r6, #0]
 8004e1c:	e7e1      	b.n	8004de2 <__d2b+0x72>
 8004e1e:	bf00      	nop
 8004e20:	080057b3 	.word	0x080057b3
 8004e24:	08005824 	.word	0x08005824

08004e28 <_calloc_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	fb02 f501 	mul.w	r5, r2, r1
 8004e2e:	4629      	mov	r1, r5
 8004e30:	f000 f854 	bl	8004edc <_malloc_r>
 8004e34:	4604      	mov	r4, r0
 8004e36:	b118      	cbz	r0, 8004e40 <_calloc_r+0x18>
 8004e38:	462a      	mov	r2, r5
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	f7fd fe66 	bl	8002b0c <memset>
 8004e40:	4620      	mov	r0, r4
 8004e42:	bd38      	pop	{r3, r4, r5, pc}

08004e44 <_free_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4605      	mov	r5, r0
 8004e48:	2900      	cmp	r1, #0
 8004e4a:	d043      	beq.n	8004ed4 <_free_r+0x90>
 8004e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e50:	1f0c      	subs	r4, r1, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfb8      	it	lt
 8004e56:	18e4      	addlt	r4, r4, r3
 8004e58:	f000 fb9e 	bl	8005598 <__malloc_lock>
 8004e5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <_free_r+0x94>)
 8004e5e:	6813      	ldr	r3, [r2, #0]
 8004e60:	4610      	mov	r0, r2
 8004e62:	b933      	cbnz	r3, 8004e72 <_free_r+0x2e>
 8004e64:	6063      	str	r3, [r4, #4]
 8004e66:	6014      	str	r4, [r2, #0]
 8004e68:	4628      	mov	r0, r5
 8004e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e6e:	f000 bb99 	b.w	80055a4 <__malloc_unlock>
 8004e72:	42a3      	cmp	r3, r4
 8004e74:	d90a      	bls.n	8004e8c <_free_r+0x48>
 8004e76:	6821      	ldr	r1, [r4, #0]
 8004e78:	1862      	adds	r2, r4, r1
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	bf01      	itttt	eq
 8004e7e:	681a      	ldreq	r2, [r3, #0]
 8004e80:	685b      	ldreq	r3, [r3, #4]
 8004e82:	1852      	addeq	r2, r2, r1
 8004e84:	6022      	streq	r2, [r4, #0]
 8004e86:	6063      	str	r3, [r4, #4]
 8004e88:	6004      	str	r4, [r0, #0]
 8004e8a:	e7ed      	b.n	8004e68 <_free_r+0x24>
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	b10b      	cbz	r3, 8004e96 <_free_r+0x52>
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	d9fa      	bls.n	8004e8c <_free_r+0x48>
 8004e96:	6811      	ldr	r1, [r2, #0]
 8004e98:	1850      	adds	r0, r2, r1
 8004e9a:	42a0      	cmp	r0, r4
 8004e9c:	d10b      	bne.n	8004eb6 <_free_r+0x72>
 8004e9e:	6820      	ldr	r0, [r4, #0]
 8004ea0:	4401      	add	r1, r0
 8004ea2:	1850      	adds	r0, r2, r1
 8004ea4:	4283      	cmp	r3, r0
 8004ea6:	6011      	str	r1, [r2, #0]
 8004ea8:	d1de      	bne.n	8004e68 <_free_r+0x24>
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4401      	add	r1, r0
 8004eb0:	6011      	str	r1, [r2, #0]
 8004eb2:	6053      	str	r3, [r2, #4]
 8004eb4:	e7d8      	b.n	8004e68 <_free_r+0x24>
 8004eb6:	d902      	bls.n	8004ebe <_free_r+0x7a>
 8004eb8:	230c      	movs	r3, #12
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	e7d4      	b.n	8004e68 <_free_r+0x24>
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	1821      	adds	r1, r4, r0
 8004ec2:	428b      	cmp	r3, r1
 8004ec4:	bf01      	itttt	eq
 8004ec6:	6819      	ldreq	r1, [r3, #0]
 8004ec8:	685b      	ldreq	r3, [r3, #4]
 8004eca:	1809      	addeq	r1, r1, r0
 8004ecc:	6021      	streq	r1, [r4, #0]
 8004ece:	6063      	str	r3, [r4, #4]
 8004ed0:	6054      	str	r4, [r2, #4]
 8004ed2:	e7c9      	b.n	8004e68 <_free_r+0x24>
 8004ed4:	bd38      	pop	{r3, r4, r5, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000200 	.word	0x20000200

08004edc <_malloc_r>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	1ccd      	adds	r5, r1, #3
 8004ee0:	f025 0503 	bic.w	r5, r5, #3
 8004ee4:	3508      	adds	r5, #8
 8004ee6:	2d0c      	cmp	r5, #12
 8004ee8:	bf38      	it	cc
 8004eea:	250c      	movcc	r5, #12
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	4606      	mov	r6, r0
 8004ef0:	db01      	blt.n	8004ef6 <_malloc_r+0x1a>
 8004ef2:	42a9      	cmp	r1, r5
 8004ef4:	d903      	bls.n	8004efe <_malloc_r+0x22>
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	6033      	str	r3, [r6, #0]
 8004efa:	2000      	movs	r0, #0
 8004efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004efe:	f000 fb4b 	bl	8005598 <__malloc_lock>
 8004f02:	4921      	ldr	r1, [pc, #132]	; (8004f88 <_malloc_r+0xac>)
 8004f04:	680a      	ldr	r2, [r1, #0]
 8004f06:	4614      	mov	r4, r2
 8004f08:	b99c      	cbnz	r4, 8004f32 <_malloc_r+0x56>
 8004f0a:	4f20      	ldr	r7, [pc, #128]	; (8004f8c <_malloc_r+0xb0>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	b923      	cbnz	r3, 8004f1a <_malloc_r+0x3e>
 8004f10:	4621      	mov	r1, r4
 8004f12:	4630      	mov	r0, r6
 8004f14:	f000 f994 	bl	8005240 <_sbrk_r>
 8004f18:	6038      	str	r0, [r7, #0]
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	f000 f98f 	bl	8005240 <_sbrk_r>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	d123      	bne.n	8004f6e <_malloc_r+0x92>
 8004f26:	230c      	movs	r3, #12
 8004f28:	4630      	mov	r0, r6
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	f000 fb3a 	bl	80055a4 <__malloc_unlock>
 8004f30:	e7e3      	b.n	8004efa <_malloc_r+0x1e>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	1b5b      	subs	r3, r3, r5
 8004f36:	d417      	bmi.n	8004f68 <_malloc_r+0x8c>
 8004f38:	2b0b      	cmp	r3, #11
 8004f3a:	d903      	bls.n	8004f44 <_malloc_r+0x68>
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	441c      	add	r4, r3
 8004f40:	6025      	str	r5, [r4, #0]
 8004f42:	e004      	b.n	8004f4e <_malloc_r+0x72>
 8004f44:	6863      	ldr	r3, [r4, #4]
 8004f46:	42a2      	cmp	r2, r4
 8004f48:	bf0c      	ite	eq
 8004f4a:	600b      	streq	r3, [r1, #0]
 8004f4c:	6053      	strne	r3, [r2, #4]
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f000 fb28 	bl	80055a4 <__malloc_unlock>
 8004f54:	f104 000b 	add.w	r0, r4, #11
 8004f58:	1d23      	adds	r3, r4, #4
 8004f5a:	f020 0007 	bic.w	r0, r0, #7
 8004f5e:	1ac2      	subs	r2, r0, r3
 8004f60:	d0cc      	beq.n	8004efc <_malloc_r+0x20>
 8004f62:	1a1b      	subs	r3, r3, r0
 8004f64:	50a3      	str	r3, [r4, r2]
 8004f66:	e7c9      	b.n	8004efc <_malloc_r+0x20>
 8004f68:	4622      	mov	r2, r4
 8004f6a:	6864      	ldr	r4, [r4, #4]
 8004f6c:	e7cc      	b.n	8004f08 <_malloc_r+0x2c>
 8004f6e:	1cc4      	adds	r4, r0, #3
 8004f70:	f024 0403 	bic.w	r4, r4, #3
 8004f74:	42a0      	cmp	r0, r4
 8004f76:	d0e3      	beq.n	8004f40 <_malloc_r+0x64>
 8004f78:	1a21      	subs	r1, r4, r0
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f000 f960 	bl	8005240 <_sbrk_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d1dd      	bne.n	8004f40 <_malloc_r+0x64>
 8004f84:	e7cf      	b.n	8004f26 <_malloc_r+0x4a>
 8004f86:	bf00      	nop
 8004f88:	20000200 	.word	0x20000200
 8004f8c:	20000204 	.word	0x20000204

08004f90 <__sfputc_r>:
 8004f90:	6893      	ldr	r3, [r2, #8]
 8004f92:	b410      	push	{r4}
 8004f94:	3b01      	subs	r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	6093      	str	r3, [r2, #8]
 8004f9a:	da07      	bge.n	8004fac <__sfputc_r+0x1c>
 8004f9c:	6994      	ldr	r4, [r2, #24]
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	db01      	blt.n	8004fa6 <__sfputc_r+0x16>
 8004fa2:	290a      	cmp	r1, #10
 8004fa4:	d102      	bne.n	8004fac <__sfputc_r+0x1c>
 8004fa6:	bc10      	pop	{r4}
 8004fa8:	f000 b99e 	b.w	80052e8 <__swbuf_r>
 8004fac:	6813      	ldr	r3, [r2, #0]
 8004fae:	1c58      	adds	r0, r3, #1
 8004fb0:	6010      	str	r0, [r2, #0]
 8004fb2:	7019      	strb	r1, [r3, #0]
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	bc10      	pop	{r4}
 8004fb8:	4770      	bx	lr

08004fba <__sfputs_r>:
 8004fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	460f      	mov	r7, r1
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	18d5      	adds	r5, r2, r3
 8004fc4:	42ac      	cmp	r4, r5
 8004fc6:	d101      	bne.n	8004fcc <__sfputs_r+0x12>
 8004fc8:	2000      	movs	r0, #0
 8004fca:	e007      	b.n	8004fdc <__sfputs_r+0x22>
 8004fcc:	463a      	mov	r2, r7
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd4:	f7ff ffdc 	bl	8004f90 <__sfputc_r>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d1f3      	bne.n	8004fc4 <__sfputs_r+0xa>
 8004fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fe0 <_vfiprintf_r>:
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	460d      	mov	r5, r1
 8004fe6:	4614      	mov	r4, r2
 8004fe8:	4698      	mov	r8, r3
 8004fea:	4606      	mov	r6, r0
 8004fec:	b09d      	sub	sp, #116	; 0x74
 8004fee:	b118      	cbz	r0, 8004ff8 <_vfiprintf_r+0x18>
 8004ff0:	6983      	ldr	r3, [r0, #24]
 8004ff2:	b90b      	cbnz	r3, 8004ff8 <_vfiprintf_r+0x18>
 8004ff4:	f7ff fa68 	bl	80044c8 <__sinit>
 8004ff8:	4b89      	ldr	r3, [pc, #548]	; (8005220 <_vfiprintf_r+0x240>)
 8004ffa:	429d      	cmp	r5, r3
 8004ffc:	d11b      	bne.n	8005036 <_vfiprintf_r+0x56>
 8004ffe:	6875      	ldr	r5, [r6, #4]
 8005000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005002:	07d9      	lsls	r1, r3, #31
 8005004:	d405      	bmi.n	8005012 <_vfiprintf_r+0x32>
 8005006:	89ab      	ldrh	r3, [r5, #12]
 8005008:	059a      	lsls	r2, r3, #22
 800500a:	d402      	bmi.n	8005012 <_vfiprintf_r+0x32>
 800500c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800500e:	f7ff fafe 	bl	800460e <__retarget_lock_acquire_recursive>
 8005012:	89ab      	ldrh	r3, [r5, #12]
 8005014:	071b      	lsls	r3, r3, #28
 8005016:	d501      	bpl.n	800501c <_vfiprintf_r+0x3c>
 8005018:	692b      	ldr	r3, [r5, #16]
 800501a:	b9eb      	cbnz	r3, 8005058 <_vfiprintf_r+0x78>
 800501c:	4629      	mov	r1, r5
 800501e:	4630      	mov	r0, r6
 8005020:	f000 f9c6 	bl	80053b0 <__swsetup_r>
 8005024:	b1c0      	cbz	r0, 8005058 <_vfiprintf_r+0x78>
 8005026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005028:	07dc      	lsls	r4, r3, #31
 800502a:	d50e      	bpl.n	800504a <_vfiprintf_r+0x6a>
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	b01d      	add	sp, #116	; 0x74
 8005032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005036:	4b7b      	ldr	r3, [pc, #492]	; (8005224 <_vfiprintf_r+0x244>)
 8005038:	429d      	cmp	r5, r3
 800503a:	d101      	bne.n	8005040 <_vfiprintf_r+0x60>
 800503c:	68b5      	ldr	r5, [r6, #8]
 800503e:	e7df      	b.n	8005000 <_vfiprintf_r+0x20>
 8005040:	4b79      	ldr	r3, [pc, #484]	; (8005228 <_vfiprintf_r+0x248>)
 8005042:	429d      	cmp	r5, r3
 8005044:	bf08      	it	eq
 8005046:	68f5      	ldreq	r5, [r6, #12]
 8005048:	e7da      	b.n	8005000 <_vfiprintf_r+0x20>
 800504a:	89ab      	ldrh	r3, [r5, #12]
 800504c:	0598      	lsls	r0, r3, #22
 800504e:	d4ed      	bmi.n	800502c <_vfiprintf_r+0x4c>
 8005050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005052:	f7ff fadd 	bl	8004610 <__retarget_lock_release_recursive>
 8005056:	e7e9      	b.n	800502c <_vfiprintf_r+0x4c>
 8005058:	2300      	movs	r3, #0
 800505a:	9309      	str	r3, [sp, #36]	; 0x24
 800505c:	2320      	movs	r3, #32
 800505e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005062:	2330      	movs	r3, #48	; 0x30
 8005064:	f04f 0901 	mov.w	r9, #1
 8005068:	f8cd 800c 	str.w	r8, [sp, #12]
 800506c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800522c <_vfiprintf_r+0x24c>
 8005070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005074:	4623      	mov	r3, r4
 8005076:	469a      	mov	sl, r3
 8005078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800507c:	b10a      	cbz	r2, 8005082 <_vfiprintf_r+0xa2>
 800507e:	2a25      	cmp	r2, #37	; 0x25
 8005080:	d1f9      	bne.n	8005076 <_vfiprintf_r+0x96>
 8005082:	ebba 0b04 	subs.w	fp, sl, r4
 8005086:	d00b      	beq.n	80050a0 <_vfiprintf_r+0xc0>
 8005088:	465b      	mov	r3, fp
 800508a:	4622      	mov	r2, r4
 800508c:	4629      	mov	r1, r5
 800508e:	4630      	mov	r0, r6
 8005090:	f7ff ff93 	bl	8004fba <__sfputs_r>
 8005094:	3001      	adds	r0, #1
 8005096:	f000 80aa 	beq.w	80051ee <_vfiprintf_r+0x20e>
 800509a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800509c:	445a      	add	r2, fp
 800509e:	9209      	str	r2, [sp, #36]	; 0x24
 80050a0:	f89a 3000 	ldrb.w	r3, [sl]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80a2 	beq.w	80051ee <_vfiprintf_r+0x20e>
 80050aa:	2300      	movs	r3, #0
 80050ac:	f04f 32ff 	mov.w	r2, #4294967295
 80050b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b4:	f10a 0a01 	add.w	sl, sl, #1
 80050b8:	9304      	str	r3, [sp, #16]
 80050ba:	9307      	str	r3, [sp, #28]
 80050bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050c0:	931a      	str	r3, [sp, #104]	; 0x68
 80050c2:	4654      	mov	r4, sl
 80050c4:	2205      	movs	r2, #5
 80050c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ca:	4858      	ldr	r0, [pc, #352]	; (800522c <_vfiprintf_r+0x24c>)
 80050cc:	f7ff fb0e 	bl	80046ec <memchr>
 80050d0:	9a04      	ldr	r2, [sp, #16]
 80050d2:	b9d8      	cbnz	r0, 800510c <_vfiprintf_r+0x12c>
 80050d4:	06d1      	lsls	r1, r2, #27
 80050d6:	bf44      	itt	mi
 80050d8:	2320      	movmi	r3, #32
 80050da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050de:	0713      	lsls	r3, r2, #28
 80050e0:	bf44      	itt	mi
 80050e2:	232b      	movmi	r3, #43	; 0x2b
 80050e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050e8:	f89a 3000 	ldrb.w	r3, [sl]
 80050ec:	2b2a      	cmp	r3, #42	; 0x2a
 80050ee:	d015      	beq.n	800511c <_vfiprintf_r+0x13c>
 80050f0:	4654      	mov	r4, sl
 80050f2:	2000      	movs	r0, #0
 80050f4:	f04f 0c0a 	mov.w	ip, #10
 80050f8:	9a07      	ldr	r2, [sp, #28]
 80050fa:	4621      	mov	r1, r4
 80050fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005100:	3b30      	subs	r3, #48	; 0x30
 8005102:	2b09      	cmp	r3, #9
 8005104:	d94e      	bls.n	80051a4 <_vfiprintf_r+0x1c4>
 8005106:	b1b0      	cbz	r0, 8005136 <_vfiprintf_r+0x156>
 8005108:	9207      	str	r2, [sp, #28]
 800510a:	e014      	b.n	8005136 <_vfiprintf_r+0x156>
 800510c:	eba0 0308 	sub.w	r3, r0, r8
 8005110:	fa09 f303 	lsl.w	r3, r9, r3
 8005114:	4313      	orrs	r3, r2
 8005116:	46a2      	mov	sl, r4
 8005118:	9304      	str	r3, [sp, #16]
 800511a:	e7d2      	b.n	80050c2 <_vfiprintf_r+0xe2>
 800511c:	9b03      	ldr	r3, [sp, #12]
 800511e:	1d19      	adds	r1, r3, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	9103      	str	r1, [sp, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	bfbb      	ittet	lt
 8005128:	425b      	neglt	r3, r3
 800512a:	f042 0202 	orrlt.w	r2, r2, #2
 800512e:	9307      	strge	r3, [sp, #28]
 8005130:	9307      	strlt	r3, [sp, #28]
 8005132:	bfb8      	it	lt
 8005134:	9204      	strlt	r2, [sp, #16]
 8005136:	7823      	ldrb	r3, [r4, #0]
 8005138:	2b2e      	cmp	r3, #46	; 0x2e
 800513a:	d10c      	bne.n	8005156 <_vfiprintf_r+0x176>
 800513c:	7863      	ldrb	r3, [r4, #1]
 800513e:	2b2a      	cmp	r3, #42	; 0x2a
 8005140:	d135      	bne.n	80051ae <_vfiprintf_r+0x1ce>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	3402      	adds	r4, #2
 8005146:	1d1a      	adds	r2, r3, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	9203      	str	r2, [sp, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	bfb8      	it	lt
 8005150:	f04f 33ff 	movlt.w	r3, #4294967295
 8005154:	9305      	str	r3, [sp, #20]
 8005156:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800523c <_vfiprintf_r+0x25c>
 800515a:	2203      	movs	r2, #3
 800515c:	4650      	mov	r0, sl
 800515e:	7821      	ldrb	r1, [r4, #0]
 8005160:	f7ff fac4 	bl	80046ec <memchr>
 8005164:	b140      	cbz	r0, 8005178 <_vfiprintf_r+0x198>
 8005166:	2340      	movs	r3, #64	; 0x40
 8005168:	eba0 000a 	sub.w	r0, r0, sl
 800516c:	fa03 f000 	lsl.w	r0, r3, r0
 8005170:	9b04      	ldr	r3, [sp, #16]
 8005172:	3401      	adds	r4, #1
 8005174:	4303      	orrs	r3, r0
 8005176:	9304      	str	r3, [sp, #16]
 8005178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800517c:	2206      	movs	r2, #6
 800517e:	482c      	ldr	r0, [pc, #176]	; (8005230 <_vfiprintf_r+0x250>)
 8005180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005184:	f7ff fab2 	bl	80046ec <memchr>
 8005188:	2800      	cmp	r0, #0
 800518a:	d03f      	beq.n	800520c <_vfiprintf_r+0x22c>
 800518c:	4b29      	ldr	r3, [pc, #164]	; (8005234 <_vfiprintf_r+0x254>)
 800518e:	bb1b      	cbnz	r3, 80051d8 <_vfiprintf_r+0x1f8>
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	3307      	adds	r3, #7
 8005194:	f023 0307 	bic.w	r3, r3, #7
 8005198:	3308      	adds	r3, #8
 800519a:	9303      	str	r3, [sp, #12]
 800519c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800519e:	443b      	add	r3, r7
 80051a0:	9309      	str	r3, [sp, #36]	; 0x24
 80051a2:	e767      	b.n	8005074 <_vfiprintf_r+0x94>
 80051a4:	460c      	mov	r4, r1
 80051a6:	2001      	movs	r0, #1
 80051a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ac:	e7a5      	b.n	80050fa <_vfiprintf_r+0x11a>
 80051ae:	2300      	movs	r3, #0
 80051b0:	f04f 0c0a 	mov.w	ip, #10
 80051b4:	4619      	mov	r1, r3
 80051b6:	3401      	adds	r4, #1
 80051b8:	9305      	str	r3, [sp, #20]
 80051ba:	4620      	mov	r0, r4
 80051bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051c0:	3a30      	subs	r2, #48	; 0x30
 80051c2:	2a09      	cmp	r2, #9
 80051c4:	d903      	bls.n	80051ce <_vfiprintf_r+0x1ee>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0c5      	beq.n	8005156 <_vfiprintf_r+0x176>
 80051ca:	9105      	str	r1, [sp, #20]
 80051cc:	e7c3      	b.n	8005156 <_vfiprintf_r+0x176>
 80051ce:	4604      	mov	r4, r0
 80051d0:	2301      	movs	r3, #1
 80051d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d6:	e7f0      	b.n	80051ba <_vfiprintf_r+0x1da>
 80051d8:	ab03      	add	r3, sp, #12
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	462a      	mov	r2, r5
 80051de:	4630      	mov	r0, r6
 80051e0:	4b15      	ldr	r3, [pc, #84]	; (8005238 <_vfiprintf_r+0x258>)
 80051e2:	a904      	add	r1, sp, #16
 80051e4:	f7fd fd38 	bl	8002c58 <_printf_float>
 80051e8:	4607      	mov	r7, r0
 80051ea:	1c78      	adds	r0, r7, #1
 80051ec:	d1d6      	bne.n	800519c <_vfiprintf_r+0x1bc>
 80051ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f0:	07d9      	lsls	r1, r3, #31
 80051f2:	d405      	bmi.n	8005200 <_vfiprintf_r+0x220>
 80051f4:	89ab      	ldrh	r3, [r5, #12]
 80051f6:	059a      	lsls	r2, r3, #22
 80051f8:	d402      	bmi.n	8005200 <_vfiprintf_r+0x220>
 80051fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051fc:	f7ff fa08 	bl	8004610 <__retarget_lock_release_recursive>
 8005200:	89ab      	ldrh	r3, [r5, #12]
 8005202:	065b      	lsls	r3, r3, #25
 8005204:	f53f af12 	bmi.w	800502c <_vfiprintf_r+0x4c>
 8005208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800520a:	e711      	b.n	8005030 <_vfiprintf_r+0x50>
 800520c:	ab03      	add	r3, sp, #12
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	462a      	mov	r2, r5
 8005212:	4630      	mov	r0, r6
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <_vfiprintf_r+0x258>)
 8005216:	a904      	add	r1, sp, #16
 8005218:	f7fd ffba 	bl	8003190 <_printf_i>
 800521c:	e7e4      	b.n	80051e8 <_vfiprintf_r+0x208>
 800521e:	bf00      	nop
 8005220:	080057e4 	.word	0x080057e4
 8005224:	08005804 	.word	0x08005804
 8005228:	080057c4 	.word	0x080057c4
 800522c:	08005984 	.word	0x08005984
 8005230:	0800598e 	.word	0x0800598e
 8005234:	08002c59 	.word	0x08002c59
 8005238:	08004fbb 	.word	0x08004fbb
 800523c:	0800598a 	.word	0x0800598a

08005240 <_sbrk_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	2300      	movs	r3, #0
 8005244:	4d05      	ldr	r5, [pc, #20]	; (800525c <_sbrk_r+0x1c>)
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	602b      	str	r3, [r5, #0]
 800524c:	f7fb fee0 	bl	8001010 <_sbrk>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_sbrk_r+0x1a>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_sbrk_r+0x1a>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	20000270 	.word	0x20000270

08005260 <__sread>:
 8005260:	b510      	push	{r4, lr}
 8005262:	460c      	mov	r4, r1
 8005264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005268:	f000 f9a2 	bl	80055b0 <_read_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	bfab      	itete	ge
 8005270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005272:	89a3      	ldrhlt	r3, [r4, #12]
 8005274:	181b      	addge	r3, r3, r0
 8005276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800527a:	bfac      	ite	ge
 800527c:	6563      	strge	r3, [r4, #84]	; 0x54
 800527e:	81a3      	strhlt	r3, [r4, #12]
 8005280:	bd10      	pop	{r4, pc}

08005282 <__swrite>:
 8005282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	461f      	mov	r7, r3
 8005288:	898b      	ldrh	r3, [r1, #12]
 800528a:	4605      	mov	r5, r0
 800528c:	05db      	lsls	r3, r3, #23
 800528e:	460c      	mov	r4, r1
 8005290:	4616      	mov	r6, r2
 8005292:	d505      	bpl.n	80052a0 <__swrite+0x1e>
 8005294:	2302      	movs	r3, #2
 8005296:	2200      	movs	r2, #0
 8005298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529c:	f000 f958 	bl	8005550 <_lseek_r>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	4632      	mov	r2, r6
 80052a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	4628      	mov	r0, r5
 80052ac:	463b      	mov	r3, r7
 80052ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b6:	f000 b869 	b.w	800538c <_write_r>

080052ba <__sseek>:
 80052ba:	b510      	push	{r4, lr}
 80052bc:	460c      	mov	r4, r1
 80052be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c2:	f000 f945 	bl	8005550 <_lseek_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	bf15      	itete	ne
 80052cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80052ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052d6:	81a3      	strheq	r3, [r4, #12]
 80052d8:	bf18      	it	ne
 80052da:	81a3      	strhne	r3, [r4, #12]
 80052dc:	bd10      	pop	{r4, pc}

080052de <__sclose>:
 80052de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e2:	f000 b8f1 	b.w	80054c8 <_close_r>
	...

080052e8 <__swbuf_r>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	460e      	mov	r6, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	4605      	mov	r5, r0
 80052f0:	b118      	cbz	r0, 80052fa <__swbuf_r+0x12>
 80052f2:	6983      	ldr	r3, [r0, #24]
 80052f4:	b90b      	cbnz	r3, 80052fa <__swbuf_r+0x12>
 80052f6:	f7ff f8e7 	bl	80044c8 <__sinit>
 80052fa:	4b21      	ldr	r3, [pc, #132]	; (8005380 <__swbuf_r+0x98>)
 80052fc:	429c      	cmp	r4, r3
 80052fe:	d12b      	bne.n	8005358 <__swbuf_r+0x70>
 8005300:	686c      	ldr	r4, [r5, #4]
 8005302:	69a3      	ldr	r3, [r4, #24]
 8005304:	60a3      	str	r3, [r4, #8]
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	071a      	lsls	r2, r3, #28
 800530a:	d52f      	bpl.n	800536c <__swbuf_r+0x84>
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	b36b      	cbz	r3, 800536c <__swbuf_r+0x84>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	6820      	ldr	r0, [r4, #0]
 8005314:	b2f6      	uxtb	r6, r6
 8005316:	1ac0      	subs	r0, r0, r3
 8005318:	6963      	ldr	r3, [r4, #20]
 800531a:	4637      	mov	r7, r6
 800531c:	4283      	cmp	r3, r0
 800531e:	dc04      	bgt.n	800532a <__swbuf_r+0x42>
 8005320:	4621      	mov	r1, r4
 8005322:	4628      	mov	r0, r5
 8005324:	f7ff f83c 	bl	80043a0 <_fflush_r>
 8005328:	bb30      	cbnz	r0, 8005378 <__swbuf_r+0x90>
 800532a:	68a3      	ldr	r3, [r4, #8]
 800532c:	3001      	adds	r0, #1
 800532e:	3b01      	subs	r3, #1
 8005330:	60a3      	str	r3, [r4, #8]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	6022      	str	r2, [r4, #0]
 8005338:	701e      	strb	r6, [r3, #0]
 800533a:	6963      	ldr	r3, [r4, #20]
 800533c:	4283      	cmp	r3, r0
 800533e:	d004      	beq.n	800534a <__swbuf_r+0x62>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	07db      	lsls	r3, r3, #31
 8005344:	d506      	bpl.n	8005354 <__swbuf_r+0x6c>
 8005346:	2e0a      	cmp	r6, #10
 8005348:	d104      	bne.n	8005354 <__swbuf_r+0x6c>
 800534a:	4621      	mov	r1, r4
 800534c:	4628      	mov	r0, r5
 800534e:	f7ff f827 	bl	80043a0 <_fflush_r>
 8005352:	b988      	cbnz	r0, 8005378 <__swbuf_r+0x90>
 8005354:	4638      	mov	r0, r7
 8005356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <__swbuf_r+0x9c>)
 800535a:	429c      	cmp	r4, r3
 800535c:	d101      	bne.n	8005362 <__swbuf_r+0x7a>
 800535e:	68ac      	ldr	r4, [r5, #8]
 8005360:	e7cf      	b.n	8005302 <__swbuf_r+0x1a>
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <__swbuf_r+0xa0>)
 8005364:	429c      	cmp	r4, r3
 8005366:	bf08      	it	eq
 8005368:	68ec      	ldreq	r4, [r5, #12]
 800536a:	e7ca      	b.n	8005302 <__swbuf_r+0x1a>
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f000 f81e 	bl	80053b0 <__swsetup_r>
 8005374:	2800      	cmp	r0, #0
 8005376:	d0cb      	beq.n	8005310 <__swbuf_r+0x28>
 8005378:	f04f 37ff 	mov.w	r7, #4294967295
 800537c:	e7ea      	b.n	8005354 <__swbuf_r+0x6c>
 800537e:	bf00      	nop
 8005380:	080057e4 	.word	0x080057e4
 8005384:	08005804 	.word	0x08005804
 8005388:	080057c4 	.word	0x080057c4

0800538c <_write_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	4611      	mov	r1, r2
 8005394:	2200      	movs	r2, #0
 8005396:	4d05      	ldr	r5, [pc, #20]	; (80053ac <_write_r+0x20>)
 8005398:	602a      	str	r2, [r5, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	f7fb fdec 	bl	8000f78 <_write>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_write_r+0x1e>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_write_r+0x1e>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	20000270 	.word	0x20000270

080053b0 <__swsetup_r>:
 80053b0:	4b32      	ldr	r3, [pc, #200]	; (800547c <__swsetup_r+0xcc>)
 80053b2:	b570      	push	{r4, r5, r6, lr}
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	4606      	mov	r6, r0
 80053b8:	460c      	mov	r4, r1
 80053ba:	b125      	cbz	r5, 80053c6 <__swsetup_r+0x16>
 80053bc:	69ab      	ldr	r3, [r5, #24]
 80053be:	b913      	cbnz	r3, 80053c6 <__swsetup_r+0x16>
 80053c0:	4628      	mov	r0, r5
 80053c2:	f7ff f881 	bl	80044c8 <__sinit>
 80053c6:	4b2e      	ldr	r3, [pc, #184]	; (8005480 <__swsetup_r+0xd0>)
 80053c8:	429c      	cmp	r4, r3
 80053ca:	d10f      	bne.n	80053ec <__swsetup_r+0x3c>
 80053cc:	686c      	ldr	r4, [r5, #4]
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053d4:	0719      	lsls	r1, r3, #28
 80053d6:	d42c      	bmi.n	8005432 <__swsetup_r+0x82>
 80053d8:	06dd      	lsls	r5, r3, #27
 80053da:	d411      	bmi.n	8005400 <__swsetup_r+0x50>
 80053dc:	2309      	movs	r3, #9
 80053de:	6033      	str	r3, [r6, #0]
 80053e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295
 80053e8:	81a3      	strh	r3, [r4, #12]
 80053ea:	e03e      	b.n	800546a <__swsetup_r+0xba>
 80053ec:	4b25      	ldr	r3, [pc, #148]	; (8005484 <__swsetup_r+0xd4>)
 80053ee:	429c      	cmp	r4, r3
 80053f0:	d101      	bne.n	80053f6 <__swsetup_r+0x46>
 80053f2:	68ac      	ldr	r4, [r5, #8]
 80053f4:	e7eb      	b.n	80053ce <__swsetup_r+0x1e>
 80053f6:	4b24      	ldr	r3, [pc, #144]	; (8005488 <__swsetup_r+0xd8>)
 80053f8:	429c      	cmp	r4, r3
 80053fa:	bf08      	it	eq
 80053fc:	68ec      	ldreq	r4, [r5, #12]
 80053fe:	e7e6      	b.n	80053ce <__swsetup_r+0x1e>
 8005400:	0758      	lsls	r0, r3, #29
 8005402:	d512      	bpl.n	800542a <__swsetup_r+0x7a>
 8005404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005406:	b141      	cbz	r1, 800541a <__swsetup_r+0x6a>
 8005408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800540c:	4299      	cmp	r1, r3
 800540e:	d002      	beq.n	8005416 <__swsetup_r+0x66>
 8005410:	4630      	mov	r0, r6
 8005412:	f7ff fd17 	bl	8004e44 <_free_r>
 8005416:	2300      	movs	r3, #0
 8005418:	6363      	str	r3, [r4, #52]	; 0x34
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	2300      	movs	r3, #0
 8005424:	6063      	str	r3, [r4, #4]
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	f043 0308 	orr.w	r3, r3, #8
 8005430:	81a3      	strh	r3, [r4, #12]
 8005432:	6923      	ldr	r3, [r4, #16]
 8005434:	b94b      	cbnz	r3, 800544a <__swsetup_r+0x9a>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800543c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005440:	d003      	beq.n	800544a <__swsetup_r+0x9a>
 8005442:	4621      	mov	r1, r4
 8005444:	4630      	mov	r0, r6
 8005446:	f7ff f909 	bl	800465c <__smakebuf_r>
 800544a:	89a0      	ldrh	r0, [r4, #12]
 800544c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005450:	f010 0301 	ands.w	r3, r0, #1
 8005454:	d00a      	beq.n	800546c <__swsetup_r+0xbc>
 8005456:	2300      	movs	r3, #0
 8005458:	60a3      	str	r3, [r4, #8]
 800545a:	6963      	ldr	r3, [r4, #20]
 800545c:	425b      	negs	r3, r3
 800545e:	61a3      	str	r3, [r4, #24]
 8005460:	6923      	ldr	r3, [r4, #16]
 8005462:	b943      	cbnz	r3, 8005476 <__swsetup_r+0xc6>
 8005464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005468:	d1ba      	bne.n	80053e0 <__swsetup_r+0x30>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	0781      	lsls	r1, r0, #30
 800546e:	bf58      	it	pl
 8005470:	6963      	ldrpl	r3, [r4, #20]
 8005472:	60a3      	str	r3, [r4, #8]
 8005474:	e7f4      	b.n	8005460 <__swsetup_r+0xb0>
 8005476:	2000      	movs	r0, #0
 8005478:	e7f7      	b.n	800546a <__swsetup_r+0xba>
 800547a:	bf00      	nop
 800547c:	2000000c 	.word	0x2000000c
 8005480:	080057e4 	.word	0x080057e4
 8005484:	08005804 	.word	0x08005804
 8005488:	080057c4 	.word	0x080057c4

0800548c <__assert_func>:
 800548c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800548e:	4614      	mov	r4, r2
 8005490:	461a      	mov	r2, r3
 8005492:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <__assert_func+0x2c>)
 8005494:	4605      	mov	r5, r0
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68d8      	ldr	r0, [r3, #12]
 800549a:	b14c      	cbz	r4, 80054b0 <__assert_func+0x24>
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <__assert_func+0x30>)
 800549e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054a2:	9100      	str	r1, [sp, #0]
 80054a4:	462b      	mov	r3, r5
 80054a6:	4906      	ldr	r1, [pc, #24]	; (80054c0 <__assert_func+0x34>)
 80054a8:	f000 f81e 	bl	80054e8 <fiprintf>
 80054ac:	f000 f89f 	bl	80055ee <abort>
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <__assert_func+0x38>)
 80054b2:	461c      	mov	r4, r3
 80054b4:	e7f3      	b.n	800549e <__assert_func+0x12>
 80054b6:	bf00      	nop
 80054b8:	2000000c 	.word	0x2000000c
 80054bc:	08005995 	.word	0x08005995
 80054c0:	080059a2 	.word	0x080059a2
 80054c4:	080059d0 	.word	0x080059d0

080054c8 <_close_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	2300      	movs	r3, #0
 80054cc:	4d05      	ldr	r5, [pc, #20]	; (80054e4 <_close_r+0x1c>)
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fb fd6c 	bl	8000fb0 <_close>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_close_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_close_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	20000270 	.word	0x20000270

080054e8 <fiprintf>:
 80054e8:	b40e      	push	{r1, r2, r3}
 80054ea:	b503      	push	{r0, r1, lr}
 80054ec:	4601      	mov	r1, r0
 80054ee:	ab03      	add	r3, sp, #12
 80054f0:	4805      	ldr	r0, [pc, #20]	; (8005508 <fiprintf+0x20>)
 80054f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f6:	6800      	ldr	r0, [r0, #0]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	f7ff fd71 	bl	8004fe0 <_vfiprintf_r>
 80054fe:	b002      	add	sp, #8
 8005500:	f85d eb04 	ldr.w	lr, [sp], #4
 8005504:	b003      	add	sp, #12
 8005506:	4770      	bx	lr
 8005508:	2000000c 	.word	0x2000000c

0800550c <_fstat_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	2300      	movs	r3, #0
 8005510:	4d06      	ldr	r5, [pc, #24]	; (800552c <_fstat_r+0x20>)
 8005512:	4604      	mov	r4, r0
 8005514:	4608      	mov	r0, r1
 8005516:	4611      	mov	r1, r2
 8005518:	602b      	str	r3, [r5, #0]
 800551a:	f7fb fd54 	bl	8000fc6 <_fstat>
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	d102      	bne.n	8005528 <_fstat_r+0x1c>
 8005522:	682b      	ldr	r3, [r5, #0]
 8005524:	b103      	cbz	r3, 8005528 <_fstat_r+0x1c>
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	bd38      	pop	{r3, r4, r5, pc}
 800552a:	bf00      	nop
 800552c:	20000270 	.word	0x20000270

08005530 <_isatty_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	2300      	movs	r3, #0
 8005534:	4d05      	ldr	r5, [pc, #20]	; (800554c <_isatty_r+0x1c>)
 8005536:	4604      	mov	r4, r0
 8005538:	4608      	mov	r0, r1
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	f7fb fd52 	bl	8000fe4 <_isatty>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_isatty_r+0x1a>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_isatty_r+0x1a>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	20000270 	.word	0x20000270

08005550 <_lseek_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4604      	mov	r4, r0
 8005554:	4608      	mov	r0, r1
 8005556:	4611      	mov	r1, r2
 8005558:	2200      	movs	r2, #0
 800555a:	4d05      	ldr	r5, [pc, #20]	; (8005570 <_lseek_r+0x20>)
 800555c:	602a      	str	r2, [r5, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	f7fb fd4a 	bl	8000ff8 <_lseek>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_lseek_r+0x1e>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_lseek_r+0x1e>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	20000270 	.word	0x20000270

08005574 <__ascii_mbtowc>:
 8005574:	b082      	sub	sp, #8
 8005576:	b901      	cbnz	r1, 800557a <__ascii_mbtowc+0x6>
 8005578:	a901      	add	r1, sp, #4
 800557a:	b142      	cbz	r2, 800558e <__ascii_mbtowc+0x1a>
 800557c:	b14b      	cbz	r3, 8005592 <__ascii_mbtowc+0x1e>
 800557e:	7813      	ldrb	r3, [r2, #0]
 8005580:	600b      	str	r3, [r1, #0]
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	1e10      	subs	r0, r2, #0
 8005586:	bf18      	it	ne
 8005588:	2001      	movne	r0, #1
 800558a:	b002      	add	sp, #8
 800558c:	4770      	bx	lr
 800558e:	4610      	mov	r0, r2
 8005590:	e7fb      	b.n	800558a <__ascii_mbtowc+0x16>
 8005592:	f06f 0001 	mvn.w	r0, #1
 8005596:	e7f8      	b.n	800558a <__ascii_mbtowc+0x16>

08005598 <__malloc_lock>:
 8005598:	4801      	ldr	r0, [pc, #4]	; (80055a0 <__malloc_lock+0x8>)
 800559a:	f7ff b838 	b.w	800460e <__retarget_lock_acquire_recursive>
 800559e:	bf00      	nop
 80055a0:	20000268 	.word	0x20000268

080055a4 <__malloc_unlock>:
 80055a4:	4801      	ldr	r0, [pc, #4]	; (80055ac <__malloc_unlock+0x8>)
 80055a6:	f7ff b833 	b.w	8004610 <__retarget_lock_release_recursive>
 80055aa:	bf00      	nop
 80055ac:	20000268 	.word	0x20000268

080055b0 <_read_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	2200      	movs	r2, #0
 80055ba:	4d05      	ldr	r5, [pc, #20]	; (80055d0 <_read_r+0x20>)
 80055bc:	602a      	str	r2, [r5, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	f7fb fcbd 	bl	8000f3e <_read>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_read_r+0x1e>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_read_r+0x1e>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20000270 	.word	0x20000270

080055d4 <__ascii_wctomb>:
 80055d4:	4603      	mov	r3, r0
 80055d6:	4608      	mov	r0, r1
 80055d8:	b141      	cbz	r1, 80055ec <__ascii_wctomb+0x18>
 80055da:	2aff      	cmp	r2, #255	; 0xff
 80055dc:	d904      	bls.n	80055e8 <__ascii_wctomb+0x14>
 80055de:	228a      	movs	r2, #138	; 0x8a
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	4770      	bx	lr
 80055e8:	2001      	movs	r0, #1
 80055ea:	700a      	strb	r2, [r1, #0]
 80055ec:	4770      	bx	lr

080055ee <abort>:
 80055ee:	2006      	movs	r0, #6
 80055f0:	b508      	push	{r3, lr}
 80055f2:	f000 f82b 	bl	800564c <raise>
 80055f6:	2001      	movs	r0, #1
 80055f8:	f7fb fc97 	bl	8000f2a <_exit>

080055fc <_raise_r>:
 80055fc:	291f      	cmp	r1, #31
 80055fe:	b538      	push	{r3, r4, r5, lr}
 8005600:	4604      	mov	r4, r0
 8005602:	460d      	mov	r5, r1
 8005604:	d904      	bls.n	8005610 <_raise_r+0x14>
 8005606:	2316      	movs	r3, #22
 8005608:	6003      	str	r3, [r0, #0]
 800560a:	f04f 30ff 	mov.w	r0, #4294967295
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005612:	b112      	cbz	r2, 800561a <_raise_r+0x1e>
 8005614:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005618:	b94b      	cbnz	r3, 800562e <_raise_r+0x32>
 800561a:	4620      	mov	r0, r4
 800561c:	f000 f830 	bl	8005680 <_getpid_r>
 8005620:	462a      	mov	r2, r5
 8005622:	4601      	mov	r1, r0
 8005624:	4620      	mov	r0, r4
 8005626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800562a:	f000 b817 	b.w	800565c <_kill_r>
 800562e:	2b01      	cmp	r3, #1
 8005630:	d00a      	beq.n	8005648 <_raise_r+0x4c>
 8005632:	1c59      	adds	r1, r3, #1
 8005634:	d103      	bne.n	800563e <_raise_r+0x42>
 8005636:	2316      	movs	r3, #22
 8005638:	6003      	str	r3, [r0, #0]
 800563a:	2001      	movs	r0, #1
 800563c:	e7e7      	b.n	800560e <_raise_r+0x12>
 800563e:	2400      	movs	r4, #0
 8005640:	4628      	mov	r0, r5
 8005642:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005646:	4798      	blx	r3
 8005648:	2000      	movs	r0, #0
 800564a:	e7e0      	b.n	800560e <_raise_r+0x12>

0800564c <raise>:
 800564c:	4b02      	ldr	r3, [pc, #8]	; (8005658 <raise+0xc>)
 800564e:	4601      	mov	r1, r0
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	f7ff bfd3 	b.w	80055fc <_raise_r>
 8005656:	bf00      	nop
 8005658:	2000000c 	.word	0x2000000c

0800565c <_kill_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	2300      	movs	r3, #0
 8005660:	4d06      	ldr	r5, [pc, #24]	; (800567c <_kill_r+0x20>)
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	4611      	mov	r1, r2
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	f7fb fc4e 	bl	8000f0a <_kill>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	d102      	bne.n	8005678 <_kill_r+0x1c>
 8005672:	682b      	ldr	r3, [r5, #0]
 8005674:	b103      	cbz	r3, 8005678 <_kill_r+0x1c>
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	bd38      	pop	{r3, r4, r5, pc}
 800567a:	bf00      	nop
 800567c:	20000270 	.word	0x20000270

08005680 <_getpid_r>:
 8005680:	f7fb bc3c 	b.w	8000efc <_getpid>

08005684 <_init>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr

08005690 <_fini>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr
