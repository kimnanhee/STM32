
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  080097e0  080097e0  000197e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cb4  08009cb4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009cb4  08009cb4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cb4  08009cb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cb4  08009cb4  00019cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cb8  08009cb8  00019cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  200001e0  08009e9c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c70  08009e9c  00021c70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf97  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004043  00000000  00000000  0003d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  000411e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  000427d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dcf4  00000000  00000000  00043c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196ab  00000000  00000000  00061904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a955c  00000000  00000000  0007afaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012450b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a68  00000000  00000000  00124560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001e0 	.word	0x200001e0
 800020c:	00000000 	.word	0x00000000
 8000210:	080097c8 	.word	0x080097c8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001e4 	.word	0x200001e4
 800022c:	080097c8 	.word	0x080097c8

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_ADC1_Init+0x74>)
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <MX_ADC1_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_ADC1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_ADC1_Init+0x74>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_ADC1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_ADC1_Init+0x74>)
 8000b92:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_ADC1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_ADC1_Init+0x74>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_ADC1_Init+0x74>)
 8000ba6:	f000 fc53 	bl	8001450 <HAL_ADC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bb0:	f000 fa04 	bl	8000fbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_ADC1_Init+0x74>)
 8000bc6:	f000 fe27 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bd0:	f000 f9f4 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20001b10 	.word	0x20001b10
 8000be0:	40012400 	.word	0x40012400

08000be4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <HAL_ADC_MspInit+0xbc>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d149      	bne.n	8000c98 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c04:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <HAL_ADC_MspInit+0xc0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <HAL_ADC_MspInit+0xc0>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_ADC_MspInit+0xc0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <HAL_ADC_MspInit+0xc0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <HAL_ADC_MspInit+0xc0>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_ADC_MspInit+0xc0>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0310 	and.w	r3, r3, #16
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c34:	2320      	movs	r3, #32
 8000c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <HAL_ADC_MspInit+0xc4>)
 8000c44:	f001 fd44 	bl	80026d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c4a:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_ADC_MspInit+0xcc>)
 8000c4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c7e:	f001 f8a5 	bl	8001dcc <HAL_DMA_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000c88:	f000 f998 	bl	8000fbc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c90:	621a      	str	r2, [r3, #32]
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_ADC_MspInit+0xc8>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40012400 	.word	0x40012400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	20001b40 	.word	0x20001b40
 8000cb0:	40020008 	.word	0x40020008

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_DMA_Init+0x38>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	200b      	movs	r0, #11
 8000cd8:	f001 f84d 	bl	8001d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cdc:	200b      	movs	r0, #11
 8000cde:	f001 f866 	bl	8001dae <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BlinkLED1 */
  BlinkLED1Handle = osThreadNew(LED1, NULL, &BlinkLED1_attributes);
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <MX_FREERTOS_Init+0x38>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_FREERTOS_Init+0x3c>)
 8000cfa:	f003 fb5d 	bl	80043b8 <osThreadNew>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <MX_FREERTOS_Init+0x40>)
 8000d02:	6013      	str	r3, [r2, #0]

  /* creation of BlinkLED2 */
  BlinkLED2Handle = osThreadNew(LED2, NULL, &BlinkLED2_attributes);
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <MX_FREERTOS_Init+0x44>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <MX_FREERTOS_Init+0x48>)
 8000d0a:	f003 fb55 	bl	80043b8 <osThreadNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <MX_FREERTOS_Init+0x4c>)
 8000d12:	6013      	str	r3, [r2, #0]

  /* creation of SendCds1 */
  SendCds1Handle = osThreadNew(CDS1, NULL, &SendCds1_attributes);
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <MX_FREERTOS_Init+0x50>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	480a      	ldr	r0, [pc, #40]	; (8000d44 <MX_FREERTOS_Init+0x54>)
 8000d1a:	f003 fb4d 	bl	80043b8 <osThreadNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <MX_FREERTOS_Init+0x58>)
 8000d22:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	0800984c 	.word	0x0800984c
 8000d2c:	08000d4d 	.word	0x08000d4d
 8000d30:	20001b84 	.word	0x20001b84
 8000d34:	08009870 	.word	0x08009870
 8000d38:	08000d6d 	.word	0x08000d6d
 8000d3c:	20001b8c 	.word	0x20001b8c
 8000d40:	08009894 	.word	0x08009894
 8000d44:	08000d8d 	.word	0x08000d8d
 8000d48:	20001b88 	.word	0x20001b88

08000d4c <LED1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LED1 */
void LED1(void *argument)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED1 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8000d54:	2104      	movs	r1, #4
 8000d56:	4804      	ldr	r0, [pc, #16]	; (8000d68 <LED1+0x1c>)
 8000d58:	f001 fe66 	bl	8002a28 <HAL_GPIO_TogglePin>
    osDelay(300);
 8000d5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d60:	f003 fbd4 	bl	800450c <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8000d64:	e7f6      	b.n	8000d54 <LED1+0x8>
 8000d66:	bf00      	nop
 8000d68:	40011800 	.word	0x40011800

08000d6c <LED2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED2 */
void LED2(void *argument)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED2 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000d74:	2108      	movs	r1, #8
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <LED2+0x1c>)
 8000d78:	f001 fe56 	bl	8002a28 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000d7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d80:	f003 fbc4 	bl	800450c <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000d84:	e7f6      	b.n	8000d74 <LED2+0x8>
 8000d86:	bf00      	nop
 8000d88:	40011800 	.word	0x40011800

08000d8c <CDS1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CDS1 */
void CDS1(void *argument)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CDS1 */
	// IN15
	uint32_t ADC_Value_32[1]={0};
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
	uint16_t ADC_Value_16;

	HAL_ADC_Start_DMA(&hadc1, ADC_Value_32, 1);
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <CDS1+0x48>)
 8000da2:	f000 fc3f 	bl	8001624 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  for(;;)
  {
	  ADC_Value_16=(uint16_t)ADC_Value_32[0];
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	81fb      	strh	r3, [r7, #14]
	  ADC_Value_16 &= 0xFFF;
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db0:	81fb      	strh	r3, [r7, #14]

	  printf("\n ADC Value=%d", ADC_Value_16);
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <CDS1+0x4c>)
 8000db8:	f006 fc10 	bl	80075dc <iprintf>
	  HAL_ADC_Start_DMA(&hadc1, ADC_Value_32, 1);
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <CDS1+0x48>)
 8000dc6:	f000 fc2d 	bl	8001624 <HAL_ADC_Start_DMA>

	  osDelay(1000);
 8000dca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dce:	f003 fb9d 	bl	800450c <osDelay>
	  ADC_Value_16=(uint16_t)ADC_Value_32[0];
 8000dd2:	e7e8      	b.n	8000da6 <CDS1+0x1a>
 8000dd4:	20001b10 	.word	0x20001b10
 8000dd8:	08009804 	.word	0x08009804

08000ddc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_GPIO_Init+0x8c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <MX_GPIO_Init+0x8c>)
 8000df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_GPIO_Init+0x8c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_GPIO_Init+0x8c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <MX_GPIO_Init+0x8c>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_GPIO_Init+0x8c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_GPIO_Init+0x8c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <MX_GPIO_Init+0x8c>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_GPIO_Init+0x8c>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	211c      	movs	r1, #28
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <MX_GPIO_Init+0x90>)
 8000e3e:	f001 fddb 	bl	80029f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000e42:	231c      	movs	r3, #28
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4619      	mov	r1, r3
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_GPIO_Init+0x90>)
 8000e5a:	f001 fc39 	bl	80026d0 <HAL_GPIO_Init>

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40011800 	.word	0x40011800

08000e70 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, unsigned char* p, int len)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, p, len, 10);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	230a      	movs	r3, #10
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	4803      	ldr	r0, [pc, #12]	; (8000e94 <_write+0x24>)
 8000e86:	f002 fda6 	bl	80039d6 <HAL_UART_Transmit>
   return len;
 8000e8a:	687b      	ldr	r3, [r7, #4]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20001bd8 	.word	0x20001bd8

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 faa6 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f81c 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f7ff ff9a 	bl	8000ddc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f7ff ff04 	bl	8000cb4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eac:	f7ff fe5c 	bl	8000b68 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000eb0:	f000 f9f8 	bl	80012a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000eb4:	f003 fa1a 	bl	80042ec <osKernelInitialize>
  MX_FREERTOS_Init();
 8000eb8:	f7ff ff1a 	bl	8000cf0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ebc:	f003 fa48 	bl	8004350 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("start program..\n");
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <main+0x3c>)
 8000ec2:	f006 fc11 	bl	80076e8 <puts>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210c      	movs	r1, #12
 8000eca:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <main+0x40>)
 8000ecc:	f001 fd94 	bl	80029f8 <HAL_GPIO_WritePin>

  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <main+0x38>
 8000ed2:	bf00      	nop
 8000ed4:	08009814 	.word	0x08009814
 8000ed8:	40011800 	.word	0x40011800

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b096      	sub	sp, #88	; 0x58
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 ff0e 	bl	8006d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f10:	2301      	movs	r3, #1
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f22:	2302      	movs	r3, #2
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fd90 	bl	8002a5c <HAL_RCC_OscConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f42:	f000 f83b 	bl	8000fbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fffa 	bl	8002f5c <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f6e:	f000 f825 	bl	8000fbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f72:	2302      	movs	r3, #2
 8000f74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f7a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 f9b6 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f8a:	f000 f817 	bl	8000fbc <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3758      	adds	r7, #88	; 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000faa:	f000 fa35 	bl	8001418 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40001000 	.word	0x40001000

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <Error_Handler+0x8>
	...

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_MspInit+0x68>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_MspInit+0x68>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6193      	str	r3, [r2, #24]
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_MspInit+0x68>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_MspInit+0x68>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_MspInit+0x68>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_MspInit+0x68>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	210f      	movs	r1, #15
 8001002:	f06f 0001 	mvn.w	r0, #1
 8001006:	f000 feb6 	bl	8001d76 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_MspInit+0x6c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_MspInit+0x6c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	40010000 	.word	0x40010000

08001038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2036      	movs	r0, #54	; 0x36
 800104e:	f000 fe92 	bl	8001d76 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001052:	2036      	movs	r0, #54	; 0x36
 8001054:	f000 feab 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <HAL_InitTick+0xa0>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <HAL_InitTick+0xa0>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	61d3      	str	r3, [r2, #28]
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <HAL_InitTick+0xa0>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001070:	f107 0210 	add.w	r2, r7, #16
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f002 f8ea 	bl	8003254 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001080:	f002 f8c0 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8001084:	4603      	mov	r3, r0
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108c:	4a13      	ldr	r2, [pc, #76]	; (80010dc <HAL_InitTick+0xa4>)
 800108e:	fba2 2303 	umull	r2, r3, r2, r3
 8001092:	0c9b      	lsrs	r3, r3, #18
 8001094:	3b01      	subs	r3, #1
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_InitTick+0xa8>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <HAL_InitTick+0xac>)
 800109c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_InitTick+0xa8>)
 80010a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <HAL_InitTick+0xa8>)
 80010a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_InitTick+0xa8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_InitTick+0xa8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010b8:	4809      	ldr	r0, [pc, #36]	; (80010e0 <HAL_InitTick+0xa8>)
 80010ba:	f002 f9cf 	bl	800345c <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d104      	bne.n	80010ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <HAL_InitTick+0xa8>)
 80010c6:	f002 fa21 	bl	800350c <HAL_TIM_Base_Start_IT>
 80010ca:	4603      	mov	r3, r0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3730      	adds	r7, #48	; 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	431bde83 	.word	0x431bde83
 80010e0:	20001b90 	.word	0x20001b90
 80010e4:	40001000 	.word	0x40001000

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
	...

08001114 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <DMA1_Channel1_IRQHandler+0x10>)
 800111a:	f001 f86f 	bl	80021fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001b40 	.word	0x20001b40

08001128 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART1_IRQHandler+0x10>)
 800112e:	f002 fce5 	bl	8003afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20001bd8 	.word	0x20001bd8

0800113c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <TIM6_IRQHandler+0x10>)
 8001142:	f002 fa43 	bl	80035cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20001b90 	.word	0x20001b90

08001150 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <_kill>:

int _kill(int pid, int sig)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001168:	f005 fd98 	bl	8006c9c <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	2216      	movs	r2, #22
 8001170:	601a      	str	r2, [r3, #0]
	return -1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_exit>:

void _exit (int status)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001186:	f04f 31ff 	mov.w	r1, #4294967295
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffe7 	bl	800115e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001190:	e7fe      	b.n	8001190 <_exit+0x12>

08001192 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e00a      	b.n	80011ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011a4:	f3af 8000 	nop.w
 80011a8:	4601      	mov	r1, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	60ba      	str	r2, [r7, #8]
 80011b0:	b2ca      	uxtb	r2, r1
 80011b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3301      	adds	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	dbf0      	blt.n	80011a4 <_read+0x12>
	}

return len;
 80011c2:	687b      	ldr	r3, [r7, #4]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_close>:
	}
	return len;
}

int _close(int file)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f2:	605a      	str	r2, [r3, #4]
	return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <_isatty>:

int _isatty(int file)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f005 fd1e 	bl	8006c9c <__errno>
 8001260:	4603      	mov	r3, r0
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <_sbrk+0x64>)
 800127c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000c000 	.word	0x2000c000
 800128c:	00000400 	.word	0x00000400
 8001290:	200001fc 	.word	0x200001fc
 8001294:	20001c70 	.word	0x20001c70

08001298 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_USART1_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012dc:	f002 fb2e 	bl	800393c <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012e6:	f7ff fe69 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20001bd8 	.word	0x20001bd8
 80012f4:	40013800 	.word	0x40013800

080012f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a20      	ldr	r2, [pc, #128]	; (8001394 <HAL_UART_MspInit+0x9c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d139      	bne.n	800138c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_UART_MspInit+0xa0>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_UART_MspInit+0xa0>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_UART_MspInit+0xa0>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_UART_MspInit+0xa0>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_UART_MspInit+0xa0>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_UART_MspInit+0xa0>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	4619      	mov	r1, r3
 800135c:	480f      	ldr	r0, [pc, #60]	; (800139c <HAL_UART_MspInit+0xa4>)
 800135e:	f001 f9b7 	bl	80026d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <HAL_UART_MspInit+0xa4>)
 8001378:	f001 f9aa 	bl	80026d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	2025      	movs	r0, #37	; 0x25
 8001382:	f000 fcf8 	bl	8001d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001386:	2025      	movs	r0, #37	; 0x25
 8001388:	f000 fd11 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013800 	.word	0x40013800
 8001398:	40021000 	.word	0x40021000
 800139c:	40010800 	.word	0x40010800

080013a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	; (80013d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	; (80013e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013c6:	f7ff ff67 	bl	8001298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f005 fc6d 	bl	8006ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ce:	f7ff fd63 	bl	8000e98 <main>
  bx lr
 80013d2:	4770      	bx	lr
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80013dc:	08009cbc 	.word	0x08009cbc
  ldr r2, =_sbss
 80013e0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80013e4:	20001c70 	.word	0x20001c70

080013e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_2_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x28>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 fcaf 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fe18 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fdde 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_IncTick+0x1c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x20>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a03      	ldr	r2, [pc, #12]	; (8001438 <HAL_IncTick+0x20>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	20000008 	.word	0x20000008
 8001438:	20001c1c 	.word	0x20001c1c

0800143c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b02      	ldr	r3, [pc, #8]	; (800144c <HAL_GetTick+0x10>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20001c1c 	.word	0x20001c1c

08001450 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0ce      	b.n	8001610 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fba8 	bl	8000be4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fb11 	bl	8001abc <ADC_ConversionStop_Disable>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	f003 0310 	and.w	r3, r3, #16
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 80a9 	bne.w	80015fe <HAL_ADC_Init+0x1ae>
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f040 80a5 	bne.w	80015fe <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014bc:	f023 0302 	bic.w	r3, r3, #2
 80014c0:	f043 0202 	orr.w	r2, r3, #2
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4951      	ldr	r1, [pc, #324]	; (8001618 <HAL_ADC_Init+0x1c8>)
 80014d2:	428b      	cmp	r3, r1
 80014d4:	d10a      	bne.n	80014ec <HAL_ADC_Init+0x9c>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80014de:	d002      	beq.n	80014e6 <HAL_ADC_Init+0x96>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	e004      	b.n	80014f0 <HAL_ADC_Init+0xa0>
 80014e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014ea:	e001      	b.n	80014f0 <HAL_ADC_Init+0xa0>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7b1b      	ldrb	r3, [r3, #12]
 80014f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001508:	d003      	beq.n	8001512 <HAL_ADC_Init+0xc2>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d102      	bne.n	8001518 <HAL_ADC_Init+0xc8>
 8001512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001516:	e000      	b.n	800151a <HAL_ADC_Init+0xca>
 8001518:	2300      	movs	r3, #0
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7d1b      	ldrb	r3, [r3, #20]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d119      	bne.n	800155c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7b1b      	ldrb	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	3b01      	subs	r3, #1
 8001536:	035a      	lsls	r2, r3, #13
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	e00b      	b.n	800155c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	f043 0220 	orr.w	r2, r3, #32
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	430a      	orrs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_ADC_Init+0x1cc>)
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	430b      	orrs	r3, r1
 8001582:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800158c:	d003      	beq.n	8001596 <HAL_ADC_Init+0x146>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d104      	bne.n	80015a0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	3b01      	subs	r3, #1
 800159c:	051b      	lsls	r3, r3, #20
 800159e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_ADC_Init+0x1d0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d10b      	bne.n	80015dc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f023 0303 	bic.w	r3, r3, #3
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015da:	e018      	b.n	800160e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f023 0312 	bic.w	r3, r3, #18
 80015e4:	f043 0210 	orr.w	r2, r3, #16
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015fc:	e007      	b.n	800160e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	f043 0210 	orr.w	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800160e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40013c00 	.word	0x40013c00
 800161c:	ffe1f7fd 	.word	0xffe1f7fd
 8001620:	ff1f0efe 	.word	0xff1f0efe

08001624 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a64      	ldr	r2, [pc, #400]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d004      	beq.n	8001648 <HAL_ADC_Start_DMA+0x24>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a63      	ldr	r2, [pc, #396]	; (80017d0 <HAL_ADC_Start_DMA+0x1ac>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d106      	bne.n	8001656 <HAL_ADC_Start_DMA+0x32>
 8001648:	4b60      	ldr	r3, [pc, #384]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 80b3 	bne.w	80017bc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADC_Start_DMA+0x40>
 8001660:	2302      	movs	r3, #2
 8001662:	e0ae      	b.n	80017c2 <HAL_ADC_Start_DMA+0x19e>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 f9cb 	bl	8001a08 <ADC_Enable>
 8001672:	4603      	mov	r3, r0
 8001674:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f040 809a 	bne.w	80017b2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_ADC_Start_DMA+0x1ac>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_Start_DMA+0x84>
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d115      	bne.n	80016d4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d026      	beq.n	8001710 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016d2:	e01d      	b.n	8001710 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a39      	ldr	r2, [pc, #228]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d004      	beq.n	80016f4 <HAL_ADC_Start_DMA+0xd0>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <HAL_ADC_Start_DMA+0x1ac>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d10d      	bne.n	8001710 <HAL_ADC_Start_DMA+0xec>
 80016f4:	4b35      	ldr	r3, [pc, #212]	; (80017cc <HAL_ADC_Start_DMA+0x1a8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d007      	beq.n	8001710 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001708:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	f023 0206 	bic.w	r2, r3, #6
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
 8001728:	e002      	b.n	8001730 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <HAL_ADC_Start_DMA+0x1b0>)
 800173e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_ADC_Start_DMA+0x1b4>)
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_ADC_Start_DMA+0x1b8>)
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0202 	mvn.w	r2, #2
 8001758:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001768:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a18      	ldr	r0, [r3, #32]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	334c      	adds	r3, #76	; 0x4c
 8001774:	4619      	mov	r1, r3
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f000 fb9d 	bl	8001eb8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001788:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800178c:	d108      	bne.n	80017a0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800179c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800179e:	e00f      	b.n	80017c0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017ae:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017b0:	e006      	b.n	80017c0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80017ba:	e001      	b.n	80017c0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40012400 	.word	0x40012400
 80017d0:	40012800 	.word	0x40012800
 80017d4:	08001b3f 	.word	0x08001b3f
 80017d8:	08001bbb 	.word	0x08001bbb
 80017dc:	08001bd7 	.word	0x08001bd7

080017e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
	...

08001818 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x20>
 8001834:	2302      	movs	r3, #2
 8001836:	e0dc      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x1da>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b06      	cmp	r3, #6
 8001846:	d81c      	bhi.n	8001882 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	3b05      	subs	r3, #5
 800185a:	221f      	movs	r2, #31
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	4019      	ands	r1, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	3b05      	subs	r3, #5
 8001874:	fa00 f203 	lsl.w	r2, r0, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
 8001880:	e03c      	b.n	80018fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d81c      	bhi.n	80018c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b23      	subs	r3, #35	; 0x23
 800189c:	221f      	movs	r2, #31
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	4019      	ands	r1, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3b23      	subs	r3, #35	; 0x23
 80018b6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
 80018c2:	e01b      	b.n	80018fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	3b41      	subs	r3, #65	; 0x41
 80018d6:	221f      	movs	r2, #31
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	4019      	ands	r1, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	3b41      	subs	r3, #65	; 0x41
 80018f0:	fa00 f203 	lsl.w	r2, r0, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b09      	cmp	r3, #9
 8001902:	d91c      	bls.n	800193e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68d9      	ldr	r1, [r3, #12]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	3b1e      	subs	r3, #30
 8001916:	2207      	movs	r2, #7
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6898      	ldr	r0, [r3, #8]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	3b1e      	subs	r3, #30
 8001930:	fa00 f203 	lsl.w	r2, r0, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	e019      	b.n	8001972 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6919      	ldr	r1, [r3, #16]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	2207      	movs	r2, #7
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	4019      	ands	r1, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6898      	ldr	r0, [r3, #8]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	fa00 f203 	lsl.w	r2, r0, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b10      	cmp	r3, #16
 8001978:	d003      	beq.n	8001982 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800197e:	2b11      	cmp	r3, #17
 8001980:	d132      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_ADC_ConfigChannel+0x1e4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d125      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d126      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d11a      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_ADC_ConfigChannel+0x1e8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <HAL_ADC_ConfigChannel+0x1ec>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	0c9a      	lsrs	r2, r3, #18
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019c8:	e002      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f9      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x1b2>
 80019d6:	e007      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	f043 0220 	orr.w	r2, r3, #32
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	40012400 	.word	0x40012400
 8001a00:	20000000 	.word	0x20000000
 8001a04:	431bde83 	.word	0x431bde83

08001a08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d040      	beq.n	8001aa8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <ADC_Enable+0xac>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	; (8001ab8 <ADC_Enable+0xb0>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a44:	e002      	b.n	8001a4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f9      	bne.n	8001a46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a52:	f7ff fcf3 	bl	800143c <HAL_GetTick>
 8001a56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a58:	e01f      	b.n	8001a9a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a5a:	f7ff fcef 	bl	800143c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d918      	bls.n	8001a9a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d011      	beq.n	8001a9a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	f043 0210 	orr.w	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e007      	b.n	8001aaa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d1d8      	bne.n	8001a5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	431bde83 	.word	0x431bde83

08001abc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d12e      	bne.n	8001b34 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0201 	bic.w	r2, r2, #1
 8001ae4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ae6:	f7ff fca9 	bl	800143c <HAL_GetTick>
 8001aea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aec:	e01b      	b.n	8001b26 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aee:	f7ff fca5 	bl	800143c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d914      	bls.n	8001b26 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10d      	bne.n	8001b26 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	f043 0210 	orr.w	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e007      	b.n	8001b36 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d0dc      	beq.n	8001aee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d127      	bne.n	8001ba8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b72:	d115      	bne.n	8001ba0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d111      	bne.n	8001ba0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7ff fe1d 	bl	80017e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ba6:	e004      	b.n	8001bb2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7ff fe12 	bl	80017f2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	f043 0204 	orr.w	r2, r3, #4
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff fe01 	bl	8001804 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4906      	ldr	r1, [pc, #24]	; (8001ca4 <__NVIC_EnableIRQ+0x34>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff4f 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff64 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ffb2 	bl	8001cfc <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff81 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff57 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e059      	b.n	8001e96 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_DMA_Init+0xd4>)
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d80f      	bhi.n	8001e0e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_DMA_Init+0xd8>)
 8001df6:	4413      	add	r3, r2
 8001df8:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <HAL_DMA_Init+0xdc>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a28      	ldr	r2, [pc, #160]	; (8001eac <HAL_DMA_Init+0xe0>)
 8001e0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e0c:	e00e      	b.n	8001e2c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_DMA_Init+0xe4>)
 8001e16:	4413      	add	r3, r2
 8001e18:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_DMA_Init+0xdc>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	009a      	lsls	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a22      	ldr	r2, [pc, #136]	; (8001eb4 <HAL_DMA_Init+0xe8>)
 8001e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	40020407 	.word	0x40020407
 8001ea4:	bffdfff8 	.word	0xbffdfff8
 8001ea8:	cccccccd 	.word	0xcccccccd
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	bffdfbf8 	.word	0xbffdfbf8
 8001eb4:	40020400 	.word	0x40020400

08001eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_DMA_Start_IT+0x20>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e04a      	b.n	8001f6e <HAL_DMA_Start_IT+0xb6>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d13a      	bne.n	8001f60 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2202      	movs	r2, #2
 8001eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fbb0 	bl	8002674 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 020e 	orr.w	r2, r2, #14
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e00f      	b.n	8001f4e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0204 	bic.w	r2, r2, #4
 8001f3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 020a 	orr.w	r2, r2, #10
 8001f4c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e005      	b.n	8001f6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d008      	beq.n	8001f9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2204      	movs	r2, #4
 8001f90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e020      	b.n	8001fe0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 020e 	bic.w	r2, r2, #14
 8001fac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d005      	beq.n	800200e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2204      	movs	r2, #4
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e0d6      	b.n	80021bc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 020e 	bic.w	r2, r2, #14
 800201c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_DMA_Abort_IT+0x1dc>)
 8002036:	429a      	cmp	r2, r3
 8002038:	d958      	bls.n	80020ec <HAL_DMA_Abort_IT+0x100>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a63      	ldr	r2, [pc, #396]	; (80021cc <HAL_DMA_Abort_IT+0x1e0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d04f      	beq.n	80020e4 <HAL_DMA_Abort_IT+0xf8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a61      	ldr	r2, [pc, #388]	; (80021d0 <HAL_DMA_Abort_IT+0x1e4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d048      	beq.n	80020e0 <HAL_DMA_Abort_IT+0xf4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a60      	ldr	r2, [pc, #384]	; (80021d4 <HAL_DMA_Abort_IT+0x1e8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d040      	beq.n	80020da <HAL_DMA_Abort_IT+0xee>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a5e      	ldr	r2, [pc, #376]	; (80021d8 <HAL_DMA_Abort_IT+0x1ec>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d038      	beq.n	80020d4 <HAL_DMA_Abort_IT+0xe8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <HAL_DMA_Abort_IT+0x1f0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d030      	beq.n	80020ce <HAL_DMA_Abort_IT+0xe2>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a5b      	ldr	r2, [pc, #364]	; (80021e0 <HAL_DMA_Abort_IT+0x1f4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d028      	beq.n	80020c8 <HAL_DMA_Abort_IT+0xdc>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a53      	ldr	r2, [pc, #332]	; (80021c8 <HAL_DMA_Abort_IT+0x1dc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d020      	beq.n	80020c2 <HAL_DMA_Abort_IT+0xd6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a57      	ldr	r2, [pc, #348]	; (80021e4 <HAL_DMA_Abort_IT+0x1f8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d019      	beq.n	80020be <HAL_DMA_Abort_IT+0xd2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <HAL_DMA_Abort_IT+0x1fc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d012      	beq.n	80020ba <HAL_DMA_Abort_IT+0xce>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a54      	ldr	r2, [pc, #336]	; (80021ec <HAL_DMA_Abort_IT+0x200>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00a      	beq.n	80020b4 <HAL_DMA_Abort_IT+0xc8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a53      	ldr	r2, [pc, #332]	; (80021f0 <HAL_DMA_Abort_IT+0x204>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d102      	bne.n	80020ae <HAL_DMA_Abort_IT+0xc2>
 80020a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ac:	e01b      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020b2:	e018      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b8:	e015      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020ba:	2310      	movs	r3, #16
 80020bc:	e013      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020be:	2301      	movs	r3, #1
 80020c0:	e011      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c6:	e00e      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020cc:	e00b      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d2:	e008      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d8:	e005      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020de:	e002      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020e0:	2310      	movs	r3, #16
 80020e2:	e000      	b.n	80020e6 <HAL_DMA_Abort_IT+0xfa>
 80020e4:	2301      	movs	r3, #1
 80020e6:	4a43      	ldr	r2, [pc, #268]	; (80021f4 <HAL_DMA_Abort_IT+0x208>)
 80020e8:	6053      	str	r3, [r2, #4]
 80020ea:	e057      	b.n	800219c <HAL_DMA_Abort_IT+0x1b0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a36      	ldr	r2, [pc, #216]	; (80021cc <HAL_DMA_Abort_IT+0x1e0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d04f      	beq.n	8002196 <HAL_DMA_Abort_IT+0x1aa>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a35      	ldr	r2, [pc, #212]	; (80021d0 <HAL_DMA_Abort_IT+0x1e4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d048      	beq.n	8002192 <HAL_DMA_Abort_IT+0x1a6>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <HAL_DMA_Abort_IT+0x1e8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d040      	beq.n	800218c <HAL_DMA_Abort_IT+0x1a0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_DMA_Abort_IT+0x1ec>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d038      	beq.n	8002186 <HAL_DMA_Abort_IT+0x19a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a30      	ldr	r2, [pc, #192]	; (80021dc <HAL_DMA_Abort_IT+0x1f0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d030      	beq.n	8002180 <HAL_DMA_Abort_IT+0x194>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <HAL_DMA_Abort_IT+0x1f4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d028      	beq.n	800217a <HAL_DMA_Abort_IT+0x18e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <HAL_DMA_Abort_IT+0x1dc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d020      	beq.n	8002174 <HAL_DMA_Abort_IT+0x188>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2b      	ldr	r2, [pc, #172]	; (80021e4 <HAL_DMA_Abort_IT+0x1f8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d019      	beq.n	8002170 <HAL_DMA_Abort_IT+0x184>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a29      	ldr	r2, [pc, #164]	; (80021e8 <HAL_DMA_Abort_IT+0x1fc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d012      	beq.n	800216c <HAL_DMA_Abort_IT+0x180>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a28      	ldr	r2, [pc, #160]	; (80021ec <HAL_DMA_Abort_IT+0x200>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00a      	beq.n	8002166 <HAL_DMA_Abort_IT+0x17a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <HAL_DMA_Abort_IT+0x204>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d102      	bne.n	8002160 <HAL_DMA_Abort_IT+0x174>
 800215a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215e:	e01b      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 8002160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002164:	e018      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 8002166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216a:	e015      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 800216c:	2310      	movs	r3, #16
 800216e:	e013      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 8002170:	2301      	movs	r3, #1
 8002172:	e011      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 8002174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002178:	e00e      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 800217a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800217e:	e00b      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 8002180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002184:	e008      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 8002186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218a:	e005      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 800218c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002190:	e002      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 8002192:	2310      	movs	r3, #16
 8002194:	e000      	b.n	8002198 <HAL_DMA_Abort_IT+0x1ac>
 8002196:	2301      	movs	r3, #1
 8002198:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <HAL_DMA_Abort_IT+0x20c>)
 800219a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
    } 
  }
  return status;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40020080 	.word	0x40020080
 80021cc:	40020008 	.word	0x40020008
 80021d0:	4002001c 	.word	0x4002001c
 80021d4:	40020030 	.word	0x40020030
 80021d8:	40020044 	.word	0x40020044
 80021dc:	40020058 	.word	0x40020058
 80021e0:	4002006c 	.word	0x4002006c
 80021e4:	40020408 	.word	0x40020408
 80021e8:	4002041c 	.word	0x4002041c
 80021ec:	40020430 	.word	0x40020430
 80021f0:	40020444 	.word	0x40020444
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40020000 	.word	0x40020000

080021fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	2204      	movs	r2, #4
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80d6 	beq.w	80023d2 <HAL_DMA_IRQHandler+0x1d6>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80d0 	beq.w	80023d2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b9b      	ldr	r3, [pc, #620]	; (80024c4 <HAL_DMA_IRQHandler+0x2c8>)
 8002258:	429a      	cmp	r2, r3
 800225a:	d958      	bls.n	800230e <HAL_DMA_IRQHandler+0x112>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a99      	ldr	r2, [pc, #612]	; (80024c8 <HAL_DMA_IRQHandler+0x2cc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d04f      	beq.n	8002306 <HAL_DMA_IRQHandler+0x10a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a98      	ldr	r2, [pc, #608]	; (80024cc <HAL_DMA_IRQHandler+0x2d0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d048      	beq.n	8002302 <HAL_DMA_IRQHandler+0x106>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a96      	ldr	r2, [pc, #600]	; (80024d0 <HAL_DMA_IRQHandler+0x2d4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d040      	beq.n	80022fc <HAL_DMA_IRQHandler+0x100>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a95      	ldr	r2, [pc, #596]	; (80024d4 <HAL_DMA_IRQHandler+0x2d8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d038      	beq.n	80022f6 <HAL_DMA_IRQHandler+0xfa>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a93      	ldr	r2, [pc, #588]	; (80024d8 <HAL_DMA_IRQHandler+0x2dc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d030      	beq.n	80022f0 <HAL_DMA_IRQHandler+0xf4>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a92      	ldr	r2, [pc, #584]	; (80024dc <HAL_DMA_IRQHandler+0x2e0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d028      	beq.n	80022ea <HAL_DMA_IRQHandler+0xee>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a89      	ldr	r2, [pc, #548]	; (80024c4 <HAL_DMA_IRQHandler+0x2c8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d020      	beq.n	80022e4 <HAL_DMA_IRQHandler+0xe8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a8e      	ldr	r2, [pc, #568]	; (80024e0 <HAL_DMA_IRQHandler+0x2e4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d019      	beq.n	80022e0 <HAL_DMA_IRQHandler+0xe4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a8c      	ldr	r2, [pc, #560]	; (80024e4 <HAL_DMA_IRQHandler+0x2e8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d012      	beq.n	80022dc <HAL_DMA_IRQHandler+0xe0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a8b      	ldr	r2, [pc, #556]	; (80024e8 <HAL_DMA_IRQHandler+0x2ec>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00a      	beq.n	80022d6 <HAL_DMA_IRQHandler+0xda>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a89      	ldr	r2, [pc, #548]	; (80024ec <HAL_DMA_IRQHandler+0x2f0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d102      	bne.n	80022d0 <HAL_DMA_IRQHandler+0xd4>
 80022ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ce:	e01b      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 80022d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022d4:	e018      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 80022d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022da:	e015      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 80022dc:	2340      	movs	r3, #64	; 0x40
 80022de:	e013      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 80022e0:	2304      	movs	r3, #4
 80022e2:	e011      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 80022e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022e8:	e00e      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 80022ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ee:	e00b      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 80022f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022f4:	e008      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 80022f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022fa:	e005      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 80022fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002300:	e002      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 8002302:	2340      	movs	r3, #64	; 0x40
 8002304:	e000      	b.n	8002308 <HAL_DMA_IRQHandler+0x10c>
 8002306:	2304      	movs	r3, #4
 8002308:	4a79      	ldr	r2, [pc, #484]	; (80024f0 <HAL_DMA_IRQHandler+0x2f4>)
 800230a:	6053      	str	r3, [r2, #4]
 800230c:	e057      	b.n	80023be <HAL_DMA_IRQHandler+0x1c2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6d      	ldr	r2, [pc, #436]	; (80024c8 <HAL_DMA_IRQHandler+0x2cc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d04f      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x1bc>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6b      	ldr	r2, [pc, #428]	; (80024cc <HAL_DMA_IRQHandler+0x2d0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d048      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x1b8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_DMA_IRQHandler+0x2d4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d040      	beq.n	80023ae <HAL_DMA_IRQHandler+0x1b2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a68      	ldr	r2, [pc, #416]	; (80024d4 <HAL_DMA_IRQHandler+0x2d8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d038      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x1ac>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a67      	ldr	r2, [pc, #412]	; (80024d8 <HAL_DMA_IRQHandler+0x2dc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d030      	beq.n	80023a2 <HAL_DMA_IRQHandler+0x1a6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a65      	ldr	r2, [pc, #404]	; (80024dc <HAL_DMA_IRQHandler+0x2e0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d028      	beq.n	800239c <HAL_DMA_IRQHandler+0x1a0>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <HAL_DMA_IRQHandler+0x2c8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d020      	beq.n	8002396 <HAL_DMA_IRQHandler+0x19a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a61      	ldr	r2, [pc, #388]	; (80024e0 <HAL_DMA_IRQHandler+0x2e4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_DMA_IRQHandler+0x196>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a60      	ldr	r2, [pc, #384]	; (80024e4 <HAL_DMA_IRQHandler+0x2e8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d012      	beq.n	800238e <HAL_DMA_IRQHandler+0x192>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a5e      	ldr	r2, [pc, #376]	; (80024e8 <HAL_DMA_IRQHandler+0x2ec>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00a      	beq.n	8002388 <HAL_DMA_IRQHandler+0x18c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a5d      	ldr	r2, [pc, #372]	; (80024ec <HAL_DMA_IRQHandler+0x2f0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d102      	bne.n	8002382 <HAL_DMA_IRQHandler+0x186>
 800237c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002380:	e01b      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 8002382:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002386:	e018      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 8002388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238c:	e015      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 800238e:	2340      	movs	r3, #64	; 0x40
 8002390:	e013      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 8002392:	2304      	movs	r3, #4
 8002394:	e011      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 8002396:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800239a:	e00e      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 800239c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023a0:	e00b      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 80023a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023a6:	e008      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 80023a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ac:	e005      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 80023ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023b2:	e002      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	e000      	b.n	80023ba <HAL_DMA_IRQHandler+0x1be>
 80023b8:	2304      	movs	r3, #4
 80023ba:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <HAL_DMA_IRQHandler+0x2f8>)
 80023bc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8136 	beq.w	8002634 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023d0:	e130      	b.n	8002634 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2202      	movs	r2, #2
 80023d8:	409a      	lsls	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80f8 	beq.w	80025d4 <HAL_DMA_IRQHandler+0x3d8>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80f2 	beq.w	80025d4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10b      	bne.n	8002416 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 020a 	bic.w	r2, r2, #10
 800240c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <HAL_DMA_IRQHandler+0x2c8>)
 800241e:	429a      	cmp	r2, r3
 8002420:	d973      	bls.n	800250a <HAL_DMA_IRQHandler+0x30e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a28      	ldr	r2, [pc, #160]	; (80024c8 <HAL_DMA_IRQHandler+0x2cc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d06a      	beq.n	8002502 <HAL_DMA_IRQHandler+0x306>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_DMA_IRQHandler+0x2d0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d063      	beq.n	80024fe <HAL_DMA_IRQHandler+0x302>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <HAL_DMA_IRQHandler+0x2d4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d05b      	beq.n	80024f8 <HAL_DMA_IRQHandler+0x2fc>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <HAL_DMA_IRQHandler+0x2d8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d038      	beq.n	80024bc <HAL_DMA_IRQHandler+0x2c0>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_DMA_IRQHandler+0x2dc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d030      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x2ba>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <HAL_DMA_IRQHandler+0x2e0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d028      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x2b4>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_DMA_IRQHandler+0x2c8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d020      	beq.n	80024aa <HAL_DMA_IRQHandler+0x2ae>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_DMA_IRQHandler+0x2e4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d019      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x2aa>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_DMA_IRQHandler+0x2e8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d012      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x2a6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_DMA_IRQHandler+0x2ec>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00a      	beq.n	800249c <HAL_DMA_IRQHandler+0x2a0>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a18      	ldr	r2, [pc, #96]	; (80024ec <HAL_DMA_IRQHandler+0x2f0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d102      	bne.n	8002496 <HAL_DMA_IRQHandler+0x29a>
 8002490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002494:	e036      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 8002496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249a:	e033      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 800249c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a0:	e030      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 80024a2:	2320      	movs	r3, #32
 80024a4:	e02e      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e02c      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 80024aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ae:	e029      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 80024b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024b4:	e026      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 80024b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ba:	e023      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 80024bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c0:	e020      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 80024c2:	bf00      	nop
 80024c4:	40020080 	.word	0x40020080
 80024c8:	40020008 	.word	0x40020008
 80024cc:	4002001c 	.word	0x4002001c
 80024d0:	40020030 	.word	0x40020030
 80024d4:	40020044 	.word	0x40020044
 80024d8:	40020058 	.word	0x40020058
 80024dc:	4002006c 	.word	0x4002006c
 80024e0:	40020408 	.word	0x40020408
 80024e4:	4002041c 	.word	0x4002041c
 80024e8:	40020430 	.word	0x40020430
 80024ec:	40020444 	.word	0x40020444
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020000 	.word	0x40020000
 80024f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fc:	e002      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 80024fe:	2320      	movs	r3, #32
 8002500:	e000      	b.n	8002504 <HAL_DMA_IRQHandler+0x308>
 8002502:	2302      	movs	r3, #2
 8002504:	4a4e      	ldr	r2, [pc, #312]	; (8002640 <HAL_DMA_IRQHandler+0x444>)
 8002506:	6053      	str	r3, [r2, #4]
 8002508:	e057      	b.n	80025ba <HAL_DMA_IRQHandler+0x3be>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a4d      	ldr	r2, [pc, #308]	; (8002644 <HAL_DMA_IRQHandler+0x448>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d04f      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x3b8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <HAL_DMA_IRQHandler+0x44c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d048      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x3b4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a4a      	ldr	r2, [pc, #296]	; (800264c <HAL_DMA_IRQHandler+0x450>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d040      	beq.n	80025aa <HAL_DMA_IRQHandler+0x3ae>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a48      	ldr	r2, [pc, #288]	; (8002650 <HAL_DMA_IRQHandler+0x454>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d038      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x3a8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a47      	ldr	r2, [pc, #284]	; (8002654 <HAL_DMA_IRQHandler+0x458>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d030      	beq.n	800259e <HAL_DMA_IRQHandler+0x3a2>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a45      	ldr	r2, [pc, #276]	; (8002658 <HAL_DMA_IRQHandler+0x45c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d028      	beq.n	8002598 <HAL_DMA_IRQHandler+0x39c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a44      	ldr	r2, [pc, #272]	; (800265c <HAL_DMA_IRQHandler+0x460>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d020      	beq.n	8002592 <HAL_DMA_IRQHandler+0x396>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a42      	ldr	r2, [pc, #264]	; (8002660 <HAL_DMA_IRQHandler+0x464>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d019      	beq.n	800258e <HAL_DMA_IRQHandler+0x392>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a41      	ldr	r2, [pc, #260]	; (8002664 <HAL_DMA_IRQHandler+0x468>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d012      	beq.n	800258a <HAL_DMA_IRQHandler+0x38e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_DMA_IRQHandler+0x46c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00a      	beq.n	8002584 <HAL_DMA_IRQHandler+0x388>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a3e      	ldr	r2, [pc, #248]	; (800266c <HAL_DMA_IRQHandler+0x470>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d102      	bne.n	800257e <HAL_DMA_IRQHandler+0x382>
 8002578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257c:	e01b      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 800257e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002582:	e018      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 8002584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002588:	e015      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 800258a:	2320      	movs	r3, #32
 800258c:	e013      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 800258e:	2302      	movs	r3, #2
 8002590:	e011      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 8002592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002596:	e00e      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 8002598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800259c:	e00b      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 800259e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a2:	e008      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 80025a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a8:	e005      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 80025aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ae:	e002      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 80025b0:	2320      	movs	r3, #32
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_IRQHandler+0x3ba>
 80025b4:	2302      	movs	r3, #2
 80025b6:	4a2e      	ldr	r2, [pc, #184]	; (8002670 <HAL_DMA_IRQHandler+0x474>)
 80025b8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d034      	beq.n	8002634 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025d2:	e02f      	b.n	8002634 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2208      	movs	r2, #8
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d028      	beq.n	8002636 <HAL_DMA_IRQHandler+0x43a>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d023      	beq.n	8002636 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020e 	bic.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
    }
  }
  return;
 8002634:	bf00      	nop
 8002636:	bf00      	nop
}
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40020400 	.word	0x40020400
 8002644:	40020008 	.word	0x40020008
 8002648:	4002001c 	.word	0x4002001c
 800264c:	40020030 	.word	0x40020030
 8002650:	40020044 	.word	0x40020044
 8002654:	40020058 	.word	0x40020058
 8002658:	4002006c 	.word	0x4002006c
 800265c:	40020080 	.word	0x40020080
 8002660:	40020408 	.word	0x40020408
 8002664:	4002041c 	.word	0x4002041c
 8002668:	40020430 	.word	0x40020430
 800266c:	40020444 	.word	0x40020444
 8002670:	40020000 	.word	0x40020000

08002674 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b10      	cmp	r3, #16
 80026a0:	d108      	bne.n	80026b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026b2:	e007      	b.n	80026c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b08b      	sub	sp, #44	; 0x2c
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e2:	e179      	b.n	80029d8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026e4:	2201      	movs	r2, #1
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 8168 	bne.w	80029d2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4aa0      	ldr	r2, [pc, #640]	; (8002988 <HAL_GPIO_Init+0x2b8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d05e      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 800270c:	4a9e      	ldr	r2, [pc, #632]	; (8002988 <HAL_GPIO_Init+0x2b8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d875      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 8002712:	4a9e      	ldr	r2, [pc, #632]	; (800298c <HAL_GPIO_Init+0x2bc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d058      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 8002718:	4a9c      	ldr	r2, [pc, #624]	; (800298c <HAL_GPIO_Init+0x2bc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d86f      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 800271e:	4a9c      	ldr	r2, [pc, #624]	; (8002990 <HAL_GPIO_Init+0x2c0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d052      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 8002724:	4a9a      	ldr	r2, [pc, #616]	; (8002990 <HAL_GPIO_Init+0x2c0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d869      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 800272a:	4a9a      	ldr	r2, [pc, #616]	; (8002994 <HAL_GPIO_Init+0x2c4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d04c      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 8002730:	4a98      	ldr	r2, [pc, #608]	; (8002994 <HAL_GPIO_Init+0x2c4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d863      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 8002736:	4a98      	ldr	r2, [pc, #608]	; (8002998 <HAL_GPIO_Init+0x2c8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d046      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
 800273c:	4a96      	ldr	r2, [pc, #600]	; (8002998 <HAL_GPIO_Init+0x2c8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d85d      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 8002742:	2b12      	cmp	r3, #18
 8002744:	d82a      	bhi.n	800279c <HAL_GPIO_Init+0xcc>
 8002746:	2b12      	cmp	r3, #18
 8002748:	d859      	bhi.n	80027fe <HAL_GPIO_Init+0x12e>
 800274a:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <HAL_GPIO_Init+0x80>)
 800274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002750:	080027cb 	.word	0x080027cb
 8002754:	080027a5 	.word	0x080027a5
 8002758:	080027b7 	.word	0x080027b7
 800275c:	080027f9 	.word	0x080027f9
 8002760:	080027ff 	.word	0x080027ff
 8002764:	080027ff 	.word	0x080027ff
 8002768:	080027ff 	.word	0x080027ff
 800276c:	080027ff 	.word	0x080027ff
 8002770:	080027ff 	.word	0x080027ff
 8002774:	080027ff 	.word	0x080027ff
 8002778:	080027ff 	.word	0x080027ff
 800277c:	080027ff 	.word	0x080027ff
 8002780:	080027ff 	.word	0x080027ff
 8002784:	080027ff 	.word	0x080027ff
 8002788:	080027ff 	.word	0x080027ff
 800278c:	080027ff 	.word	0x080027ff
 8002790:	080027ff 	.word	0x080027ff
 8002794:	080027ad 	.word	0x080027ad
 8002798:	080027c1 	.word	0x080027c1
 800279c:	4a7f      	ldr	r2, [pc, #508]	; (800299c <HAL_GPIO_Init+0x2cc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027a2:	e02c      	b.n	80027fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	623b      	str	r3, [r7, #32]
          break;
 80027aa:	e029      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	3304      	adds	r3, #4
 80027b2:	623b      	str	r3, [r7, #32]
          break;
 80027b4:	e024      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	3308      	adds	r3, #8
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e01f      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	330c      	adds	r3, #12
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	e01a      	b.n	8002800 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027d2:	2304      	movs	r3, #4
 80027d4:	623b      	str	r3, [r7, #32]
          break;
 80027d6:	e013      	b.n	8002800 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e0:	2308      	movs	r3, #8
 80027e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	611a      	str	r2, [r3, #16]
          break;
 80027ea:	e009      	b.n	8002800 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ec:	2308      	movs	r3, #8
 80027ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	615a      	str	r2, [r3, #20]
          break;
 80027f6:	e003      	b.n	8002800 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x130>
          break;
 80027fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2bff      	cmp	r3, #255	; 0xff
 8002804:	d801      	bhi.n	800280a <HAL_GPIO_Init+0x13a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	e001      	b.n	800280e <HAL_GPIO_Init+0x13e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3304      	adds	r3, #4
 800280e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d802      	bhi.n	800281c <HAL_GPIO_Init+0x14c>
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	e002      	b.n	8002822 <HAL_GPIO_Init+0x152>
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	3b08      	subs	r3, #8
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	210f      	movs	r1, #15
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	401a      	ands	r2, r3
 8002834:	6a39      	ldr	r1, [r7, #32]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	431a      	orrs	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80c1 	beq.w	80029d2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6193      	str	r3, [r2, #24]
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_GPIO_Init+0x2d0>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002868:	4a4e      	ldr	r2, [pc, #312]	; (80029a4 <HAL_GPIO_Init+0x2d4>)
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <HAL_GPIO_Init+0x2d8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d01f      	beq.n	80028d4 <HAL_GPIO_Init+0x204>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a45      	ldr	r2, [pc, #276]	; (80029ac <HAL_GPIO_Init+0x2dc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d019      	beq.n	80028d0 <HAL_GPIO_Init+0x200>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a44      	ldr	r2, [pc, #272]	; (80029b0 <HAL_GPIO_Init+0x2e0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d013      	beq.n	80028cc <HAL_GPIO_Init+0x1fc>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a43      	ldr	r2, [pc, #268]	; (80029b4 <HAL_GPIO_Init+0x2e4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00d      	beq.n	80028c8 <HAL_GPIO_Init+0x1f8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a42      	ldr	r2, [pc, #264]	; (80029b8 <HAL_GPIO_Init+0x2e8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <HAL_GPIO_Init+0x1f4>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a41      	ldr	r2, [pc, #260]	; (80029bc <HAL_GPIO_Init+0x2ec>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_GPIO_Init+0x1f0>
 80028bc:	2305      	movs	r3, #5
 80028be:	e00a      	b.n	80028d6 <HAL_GPIO_Init+0x206>
 80028c0:	2306      	movs	r3, #6
 80028c2:	e008      	b.n	80028d6 <HAL_GPIO_Init+0x206>
 80028c4:	2304      	movs	r3, #4
 80028c6:	e006      	b.n	80028d6 <HAL_GPIO_Init+0x206>
 80028c8:	2303      	movs	r3, #3
 80028ca:	e004      	b.n	80028d6 <HAL_GPIO_Init+0x206>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e002      	b.n	80028d6 <HAL_GPIO_Init+0x206>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_GPIO_Init+0x206>
 80028d4:	2300      	movs	r3, #0
 80028d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d8:	f002 0203 	and.w	r2, r2, #3
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	4093      	lsls	r3, r2
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028e6:	492f      	ldr	r1, [pc, #188]	; (80029a4 <HAL_GPIO_Init+0x2d4>)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	492e      	ldr	r1, [pc, #184]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800290e:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	43db      	mvns	r3, r3
 8002916:	492a      	ldr	r1, [pc, #168]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002918:	4013      	ands	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4924      	ldr	r1, [pc, #144]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	43db      	mvns	r3, r3
 800293e:	4920      	ldr	r1, [pc, #128]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002940:	4013      	ands	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	491a      	ldr	r1, [pc, #104]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	43db      	mvns	r3, r3
 8002966:	4916      	ldr	r1, [pc, #88]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002968:	4013      	ands	r3, r2
 800296a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d025      	beq.n	80029c4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4910      	ldr	r1, [pc, #64]	; (80029c0 <HAL_GPIO_Init+0x2f0>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
 8002984:	e025      	b.n	80029d2 <HAL_GPIO_Init+0x302>
 8002986:	bf00      	nop
 8002988:	10320000 	.word	0x10320000
 800298c:	10310000 	.word	0x10310000
 8002990:	10220000 	.word	0x10220000
 8002994:	10210000 	.word	0x10210000
 8002998:	10120000 	.word	0x10120000
 800299c:	10110000 	.word	0x10110000
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40010800 	.word	0x40010800
 80029ac:	40010c00 	.word	0x40010c00
 80029b0:	40011000 	.word	0x40011000
 80029b4:	40011400 	.word	0x40011400
 80029b8:	40011800 	.word	0x40011800
 80029bc:	40011c00 	.word	0x40011c00
 80029c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_GPIO_Init+0x324>)
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	4909      	ldr	r1, [pc, #36]	; (80029f4 <HAL_GPIO_Init+0x324>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	3301      	adds	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f47f ae7e 	bne.w	80026e4 <HAL_GPIO_Init+0x14>
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	372c      	adds	r7, #44	; 0x2c
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	40010400 	.word	0x40010400

080029f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
 8002a04:	4613      	mov	r3, r2
 8002a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a08:	787b      	ldrb	r3, [r7, #1]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0e:	887a      	ldrh	r2, [r7, #2]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a14:	e003      	b.n	8002a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	041a      	lsls	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	041a      	lsls	r2, r3, #16
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	43d9      	mvns	r1, r3
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	400b      	ands	r3, r1
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	611a      	str	r2, [r3, #16]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e26c      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8087 	beq.w	8002b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a7c:	4b92      	ldr	r3, [pc, #584]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d00c      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a88:	4b8f      	ldr	r3, [pc, #572]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d112      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
 8002a94:	4b8c      	ldr	r3, [pc, #560]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa2:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d06c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x12c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d168      	bne.n	8002b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e246      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x76>
 8002ac4:	4b80      	ldr	r3, [pc, #512]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a7f      	ldr	r2, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e02e      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x98>
 8002ada:	4b7b      	ldr	r3, [pc, #492]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7a      	ldr	r2, [pc, #488]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b78      	ldr	r3, [pc, #480]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a77      	ldr	r2, [pc, #476]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e01d      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0xbc>
 8002afe:	4b72      	ldr	r3, [pc, #456]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a71      	ldr	r2, [pc, #452]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b6f      	ldr	r3, [pc, #444]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6e      	ldr	r2, [pc, #440]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0xd4>
 8002b18:	4b6b      	ldr	r3, [pc, #428]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6a      	ldr	r2, [pc, #424]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b68      	ldr	r3, [pc, #416]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a67      	ldr	r2, [pc, #412]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fc80 	bl	800143c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe fc7c 	bl	800143c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	; 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1fa      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b5d      	ldr	r3, [pc, #372]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0xe4>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe fc6c 	bl	800143c <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe fc68 	bl	800143c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e1e6      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x10c>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d063      	beq.n	8002c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b96:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ba2:	4b49      	ldr	r3, [pc, #292]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d11c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x18c>
 8002bae:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d116      	bne.n	8002be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x176>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e1ba      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4939      	ldr	r1, [pc, #228]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	e03a      	b.n	8002c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fc21 	bl	800143c <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fc1d 	bl	800143c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e19b      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4927      	ldr	r1, [pc, #156]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
 8002c30:	e015      	b.n	8002c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_RCC_OscConfig+0x270>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe fc00 	bl	800143c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c40:	f7fe fbfc 	bl	800143c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e17a      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d03a      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d019      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c78:	f7fe fbe0 	bl	800143c <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fe fbdc 	bl	800143c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e15a      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f000 fb08 	bl	80032b4 <RCC_Delay>
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_RCC_OscConfig+0x274>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cac:	f7fe fbc6 	bl	800143c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb2:	e00f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb4:	f7fe fbc2 	bl	800143c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d908      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e140      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	42420000 	.word	0x42420000
 8002cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd4:	4b9e      	ldr	r3, [pc, #632]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e9      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80a6 	beq.w	8002e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf2:	4b97      	ldr	r3, [pc, #604]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfe:	4b94      	ldr	r3, [pc, #592]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4a93      	ldr	r2, [pc, #588]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d08:	61d3      	str	r3, [r2, #28]
 8002d0a:	4b91      	ldr	r3, [pc, #580]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b8e      	ldr	r3, [pc, #568]	; (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b8b      	ldr	r3, [pc, #556]	; (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a8a      	ldr	r2, [pc, #552]	; (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fb83 	bl	800143c <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe fb7f 	bl	800143c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0fd      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b81      	ldr	r3, [pc, #516]	; (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCC_OscConfig+0x312>
 8002d60:	4b7b      	ldr	r3, [pc, #492]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a7a      	ldr	r2, [pc, #488]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	e02d      	b.n	8002dca <HAL_RCC_OscConfig+0x36e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0x334>
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a75      	ldr	r2, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6213      	str	r3, [r2, #32]
 8002d82:	4b73      	ldr	r3, [pc, #460]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a72      	ldr	r2, [pc, #456]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	e01c      	b.n	8002dca <HAL_RCC_OscConfig+0x36e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x356>
 8002d98:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4a6c      	ldr	r2, [pc, #432]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6213      	str	r3, [r2, #32]
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	4a69      	ldr	r2, [pc, #420]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6213      	str	r3, [r2, #32]
 8002db0:	e00b      	b.n	8002dca <HAL_RCC_OscConfig+0x36e>
 8002db2:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a66      	ldr	r2, [pc, #408]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6213      	str	r3, [r2, #32]
 8002dbe:	4b64      	ldr	r3, [pc, #400]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a63      	ldr	r2, [pc, #396]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fb33 	bl	800143c <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fe fb2f 	bl	800143c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0ab      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	4b57      	ldr	r3, [pc, #348]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <HAL_RCC_OscConfig+0x37e>
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fb1d 	bl	800143c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe fb19 	bl	800143c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e095      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ee      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2e:	4b48      	ldr	r3, [pc, #288]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a47      	ldr	r2, [pc, #284]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8081 	beq.w	8002f46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e44:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d061      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d146      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <HAL_RCC_OscConfig+0x4fc>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe faed 	bl	800143c <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe fae9 	bl	800143c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e067      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e78:	4b35      	ldr	r3, [pc, #212]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8c:	d108      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e8e:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	492d      	ldr	r1, [pc, #180]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a19      	ldr	r1, [r3, #32]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	4927      	ldr	r1, [pc, #156]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x4fc>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fabd 	bl	800143c <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe fab9 	bl	800143c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e037      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x46a>
 8002ee4:	e02f      	b.n	8002f46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <HAL_RCC_OscConfig+0x4fc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe faa6 	bl	800143c <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe faa2 	bl	800143c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e020      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x498>
 8002f12:	e018      	b.n	8002f46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e013      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
 8002f58:	42420060 	.word	0x42420060

08002f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0d0      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b6a      	ldr	r3, [pc, #424]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d910      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b67      	ldr	r3, [pc, #412]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0207 	bic.w	r2, r3, #7
 8002f86:	4965      	ldr	r1, [pc, #404]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b63      	ldr	r3, [pc, #396]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0b8      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb8:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	494d      	ldr	r1, [pc, #308]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d040      	beq.n	800307c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d115      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e07f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e073      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06b      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4936      	ldr	r1, [pc, #216]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800304c:	f7fe f9f6 	bl	800143c <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fe f9f2 	bl	800143c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e053      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d210      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	4922      	ldr	r1, [pc, #136]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e032      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4916      	ldr	r1, [pc, #88]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	490e      	ldr	r1, [pc, #56]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ea:	f000 f821 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030ee:	4602      	mov	r2, r0
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	490a      	ldr	r1, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	5ccb      	ldrb	r3, [r1, r3]
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x1cc>)
 8003104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_ClockConfig+0x1d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd ff94 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
 8003124:	080098b8 	.word	0x080098b8
 8003128:	20000000 	.word	0x20000000
 800312c:	20000004 	.word	0x20000004

08003130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b490      	push	{r4, r7}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003136:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003138:	1d3c      	adds	r4, r7, #4
 800313a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800313c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003140:	f240 2301 	movw	r3, #513	; 0x201
 8003144:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b04      	cmp	r3, #4
 8003168:	d002      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x40>
 800316a:	2b08      	cmp	r3, #8
 800316c:	d003      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x46>
 800316e:	e02d      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003172:	623b      	str	r3, [r7, #32]
      break;
 8003174:	e02d      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	0c9b      	lsrs	r3, r3, #18
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003182:	4413      	add	r3, r2
 8003184:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003188:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	0c5b      	lsrs	r3, r3, #17
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031a2:	4413      	add	r3, r2
 80031a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ae:	fb02 f203 	mul.w	r2, r2, r3
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	e004      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	623b      	str	r3, [r7, #32]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ce:	623b      	str	r3, [r7, #32]
      break;
 80031d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3728      	adds	r7, #40	; 0x28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc90      	pop	{r4, r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	08009824 	.word	0x08009824
 80031e4:	40021000 	.word	0x40021000
 80031e8:	007a1200 	.word	0x007a1200
 80031ec:	003d0900 	.word	0x003d0900

080031f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f4:	4b02      	ldr	r3, [pc, #8]	; (8003200 <HAL_RCC_GetHCLKFreq+0x10>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	20000000 	.word	0x20000000

08003204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003208:	f7ff fff2 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	080098c8 	.word	0x080098c8

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003230:	f7ff ffde 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0adb      	lsrs	r3, r3, #11
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	080098c8 	.word	0x080098c8

08003254 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	220f      	movs	r2, #15
 8003262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_RCC_GetClockConfig+0x58>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCC_GetClockConfig+0x58>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_GetClockConfig+0x58>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCC_GetClockConfig+0x58>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	08db      	lsrs	r3, r3, #3
 800328e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0207 	and.w	r2, r3, #7
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40022000 	.word	0x40022000

080032b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <RCC_Delay+0x34>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <RCC_Delay+0x38>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0a5b      	lsrs	r3, r3, #9
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032d0:	bf00      	nop
  }
  while (Delay --);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1e5a      	subs	r2, r3, #1
 80032d6:	60fa      	str	r2, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f9      	bne.n	80032d0 <RCC_Delay+0x1c>
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	20000000 	.word	0x20000000
 80032ec:	10624dd3 	.word	0x10624dd3

080032f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d07d      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800330c:	2300      	movs	r3, #0
 800330e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003310:	4b4f      	ldr	r3, [pc, #316]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10d      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331c:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a4b      	ldr	r2, [pc, #300]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003326:	61d3      	str	r3, [r2, #28]
 8003328:	4b49      	ldr	r3, [pc, #292]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003334:	2301      	movs	r3, #1
 8003336:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d118      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003344:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a42      	ldr	r2, [pc, #264]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800334a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003350:	f7fe f874 	bl	800143c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003356:	e008      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7fe f870 	bl	800143c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e06d      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003376:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d02e      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	429a      	cmp	r2, r3
 8003392:	d027      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003394:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800339e:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033aa:	4a29      	ldr	r2, [pc, #164]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d014      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe f83f 	bl	800143c <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe f83b 	bl	800143c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e036      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ee      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e4:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4917      	ldr	r1, [pc, #92]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d105      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a13      	ldr	r2, [pc, #76]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003406:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	490b      	ldr	r1, [pc, #44]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	4904      	ldr	r1, [pc, #16]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
 8003458:	42420440 	.word	0x42420440

0800345c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e041      	b.n	80034f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f839 	bl	80034fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f000 f9c2 	bl	8003824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d001      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e044      	b.n	80035ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <HAL_TIM_Base_Start_IT+0xac>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d018      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_TIM_Base_Start_IT+0xb0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d013      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d00e      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d009      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a16      	ldr	r2, [pc, #88]	; (80035c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d111      	bne.n	800359c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b06      	cmp	r3, #6
 8003588:	d010      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	e007      	b.n	80035ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40013400 	.word	0x40013400
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800
 80035c8:	40000c00 	.word	0x40000c00

080035cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0202 	mvn.w	r2, #2
 80035f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8ed 	bl	80037ee <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8e0 	bl	80037dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f8ef 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b04      	cmp	r3, #4
 8003634:	d122      	bne.n	800367c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b04      	cmp	r3, #4
 8003642:	d11b      	bne.n	800367c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0204 	mvn.w	r2, #4
 800364c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8c3 	bl	80037ee <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8b6 	bl	80037dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f8c5 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b08      	cmp	r3, #8
 8003688:	d122      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0208 	mvn.w	r2, #8
 80036a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2204      	movs	r2, #4
 80036a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f899 	bl	80037ee <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f88c 	bl	80037dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f89b 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d122      	bne.n	8003724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d11b      	bne.n	8003724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0210 	mvn.w	r2, #16
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2208      	movs	r2, #8
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f86f 	bl	80037ee <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f862 	bl	80037dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f871 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d10e      	bne.n	8003750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d107      	bne.n	8003750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0201 	mvn.w	r2, #1
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fc24 	bl	8000f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b80      	cmp	r3, #128	; 0x80
 800375c:	d10e      	bne.n	800377c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	d107      	bne.n	800377c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8d7 	bl	800392a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d10e      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d107      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f835 	bl	8003812 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d10e      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d107      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0220 	mvn.w	r2, #32
 80037cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8a2 	bl	8003918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a33      	ldr	r2, [pc, #204]	; (8003904 <TIM_Base_SetConfig+0xe0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a32      	ldr	r2, [pc, #200]	; (8003908 <TIM_Base_SetConfig+0xe4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00f      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384a:	d00b      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a2f      	ldr	r2, [pc, #188]	; (800390c <TIM_Base_SetConfig+0xe8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d007      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a2e      	ldr	r2, [pc, #184]	; (8003910 <TIM_Base_SetConfig+0xec>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a2d      	ldr	r2, [pc, #180]	; (8003914 <TIM_Base_SetConfig+0xf0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a22      	ldr	r2, [pc, #136]	; (8003904 <TIM_Base_SetConfig+0xe0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <TIM_Base_SetConfig+0x82>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a21      	ldr	r2, [pc, #132]	; (8003908 <TIM_Base_SetConfig+0xe4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00f      	beq.n	80038a6 <TIM_Base_SetConfig+0x82>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d00b      	beq.n	80038a6 <TIM_Base_SetConfig+0x82>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a1e      	ldr	r2, [pc, #120]	; (800390c <TIM_Base_SetConfig+0xe8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <TIM_Base_SetConfig+0x82>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <TIM_Base_SetConfig+0xec>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <TIM_Base_SetConfig+0x82>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <TIM_Base_SetConfig+0xf0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d108      	bne.n	80038b8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <TIM_Base_SetConfig+0xe0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d003      	beq.n	80038ec <TIM_Base_SetConfig+0xc8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a08      	ldr	r2, [pc, #32]	; (8003908 <TIM_Base_SetConfig+0xe4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d103      	bne.n	80038f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	615a      	str	r2, [r3, #20]
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40013400 	.word	0x40013400
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00

08003918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e03f      	b.n	80039ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fcc8 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800397e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fc25 	bl	80041d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b08a      	sub	sp, #40	; 0x28
 80039da:	af02      	add	r7, sp, #8
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d17c      	bne.n	8003af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_UART_Transmit+0x2c>
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e075      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Transmit+0x3e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e06e      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2a:	f7fd fd07 	bl	800143c <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Transmit+0x82>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e003      	b.n	8003a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a68:	e02a      	b.n	8003ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 fa11 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e036      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1cf      	bne.n	8003a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2140      	movs	r1, #64	; 0x40
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f9e1 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e006      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10d      	bne.n	8003b4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_UART_IRQHandler+0x52>
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa99 	bl	800407e <UART_Receive_IT>
      return;
 8003b4c:	e17b      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80b1 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x1bc>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_UART_IRQHandler+0x70>
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a6 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_UART_IRQHandler+0x90>
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_UART_IRQHandler+0xb0>
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0202 	orr.w	r2, r3, #2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_UART_IRQHandler+0xd0>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00f      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xfa>
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <HAL_UART_IRQHandler+0xee>
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f043 0208 	orr.w	r2, r3, #8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 811e 	beq.w	8003e3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <HAL_UART_IRQHandler+0x11e>
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fa32 	bl	800407e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <HAL_UART_IRQHandler+0x146>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d031      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f974 	bl	8003f30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d023      	beq.n	8003c9e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	4a76      	ldr	r2, [pc, #472]	; (8003e4c <HAL_UART_IRQHandler+0x350>)
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe f9b6 	bl	8001fec <HAL_DMA_Abort_IT>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c90:	4610      	mov	r0, r2
 8003c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	e00e      	b.n	8003cb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8ec 	bl	8003e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e00a      	b.n	8003cb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8e8 	bl	8003e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e006      	b.n	8003cb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8e4 	bl	8003e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cb2:	e0c3      	b.n	8003e3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	bf00      	nop
    return;
 8003cb6:	e0c1      	b.n	8003e3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 80a1 	bne.w	8003e04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 809b 	beq.w	8003e04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8095 	beq.w	8003e04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d04e      	beq.n	8003d9c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d08:	8a3b      	ldrh	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8098 	beq.w	8003e40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d14:	8a3a      	ldrh	r2, [r7, #16]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	f080 8092 	bcs.w	8003e40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8a3a      	ldrh	r2, [r7, #16]
 8003d20:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d02b      	beq.n	8003d84 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d3a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0210 	bic.w	r2, r2, #16
 8003d78:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe f8f9 	bl	8001f76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f876 	bl	8003e86 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d9a:	e051      	b.n	8003e40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d047      	beq.n	8003e44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003db4:	8a7b      	ldrh	r3, [r7, #18]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d044      	beq.n	8003e44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dc8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0210 	bic.w	r2, r2, #16
 8003df6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003df8:	8a7b      	ldrh	r3, [r7, #18]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f842 	bl	8003e86 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e02:	e01f      	b.n	8003e44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_UART_IRQHandler+0x324>
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f8c9 	bl	8003fb0 <UART_Transmit_IT>
    return;
 8003e1e:	e012      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <HAL_UART_IRQHandler+0x34a>
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f90a 	bl	800404e <UART_EndTransmit_IT>
    return;
 8003e3a:	e004      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
    return;
 8003e3c:	bf00      	nop
 8003e3e:	e002      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003e40:	bf00      	nop
 8003e42:	e000      	b.n	8003e46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003e44:	bf00      	nop
  }
}
 8003e46:	3728      	adds	r7, #40	; 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	08003f89 	.word	0x08003f89

08003e50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eac:	e02c      	b.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d028      	beq.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ebc:	f7fd fabe 	bl	800143c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d21d      	bcs.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003eda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e00f      	b.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d0c3      	beq.n	8003eae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0210 	bic.w	r2, r2, #16
 8003f6e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff ff66 	bl	8003e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b21      	cmp	r3, #33	; 0x21
 8003fc2:	d13e      	bne.n	8004042 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fcc:	d114      	bne.n	8003ff8 <UART_Transmit_IT+0x48>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d110      	bne.n	8003ff8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	1c9a      	adds	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	621a      	str	r2, [r3, #32]
 8003ff6:	e008      	b.n	800400a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	1c59      	adds	r1, r3, #1
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6211      	str	r1, [r2, #32]
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29b      	uxth	r3, r3
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4619      	mov	r1, r3
 8004018:	84d1      	strh	r1, [r2, #38]	; 0x26
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800402c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800403c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004064:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff feee 	bl	8003e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b086      	sub	sp, #24
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b22      	cmp	r3, #34	; 0x22
 8004090:	f040 8099 	bne.w	80041c6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409c:	d117      	bne.n	80040ce <UART_Receive_IT+0x50>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d113      	bne.n	80040ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040bc:	b29a      	uxth	r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	1c9a      	adds	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
 80040cc:	e026      	b.n	800411c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d007      	beq.n	80040f2 <UART_Receive_IT+0x74>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <UART_Receive_IT+0x82>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e008      	b.n	8004112 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800410c:	b2da      	uxtb	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29b      	uxth	r3, r3
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4619      	mov	r1, r3
 800412a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800412c:	2b00      	cmp	r3, #0
 800412e:	d148      	bne.n	80041c2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0220 	bic.w	r2, r2, #32
 800413e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800414e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	2b01      	cmp	r3, #1
 800416e:	d123      	bne.n	80041b8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0210 	bic.w	r2, r2, #16
 8004184:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b10      	cmp	r3, #16
 8004192:	d10a      	bne.n	80041aa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ae:	4619      	mov	r1, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fe68 	bl	8003e86 <HAL_UARTEx_RxEventCallback>
 80041b6:	e002      	b.n	80041be <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fe52 	bl	8003e62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e002      	b.n	80041c8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800420a:	f023 030c 	bic.w	r3, r3, #12
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	430b      	orrs	r3, r1
 8004216:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a2c      	ldr	r2, [pc, #176]	; (80042e4 <UART_SetConfig+0x114>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d103      	bne.n	8004240 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004238:	f7fe fff8 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	e002      	b.n	8004246 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7fe ffe0 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8004244:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009a      	lsls	r2, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <UART_SetConfig+0x118>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	0119      	lsls	r1, r3, #4
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009a      	lsls	r2, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	fbb2 f2f3 	udiv	r2, r2, r3
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <UART_SetConfig+0x118>)
 800427e:	fba3 0302 	umull	r0, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2064      	movs	r0, #100	; 0x64
 8004286:	fb00 f303 	mul.w	r3, r0, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	3332      	adds	r3, #50	; 0x32
 8004290:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <UART_SetConfig+0x118>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429c:	4419      	add	r1, r3
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009a      	lsls	r2, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <UART_SetConfig+0x118>)
 80042b6:	fba3 0302 	umull	r0, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2064      	movs	r0, #100	; 0x64
 80042be:	fb00 f303 	mul.w	r3, r0, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	3332      	adds	r3, #50	; 0x32
 80042c8:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <UART_SetConfig+0x118>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	440a      	add	r2, r1
 80042da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40013800 	.word	0x40013800
 80042e8:	51eb851f 	.word	0x51eb851f

080042ec <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042f2:	f3ef 8305 	mrs	r3, IPSR
 80042f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80042f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10f      	bne.n	800431e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004302:	607b      	str	r3, [r7, #4]
  return(result);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <osKernelInitialize+0x32>
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <osKernelInitialize+0x60>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d109      	bne.n	8004326 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004312:	f3ef 8311 	mrs	r3, BASEPRI
 8004316:	603b      	str	r3, [r7, #0]
  return(result);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800431e:	f06f 0305 	mvn.w	r3, #5
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e00c      	b.n	8004340 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <osKernelInitialize+0x60>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d105      	bne.n	800433a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <osKernelInitialize+0x60>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e002      	b.n	8004340 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800433a:	f04f 33ff 	mov.w	r3, #4294967295
 800433e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004340:	68fb      	ldr	r3, [r7, #12]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	20000200 	.word	0x20000200

08004350 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004356:	f3ef 8305 	mrs	r3, IPSR
 800435a:	60bb      	str	r3, [r7, #8]
  return(result);
 800435c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004362:	f3ef 8310 	mrs	r3, PRIMASK
 8004366:	607b      	str	r3, [r7, #4]
  return(result);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <osKernelStart+0x32>
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <osKernelStart+0x64>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d109      	bne.n	800438a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004376:	f3ef 8311 	mrs	r3, BASEPRI
 800437a:	603b      	str	r3, [r7, #0]
  return(result);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004382:	f06f 0305 	mvn.w	r3, #5
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e00e      	b.n	80043a8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <osKernelStart+0x64>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <osKernelStart+0x64>)
 8004394:	2202      	movs	r2, #2
 8004396:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004398:	f001 f878 	bl	800548c <vTaskStartScheduler>
      stat = osOK;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e002      	b.n	80043a8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80043a8:	68fb      	ldr	r3, [r7, #12]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000200 	.word	0x20000200

080043b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b092      	sub	sp, #72	; 0x48
 80043bc:	af04      	add	r7, sp, #16
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043c8:	f3ef 8305 	mrs	r3, IPSR
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f040 8094 	bne.w	80044fe <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d6:	f3ef 8310 	mrs	r3, PRIMASK
 80043da:	623b      	str	r3, [r7, #32]
  return(result);
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 808d 	bne.w	80044fe <osThreadNew+0x146>
 80043e4:	4b48      	ldr	r3, [pc, #288]	; (8004508 <osThreadNew+0x150>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d106      	bne.n	80043fa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043ec:	f3ef 8311 	mrs	r3, BASEPRI
 80043f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f040 8082 	bne.w	80044fe <osThreadNew+0x146>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d07e      	beq.n	80044fe <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004404:	2318      	movs	r3, #24
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004408:	2300      	movs	r3, #0
 800440a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800440c:	f107 031b 	add.w	r3, r7, #27
 8004410:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004412:	f04f 33ff 	mov.w	r3, #4294967295
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d045      	beq.n	80044aa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <osThreadNew+0x74>
        name = attr->name;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <osThreadNew+0x9a>
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	2b38      	cmp	r3, #56	; 0x38
 8004444:	d805      	bhi.n	8004452 <osThreadNew+0x9a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <osThreadNew+0x9e>
        return (NULL);
 8004452:	2300      	movs	r3, #0
 8004454:	e054      	b.n	8004500 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00e      	beq.n	800448c <osThreadNew+0xd4>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b5b      	cmp	r3, #91	; 0x5b
 8004474:	d90a      	bls.n	800448c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800447a:	2b00      	cmp	r3, #0
 800447c:	d006      	beq.n	800448c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <osThreadNew+0xd4>
        mem = 1;
 8004486:	2301      	movs	r3, #1
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
 800448a:	e010      	b.n	80044ae <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10c      	bne.n	80044ae <osThreadNew+0xf6>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d108      	bne.n	80044ae <osThreadNew+0xf6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <osThreadNew+0xf6>
          mem = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a8:	e001      	b.n	80044ae <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d110      	bne.n	80044d6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044bc:	9202      	str	r2, [sp, #8]
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fe12 	bl	80050f4 <xTaskCreateStatic>
 80044d0:	4603      	mov	r3, r0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e013      	b.n	80044fe <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d110      	bne.n	80044fe <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	b29a      	uxth	r2, r3
 80044e0:	f107 0314 	add.w	r3, r7, #20
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fe5c 	bl	80051ac <xTaskCreate>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d001      	beq.n	80044fe <osThreadNew+0x146>
          hTask = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044fe:	697b      	ldr	r3, [r7, #20]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3738      	adds	r7, #56	; 0x38
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000200 	.word	0x20000200

0800450c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004514:	f3ef 8305 	mrs	r3, IPSR
 8004518:	613b      	str	r3, [r7, #16]
  return(result);
 800451a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10f      	bne.n	8004540 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004520:	f3ef 8310 	mrs	r3, PRIMASK
 8004524:	60fb      	str	r3, [r7, #12]
  return(result);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <osDelay+0x34>
 800452c:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <osDelay+0x58>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d109      	bne.n	8004548 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004534:	f3ef 8311 	mrs	r3, BASEPRI
 8004538:	60bb      	str	r3, [r7, #8]
  return(result);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <osDelay+0x3c>
    stat = osErrorISR;
 8004540:	f06f 0305 	mvn.w	r3, #5
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e007      	b.n	8004558 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 ff66 	bl	8005424 <vTaskDelay>
    }
  }

  return (stat);
 8004558:	697b      	ldr	r3, [r7, #20]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000200 	.word	0x20000200

08004568 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a06      	ldr	r2, [pc, #24]	; (8004590 <vApplicationGetIdleTaskMemory+0x28>)
 8004578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4a05      	ldr	r2, [pc, #20]	; (8004594 <vApplicationGetIdleTaskMemory+0x2c>)
 800457e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	601a      	str	r2, [r3, #0]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr
 8004590:	20000204 	.word	0x20000204
 8004594:	20000260 	.word	0x20000260

08004598 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80045a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a06      	ldr	r2, [pc, #24]	; (80045c8 <vApplicationGetTimerTaskMemory+0x30>)
 80045ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045b6:	601a      	str	r2, [r3, #0]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000460 	.word	0x20000460
 80045c8:	200004bc 	.word	0x200004bc

080045cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f103 0208 	add.w	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295
 80045e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f103 0208 	add.w	r2, r3, #8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f103 0208 	add.w	r2, r3, #8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr

08004668 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d103      	bne.n	8004688 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e00c      	b.n	80046a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3308      	adds	r3, #8
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e002      	b.n	8004696 <vListInsert+0x2e>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d2f6      	bcs.n	8004690 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr

080046d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6892      	ldr	r2, [r2, #8]
 80046ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6852      	ldr	r2, [r2, #4]
 80046f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	d103      	bne.n	800470c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	1e5a      	subs	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr
	...

0800472c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004756:	f001 ffc9 	bl	80066ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	68f9      	ldr	r1, [r7, #12]
 8004764:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	441a      	add	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	3b01      	subs	r3, #1
 8004788:	68f9      	ldr	r1, [r7, #12]
 800478a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	22ff      	movs	r2, #255	; 0xff
 800479a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	22ff      	movs	r2, #255	; 0xff
 80047a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d114      	bne.n	80047d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01a      	beq.n	80047ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3310      	adds	r3, #16
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 f8f1 	bl	80059a0 <xTaskRemoveFromEventList>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <xQueueGenericReset+0xcc>)
 80047c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	e009      	b.n	80047ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3310      	adds	r3, #16
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fef6 	bl	80045cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3324      	adds	r3, #36	; 0x24
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fef1 	bl	80045cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047ea:	f001 ffaf 	bl	800674c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047ee:	2301      	movs	r3, #1
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	; 0x38
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <xQueueGenericCreateStatic+0x52>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <xQueueGenericCreateStatic+0x56>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <xQueueGenericCreateStatic+0x58>
 8004852:	2300      	movs	r3, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	623b      	str	r3, [r7, #32]
}
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <xQueueGenericCreateStatic+0x7e>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <xQueueGenericCreateStatic+0x82>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <xQueueGenericCreateStatic+0x84>
 800487e:	2300      	movs	r3, #0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	61fb      	str	r3, [r7, #28]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800489a:	2350      	movs	r3, #80	; 0x50
 800489c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b50      	cmp	r3, #80	; 0x50
 80048a2:	d00a      	beq.n	80048ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	61bb      	str	r3, [r7, #24]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00d      	beq.n	80048e0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f805 	bl	80048ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3730      	adds	r7, #48	; 0x30
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d103      	bne.n	8004906 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e002      	b.n	800490c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004918:	2101      	movs	r1, #1
 800491a:	69b8      	ldr	r0, [r7, #24]
 800491c:	f7ff ff06 	bl	800472c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08e      	sub	sp, #56	; 0x38
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800493e:	2300      	movs	r3, #0
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <xQueueGenericSend+0x32>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <xQueueGenericSend+0x40>
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <xQueueGenericSend+0x44>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <xQueueGenericSend+0x46>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <xQueueGenericSend+0x60>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d103      	bne.n	800499e <xQueueGenericSend+0x6e>
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <xQueueGenericSend+0x72>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <xQueueGenericSend+0x74>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xQueueGenericSend+0x8e>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	623b      	str	r3, [r7, #32]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049be:	f001 f9b1 	bl	8005d24 <xTaskGetSchedulerState>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <xQueueGenericSend+0x9e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <xQueueGenericSend+0xa2>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <xQueueGenericSend+0xa4>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <xQueueGenericSend+0xbe>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	61fb      	str	r3, [r7, #28]
}
 80049ea:	bf00      	nop
 80049ec:	e7fe      	b.n	80049ec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049ee:	f001 fe7d 	bl	80066ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <xQueueGenericSend+0xd4>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d129      	bne.n	8004a58 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a0a:	f000 fa07 	bl	8004e1c <prvCopyDataToQueue>
 8004a0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	3324      	adds	r3, #36	; 0x24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 ffbf 	bl	80059a0 <xTaskRemoveFromEventList>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d013      	beq.n	8004a50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a28:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <xQueueGenericSend+0x1f8>)
 8004a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	e00a      	b.n	8004a50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <xQueueGenericSend+0x1f8>)
 8004a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a50:	f001 fe7c 	bl	800674c <vPortExitCritical>
				return pdPASS;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e063      	b.n	8004b20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d103      	bne.n	8004a66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a5e:	f001 fe75 	bl	800674c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e05c      	b.n	8004b20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fff9 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a76:	2301      	movs	r3, #1
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a7a:	f001 fe67 	bl	800674c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a7e:	f000 fd6b 	bl	8005558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a82:	f001 fe33 	bl	80066ec <vPortEnterCritical>
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a8c:	b25b      	sxtb	r3, r3
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d103      	bne.n	8004a9c <xQueueGenericSend+0x16c>
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa2:	b25b      	sxtb	r3, r3
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d103      	bne.n	8004ab2 <xQueueGenericSend+0x182>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab2:	f001 fe4b 	bl	800674c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ab6:	1d3a      	adds	r2, r7, #4
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 ffe8 	bl	8005a94 <xTaskCheckForTimeOut>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d124      	bne.n	8004b14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004acc:	f000 fa9e 	bl	800500c <prvIsQueueFull>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d018      	beq.n	8004b08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	3310      	adds	r3, #16
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 ff0e 	bl	8005900 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae6:	f000 fa29 	bl	8004f3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004aea:	f000 fd43 	bl	8005574 <xTaskResumeAll>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f47f af7c 	bne.w	80049ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <xQueueGenericSend+0x1f8>)
 8004af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	e772      	b.n	80049ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b0a:	f000 fa17 	bl	8004f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b0e:	f000 fd31 	bl	8005574 <xTaskResumeAll>
 8004b12:	e76c      	b.n	80049ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b16:	f000 fa11 	bl	8004f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b1a:	f000 fd2b 	bl	8005574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b1e:	2300      	movs	r3, #0
		}
	}
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3738      	adds	r7, #56	; 0x38
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <xQueueGenericSendFromISR+0x3c>
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <xQueueGenericSendFromISR+0x40>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <xQueueGenericSendFromISR+0x42>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	623b      	str	r3, [r7, #32]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d103      	bne.n	8004b96 <xQueueGenericSendFromISR+0x6a>
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <xQueueGenericSendFromISR+0x6e>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <xQueueGenericSendFromISR+0x70>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	61fb      	str	r3, [r7, #28]
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bb6:	f001 fe5b 	bl	8006870 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bba:	f3ef 8211 	mrs	r2, BASEPRI
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	61ba      	str	r2, [r7, #24]
 8004bd0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d302      	bcc.n	8004be8 <xQueueGenericSendFromISR+0xbc>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d12c      	bne.n	8004c42 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bf8:	f000 f910 	bl	8004e1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bfc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d112      	bne.n	8004c2c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d016      	beq.n	8004c3c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	3324      	adds	r3, #36	; 0x24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fec4 	bl	80059a0 <xTaskRemoveFromEventList>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e007      	b.n	8004c3c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c30:	3301      	adds	r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	b25a      	sxtb	r2, r3
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c40:	e001      	b.n	8004c46 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
 8004c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c48:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3738      	adds	r7, #56	; 0x38
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	; 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <xQueueReceive+0x30>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	623b      	str	r3, [r7, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <xQueueReceive+0x3e>
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <xQueueReceive+0x42>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <xQueueReceive+0x44>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <xQueueReceive+0x5e>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	61fb      	str	r3, [r7, #28]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cba:	f001 f833 	bl	8005d24 <xTaskGetSchedulerState>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <xQueueReceive+0x6e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <xQueueReceive+0x72>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <xQueueReceive+0x74>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <xQueueReceive+0x8e>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	61bb      	str	r3, [r7, #24]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cea:	f001 fcff 	bl	80066ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01f      	beq.n	8004d3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfe:	f000 f8f7 	bl	8004ef0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	1e5a      	subs	r2, r3, #1
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00f      	beq.n	8004d32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	3310      	adds	r3, #16
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fe42 	bl	80059a0 <xTaskRemoveFromEventList>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d22:	4b3d      	ldr	r3, [pc, #244]	; (8004e18 <xQueueReceive+0x1bc>)
 8004d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d32:	f001 fd0b 	bl	800674c <vPortExitCritical>
				return pdPASS;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e069      	b.n	8004e0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d40:	f001 fd04 	bl	800674c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e062      	b.n	8004e0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d106      	bne.n	8004d5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d4e:	f107 0310 	add.w	r3, r7, #16
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fe88 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d5c:	f001 fcf6 	bl	800674c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d60:	f000 fbfa 	bl	8005558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d64:	f001 fcc2 	bl	80066ec <vPortEnterCritical>
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d6e:	b25b      	sxtb	r3, r3
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d103      	bne.n	8004d7e <xQueueReceive+0x122>
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d84:	b25b      	sxtb	r3, r3
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d103      	bne.n	8004d94 <xQueueReceive+0x138>
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d94:	f001 fcda 	bl	800674c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d98:	1d3a      	adds	r2, r7, #4
 8004d9a:	f107 0310 	add.w	r3, r7, #16
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fe77 	bl	8005a94 <xTaskCheckForTimeOut>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d123      	bne.n	8004df4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dae:	f000 f917 	bl	8004fe0 <prvIsQueueEmpty>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d017      	beq.n	8004de8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	3324      	adds	r3, #36	; 0x24
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fd9d 	bl	8005900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc8:	f000 f8b8 	bl	8004f3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dcc:	f000 fbd2 	bl	8005574 <xTaskResumeAll>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d189      	bne.n	8004cea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <xQueueReceive+0x1bc>)
 8004dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	e780      	b.n	8004cea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dea:	f000 f8a7 	bl	8004f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dee:	f000 fbc1 	bl	8005574 <xTaskResumeAll>
 8004df2:	e77a      	b.n	8004cea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df6:	f000 f8a1 	bl	8004f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dfa:	f000 fbbb 	bl	8005574 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e00:	f000 f8ee 	bl	8004fe0 <prvIsQueueEmpty>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f43f af6f 	beq.w	8004cea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3730      	adds	r7, #48	; 0x30
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d14d      	bne.n	8004ede <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 ff8a 	bl	8005d60 <xTaskPriorityDisinherit>
 8004e4c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	605a      	str	r2, [r3, #4]
 8004e54:	e043      	b.n	8004ede <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d119      	bne.n	8004e90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6898      	ldr	r0, [r3, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	461a      	mov	r2, r3
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	f001 ff42 	bl	8006cf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	441a      	add	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d32b      	bcc.n	8004ede <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	609a      	str	r2, [r3, #8]
 8004e8e:	e026      	b.n	8004ede <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	68d8      	ldr	r0, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	f001 ff28 	bl	8006cf0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	425b      	negs	r3, r3
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d207      	bcs.n	8004ecc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	425b      	negs	r3, r3
 8004ec6:	441a      	add	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d105      	bne.n	8004ede <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ee6:	697b      	ldr	r3, [r7, #20]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d018      	beq.n	8004f34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	441a      	add	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d303      	bcc.n	8004f24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68d9      	ldr	r1, [r3, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6838      	ldr	r0, [r7, #0]
 8004f30:	f001 fede 	bl	8006cf0 <memcpy>
	}
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f44:	f001 fbd2 	bl	80066ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f50:	e011      	b.n	8004f76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d012      	beq.n	8004f80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3324      	adds	r3, #36	; 0x24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fd1e 	bl	80059a0 <xTaskRemoveFromEventList>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f6a:	f000 fdf5 	bl	8005b58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dce9      	bgt.n	8004f52 <prvUnlockQueue+0x16>
 8004f7e:	e000      	b.n	8004f82 <prvUnlockQueue+0x46>
					break;
 8004f80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	22ff      	movs	r2, #255	; 0xff
 8004f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f8a:	f001 fbdf 	bl	800674c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f8e:	f001 fbad 	bl	80066ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f9a:	e011      	b.n	8004fc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d012      	beq.n	8004fca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3310      	adds	r3, #16
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fcf9 	bl	80059a0 <xTaskRemoveFromEventList>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fb4:	f000 fdd0 	bl	8005b58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fb8:	7bbb      	ldrb	r3, [r7, #14]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	dce9      	bgt.n	8004f9c <prvUnlockQueue+0x60>
 8004fc8:	e000      	b.n	8004fcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	22ff      	movs	r2, #255	; 0xff
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fd4:	f001 fbba 	bl	800674c <vPortExitCritical>
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fe8:	f001 fb80 	bl	80066ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e001      	b.n	8004ffe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ffe:	f001 fba5 	bl	800674c <vPortExitCritical>

	return xReturn;
 8005002:	68fb      	ldr	r3, [r7, #12]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005014:	f001 fb6a 	bl	80066ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	429a      	cmp	r2, r3
 8005022:	d102      	bne.n	800502a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005024:	2301      	movs	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e001      	b.n	800502e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800502e:	f001 fb8d 	bl	800674c <vPortExitCritical>

	return xReturn;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e014      	b.n	8005076 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800504c:	4a0e      	ldr	r2, [pc, #56]	; (8005088 <vQueueAddToRegistry+0x4c>)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005058:	490b      	ldr	r1, [pc, #44]	; (8005088 <vQueueAddToRegistry+0x4c>)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005062:	4a09      	ldr	r2, [pc, #36]	; (8005088 <vQueueAddToRegistry+0x4c>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800506e:	e006      	b.n	800507e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b07      	cmp	r3, #7
 800507a:	d9e7      	bls.n	800504c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr
 8005088:	20001c20 	.word	0x20001c20

0800508c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800509c:	f001 fb26 	bl	80066ec <vPortEnterCritical>
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050a6:	b25b      	sxtb	r3, r3
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ac:	d103      	bne.n	80050b6 <vQueueWaitForMessageRestricted+0x2a>
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050bc:	b25b      	sxtb	r3, r3
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d103      	bne.n	80050cc <vQueueWaitForMessageRestricted+0x40>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050cc:	f001 fb3e 	bl	800674c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3324      	adds	r3, #36	; 0x24
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fc31 	bl	8005948 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f7ff ff28 	bl	8004f3c <prvUnlockQueue>
	}
 80050ec:	bf00      	nop
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08e      	sub	sp, #56	; 0x38
 80050f8:	af04      	add	r7, sp, #16
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	623b      	str	r3, [r7, #32]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <xTaskCreateStatic+0x46>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	61fb      	str	r3, [r7, #28]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800513a:	235c      	movs	r3, #92	; 0x5c
 800513c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b5c      	cmp	r3, #92	; 0x5c
 8005142:	d00a      	beq.n	800515a <xTaskCreateStatic+0x66>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	61bb      	str	r3, [r7, #24]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01e      	beq.n	800519e <xTaskCreateStatic+0xaa>
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01b      	beq.n	800519e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800516e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005178:	2300      	movs	r3, #0
 800517a:	9303      	str	r3, [sp, #12]
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	9302      	str	r3, [sp, #8]
 8005180:	f107 0314 	add.w	r3, r7, #20
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f850 	bl	8005236 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005196:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005198:	f000 f8d4 	bl	8005344 <prvAddNewTaskToReadyList>
 800519c:	e001      	b.n	80051a2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051a2:	697b      	ldr	r3, [r7, #20]
	}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3728      	adds	r7, #40	; 0x28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08c      	sub	sp, #48	; 0x30
 80051b0:	af04      	add	r7, sp, #16
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	4613      	mov	r3, r2
 80051ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4618      	mov	r0, r3
 80051c2:	f001 fb93 	bl	80068ec <pvPortMalloc>
 80051c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00e      	beq.n	80051ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051ce:	205c      	movs	r0, #92	; 0x5c
 80051d0:	f001 fb8c 	bl	80068ec <pvPortMalloc>
 80051d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
 80051e2:	e005      	b.n	80051f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051e4:	6978      	ldr	r0, [r7, #20]
 80051e6:	f001 fc45 	bl	8006a74 <vPortFree>
 80051ea:	e001      	b.n	80051f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d017      	beq.n	8005226 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	2300      	movs	r3, #0
 8005202:	9303      	str	r3, [sp, #12]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	9302      	str	r3, [sp, #8]
 8005208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f80e 	bl	8005236 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800521a:	69f8      	ldr	r0, [r7, #28]
 800521c:	f000 f892 	bl	8005344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005220:	2301      	movs	r3, #1
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	e002      	b.n	800522c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
 800522a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800522c:	69bb      	ldr	r3, [r7, #24]
	}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b088      	sub	sp, #32
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	461a      	mov	r2, r3
 800524e:	21a5      	movs	r1, #165	; 0xa5
 8005250:	f001 fd5c 	bl	8006d0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800525e:	3b01      	subs	r3, #1
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f023 0307 	bic.w	r3, r3, #7
 800526c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <prvInitialiseNewTask+0x58>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	617b      	str	r3, [r7, #20]
}
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	e012      	b.n	80052ba <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	7819      	ldrb	r1, [r3, #0]
 800529c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	3334      	adds	r3, #52	; 0x34
 80052a4:	460a      	mov	r2, r1
 80052a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d006      	beq.n	80052c2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3301      	adds	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2b0f      	cmp	r3, #15
 80052be:	d9e9      	bls.n	8005294 <prvInitialiseNewTask+0x5e>
 80052c0:	e000      	b.n	80052c4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80052c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	2b37      	cmp	r3, #55	; 0x37
 80052d0:	d901      	bls.n	80052d6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052d2:	2337      	movs	r3, #55	; 0x37
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	2200      	movs	r2, #0
 80052e6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	3304      	adds	r3, #4
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff f98c 	bl	800460a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	3318      	adds	r3, #24
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff f987 	bl	800460a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005300:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005310:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	2200      	movs	r2, #0
 8005316:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	69b8      	ldr	r0, [r7, #24]
 8005326:	f001 f8ef 	bl	8006508 <pxPortInitialiseStack>
 800532a:	4602      	mov	r2, r0
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800533c:	bf00      	nop
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800534c:	f001 f9ce 	bl	80066ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005350:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	4a2c      	ldr	r2, [pc, #176]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 8005358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800535a:	4b2c      	ldr	r3, [pc, #176]	; (800540c <prvAddNewTaskToReadyList+0xc8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005362:	4a2a      	ldr	r2, [pc, #168]	; (800540c <prvAddNewTaskToReadyList+0xc8>)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005368:	4b27      	ldr	r3, [pc, #156]	; (8005408 <prvAddNewTaskToReadyList+0xc4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d110      	bne.n	8005392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005370:	f000 fc16 	bl	8005ba0 <prvInitialiseTaskLists>
 8005374:	e00d      	b.n	8005392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005376:	4b26      	ldr	r3, [pc, #152]	; (8005410 <prvAddNewTaskToReadyList+0xcc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800537e:	4b23      	ldr	r3, [pc, #140]	; (800540c <prvAddNewTaskToReadyList+0xc8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	429a      	cmp	r2, r3
 800538a:	d802      	bhi.n	8005392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800538c:	4a1f      	ldr	r2, [pc, #124]	; (800540c <prvAddNewTaskToReadyList+0xc8>)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005392:	4b20      	ldr	r3, [pc, #128]	; (8005414 <prvAddNewTaskToReadyList+0xd0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <prvAddNewTaskToReadyList+0xd0>)
 800539a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <prvAddNewTaskToReadyList+0xd0>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a8:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <prvAddNewTaskToReadyList+0xd4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d903      	bls.n	80053b8 <prvAddNewTaskToReadyList+0x74>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	4a18      	ldr	r2, [pc, #96]	; (8005418 <prvAddNewTaskToReadyList+0xd4>)
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4a15      	ldr	r2, [pc, #84]	; (800541c <prvAddNewTaskToReadyList+0xd8>)
 80053c6:	441a      	add	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f7ff f927 	bl	8004622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053d4:	f001 f9ba 	bl	800674c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <prvAddNewTaskToReadyList+0xcc>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00e      	beq.n	80053fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <prvAddNewTaskToReadyList+0xc8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d207      	bcs.n	80053fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ee:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <prvAddNewTaskToReadyList+0xdc>)
 80053f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000d90 	.word	0x20000d90
 800540c:	200008bc 	.word	0x200008bc
 8005410:	20000d9c 	.word	0x20000d9c
 8005414:	20000dac 	.word	0x20000dac
 8005418:	20000d98 	.word	0x20000d98
 800541c:	200008c0 	.word	0x200008c0
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d017      	beq.n	8005466 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005436:	4b13      	ldr	r3, [pc, #76]	; (8005484 <vTaskDelay+0x60>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <vTaskDelay+0x30>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60bb      	str	r3, [r7, #8]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005454:	f000 f880 	bl	8005558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fcee 	bl	8005e3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005460:	f000 f888 	bl	8005574 <xTaskResumeAll>
 8005464:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d107      	bne.n	800547c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <vTaskDelay+0x64>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000db8 	.word	0x20000db8
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800549a:	463a      	mov	r2, r7
 800549c:	1d39      	adds	r1, r7, #4
 800549e:	f107 0308 	add.w	r3, r7, #8
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff f860 	bl	8004568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	9202      	str	r2, [sp, #8]
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	2300      	movs	r3, #0
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	2300      	movs	r3, #0
 80054b8:	460a      	mov	r2, r1
 80054ba:	4921      	ldr	r1, [pc, #132]	; (8005540 <vTaskStartScheduler+0xb4>)
 80054bc:	4821      	ldr	r0, [pc, #132]	; (8005544 <vTaskStartScheduler+0xb8>)
 80054be:	f7ff fe19 	bl	80050f4 <xTaskCreateStatic>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4a20      	ldr	r2, [pc, #128]	; (8005548 <vTaskStartScheduler+0xbc>)
 80054c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054c8:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <vTaskStartScheduler+0xbc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054d0:	2301      	movs	r3, #1
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e001      	b.n	80054da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d102      	bne.n	80054e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054e0:	f000 fd00 	bl	8005ee4 <xTimerCreateTimerTask>
 80054e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d116      	bne.n	800551a <vTaskStartScheduler+0x8e>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	613b      	str	r3, [r7, #16]
}
 80054fe:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005500:	4b12      	ldr	r3, [pc, #72]	; (800554c <vTaskStartScheduler+0xc0>)
 8005502:	f04f 32ff 	mov.w	r2, #4294967295
 8005506:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005508:	4b11      	ldr	r3, [pc, #68]	; (8005550 <vTaskStartScheduler+0xc4>)
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <vTaskStartScheduler+0xc8>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005514:	f001 f878 	bl	8006608 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005518:	e00e      	b.n	8005538 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005520:	d10a      	bne.n	8005538 <vTaskStartScheduler+0xac>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	60fb      	str	r3, [r7, #12]
}
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <vTaskStartScheduler+0xaa>
}
 8005538:	bf00      	nop
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	08009834 	.word	0x08009834
 8005544:	08005b71 	.word	0x08005b71
 8005548:	20000db4 	.word	0x20000db4
 800554c:	20000db0 	.word	0x20000db0
 8005550:	20000d9c 	.word	0x20000d9c
 8005554:	20000d94 	.word	0x20000d94

08005558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800555c:	4b04      	ldr	r3, [pc, #16]	; (8005570 <vTaskSuspendAll+0x18>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3301      	adds	r3, #1
 8005562:	4a03      	ldr	r2, [pc, #12]	; (8005570 <vTaskSuspendAll+0x18>)
 8005564:	6013      	str	r3, [r2, #0]
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000db8 	.word	0x20000db8

08005574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005582:	4b42      	ldr	r3, [pc, #264]	; (800568c <xTaskResumeAll+0x118>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	603b      	str	r3, [r7, #0]
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055a0:	f001 f8a4 	bl	80066ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055a4:	4b39      	ldr	r3, [pc, #228]	; (800568c <xTaskResumeAll+0x118>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	4a38      	ldr	r2, [pc, #224]	; (800568c <xTaskResumeAll+0x118>)
 80055ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ae:	4b37      	ldr	r3, [pc, #220]	; (800568c <xTaskResumeAll+0x118>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d162      	bne.n	800567c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055b6:	4b36      	ldr	r3, [pc, #216]	; (8005690 <xTaskResumeAll+0x11c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d05e      	beq.n	800567c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055be:	e02f      	b.n	8005620 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055c0:	4b34      	ldr	r3, [pc, #208]	; (8005694 <xTaskResumeAll+0x120>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3318      	adds	r3, #24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff f883 	bl	80046d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff f87e 	bl	80046d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	4b2d      	ldr	r3, [pc, #180]	; (8005698 <xTaskResumeAll+0x124>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d903      	bls.n	80055f0 <xTaskResumeAll+0x7c>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <xTaskResumeAll+0x124>)
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4a27      	ldr	r2, [pc, #156]	; (800569c <xTaskResumeAll+0x128>)
 80055fe:	441a      	add	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f7ff f80b 	bl	8004622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <xTaskResumeAll+0x12c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800561a:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <xTaskResumeAll+0x130>)
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005620:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <xTaskResumeAll+0x120>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1cb      	bne.n	80055c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800562e:	f000 fb55 	bl	8005cdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005632:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <xTaskResumeAll+0x134>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d010      	beq.n	8005660 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800563e:	f000 f845 	bl	80056cc <xTaskIncrementTick>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005648:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <xTaskResumeAll+0x130>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3b01      	subs	r3, #1
 8005652:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f1      	bne.n	800563e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800565a:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <xTaskResumeAll+0x134>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005660:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <xTaskResumeAll+0x130>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d009      	beq.n	800567c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005668:	2301      	movs	r3, #1
 800566a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800566c:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <xTaskResumeAll+0x138>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800567c:	f001 f866 	bl	800674c <vPortExitCritical>

	return xAlreadyYielded;
 8005680:	68bb      	ldr	r3, [r7, #8]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000db8 	.word	0x20000db8
 8005690:	20000d90 	.word	0x20000d90
 8005694:	20000d50 	.word	0x20000d50
 8005698:	20000d98 	.word	0x20000d98
 800569c:	200008c0 	.word	0x200008c0
 80056a0:	200008bc 	.word	0x200008bc
 80056a4:	20000da4 	.word	0x20000da4
 80056a8:	20000da0 	.word	0x20000da0
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056b6:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <xTaskGetTickCount+0x18>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056bc:	687b      	ldr	r3, [r7, #4]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr
 80056c8:	20000d94 	.word	0x20000d94

080056cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d6:	4b51      	ldr	r3, [pc, #324]	; (800581c <xTaskIncrementTick+0x150>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 808e 	bne.w	80057fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056e0:	4b4f      	ldr	r3, [pc, #316]	; (8005820 <xTaskIncrementTick+0x154>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056e8:	4a4d      	ldr	r2, [pc, #308]	; (8005820 <xTaskIncrementTick+0x154>)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d120      	bne.n	8005736 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056f4:	4b4b      	ldr	r3, [pc, #300]	; (8005824 <xTaskIncrementTick+0x158>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <xTaskIncrementTick+0x48>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	603b      	str	r3, [r7, #0]
}
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <xTaskIncrementTick+0x46>
 8005714:	4b43      	ldr	r3, [pc, #268]	; (8005824 <xTaskIncrementTick+0x158>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	4b43      	ldr	r3, [pc, #268]	; (8005828 <xTaskIncrementTick+0x15c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a41      	ldr	r2, [pc, #260]	; (8005824 <xTaskIncrementTick+0x158>)
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	4a41      	ldr	r2, [pc, #260]	; (8005828 <xTaskIncrementTick+0x15c>)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b40      	ldr	r3, [pc, #256]	; (800582c <xTaskIncrementTick+0x160>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	4a3f      	ldr	r2, [pc, #252]	; (800582c <xTaskIncrementTick+0x160>)
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	f000 fad3 	bl	8005cdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005736:	4b3e      	ldr	r3, [pc, #248]	; (8005830 <xTaskIncrementTick+0x164>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	429a      	cmp	r2, r3
 800573e:	d34e      	bcc.n	80057de <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005740:	4b38      	ldr	r3, [pc, #224]	; (8005824 <xTaskIncrementTick+0x158>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <xTaskIncrementTick+0x82>
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <xTaskIncrementTick+0x84>
 800574e:	2300      	movs	r3, #0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005754:	4b36      	ldr	r3, [pc, #216]	; (8005830 <xTaskIncrementTick+0x164>)
 8005756:	f04f 32ff 	mov.w	r2, #4294967295
 800575a:	601a      	str	r2, [r3, #0]
					break;
 800575c:	e03f      	b.n	80057de <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800575e:	4b31      	ldr	r3, [pc, #196]	; (8005824 <xTaskIncrementTick+0x158>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	429a      	cmp	r2, r3
 8005774:	d203      	bcs.n	800577e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005776:	4a2e      	ldr	r2, [pc, #184]	; (8005830 <xTaskIncrementTick+0x164>)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6013      	str	r3, [r2, #0]
						break;
 800577c:	e02f      	b.n	80057de <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3304      	adds	r3, #4
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe ffa8 	bl	80046d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	3318      	adds	r3, #24
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe ff9f 	bl	80046d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579e:	4b25      	ldr	r3, [pc, #148]	; (8005834 <xTaskIncrementTick+0x168>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d903      	bls.n	80057ae <xTaskIncrementTick+0xe2>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057aa:	4a22      	ldr	r2, [pc, #136]	; (8005834 <xTaskIncrementTick+0x168>)
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4a1f      	ldr	r2, [pc, #124]	; (8005838 <xTaskIncrementTick+0x16c>)
 80057bc:	441a      	add	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f7fe ff2c 	bl	8004622 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ce:	4b1b      	ldr	r3, [pc, #108]	; (800583c <xTaskIncrementTick+0x170>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d3b3      	bcc.n	8005740 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057dc:	e7b0      	b.n	8005740 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057de:	4b17      	ldr	r3, [pc, #92]	; (800583c <xTaskIncrementTick+0x170>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	4914      	ldr	r1, [pc, #80]	; (8005838 <xTaskIncrementTick+0x16c>)
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d907      	bls.n	8005806 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80057f6:	2301      	movs	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e004      	b.n	8005806 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057fc:	4b10      	ldr	r3, [pc, #64]	; (8005840 <xTaskIncrementTick+0x174>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a0f      	ldr	r2, [pc, #60]	; (8005840 <xTaskIncrementTick+0x174>)
 8005804:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005806:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <xTaskIncrementTick+0x178>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800580e:	2301      	movs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005812:	697b      	ldr	r3, [r7, #20]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000db8 	.word	0x20000db8
 8005820:	20000d94 	.word	0x20000d94
 8005824:	20000d48 	.word	0x20000d48
 8005828:	20000d4c 	.word	0x20000d4c
 800582c:	20000da8 	.word	0x20000da8
 8005830:	20000db0 	.word	0x20000db0
 8005834:	20000d98 	.word	0x20000d98
 8005838:	200008c0 	.word	0x200008c0
 800583c:	200008bc 	.word	0x200008bc
 8005840:	20000da0 	.word	0x20000da0
 8005844:	20000da4 	.word	0x20000da4

08005848 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800584e:	4b27      	ldr	r3, [pc, #156]	; (80058ec <vTaskSwitchContext+0xa4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <vTaskSwitchContext+0xa8>)
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800585c:	e041      	b.n	80058e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800585e:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <vTaskSwitchContext+0xa8>)
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <vTaskSwitchContext+0xac>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	e010      	b.n	800588e <vTaskSwitchContext+0x46>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <vTaskSwitchContext+0x40>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	607b      	str	r3, [r7, #4]
}
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <vTaskSwitchContext+0x3e>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3b01      	subs	r3, #1
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	491a      	ldr	r1, [pc, #104]	; (80058f8 <vTaskSwitchContext+0xb0>)
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0e4      	beq.n	800586c <vTaskSwitchContext+0x24>
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4a12      	ldr	r2, [pc, #72]	; (80058f8 <vTaskSwitchContext+0xb0>)
 80058ae:	4413      	add	r3, r2
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	605a      	str	r2, [r3, #4]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	3308      	adds	r3, #8
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d104      	bne.n	80058d2 <vTaskSwitchContext+0x8a>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a08      	ldr	r2, [pc, #32]	; (80058fc <vTaskSwitchContext+0xb4>)
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4a05      	ldr	r2, [pc, #20]	; (80058f4 <vTaskSwitchContext+0xac>)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6013      	str	r3, [r2, #0]
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr
 80058ec:	20000db8 	.word	0x20000db8
 80058f0:	20000da4 	.word	0x20000da4
 80058f4:	20000d98 	.word	0x20000d98
 80058f8:	200008c0 	.word	0x200008c0
 80058fc:	200008bc 	.word	0x200008bc

08005900 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	60fb      	str	r3, [r7, #12]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005926:	4b07      	ldr	r3, [pc, #28]	; (8005944 <vTaskPlaceOnEventList+0x44>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3318      	adds	r3, #24
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fe fe9a 	bl	8004668 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005934:	2101      	movs	r1, #1
 8005936:	6838      	ldr	r0, [r7, #0]
 8005938:	f000 fa80 	bl	8005e3c <prvAddCurrentTaskToDelayedList>
}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	200008bc 	.word	0x200008bc

08005948 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	617b      	str	r3, [r7, #20]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <vTaskPlaceOnEventListRestricted+0x54>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3318      	adds	r3, #24
 8005976:	4619      	mov	r1, r3
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7fe fe52 	bl	8004622 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005984:	f04f 33ff 	mov.w	r3, #4294967295
 8005988:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	68b8      	ldr	r0, [r7, #8]
 800598e:	f000 fa55 	bl	8005e3c <prvAddCurrentTaskToDelayedList>
	}
 8005992:	bf00      	nop
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	200008bc 	.word	0x200008bc

080059a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60fb      	str	r3, [r7, #12]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	3318      	adds	r3, #24
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fe81 	bl	80046d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d6:	4b1e      	ldr	r3, [pc, #120]	; (8005a50 <xTaskRemoveFromEventList+0xb0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11d      	bne.n	8005a1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fe78 	bl	80046d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <xTaskRemoveFromEventList+0xb4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d903      	bls.n	80059fc <xTaskRemoveFromEventList+0x5c>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <xTaskRemoveFromEventList+0xb4>)
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <xTaskRemoveFromEventList+0xb8>)
 8005a0a:	441a      	add	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f7fe fe05 	bl	8004622 <vListInsertEnd>
 8005a18:	e005      	b.n	8005a26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	4619      	mov	r1, r3
 8005a20:	480e      	ldr	r0, [pc, #56]	; (8005a5c <xTaskRemoveFromEventList+0xbc>)
 8005a22:	f7fe fdfe 	bl	8004622 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <xTaskRemoveFromEventList+0xc0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d905      	bls.n	8005a40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <xTaskRemoveFromEventList+0xc4>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e001      	b.n	8005a44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005a44:	697b      	ldr	r3, [r7, #20]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000db8 	.word	0x20000db8
 8005a54:	20000d98 	.word	0x20000d98
 8005a58:	200008c0 	.word	0x200008c0
 8005a5c:	20000d50 	.word	0x20000d50
 8005a60:	200008bc 	.word	0x200008bc
 8005a64:	20000da4 	.word	0x20000da4

08005a68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <vTaskInternalSetTimeOutState+0x24>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <vTaskInternalSetTimeOutState+0x28>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	605a      	str	r2, [r3, #4]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000da8 	.word	0x20000da8
 8005a90:	20000d94 	.word	0x20000d94

08005a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	613b      	str	r3, [r7, #16]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60fb      	str	r3, [r7, #12]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ad6:	f000 fe09 	bl	80066ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ada:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <xTaskCheckForTimeOut+0xbc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d102      	bne.n	8005afa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	e023      	b.n	8005b42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b15      	ldr	r3, [pc, #84]	; (8005b54 <xTaskCheckForTimeOut+0xc0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d007      	beq.n	8005b16 <xTaskCheckForTimeOut+0x82>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d302      	bcc.n	8005b16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	e015      	b.n	8005b42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d20b      	bcs.n	8005b38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	1ad2      	subs	r2, r2, r3
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff9b 	bl	8005a68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	e004      	b.n	8005b42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b42:	f000 fe03 	bl	800674c <vPortExitCritical>

	return xReturn;
 8005b46:	69fb      	ldr	r3, [r7, #28]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3720      	adds	r7, #32
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000d94 	.word	0x20000d94
 8005b54:	20000da8 	.word	0x20000da8

08005b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b5c:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <vTaskMissedYield+0x14>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000da4 	.word	0x20000da4

08005b70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b78:	f000 f852 	bl	8005c20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <prvIdleTask+0x28>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d9f9      	bls.n	8005b78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <prvIdleTask+0x2c>)
 8005b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b94:	e7f0      	b.n	8005b78 <prvIdleTask+0x8>
 8005b96:	bf00      	nop
 8005b98:	200008c0 	.word	0x200008c0
 8005b9c:	e000ed04 	.word	0xe000ed04

08005ba0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	e00c      	b.n	8005bc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4a12      	ldr	r2, [pc, #72]	; (8005c00 <prvInitialiseTaskLists+0x60>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fd06 	bl	80045cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b37      	cmp	r3, #55	; 0x37
 8005bca:	d9ef      	bls.n	8005bac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bcc:	480d      	ldr	r0, [pc, #52]	; (8005c04 <prvInitialiseTaskLists+0x64>)
 8005bce:	f7fe fcfd 	bl	80045cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bd2:	480d      	ldr	r0, [pc, #52]	; (8005c08 <prvInitialiseTaskLists+0x68>)
 8005bd4:	f7fe fcfa 	bl	80045cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bd8:	480c      	ldr	r0, [pc, #48]	; (8005c0c <prvInitialiseTaskLists+0x6c>)
 8005bda:	f7fe fcf7 	bl	80045cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bde:	480c      	ldr	r0, [pc, #48]	; (8005c10 <prvInitialiseTaskLists+0x70>)
 8005be0:	f7fe fcf4 	bl	80045cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005be4:	480b      	ldr	r0, [pc, #44]	; (8005c14 <prvInitialiseTaskLists+0x74>)
 8005be6:	f7fe fcf1 	bl	80045cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <prvInitialiseTaskLists+0x78>)
 8005bec:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <prvInitialiseTaskLists+0x64>)
 8005bee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <prvInitialiseTaskLists+0x7c>)
 8005bf2:	4a05      	ldr	r2, [pc, #20]	; (8005c08 <prvInitialiseTaskLists+0x68>)
 8005bf4:	601a      	str	r2, [r3, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	200008c0 	.word	0x200008c0
 8005c04:	20000d20 	.word	0x20000d20
 8005c08:	20000d34 	.word	0x20000d34
 8005c0c:	20000d50 	.word	0x20000d50
 8005c10:	20000d64 	.word	0x20000d64
 8005c14:	20000d7c 	.word	0x20000d7c
 8005c18:	20000d48 	.word	0x20000d48
 8005c1c:	20000d4c 	.word	0x20000d4c

08005c20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c26:	e019      	b.n	8005c5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c28:	f000 fd60 	bl	80066ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c2c:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <prvCheckTasksWaitingTermination+0x50>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fe fd4d 	bl	80046d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <prvCheckTasksWaitingTermination+0x54>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	4a0b      	ldr	r2, [pc, #44]	; (8005c74 <prvCheckTasksWaitingTermination+0x54>)
 8005c46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <prvCheckTasksWaitingTermination+0x58>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <prvCheckTasksWaitingTermination+0x58>)
 8005c50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c52:	f000 fd7b 	bl	800674c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f810 	bl	8005c7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c5c:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <prvCheckTasksWaitingTermination+0x58>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e1      	bne.n	8005c28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000d64 	.word	0x20000d64
 8005c74:	20000d90 	.word	0x20000d90
 8005c78:	20000d78 	.word	0x20000d78

08005c7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d108      	bne.n	8005ca0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 feee 	bl	8006a74 <vPortFree>
				vPortFree( pxTCB );
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 feeb 	bl	8006a74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c9e:	e018      	b.n	8005cd2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d103      	bne.n	8005cb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fee2 	bl	8006a74 <vPortFree>
	}
 8005cb0:	e00f      	b.n	8005cd2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d00a      	beq.n	8005cd2 <prvDeleteTCB+0x56>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60fb      	str	r3, [r7, #12]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <prvDeleteTCB+0x54>
	}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <prvResetNextTaskUnblockTime+0x40>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <prvResetNextTaskUnblockTime+0x14>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <prvResetNextTaskUnblockTime+0x16>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <prvResetNextTaskUnblockTime+0x44>)
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cfe:	e008      	b.n	8005d12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <prvResetNextTaskUnblockTime+0x40>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4a04      	ldr	r2, [pc, #16]	; (8005d20 <prvResetNextTaskUnblockTime+0x44>)
 8005d10:	6013      	str	r3, [r2, #0]
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr
 8005d1c:	20000d48 	.word	0x20000d48
 8005d20:	20000db0 	.word	0x20000db0

08005d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <xTaskGetSchedulerState+0x34>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d32:	2301      	movs	r3, #1
 8005d34:	607b      	str	r3, [r7, #4]
 8005d36:	e008      	b.n	8005d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <xTaskGetSchedulerState+0x38>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d40:	2302      	movs	r3, #2
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	e001      	b.n	8005d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d4a:	687b      	ldr	r3, [r7, #4]
	}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20000d9c 	.word	0x20000d9c
 8005d5c:	20000db8 	.word	0x20000db8

08005d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d056      	beq.n	8005e24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d76:	4b2e      	ldr	r3, [pc, #184]	; (8005e30 <xTaskPriorityDisinherit+0xd0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d00a      	beq.n	8005d96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	60bb      	str	r3, [r7, #8]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db8:	1e5a      	subs	r2, r3, #1
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d02c      	beq.n	8005e24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d128      	bne.n	8005e24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fe fc7e 	bl	80046d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <xTaskPriorityDisinherit+0xd4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d903      	bls.n	8005e04 <xTaskPriorityDisinherit+0xa4>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <xTaskPriorityDisinherit+0xd4>)
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <xTaskPriorityDisinherit+0xd8>)
 8005e12:	441a      	add	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fe fc01 	bl	8004622 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e24:	697b      	ldr	r3, [r7, #20]
	}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	200008bc 	.word	0x200008bc
 8005e34:	20000d98 	.word	0x20000d98
 8005e38:	200008c0 	.word	0x200008c0

08005e3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e46:	4b21      	ldr	r3, [pc, #132]	; (8005ecc <prvAddCurrentTaskToDelayedList+0x90>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e4c:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3304      	adds	r3, #4
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fc40 	bl	80046d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d10a      	bne.n	8005e76 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e66:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4819      	ldr	r0, [pc, #100]	; (8005ed4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e70:	f7fe fbd7 	bl	8004622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e74:	e026      	b.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d209      	bcs.n	8005ea2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e8e:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	f7fe fbe4 	bl	8004668 <vListInsert>
}
 8005ea0:	e010      	b.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f7fe fbda 	bl	8004668 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005eb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d202      	bcs.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ebe:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6013      	str	r3, [r2, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	20000d94 	.word	0x20000d94
 8005ed0:	200008bc 	.word	0x200008bc
 8005ed4:	20000d7c 	.word	0x20000d7c
 8005ed8:	20000d4c 	.word	0x20000d4c
 8005edc:	20000d48 	.word	0x20000d48
 8005ee0:	20000db0 	.word	0x20000db0

08005ee4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005eee:	f000 facb 	bl	8006488 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ef2:	4b1c      	ldr	r3, [pc, #112]	; (8005f64 <xTimerCreateTimerTask+0x80>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d021      	beq.n	8005f3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f02:	1d3a      	adds	r2, r7, #4
 8005f04:	f107 0108 	add.w	r1, r7, #8
 8005f08:	f107 030c 	add.w	r3, r7, #12
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe fb43 	bl	8004598 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	9202      	str	r2, [sp, #8]
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2300      	movs	r3, #0
 8005f22:	460a      	mov	r2, r1
 8005f24:	4910      	ldr	r1, [pc, #64]	; (8005f68 <xTimerCreateTimerTask+0x84>)
 8005f26:	4811      	ldr	r0, [pc, #68]	; (8005f6c <xTimerCreateTimerTask+0x88>)
 8005f28:	f7ff f8e4 	bl	80050f4 <xTaskCreateStatic>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4a10      	ldr	r2, [pc, #64]	; (8005f70 <xTimerCreateTimerTask+0x8c>)
 8005f30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f32:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <xTimerCreateTimerTask+0x8c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	613b      	str	r3, [r7, #16]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f5a:	697b      	ldr	r3, [r7, #20]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20000dec 	.word	0x20000dec
 8005f68:	0800983c 	.word	0x0800983c
 8005f6c:	08006091 	.word	0x08006091
 8005f70:	20000df0 	.word	0x20000df0

08005f74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	; 0x28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	623b      	str	r3, [r7, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fa2:	4b1a      	ldr	r3, [pc, #104]	; (800600c <xTimerGenericCommand+0x98>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d02a      	beq.n	8006000 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b05      	cmp	r3, #5
 8005fba:	dc18      	bgt.n	8005fee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fbc:	f7ff feb2 	bl	8005d24 <xTaskGetSchedulerState>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d109      	bne.n	8005fda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fc6:	4b11      	ldr	r3, [pc, #68]	; (800600c <xTimerGenericCommand+0x98>)
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	f107 0110 	add.w	r1, r7, #16
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	f7fe fcad 	bl	8004930 <xQueueGenericSend>
 8005fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8005fd8:	e012      	b.n	8006000 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <xTimerGenericCommand+0x98>)
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	f107 0110 	add.w	r1, r7, #16
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f7fe fca3 	bl	8004930 <xQueueGenericSend>
 8005fea:	6278      	str	r0, [r7, #36]	; 0x24
 8005fec:	e008      	b.n	8006000 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <xTimerGenericCommand+0x98>)
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	f107 0110 	add.w	r1, r7, #16
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	f7fe fd97 	bl	8004b2c <xQueueGenericSendFromISR>
 8005ffe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006002:	4618      	mov	r0, r3
 8006004:	3728      	adds	r7, #40	; 0x28
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000dec 	.word	0x20000dec

08006010 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af02      	add	r7, sp, #8
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800601a:	4b1c      	ldr	r3, [pc, #112]	; (800608c <prvProcessExpiredTimer+0x7c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	3304      	adds	r3, #4
 8006028:	4618      	mov	r0, r3
 800602a:	f7fe fb55 	bl	80046d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d122      	bne.n	800607c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	18d1      	adds	r1, r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	6978      	ldr	r0, [r7, #20]
 8006044:	f000 f8c8 	bl	80061d8 <prvInsertTimerInActiveList>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d016      	beq.n	800607c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800604e:	2300      	movs	r3, #0
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	2300      	movs	r3, #0
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	2100      	movs	r1, #0
 8006058:	6978      	ldr	r0, [r7, #20]
 800605a:	f7ff ff8b 	bl	8005f74 <xTimerGenericCommand>
 800605e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	60fb      	str	r3, [r7, #12]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	6978      	ldr	r0, [r7, #20]
 8006082:	4798      	blx	r3
}
 8006084:	bf00      	nop
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000de4 	.word	0x20000de4

08006090 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006098:	f107 0308 	add.w	r3, r7, #8
 800609c:	4618      	mov	r0, r3
 800609e:	f000 f857 	bl	8006150 <prvGetNextExpireTime>
 80060a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4619      	mov	r1, r3
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f803 	bl	80060b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060ae:	f000 f8d5 	bl	800625c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060b2:	e7f1      	b.n	8006098 <prvTimerTask+0x8>

080060b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060be:	f7ff fa4b 	bl	8005558 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060c2:	f107 0308 	add.w	r3, r7, #8
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 f866 	bl	8006198 <prvSampleTimeNow>
 80060cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d130      	bne.n	8006136 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <prvProcessTimerOrBlockTask+0x3c>
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d806      	bhi.n	80060f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060e2:	f7ff fa47 	bl	8005574 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060e6:	68f9      	ldr	r1, [r7, #12]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff ff91 	bl	8006010 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060ee:	e024      	b.n	800613a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060f6:	4b13      	ldr	r3, [pc, #76]	; (8006144 <prvProcessTimerOrBlockTask+0x90>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bf0c      	ite	eq
 8006100:	2301      	moveq	r3, #1
 8006102:	2300      	movne	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <prvProcessTimerOrBlockTask+0x94>)
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	4619      	mov	r1, r3
 8006116:	f7fe ffb9 	bl	800508c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800611a:	f7ff fa2b 	bl	8005574 <xTaskResumeAll>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006124:	4b09      	ldr	r3, [pc, #36]	; (800614c <prvProcessTimerOrBlockTask+0x98>)
 8006126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
}
 8006134:	e001      	b.n	800613a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006136:	f7ff fa1d 	bl	8005574 <xTaskResumeAll>
}
 800613a:	bf00      	nop
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000de8 	.word	0x20000de8
 8006148:	20000dec 	.word	0x20000dec
 800614c:	e000ed04 	.word	0xe000ed04

08006150 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006158:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <prvGetNextExpireTime+0x44>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf0c      	ite	eq
 8006162:	2301      	moveq	r3, #1
 8006164:	2300      	movne	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d105      	bne.n	8006182 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <prvGetNextExpireTime+0x44>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e001      	b.n	8006186 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006186:	68fb      	ldr	r3, [r7, #12]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20000de4 	.word	0x20000de4

08006198 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061a0:	f7ff fa86 	bl	80056b0 <xTaskGetTickCount>
 80061a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <prvSampleTimeNow+0x3c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d205      	bcs.n	80061bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061b0:	f000 f908 	bl	80063c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	e002      	b.n	80061c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061c2:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <prvSampleTimeNow+0x3c>)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061c8:	68fb      	ldr	r3, [r7, #12]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000df4 	.word	0x20000df4

080061d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d812      	bhi.n	8006224 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	429a      	cmp	r2, r3
 800620a:	d302      	bcc.n	8006212 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e01b      	b.n	800624a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <prvInsertTimerInActiveList+0x7c>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3304      	adds	r3, #4
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f7fe fa23 	bl	8004668 <vListInsert>
 8006222:	e012      	b.n	800624a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d206      	bcs.n	800623a <prvInsertTimerInActiveList+0x62>
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d302      	bcc.n	800623a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006234:	2301      	movs	r3, #1
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e007      	b.n	800624a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800623a:	4b07      	ldr	r3, [pc, #28]	; (8006258 <prvInsertTimerInActiveList+0x80>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f7fe fa0f 	bl	8004668 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800624a:	697b      	ldr	r3, [r7, #20]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000de8 	.word	0x20000de8
 8006258:	20000de4 	.word	0x20000de4

0800625c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08e      	sub	sp, #56	; 0x38
 8006260:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006262:	e09d      	b.n	80063a0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	da18      	bge.n	800629c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800626a:	1d3b      	adds	r3, r7, #4
 800626c:	3304      	adds	r3, #4
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	61fb      	str	r3, [r7, #28]
}
 8006288:	bf00      	nop
 800628a:	e7fe      	b.n	800628a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006292:	6850      	ldr	r0, [r2, #4]
 8006294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006296:	6892      	ldr	r2, [r2, #8]
 8006298:	4611      	mov	r1, r2
 800629a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	db7d      	blt.n	800639e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	3304      	adds	r3, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe fa10 	bl	80046d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062b8:	463b      	mov	r3, r7
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff ff6c 	bl	8006198 <prvSampleTimeNow>
 80062c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	d86b      	bhi.n	80063a0 <prvProcessReceivedCommands+0x144>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <prvProcessReceivedCommands+0x74>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	080062f9 	.word	0x080062f9
 80062dc:	080063a1 	.word	0x080063a1
 80062e0:	08006355 	.word	0x08006355
 80062e4:	0800638d 	.word	0x0800638d
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	080062f9 	.word	0x080062f9
 80062f0:	080063a1 	.word	0x080063a1
 80062f4:	08006355 	.word	0x08006355
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	18d1      	adds	r1, r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006306:	f7ff ff67 	bl	80061d8 <prvInsertTimerInActiveList>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d047      	beq.n	80063a0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006316:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d13f      	bne.n	80063a0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	441a      	add	r2, r3
 8006328:	2300      	movs	r3, #0
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	2100      	movs	r1, #0
 8006330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006332:	f7ff fe1f 	bl	8005f74 <xTimerGenericCommand>
 8006336:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d130      	bne.n	80063a0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	61bb      	str	r3, [r7, #24]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	617b      	str	r3, [r7, #20]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	18d1      	adds	r1, r2, r3
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006386:	f7ff ff27 	bl	80061d8 <prvInsertTimerInActiveList>
					break;
 800638a:	e009      	b.n	80063a0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006398:	f000 fb6c 	bl	8006a74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800639c:	e000      	b.n	80063a0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800639e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <prvProcessReceivedCommands+0x164>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	1d39      	adds	r1, r7, #4
 80063a6:	2200      	movs	r2, #0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fe fc57 	bl	8004c5c <xQueueReceive>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f47f af57 	bne.w	8006264 <prvProcessReceivedCommands+0x8>
	}
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	3730      	adds	r7, #48	; 0x30
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000dec 	.word	0x20000dec

080063c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ca:	e045      	b.n	8006458 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063cc:	4b2c      	ldr	r3, [pc, #176]	; (8006480 <prvSwitchTimerLists+0xbc>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063d6:	4b2a      	ldr	r3, [pc, #168]	; (8006480 <prvSwitchTimerLists+0xbc>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe f977 	bl	80046d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d12e      	bne.n	8006458 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4413      	add	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	429a      	cmp	r2, r3
 800640a:	d90e      	bls.n	800642a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006418:	4b19      	ldr	r3, [pc, #100]	; (8006480 <prvSwitchTimerLists+0xbc>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3304      	adds	r3, #4
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f7fe f920 	bl	8004668 <vListInsert>
 8006428:	e016      	b.n	8006458 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800642a:	2300      	movs	r3, #0
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	2300      	movs	r3, #0
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	2100      	movs	r1, #0
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff fd9d 	bl	8005f74 <xTimerGenericCommand>
 800643a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	603b      	str	r3, [r7, #0]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006458:	4b09      	ldr	r3, [pc, #36]	; (8006480 <prvSwitchTimerLists+0xbc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1b4      	bne.n	80063cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <prvSwitchTimerLists+0xbc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <prvSwitchTimerLists+0xc0>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a04      	ldr	r2, [pc, #16]	; (8006480 <prvSwitchTimerLists+0xbc>)
 800646e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006470:	4a04      	ldr	r2, [pc, #16]	; (8006484 <prvSwitchTimerLists+0xc0>)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	6013      	str	r3, [r2, #0]
}
 8006476:	bf00      	nop
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000de4 	.word	0x20000de4
 8006484:	20000de8 	.word	0x20000de8

08006488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800648e:	f000 f92d 	bl	80066ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006492:	4b15      	ldr	r3, [pc, #84]	; (80064e8 <prvCheckForValidListAndQueue+0x60>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d120      	bne.n	80064dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800649a:	4814      	ldr	r0, [pc, #80]	; (80064ec <prvCheckForValidListAndQueue+0x64>)
 800649c:	f7fe f896 	bl	80045cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064a0:	4813      	ldr	r0, [pc, #76]	; (80064f0 <prvCheckForValidListAndQueue+0x68>)
 80064a2:	f7fe f893 	bl	80045cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064a6:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <prvCheckForValidListAndQueue+0x6c>)
 80064a8:	4a10      	ldr	r2, [pc, #64]	; (80064ec <prvCheckForValidListAndQueue+0x64>)
 80064aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064ac:	4b12      	ldr	r3, [pc, #72]	; (80064f8 <prvCheckForValidListAndQueue+0x70>)
 80064ae:	4a10      	ldr	r2, [pc, #64]	; (80064f0 <prvCheckForValidListAndQueue+0x68>)
 80064b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064b2:	2300      	movs	r3, #0
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	4b11      	ldr	r3, [pc, #68]	; (80064fc <prvCheckForValidListAndQueue+0x74>)
 80064b8:	4a11      	ldr	r2, [pc, #68]	; (8006500 <prvCheckForValidListAndQueue+0x78>)
 80064ba:	2110      	movs	r1, #16
 80064bc:	200a      	movs	r0, #10
 80064be:	f7fe f99d 	bl	80047fc <xQueueGenericCreateStatic>
 80064c2:	4603      	mov	r3, r0
 80064c4:	4a08      	ldr	r2, [pc, #32]	; (80064e8 <prvCheckForValidListAndQueue+0x60>)
 80064c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064c8:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <prvCheckForValidListAndQueue+0x60>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <prvCheckForValidListAndQueue+0x60>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	490b      	ldr	r1, [pc, #44]	; (8006504 <prvCheckForValidListAndQueue+0x7c>)
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fdb0 	bl	800503c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064dc:	f000 f936 	bl	800674c <vPortExitCritical>
}
 80064e0:	bf00      	nop
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000dec 	.word	0x20000dec
 80064ec:	20000dbc 	.word	0x20000dbc
 80064f0:	20000dd0 	.word	0x20000dd0
 80064f4:	20000de4 	.word	0x20000de4
 80064f8:	20000de8 	.word	0x20000de8
 80064fc:	20000e98 	.word	0x20000e98
 8006500:	20000df8 	.word	0x20000df8
 8006504:	08009844 	.word	0x08009844

08006508 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3b04      	subs	r3, #4
 8006518:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3b04      	subs	r3, #4
 8006526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f023 0201 	bic.w	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3b04      	subs	r3, #4
 8006536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006538:	4a08      	ldr	r2, [pc, #32]	; (800655c <pxPortInitialiseStack+0x54>)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3b14      	subs	r3, #20
 8006542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3b20      	subs	r3, #32
 800654e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006550:	68fb      	ldr	r3, [r7, #12]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	08006561 	.word	0x08006561

08006560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <prvTaskExitError+0x54>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d00a      	beq.n	800658a <prvTaskExitError+0x2a>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <prvTaskExitError+0x28>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	60bb      	str	r3, [r7, #8]
}
 800659c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800659e:	bf00      	nop
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0fc      	beq.n	80065a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065a6:	bf00      	nop
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	2000000c 	.word	0x2000000c
	...

080065c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <pxCurrentTCBConst2>)
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	6808      	ldr	r0, [r1, #0]
 80065c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065ca:	f380 8809 	msr	PSP, r0
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8811 	msr	BASEPRI, r0
 80065da:	f04e 0e0d 	orr.w	lr, lr, #13
 80065de:	4770      	bx	lr

080065e0 <pxCurrentTCBConst2>:
 80065e0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80065e8:	4806      	ldr	r0, [pc, #24]	; (8006604 <prvPortStartFirstTask+0x1c>)
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	6800      	ldr	r0, [r0, #0]
 80065ee:	f380 8808 	msr	MSP, r0
 80065f2:	b662      	cpsie	i
 80065f4:	b661      	cpsie	f
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	df00      	svc	0
 8006600:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006602:	bf00      	nop
 8006604:	e000ed08 	.word	0xe000ed08

08006608 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800660e:	4b32      	ldr	r3, [pc, #200]	; (80066d8 <xPortStartScheduler+0xd0>)
 8006610:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	22ff      	movs	r2, #255	; 0xff
 800661e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006630:	b2da      	uxtb	r2, r3
 8006632:	4b2a      	ldr	r3, [pc, #168]	; (80066dc <xPortStartScheduler+0xd4>)
 8006634:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006636:	4b2a      	ldr	r3, [pc, #168]	; (80066e0 <xPortStartScheduler+0xd8>)
 8006638:	2207      	movs	r2, #7
 800663a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800663c:	e009      	b.n	8006652 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800663e:	4b28      	ldr	r3, [pc, #160]	; (80066e0 <xPortStartScheduler+0xd8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3b01      	subs	r3, #1
 8006644:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <xPortStartScheduler+0xd8>)
 8006646:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	b2db      	uxtb	r3, r3
 8006650:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665a:	2b80      	cmp	r3, #128	; 0x80
 800665c:	d0ef      	beq.n	800663e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800665e:	4b20      	ldr	r3, [pc, #128]	; (80066e0 <xPortStartScheduler+0xd8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1c3 0307 	rsb	r3, r3, #7
 8006666:	2b04      	cmp	r3, #4
 8006668:	d00a      	beq.n	8006680 <xPortStartScheduler+0x78>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	60bb      	str	r3, [r7, #8]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006680:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <xPortStartScheduler+0xd8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	4a16      	ldr	r2, [pc, #88]	; (80066e0 <xPortStartScheduler+0xd8>)
 8006688:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <xPortStartScheduler+0xd8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006692:	4a13      	ldr	r2, [pc, #76]	; (80066e0 <xPortStartScheduler+0xd8>)
 8006694:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800669e:	4b11      	ldr	r3, [pc, #68]	; (80066e4 <xPortStartScheduler+0xdc>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a10      	ldr	r2, [pc, #64]	; (80066e4 <xPortStartScheduler+0xdc>)
 80066a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066aa:	4b0e      	ldr	r3, [pc, #56]	; (80066e4 <xPortStartScheduler+0xdc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a0d      	ldr	r2, [pc, #52]	; (80066e4 <xPortStartScheduler+0xdc>)
 80066b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066b6:	f000 f8b9 	bl	800682c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066ba:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <xPortStartScheduler+0xe0>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066c0:	f7ff ff92 	bl	80065e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066c4:	f7ff f8c0 	bl	8005848 <vTaskSwitchContext>
	prvTaskExitError();
 80066c8:	f7ff ff4a 	bl	8006560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	e000e400 	.word	0xe000e400
 80066dc:	20000ee8 	.word	0x20000ee8
 80066e0:	20000eec 	.word	0x20000eec
 80066e4:	e000ed20 	.word	0xe000ed20
 80066e8:	2000000c 	.word	0x2000000c

080066ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	607b      	str	r3, [r7, #4]
}
 8006704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006706:	4b0f      	ldr	r3, [pc, #60]	; (8006744 <vPortEnterCritical+0x58>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3301      	adds	r3, #1
 800670c:	4a0d      	ldr	r2, [pc, #52]	; (8006744 <vPortEnterCritical+0x58>)
 800670e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <vPortEnterCritical+0x58>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d10f      	bne.n	8006738 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <vPortEnterCritical+0x5c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <vPortEnterCritical+0x4c>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	603b      	str	r3, [r7, #0]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <vPortEnterCritical+0x4a>
	}
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	2000000c 	.word	0x2000000c
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006752:	4b11      	ldr	r3, [pc, #68]	; (8006798 <vPortExitCritical+0x4c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <vPortExitCritical+0x24>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	607b      	str	r3, [r7, #4]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <vPortExitCritical+0x4c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3b01      	subs	r3, #1
 8006776:	4a08      	ldr	r2, [pc, #32]	; (8006798 <vPortExitCritical+0x4c>)
 8006778:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800677a:	4b07      	ldr	r3, [pc, #28]	; (8006798 <vPortExitCritical+0x4c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <vPortExitCritical+0x42>
 8006782:	2300      	movs	r3, #0
 8006784:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f383 8811 	msr	BASEPRI, r3
}
 800678c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr
 8006798:	2000000c 	.word	0x2000000c
 800679c:	00000000 	.word	0x00000000

080067a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067a0:	f3ef 8009 	mrs	r0, PSP
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <pxCurrentTCBConst>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067b0:	6010      	str	r0, [r2, #0]
 80067b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80067b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067ba:	f380 8811 	msr	BASEPRI, r0
 80067be:	f7ff f843 	bl	8005848 <vTaskSwitchContext>
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f380 8811 	msr	BASEPRI, r0
 80067ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80067ce:	6819      	ldr	r1, [r3, #0]
 80067d0:	6808      	ldr	r0, [r1, #0]
 80067d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067d6:	f380 8809 	msr	PSP, r0
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	4770      	bx	lr

080067e0 <pxCurrentTCBConst>:
 80067e0:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	607b      	str	r3, [r7, #4]
}
 8006800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006802:	f7fe ff63 	bl	80056cc <xTaskIncrementTick>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <SysTick_Handler+0x40>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f383 8811 	msr	BASEPRI, r3
}
 800681e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <vPortSetupTimerInterrupt+0x30>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006836:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800683c:	4b09      	ldr	r3, [pc, #36]	; (8006864 <vPortSetupTimerInterrupt+0x38>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a09      	ldr	r2, [pc, #36]	; (8006868 <vPortSetupTimerInterrupt+0x3c>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	099b      	lsrs	r3, r3, #6
 8006848:	4a08      	ldr	r2, [pc, #32]	; (800686c <vPortSetupTimerInterrupt+0x40>)
 800684a:	3b01      	subs	r3, #1
 800684c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800684e:	4b03      	ldr	r3, [pc, #12]	; (800685c <vPortSetupTimerInterrupt+0x30>)
 8006850:	2207      	movs	r2, #7
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	bc80      	pop	{r7}
 800685a:	4770      	bx	lr
 800685c:	e000e010 	.word	0xe000e010
 8006860:	e000e018 	.word	0xe000e018
 8006864:	20000000 	.word	0x20000000
 8006868:	10624dd3 	.word	0x10624dd3
 800686c:	e000e014 	.word	0xe000e014

08006870 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006876:	f3ef 8305 	mrs	r3, IPSR
 800687a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d914      	bls.n	80068ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006882:	4a16      	ldr	r2, [pc, #88]	; (80068dc <vPortValidateInterruptPriority+0x6c>)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800688c:	4b14      	ldr	r3, [pc, #80]	; (80068e0 <vPortValidateInterruptPriority+0x70>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	7afa      	ldrb	r2, [r7, #11]
 8006892:	429a      	cmp	r2, r3
 8006894:	d20a      	bcs.n	80068ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	607b      	str	r3, [r7, #4]
}
 80068a8:	bf00      	nop
 80068aa:	e7fe      	b.n	80068aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068ac:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <vPortValidateInterruptPriority+0x74>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <vPortValidateInterruptPriority+0x78>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d90a      	bls.n	80068d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	603b      	str	r3, [r7, #0]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <vPortValidateInterruptPriority+0x60>
	}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr
 80068dc:	e000e3f0 	.word	0xe000e3f0
 80068e0:	20000ee8 	.word	0x20000ee8
 80068e4:	e000ed0c 	.word	0xe000ed0c
 80068e8:	20000eec 	.word	0x20000eec

080068ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08a      	sub	sp, #40	; 0x28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068f8:	f7fe fe2e 	bl	8005558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068fc:	4b58      	ldr	r3, [pc, #352]	; (8006a60 <pvPortMalloc+0x174>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006904:	f000 f910 	bl	8006b28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006908:	4b56      	ldr	r3, [pc, #344]	; (8006a64 <pvPortMalloc+0x178>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	f040 808e 	bne.w	8006a32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01d      	beq.n	8006958 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800691c:	2208      	movs	r2, #8
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4413      	add	r3, r2
 8006922:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2b00      	cmp	r3, #0
 800692c:	d014      	beq.n	8006958 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f023 0307 	bic.w	r3, r3, #7
 8006934:	3308      	adds	r3, #8
 8006936:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <pvPortMalloc+0x6c>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	617b      	str	r3, [r7, #20]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d069      	beq.n	8006a32 <pvPortMalloc+0x146>
 800695e:	4b42      	ldr	r3, [pc, #264]	; (8006a68 <pvPortMalloc+0x17c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d864      	bhi.n	8006a32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006968:	4b40      	ldr	r3, [pc, #256]	; (8006a6c <pvPortMalloc+0x180>)
 800696a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800696c:	4b3f      	ldr	r3, [pc, #252]	; (8006a6c <pvPortMalloc+0x180>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006972:	e004      	b.n	800697e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	429a      	cmp	r2, r3
 8006986:	d903      	bls.n	8006990 <pvPortMalloc+0xa4>
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f1      	bne.n	8006974 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006990:	4b33      	ldr	r3, [pc, #204]	; (8006a60 <pvPortMalloc+0x174>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006996:	429a      	cmp	r2, r3
 8006998:	d04b      	beq.n	8006a32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2208      	movs	r2, #8
 80069a0:	4413      	add	r3, r2
 80069a2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	2308      	movs	r3, #8
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d91f      	bls.n	80069fc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <pvPortMalloc+0xf8>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	613b      	str	r3, [r7, #16]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	1ad2      	subs	r2, r2, r3
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069f6:	69b8      	ldr	r0, [r7, #24]
 80069f8:	f000 f8f8 	bl	8006bec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <pvPortMalloc+0x17c>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <pvPortMalloc+0x17c>)
 8006a08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <pvPortMalloc+0x17c>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <pvPortMalloc+0x184>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d203      	bcs.n	8006a1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a16:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <pvPortMalloc+0x17c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <pvPortMalloc+0x184>)
 8006a1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <pvPortMalloc+0x178>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a32:	f7fe fd9f 	bl	8005574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <pvPortMalloc+0x16a>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60fb      	str	r3, [r7, #12]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <pvPortMalloc+0x168>
	return pvReturn;
 8006a56:	69fb      	ldr	r3, [r7, #28]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3728      	adds	r7, #40	; 0x28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20001af8 	.word	0x20001af8
 8006a64:	20001b04 	.word	0x20001b04
 8006a68:	20001afc 	.word	0x20001afc
 8006a6c:	20001af0 	.word	0x20001af0
 8006a70:	20001b00 	.word	0x20001b00

08006a74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d048      	beq.n	8006b18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a86:	2308      	movs	r3, #8
 8006a88:	425b      	negs	r3, r3
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	4b21      	ldr	r3, [pc, #132]	; (8006b20 <vPortFree+0xac>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <vPortFree+0x44>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	60fb      	str	r3, [r7, #12]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <vPortFree+0x62>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60bb      	str	r3, [r7, #8]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <vPortFree+0xac>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d019      	beq.n	8006b18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d115      	bne.n	8006b18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <vPortFree+0xac>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	43db      	mvns	r3, r3
 8006af6:	401a      	ands	r2, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006afc:	f7fe fd2c 	bl	8005558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <vPortFree+0xb0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4413      	add	r3, r2
 8006b0a:	4a06      	ldr	r2, [pc, #24]	; (8006b24 <vPortFree+0xb0>)
 8006b0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b0e:	6938      	ldr	r0, [r7, #16]
 8006b10:	f000 f86c 	bl	8006bec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b14:	f7fe fd2e 	bl	8005574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20001b04 	.word	0x20001b04
 8006b24:	20001afc 	.word	0x20001afc

08006b28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006b32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b34:	4b27      	ldr	r3, [pc, #156]	; (8006bd4 <prvHeapInit+0xac>)
 8006b36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00c      	beq.n	8006b5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3307      	adds	r3, #7
 8006b46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0307 	bic.w	r3, r3, #7
 8006b4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <prvHeapInit+0xac>)
 8006b58:	4413      	add	r3, r2
 8006b5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b60:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <prvHeapInit+0xb0>)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b66:	4b1c      	ldr	r3, [pc, #112]	; (8006bd8 <prvHeapInit+0xb0>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	4413      	add	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b74:	2208      	movs	r2, #8
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0307 	bic.w	r3, r3, #7
 8006b82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4a15      	ldr	r2, [pc, #84]	; (8006bdc <prvHeapInit+0xb4>)
 8006b88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b8a:	4b14      	ldr	r3, [pc, #80]	; (8006bdc <prvHeapInit+0xb4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b92:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <prvHeapInit+0xb4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <prvHeapInit+0xb4>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	4a0a      	ldr	r2, [pc, #40]	; (8006be0 <prvHeapInit+0xb8>)
 8006bb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <prvHeapInit+0xbc>)
 8006bbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bc0:	4b09      	ldr	r3, [pc, #36]	; (8006be8 <prvHeapInit+0xc0>)
 8006bc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bc6:	601a      	str	r2, [r3, #0]
}
 8006bc8:	bf00      	nop
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	20000ef0 	.word	0x20000ef0
 8006bd8:	20001af0 	.word	0x20001af0
 8006bdc:	20001af8 	.word	0x20001af8
 8006be0:	20001b00 	.word	0x20001b00
 8006be4:	20001afc 	.word	0x20001afc
 8006be8:	20001b04 	.word	0x20001b04

08006bec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bf4:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <prvInsertBlockIntoFreeList+0xa8>)
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e002      	b.n	8006c00 <prvInsertBlockIntoFreeList+0x14>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d8f7      	bhi.n	8006bfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	4413      	add	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d108      	bne.n	8006c2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	441a      	add	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	441a      	add	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d118      	bne.n	8006c74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <prvInsertBlockIntoFreeList+0xac>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d00d      	beq.n	8006c6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	441a      	add	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	e008      	b.n	8006c7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <prvInsertBlockIntoFreeList+0xac>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e003      	b.n	8006c7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d002      	beq.n	8006c8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr
 8006c94:	20001af0 	.word	0x20001af0
 8006c98:	20001af8 	.word	0x20001af8

08006c9c <__errno>:
 8006c9c:	4b01      	ldr	r3, [pc, #4]	; (8006ca4 <__errno+0x8>)
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20000010 	.word	0x20000010

08006ca8 <__libc_init_array>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	2600      	movs	r6, #0
 8006cac:	4d0c      	ldr	r5, [pc, #48]	; (8006ce0 <__libc_init_array+0x38>)
 8006cae:	4c0d      	ldr	r4, [pc, #52]	; (8006ce4 <__libc_init_array+0x3c>)
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	42a6      	cmp	r6, r4
 8006cb6:	d109      	bne.n	8006ccc <__libc_init_array+0x24>
 8006cb8:	f002 fd86 	bl	80097c8 <_init>
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	4d0a      	ldr	r5, [pc, #40]	; (8006ce8 <__libc_init_array+0x40>)
 8006cc0:	4c0a      	ldr	r4, [pc, #40]	; (8006cec <__libc_init_array+0x44>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	d105      	bne.n	8006cd6 <__libc_init_array+0x2e>
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd0:	4798      	blx	r3
 8006cd2:	3601      	adds	r6, #1
 8006cd4:	e7ee      	b.n	8006cb4 <__libc_init_array+0xc>
 8006cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cda:	4798      	blx	r3
 8006cdc:	3601      	adds	r6, #1
 8006cde:	e7f2      	b.n	8006cc6 <__libc_init_array+0x1e>
 8006ce0:	08009cb4 	.word	0x08009cb4
 8006ce4:	08009cb4 	.word	0x08009cb4
 8006ce8:	08009cb4 	.word	0x08009cb4
 8006cec:	08009cb8 	.word	0x08009cb8

08006cf0 <memcpy>:
 8006cf0:	440a      	add	r2, r1
 8006cf2:	4291      	cmp	r1, r2
 8006cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cf8:	d100      	bne.n	8006cfc <memcpy+0xc>
 8006cfa:	4770      	bx	lr
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d02:	4291      	cmp	r1, r2
 8006d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d08:	d1f9      	bne.n	8006cfe <memcpy+0xe>
 8006d0a:	bd10      	pop	{r4, pc}

08006d0c <memset>:
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	4402      	add	r2, r0
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d100      	bne.n	8006d16 <memset+0xa>
 8006d14:	4770      	bx	lr
 8006d16:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1a:	e7f9      	b.n	8006d10 <memset+0x4>

08006d1c <__cvt>:
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d22:	461f      	mov	r7, r3
 8006d24:	bfbb      	ittet	lt
 8006d26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006d2a:	461f      	movlt	r7, r3
 8006d2c:	2300      	movge	r3, #0
 8006d2e:	232d      	movlt	r3, #45	; 0x2d
 8006d30:	b088      	sub	sp, #32
 8006d32:	4614      	mov	r4, r2
 8006d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006d38:	7013      	strb	r3, [r2, #0]
 8006d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006d40:	f023 0820 	bic.w	r8, r3, #32
 8006d44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d48:	d005      	beq.n	8006d56 <__cvt+0x3a>
 8006d4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d4e:	d100      	bne.n	8006d52 <__cvt+0x36>
 8006d50:	3501      	adds	r5, #1
 8006d52:	2302      	movs	r3, #2
 8006d54:	e000      	b.n	8006d58 <__cvt+0x3c>
 8006d56:	2303      	movs	r3, #3
 8006d58:	aa07      	add	r2, sp, #28
 8006d5a:	9204      	str	r2, [sp, #16]
 8006d5c:	aa06      	add	r2, sp, #24
 8006d5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006d62:	e9cd 3500 	strd	r3, r5, [sp]
 8006d66:	4622      	mov	r2, r4
 8006d68:	463b      	mov	r3, r7
 8006d6a:	f000 fe15 	bl	8007998 <_dtoa_r>
 8006d6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d72:	4606      	mov	r6, r0
 8006d74:	d102      	bne.n	8006d7c <__cvt+0x60>
 8006d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d78:	07db      	lsls	r3, r3, #31
 8006d7a:	d522      	bpl.n	8006dc2 <__cvt+0xa6>
 8006d7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d80:	eb06 0905 	add.w	r9, r6, r5
 8006d84:	d110      	bne.n	8006da8 <__cvt+0x8c>
 8006d86:	7833      	ldrb	r3, [r6, #0]
 8006d88:	2b30      	cmp	r3, #48	; 0x30
 8006d8a:	d10a      	bne.n	8006da2 <__cvt+0x86>
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4620      	mov	r0, r4
 8006d92:	4639      	mov	r1, r7
 8006d94:	f7f9 fe78 	bl	8000a88 <__aeabi_dcmpeq>
 8006d98:	b918      	cbnz	r0, 8006da2 <__cvt+0x86>
 8006d9a:	f1c5 0501 	rsb	r5, r5, #1
 8006d9e:	f8ca 5000 	str.w	r5, [sl]
 8006da2:	f8da 3000 	ldr.w	r3, [sl]
 8006da6:	4499      	add	r9, r3
 8006da8:	2200      	movs	r2, #0
 8006daa:	2300      	movs	r3, #0
 8006dac:	4620      	mov	r0, r4
 8006dae:	4639      	mov	r1, r7
 8006db0:	f7f9 fe6a 	bl	8000a88 <__aeabi_dcmpeq>
 8006db4:	b108      	cbz	r0, 8006dba <__cvt+0x9e>
 8006db6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006dba:	2230      	movs	r2, #48	; 0x30
 8006dbc:	9b07      	ldr	r3, [sp, #28]
 8006dbe:	454b      	cmp	r3, r9
 8006dc0:	d307      	bcc.n	8006dd2 <__cvt+0xb6>
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006dc8:	1b9b      	subs	r3, r3, r6
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	b008      	add	sp, #32
 8006dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd2:	1c59      	adds	r1, r3, #1
 8006dd4:	9107      	str	r1, [sp, #28]
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	e7f0      	b.n	8006dbc <__cvt+0xa0>

08006dda <__exponent>:
 8006dda:	4603      	mov	r3, r0
 8006ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dde:	2900      	cmp	r1, #0
 8006de0:	f803 2b02 	strb.w	r2, [r3], #2
 8006de4:	bfb6      	itet	lt
 8006de6:	222d      	movlt	r2, #45	; 0x2d
 8006de8:	222b      	movge	r2, #43	; 0x2b
 8006dea:	4249      	neglt	r1, r1
 8006dec:	2909      	cmp	r1, #9
 8006dee:	7042      	strb	r2, [r0, #1]
 8006df0:	dd2b      	ble.n	8006e4a <__exponent+0x70>
 8006df2:	f10d 0407 	add.w	r4, sp, #7
 8006df6:	46a4      	mov	ip, r4
 8006df8:	270a      	movs	r7, #10
 8006dfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8006dfe:	460a      	mov	r2, r1
 8006e00:	46a6      	mov	lr, r4
 8006e02:	fb07 1516 	mls	r5, r7, r6, r1
 8006e06:	2a63      	cmp	r2, #99	; 0x63
 8006e08:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e16:	dcf0      	bgt.n	8006dfa <__exponent+0x20>
 8006e18:	3130      	adds	r1, #48	; 0x30
 8006e1a:	f1ae 0502 	sub.w	r5, lr, #2
 8006e1e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e22:	4629      	mov	r1, r5
 8006e24:	1c44      	adds	r4, r0, #1
 8006e26:	4561      	cmp	r1, ip
 8006e28:	d30a      	bcc.n	8006e40 <__exponent+0x66>
 8006e2a:	f10d 0209 	add.w	r2, sp, #9
 8006e2e:	eba2 020e 	sub.w	r2, r2, lr
 8006e32:	4565      	cmp	r5, ip
 8006e34:	bf88      	it	hi
 8006e36:	2200      	movhi	r2, #0
 8006e38:	4413      	add	r3, r2
 8006e3a:	1a18      	subs	r0, r3, r0
 8006e3c:	b003      	add	sp, #12
 8006e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e44:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e48:	e7ed      	b.n	8006e26 <__exponent+0x4c>
 8006e4a:	2330      	movs	r3, #48	; 0x30
 8006e4c:	3130      	adds	r1, #48	; 0x30
 8006e4e:	7083      	strb	r3, [r0, #2]
 8006e50:	70c1      	strb	r1, [r0, #3]
 8006e52:	1d03      	adds	r3, r0, #4
 8006e54:	e7f1      	b.n	8006e3a <__exponent+0x60>
	...

08006e58 <_printf_float>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	b091      	sub	sp, #68	; 0x44
 8006e5e:	460c      	mov	r4, r1
 8006e60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006e64:	4616      	mov	r6, r2
 8006e66:	461f      	mov	r7, r3
 8006e68:	4605      	mov	r5, r0
 8006e6a:	f001 fd3b 	bl	80088e4 <_localeconv_r>
 8006e6e:	6803      	ldr	r3, [r0, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	9309      	str	r3, [sp, #36]	; 0x24
 8006e74:	f7f9 f9dc 	bl	8000230 <strlen>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8006e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e80:	900a      	str	r0, [sp, #40]	; 0x28
 8006e82:	3307      	adds	r3, #7
 8006e84:	f023 0307 	bic.w	r3, r3, #7
 8006e88:	f103 0208 	add.w	r2, r3, #8
 8006e8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006e90:	f8d4 b000 	ldr.w	fp, [r4]
 8006e94:	f8c8 2000 	str.w	r2, [r8]
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ea0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006ea4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006eae:	4640      	mov	r0, r8
 8006eb0:	4b9c      	ldr	r3, [pc, #624]	; (8007124 <_printf_float+0x2cc>)
 8006eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eb4:	f7f9 fe1a 	bl	8000aec <__aeabi_dcmpun>
 8006eb8:	bb70      	cbnz	r0, 8006f18 <_printf_float+0xc0>
 8006eba:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4b98      	ldr	r3, [pc, #608]	; (8007124 <_printf_float+0x2cc>)
 8006ec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ec4:	f7f9 fdf4 	bl	8000ab0 <__aeabi_dcmple>
 8006ec8:	bb30      	cbnz	r0, 8006f18 <_printf_float+0xc0>
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4651      	mov	r1, sl
 8006ed2:	f7f9 fde3 	bl	8000a9c <__aeabi_dcmplt>
 8006ed6:	b110      	cbz	r0, 8006ede <_printf_float+0x86>
 8006ed8:	232d      	movs	r3, #45	; 0x2d
 8006eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ede:	4b92      	ldr	r3, [pc, #584]	; (8007128 <_printf_float+0x2d0>)
 8006ee0:	4892      	ldr	r0, [pc, #584]	; (800712c <_printf_float+0x2d4>)
 8006ee2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006ee6:	bf94      	ite	ls
 8006ee8:	4698      	movls	r8, r3
 8006eea:	4680      	movhi	r8, r0
 8006eec:	2303      	movs	r3, #3
 8006eee:	f04f 0a00 	mov.w	sl, #0
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	f02b 0304 	bic.w	r3, fp, #4
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	4633      	mov	r3, r6
 8006efc:	4621      	mov	r1, r4
 8006efe:	4628      	mov	r0, r5
 8006f00:	9700      	str	r7, [sp, #0]
 8006f02:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f04:	f000 f9d4 	bl	80072b0 <_printf_common>
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f040 8090 	bne.w	800702e <_printf_float+0x1d6>
 8006f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f12:	b011      	add	sp, #68	; 0x44
 8006f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f18:	4642      	mov	r2, r8
 8006f1a:	4653      	mov	r3, sl
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4651      	mov	r1, sl
 8006f20:	f7f9 fde4 	bl	8000aec <__aeabi_dcmpun>
 8006f24:	b148      	cbz	r0, 8006f3a <_printf_float+0xe2>
 8006f26:	f1ba 0f00 	cmp.w	sl, #0
 8006f2a:	bfb8      	it	lt
 8006f2c:	232d      	movlt	r3, #45	; 0x2d
 8006f2e:	4880      	ldr	r0, [pc, #512]	; (8007130 <_printf_float+0x2d8>)
 8006f30:	bfb8      	it	lt
 8006f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f36:	4b7f      	ldr	r3, [pc, #508]	; (8007134 <_printf_float+0x2dc>)
 8006f38:	e7d3      	b.n	8006ee2 <_printf_float+0x8a>
 8006f3a:	6863      	ldr	r3, [r4, #4]
 8006f3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	d142      	bne.n	8006fca <_printf_float+0x172>
 8006f44:	2306      	movs	r3, #6
 8006f46:	6063      	str	r3, [r4, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	9206      	str	r2, [sp, #24]
 8006f4c:	aa0e      	add	r2, sp, #56	; 0x38
 8006f4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006f52:	aa0d      	add	r2, sp, #52	; 0x34
 8006f54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006f58:	9203      	str	r2, [sp, #12]
 8006f5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006f5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006f62:	6023      	str	r3, [r4, #0]
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	4642      	mov	r2, r8
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	4653      	mov	r3, sl
 8006f6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006f70:	f7ff fed4 	bl	8006d1c <__cvt>
 8006f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f76:	4680      	mov	r8, r0
 8006f78:	2947      	cmp	r1, #71	; 0x47
 8006f7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f7c:	d108      	bne.n	8006f90 <_printf_float+0x138>
 8006f7e:	1cc8      	adds	r0, r1, #3
 8006f80:	db02      	blt.n	8006f88 <_printf_float+0x130>
 8006f82:	6863      	ldr	r3, [r4, #4]
 8006f84:	4299      	cmp	r1, r3
 8006f86:	dd40      	ble.n	800700a <_printf_float+0x1b2>
 8006f88:	f1a9 0902 	sub.w	r9, r9, #2
 8006f8c:	fa5f f989 	uxtb.w	r9, r9
 8006f90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f94:	d81f      	bhi.n	8006fd6 <_printf_float+0x17e>
 8006f96:	464a      	mov	r2, r9
 8006f98:	3901      	subs	r1, #1
 8006f9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f9e:	910d      	str	r1, [sp, #52]	; 0x34
 8006fa0:	f7ff ff1b 	bl	8006dda <__exponent>
 8006fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fa6:	4682      	mov	sl, r0
 8006fa8:	1813      	adds	r3, r2, r0
 8006faa:	2a01      	cmp	r2, #1
 8006fac:	6123      	str	r3, [r4, #16]
 8006fae:	dc02      	bgt.n	8006fb6 <_printf_float+0x15e>
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	07d2      	lsls	r2, r2, #31
 8006fb4:	d501      	bpl.n	8006fba <_printf_float+0x162>
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d09b      	beq.n	8006efa <_printf_float+0xa2>
 8006fc2:	232d      	movs	r3, #45	; 0x2d
 8006fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc8:	e797      	b.n	8006efa <_printf_float+0xa2>
 8006fca:	2947      	cmp	r1, #71	; 0x47
 8006fcc:	d1bc      	bne.n	8006f48 <_printf_float+0xf0>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1ba      	bne.n	8006f48 <_printf_float+0xf0>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e7b7      	b.n	8006f46 <_printf_float+0xee>
 8006fd6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006fda:	d118      	bne.n	800700e <_printf_float+0x1b6>
 8006fdc:	2900      	cmp	r1, #0
 8006fde:	6863      	ldr	r3, [r4, #4]
 8006fe0:	dd0b      	ble.n	8006ffa <_printf_float+0x1a2>
 8006fe2:	6121      	str	r1, [r4, #16]
 8006fe4:	b913      	cbnz	r3, 8006fec <_printf_float+0x194>
 8006fe6:	6822      	ldr	r2, [r4, #0]
 8006fe8:	07d0      	lsls	r0, r2, #31
 8006fea:	d502      	bpl.n	8006ff2 <_printf_float+0x19a>
 8006fec:	3301      	adds	r3, #1
 8006fee:	440b      	add	r3, r1
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	f04f 0a00 	mov.w	sl, #0
 8006ff6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ff8:	e7df      	b.n	8006fba <_printf_float+0x162>
 8006ffa:	b913      	cbnz	r3, 8007002 <_printf_float+0x1aa>
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	07d2      	lsls	r2, r2, #31
 8007000:	d501      	bpl.n	8007006 <_printf_float+0x1ae>
 8007002:	3302      	adds	r3, #2
 8007004:	e7f4      	b.n	8006ff0 <_printf_float+0x198>
 8007006:	2301      	movs	r3, #1
 8007008:	e7f2      	b.n	8006ff0 <_printf_float+0x198>
 800700a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800700e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007010:	4299      	cmp	r1, r3
 8007012:	db05      	blt.n	8007020 <_printf_float+0x1c8>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	6121      	str	r1, [r4, #16]
 8007018:	07d8      	lsls	r0, r3, #31
 800701a:	d5ea      	bpl.n	8006ff2 <_printf_float+0x19a>
 800701c:	1c4b      	adds	r3, r1, #1
 800701e:	e7e7      	b.n	8006ff0 <_printf_float+0x198>
 8007020:	2900      	cmp	r1, #0
 8007022:	bfcc      	ite	gt
 8007024:	2201      	movgt	r2, #1
 8007026:	f1c1 0202 	rsble	r2, r1, #2
 800702a:	4413      	add	r3, r2
 800702c:	e7e0      	b.n	8006ff0 <_printf_float+0x198>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	055a      	lsls	r2, r3, #21
 8007032:	d407      	bmi.n	8007044 <_printf_float+0x1ec>
 8007034:	6923      	ldr	r3, [r4, #16]
 8007036:	4642      	mov	r2, r8
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	d12b      	bne.n	800709a <_printf_float+0x242>
 8007042:	e764      	b.n	8006f0e <_printf_float+0xb6>
 8007044:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007048:	f240 80dd 	bls.w	8007206 <_printf_float+0x3ae>
 800704c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007050:	2200      	movs	r2, #0
 8007052:	2300      	movs	r3, #0
 8007054:	f7f9 fd18 	bl	8000a88 <__aeabi_dcmpeq>
 8007058:	2800      	cmp	r0, #0
 800705a:	d033      	beq.n	80070c4 <_printf_float+0x26c>
 800705c:	2301      	movs	r3, #1
 800705e:	4631      	mov	r1, r6
 8007060:	4628      	mov	r0, r5
 8007062:	4a35      	ldr	r2, [pc, #212]	; (8007138 <_printf_float+0x2e0>)
 8007064:	47b8      	blx	r7
 8007066:	3001      	adds	r0, #1
 8007068:	f43f af51 	beq.w	8006f0e <_printf_float+0xb6>
 800706c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007070:	429a      	cmp	r2, r3
 8007072:	db02      	blt.n	800707a <_printf_float+0x222>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	07d8      	lsls	r0, r3, #31
 8007078:	d50f      	bpl.n	800709a <_printf_float+0x242>
 800707a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	f43f af42 	beq.w	8006f0e <_printf_float+0xb6>
 800708a:	f04f 0800 	mov.w	r8, #0
 800708e:	f104 091a 	add.w	r9, r4, #26
 8007092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007094:	3b01      	subs	r3, #1
 8007096:	4543      	cmp	r3, r8
 8007098:	dc09      	bgt.n	80070ae <_printf_float+0x256>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	079b      	lsls	r3, r3, #30
 800709e:	f100 8102 	bmi.w	80072a6 <_printf_float+0x44e>
 80070a2:	68e0      	ldr	r0, [r4, #12]
 80070a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070a6:	4298      	cmp	r0, r3
 80070a8:	bfb8      	it	lt
 80070aa:	4618      	movlt	r0, r3
 80070ac:	e731      	b.n	8006f12 <_printf_float+0xba>
 80070ae:	2301      	movs	r3, #1
 80070b0:	464a      	mov	r2, r9
 80070b2:	4631      	mov	r1, r6
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	f43f af28 	beq.w	8006f0e <_printf_float+0xb6>
 80070be:	f108 0801 	add.w	r8, r8, #1
 80070c2:	e7e6      	b.n	8007092 <_printf_float+0x23a>
 80070c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dc38      	bgt.n	800713c <_printf_float+0x2e4>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4631      	mov	r1, r6
 80070ce:	4628      	mov	r0, r5
 80070d0:	4a19      	ldr	r2, [pc, #100]	; (8007138 <_printf_float+0x2e0>)
 80070d2:	47b8      	blx	r7
 80070d4:	3001      	adds	r0, #1
 80070d6:	f43f af1a 	beq.w	8006f0e <_printf_float+0xb6>
 80070da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80070de:	4313      	orrs	r3, r2
 80070e0:	d102      	bne.n	80070e8 <_printf_float+0x290>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	07d9      	lsls	r1, r3, #31
 80070e6:	d5d8      	bpl.n	800709a <_printf_float+0x242>
 80070e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f af0b 	beq.w	8006f0e <_printf_float+0xb6>
 80070f8:	f04f 0900 	mov.w	r9, #0
 80070fc:	f104 0a1a 	add.w	sl, r4, #26
 8007100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007102:	425b      	negs	r3, r3
 8007104:	454b      	cmp	r3, r9
 8007106:	dc01      	bgt.n	800710c <_printf_float+0x2b4>
 8007108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800710a:	e794      	b.n	8007036 <_printf_float+0x1de>
 800710c:	2301      	movs	r3, #1
 800710e:	4652      	mov	r2, sl
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f aef9 	beq.w	8006f0e <_printf_float+0xb6>
 800711c:	f109 0901 	add.w	r9, r9, #1
 8007120:	e7ee      	b.n	8007100 <_printf_float+0x2a8>
 8007122:	bf00      	nop
 8007124:	7fefffff 	.word	0x7fefffff
 8007128:	080098d4 	.word	0x080098d4
 800712c:	080098d8 	.word	0x080098d8
 8007130:	080098e0 	.word	0x080098e0
 8007134:	080098dc 	.word	0x080098dc
 8007138:	080098e4 	.word	0x080098e4
 800713c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800713e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007140:	429a      	cmp	r2, r3
 8007142:	bfa8      	it	ge
 8007144:	461a      	movge	r2, r3
 8007146:	2a00      	cmp	r2, #0
 8007148:	4691      	mov	r9, r2
 800714a:	dc37      	bgt.n	80071bc <_printf_float+0x364>
 800714c:	f04f 0b00 	mov.w	fp, #0
 8007150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007154:	f104 021a 	add.w	r2, r4, #26
 8007158:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800715c:	ebaa 0309 	sub.w	r3, sl, r9
 8007160:	455b      	cmp	r3, fp
 8007162:	dc33      	bgt.n	80071cc <_printf_float+0x374>
 8007164:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007168:	429a      	cmp	r2, r3
 800716a:	db3b      	blt.n	80071e4 <_printf_float+0x38c>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	07da      	lsls	r2, r3, #31
 8007170:	d438      	bmi.n	80071e4 <_printf_float+0x38c>
 8007172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007174:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007176:	eba2 030a 	sub.w	r3, r2, sl
 800717a:	eba2 0901 	sub.w	r9, r2, r1
 800717e:	4599      	cmp	r9, r3
 8007180:	bfa8      	it	ge
 8007182:	4699      	movge	r9, r3
 8007184:	f1b9 0f00 	cmp.w	r9, #0
 8007188:	dc34      	bgt.n	80071f4 <_printf_float+0x39c>
 800718a:	f04f 0800 	mov.w	r8, #0
 800718e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007192:	f104 0a1a 	add.w	sl, r4, #26
 8007196:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	eba3 0309 	sub.w	r3, r3, r9
 80071a0:	4543      	cmp	r3, r8
 80071a2:	f77f af7a 	ble.w	800709a <_printf_float+0x242>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4652      	mov	r2, sl
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	f43f aeac 	beq.w	8006f0e <_printf_float+0xb6>
 80071b6:	f108 0801 	add.w	r8, r8, #1
 80071ba:	e7ec      	b.n	8007196 <_printf_float+0x33e>
 80071bc:	4613      	mov	r3, r2
 80071be:	4631      	mov	r1, r6
 80071c0:	4642      	mov	r2, r8
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	d1c0      	bne.n	800714c <_printf_float+0x2f4>
 80071ca:	e6a0      	b.n	8006f0e <_printf_float+0xb6>
 80071cc:	2301      	movs	r3, #1
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80071d4:	47b8      	blx	r7
 80071d6:	3001      	adds	r0, #1
 80071d8:	f43f ae99 	beq.w	8006f0e <_printf_float+0xb6>
 80071dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071de:	f10b 0b01 	add.w	fp, fp, #1
 80071e2:	e7b9      	b.n	8007158 <_printf_float+0x300>
 80071e4:	4631      	mov	r1, r6
 80071e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	d1bf      	bne.n	8007172 <_printf_float+0x31a>
 80071f2:	e68c      	b.n	8006f0e <_printf_float+0xb6>
 80071f4:	464b      	mov	r3, r9
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	eb08 020a 	add.w	r2, r8, sl
 80071fe:	47b8      	blx	r7
 8007200:	3001      	adds	r0, #1
 8007202:	d1c2      	bne.n	800718a <_printf_float+0x332>
 8007204:	e683      	b.n	8006f0e <_printf_float+0xb6>
 8007206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007208:	2a01      	cmp	r2, #1
 800720a:	dc01      	bgt.n	8007210 <_printf_float+0x3b8>
 800720c:	07db      	lsls	r3, r3, #31
 800720e:	d537      	bpl.n	8007280 <_printf_float+0x428>
 8007210:	2301      	movs	r3, #1
 8007212:	4642      	mov	r2, r8
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	f43f ae77 	beq.w	8006f0e <_printf_float+0xb6>
 8007220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007224:	4631      	mov	r1, r6
 8007226:	4628      	mov	r0, r5
 8007228:	47b8      	blx	r7
 800722a:	3001      	adds	r0, #1
 800722c:	f43f ae6f 	beq.w	8006f0e <_printf_float+0xb6>
 8007230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007234:	2200      	movs	r2, #0
 8007236:	2300      	movs	r3, #0
 8007238:	f7f9 fc26 	bl	8000a88 <__aeabi_dcmpeq>
 800723c:	b9d8      	cbnz	r0, 8007276 <_printf_float+0x41e>
 800723e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007240:	f108 0201 	add.w	r2, r8, #1
 8007244:	3b01      	subs	r3, #1
 8007246:	4631      	mov	r1, r6
 8007248:	4628      	mov	r0, r5
 800724a:	47b8      	blx	r7
 800724c:	3001      	adds	r0, #1
 800724e:	d10e      	bne.n	800726e <_printf_float+0x416>
 8007250:	e65d      	b.n	8006f0e <_printf_float+0xb6>
 8007252:	2301      	movs	r3, #1
 8007254:	464a      	mov	r2, r9
 8007256:	4631      	mov	r1, r6
 8007258:	4628      	mov	r0, r5
 800725a:	47b8      	blx	r7
 800725c:	3001      	adds	r0, #1
 800725e:	f43f ae56 	beq.w	8006f0e <_printf_float+0xb6>
 8007262:	f108 0801 	add.w	r8, r8, #1
 8007266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007268:	3b01      	subs	r3, #1
 800726a:	4543      	cmp	r3, r8
 800726c:	dcf1      	bgt.n	8007252 <_printf_float+0x3fa>
 800726e:	4653      	mov	r3, sl
 8007270:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007274:	e6e0      	b.n	8007038 <_printf_float+0x1e0>
 8007276:	f04f 0800 	mov.w	r8, #0
 800727a:	f104 091a 	add.w	r9, r4, #26
 800727e:	e7f2      	b.n	8007266 <_printf_float+0x40e>
 8007280:	2301      	movs	r3, #1
 8007282:	4642      	mov	r2, r8
 8007284:	e7df      	b.n	8007246 <_printf_float+0x3ee>
 8007286:	2301      	movs	r3, #1
 8007288:	464a      	mov	r2, r9
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	f43f ae3c 	beq.w	8006f0e <_printf_float+0xb6>
 8007296:	f108 0801 	add.w	r8, r8, #1
 800729a:	68e3      	ldr	r3, [r4, #12]
 800729c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800729e:	1a5b      	subs	r3, r3, r1
 80072a0:	4543      	cmp	r3, r8
 80072a2:	dcf0      	bgt.n	8007286 <_printf_float+0x42e>
 80072a4:	e6fd      	b.n	80070a2 <_printf_float+0x24a>
 80072a6:	f04f 0800 	mov.w	r8, #0
 80072aa:	f104 0919 	add.w	r9, r4, #25
 80072ae:	e7f4      	b.n	800729a <_printf_float+0x442>

080072b0 <_printf_common>:
 80072b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	4616      	mov	r6, r2
 80072b6:	4699      	mov	r9, r3
 80072b8:	688a      	ldr	r2, [r1, #8]
 80072ba:	690b      	ldr	r3, [r1, #16]
 80072bc:	4607      	mov	r7, r0
 80072be:	4293      	cmp	r3, r2
 80072c0:	bfb8      	it	lt
 80072c2:	4613      	movlt	r3, r2
 80072c4:	6033      	str	r3, [r6, #0]
 80072c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072ca:	460c      	mov	r4, r1
 80072cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072d0:	b10a      	cbz	r2, 80072d6 <_printf_common+0x26>
 80072d2:	3301      	adds	r3, #1
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	0699      	lsls	r1, r3, #26
 80072da:	bf42      	ittt	mi
 80072dc:	6833      	ldrmi	r3, [r6, #0]
 80072de:	3302      	addmi	r3, #2
 80072e0:	6033      	strmi	r3, [r6, #0]
 80072e2:	6825      	ldr	r5, [r4, #0]
 80072e4:	f015 0506 	ands.w	r5, r5, #6
 80072e8:	d106      	bne.n	80072f8 <_printf_common+0x48>
 80072ea:	f104 0a19 	add.w	sl, r4, #25
 80072ee:	68e3      	ldr	r3, [r4, #12]
 80072f0:	6832      	ldr	r2, [r6, #0]
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	42ab      	cmp	r3, r5
 80072f6:	dc28      	bgt.n	800734a <_printf_common+0x9a>
 80072f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072fc:	1e13      	subs	r3, r2, #0
 80072fe:	6822      	ldr	r2, [r4, #0]
 8007300:	bf18      	it	ne
 8007302:	2301      	movne	r3, #1
 8007304:	0692      	lsls	r2, r2, #26
 8007306:	d42d      	bmi.n	8007364 <_printf_common+0xb4>
 8007308:	4649      	mov	r1, r9
 800730a:	4638      	mov	r0, r7
 800730c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007310:	47c0      	blx	r8
 8007312:	3001      	adds	r0, #1
 8007314:	d020      	beq.n	8007358 <_printf_common+0xa8>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	68e5      	ldr	r5, [r4, #12]
 800731a:	f003 0306 	and.w	r3, r3, #6
 800731e:	2b04      	cmp	r3, #4
 8007320:	bf18      	it	ne
 8007322:	2500      	movne	r5, #0
 8007324:	6832      	ldr	r2, [r6, #0]
 8007326:	f04f 0600 	mov.w	r6, #0
 800732a:	68a3      	ldr	r3, [r4, #8]
 800732c:	bf08      	it	eq
 800732e:	1aad      	subeq	r5, r5, r2
 8007330:	6922      	ldr	r2, [r4, #16]
 8007332:	bf08      	it	eq
 8007334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007338:	4293      	cmp	r3, r2
 800733a:	bfc4      	itt	gt
 800733c:	1a9b      	subgt	r3, r3, r2
 800733e:	18ed      	addgt	r5, r5, r3
 8007340:	341a      	adds	r4, #26
 8007342:	42b5      	cmp	r5, r6
 8007344:	d11a      	bne.n	800737c <_printf_common+0xcc>
 8007346:	2000      	movs	r0, #0
 8007348:	e008      	b.n	800735c <_printf_common+0xac>
 800734a:	2301      	movs	r3, #1
 800734c:	4652      	mov	r2, sl
 800734e:	4649      	mov	r1, r9
 8007350:	4638      	mov	r0, r7
 8007352:	47c0      	blx	r8
 8007354:	3001      	adds	r0, #1
 8007356:	d103      	bne.n	8007360 <_printf_common+0xb0>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007360:	3501      	adds	r5, #1
 8007362:	e7c4      	b.n	80072ee <_printf_common+0x3e>
 8007364:	2030      	movs	r0, #48	; 0x30
 8007366:	18e1      	adds	r1, r4, r3
 8007368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007372:	4422      	add	r2, r4
 8007374:	3302      	adds	r3, #2
 8007376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800737a:	e7c5      	b.n	8007308 <_printf_common+0x58>
 800737c:	2301      	movs	r3, #1
 800737e:	4622      	mov	r2, r4
 8007380:	4649      	mov	r1, r9
 8007382:	4638      	mov	r0, r7
 8007384:	47c0      	blx	r8
 8007386:	3001      	adds	r0, #1
 8007388:	d0e6      	beq.n	8007358 <_printf_common+0xa8>
 800738a:	3601      	adds	r6, #1
 800738c:	e7d9      	b.n	8007342 <_printf_common+0x92>
	...

08007390 <_printf_i>:
 8007390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007394:	460c      	mov	r4, r1
 8007396:	7e27      	ldrb	r7, [r4, #24]
 8007398:	4691      	mov	r9, r2
 800739a:	2f78      	cmp	r7, #120	; 0x78
 800739c:	4680      	mov	r8, r0
 800739e:	469a      	mov	sl, r3
 80073a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a6:	d807      	bhi.n	80073b8 <_printf_i+0x28>
 80073a8:	2f62      	cmp	r7, #98	; 0x62
 80073aa:	d80a      	bhi.n	80073c2 <_printf_i+0x32>
 80073ac:	2f00      	cmp	r7, #0
 80073ae:	f000 80d9 	beq.w	8007564 <_printf_i+0x1d4>
 80073b2:	2f58      	cmp	r7, #88	; 0x58
 80073b4:	f000 80a4 	beq.w	8007500 <_printf_i+0x170>
 80073b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073c0:	e03a      	b.n	8007438 <_printf_i+0xa8>
 80073c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073c6:	2b15      	cmp	r3, #21
 80073c8:	d8f6      	bhi.n	80073b8 <_printf_i+0x28>
 80073ca:	a001      	add	r0, pc, #4	; (adr r0, 80073d0 <_printf_i+0x40>)
 80073cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80073d0:	08007429 	.word	0x08007429
 80073d4:	0800743d 	.word	0x0800743d
 80073d8:	080073b9 	.word	0x080073b9
 80073dc:	080073b9 	.word	0x080073b9
 80073e0:	080073b9 	.word	0x080073b9
 80073e4:	080073b9 	.word	0x080073b9
 80073e8:	0800743d 	.word	0x0800743d
 80073ec:	080073b9 	.word	0x080073b9
 80073f0:	080073b9 	.word	0x080073b9
 80073f4:	080073b9 	.word	0x080073b9
 80073f8:	080073b9 	.word	0x080073b9
 80073fc:	0800754b 	.word	0x0800754b
 8007400:	0800746d 	.word	0x0800746d
 8007404:	0800752d 	.word	0x0800752d
 8007408:	080073b9 	.word	0x080073b9
 800740c:	080073b9 	.word	0x080073b9
 8007410:	0800756d 	.word	0x0800756d
 8007414:	080073b9 	.word	0x080073b9
 8007418:	0800746d 	.word	0x0800746d
 800741c:	080073b9 	.word	0x080073b9
 8007420:	080073b9 	.word	0x080073b9
 8007424:	08007535 	.word	0x08007535
 8007428:	680b      	ldr	r3, [r1, #0]
 800742a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800742e:	1d1a      	adds	r2, r3, #4
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	600a      	str	r2, [r1, #0]
 8007434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007438:	2301      	movs	r3, #1
 800743a:	e0a4      	b.n	8007586 <_printf_i+0x1f6>
 800743c:	6825      	ldr	r5, [r4, #0]
 800743e:	6808      	ldr	r0, [r1, #0]
 8007440:	062e      	lsls	r6, r5, #24
 8007442:	f100 0304 	add.w	r3, r0, #4
 8007446:	d50a      	bpl.n	800745e <_printf_i+0xce>
 8007448:	6805      	ldr	r5, [r0, #0]
 800744a:	600b      	str	r3, [r1, #0]
 800744c:	2d00      	cmp	r5, #0
 800744e:	da03      	bge.n	8007458 <_printf_i+0xc8>
 8007450:	232d      	movs	r3, #45	; 0x2d
 8007452:	426d      	negs	r5, r5
 8007454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007458:	230a      	movs	r3, #10
 800745a:	485e      	ldr	r0, [pc, #376]	; (80075d4 <_printf_i+0x244>)
 800745c:	e019      	b.n	8007492 <_printf_i+0x102>
 800745e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007462:	6805      	ldr	r5, [r0, #0]
 8007464:	600b      	str	r3, [r1, #0]
 8007466:	bf18      	it	ne
 8007468:	b22d      	sxthne	r5, r5
 800746a:	e7ef      	b.n	800744c <_printf_i+0xbc>
 800746c:	680b      	ldr	r3, [r1, #0]
 800746e:	6825      	ldr	r5, [r4, #0]
 8007470:	1d18      	adds	r0, r3, #4
 8007472:	6008      	str	r0, [r1, #0]
 8007474:	0628      	lsls	r0, r5, #24
 8007476:	d501      	bpl.n	800747c <_printf_i+0xec>
 8007478:	681d      	ldr	r5, [r3, #0]
 800747a:	e002      	b.n	8007482 <_printf_i+0xf2>
 800747c:	0669      	lsls	r1, r5, #25
 800747e:	d5fb      	bpl.n	8007478 <_printf_i+0xe8>
 8007480:	881d      	ldrh	r5, [r3, #0]
 8007482:	2f6f      	cmp	r7, #111	; 0x6f
 8007484:	bf0c      	ite	eq
 8007486:	2308      	moveq	r3, #8
 8007488:	230a      	movne	r3, #10
 800748a:	4852      	ldr	r0, [pc, #328]	; (80075d4 <_printf_i+0x244>)
 800748c:	2100      	movs	r1, #0
 800748e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007492:	6866      	ldr	r6, [r4, #4]
 8007494:	2e00      	cmp	r6, #0
 8007496:	bfa8      	it	ge
 8007498:	6821      	ldrge	r1, [r4, #0]
 800749a:	60a6      	str	r6, [r4, #8]
 800749c:	bfa4      	itt	ge
 800749e:	f021 0104 	bicge.w	r1, r1, #4
 80074a2:	6021      	strge	r1, [r4, #0]
 80074a4:	b90d      	cbnz	r5, 80074aa <_printf_i+0x11a>
 80074a6:	2e00      	cmp	r6, #0
 80074a8:	d04d      	beq.n	8007546 <_printf_i+0x1b6>
 80074aa:	4616      	mov	r6, r2
 80074ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80074b0:	fb03 5711 	mls	r7, r3, r1, r5
 80074b4:	5dc7      	ldrb	r7, [r0, r7]
 80074b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074ba:	462f      	mov	r7, r5
 80074bc:	42bb      	cmp	r3, r7
 80074be:	460d      	mov	r5, r1
 80074c0:	d9f4      	bls.n	80074ac <_printf_i+0x11c>
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d10b      	bne.n	80074de <_printf_i+0x14e>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	07df      	lsls	r7, r3, #31
 80074ca:	d508      	bpl.n	80074de <_printf_i+0x14e>
 80074cc:	6923      	ldr	r3, [r4, #16]
 80074ce:	6861      	ldr	r1, [r4, #4]
 80074d0:	4299      	cmp	r1, r3
 80074d2:	bfde      	ittt	le
 80074d4:	2330      	movle	r3, #48	; 0x30
 80074d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074de:	1b92      	subs	r2, r2, r6
 80074e0:	6122      	str	r2, [r4, #16]
 80074e2:	464b      	mov	r3, r9
 80074e4:	4621      	mov	r1, r4
 80074e6:	4640      	mov	r0, r8
 80074e8:	f8cd a000 	str.w	sl, [sp]
 80074ec:	aa03      	add	r2, sp, #12
 80074ee:	f7ff fedf 	bl	80072b0 <_printf_common>
 80074f2:	3001      	adds	r0, #1
 80074f4:	d14c      	bne.n	8007590 <_printf_i+0x200>
 80074f6:	f04f 30ff 	mov.w	r0, #4294967295
 80074fa:	b004      	add	sp, #16
 80074fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007500:	4834      	ldr	r0, [pc, #208]	; (80075d4 <_printf_i+0x244>)
 8007502:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007506:	680e      	ldr	r6, [r1, #0]
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	f856 5b04 	ldr.w	r5, [r6], #4
 800750e:	061f      	lsls	r7, r3, #24
 8007510:	600e      	str	r6, [r1, #0]
 8007512:	d514      	bpl.n	800753e <_printf_i+0x1ae>
 8007514:	07d9      	lsls	r1, r3, #31
 8007516:	bf44      	itt	mi
 8007518:	f043 0320 	orrmi.w	r3, r3, #32
 800751c:	6023      	strmi	r3, [r4, #0]
 800751e:	b91d      	cbnz	r5, 8007528 <_printf_i+0x198>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	f023 0320 	bic.w	r3, r3, #32
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	2310      	movs	r3, #16
 800752a:	e7af      	b.n	800748c <_printf_i+0xfc>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	f043 0320 	orr.w	r3, r3, #32
 8007532:	6023      	str	r3, [r4, #0]
 8007534:	2378      	movs	r3, #120	; 0x78
 8007536:	4828      	ldr	r0, [pc, #160]	; (80075d8 <_printf_i+0x248>)
 8007538:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800753c:	e7e3      	b.n	8007506 <_printf_i+0x176>
 800753e:	065e      	lsls	r6, r3, #25
 8007540:	bf48      	it	mi
 8007542:	b2ad      	uxthmi	r5, r5
 8007544:	e7e6      	b.n	8007514 <_printf_i+0x184>
 8007546:	4616      	mov	r6, r2
 8007548:	e7bb      	b.n	80074c2 <_printf_i+0x132>
 800754a:	680b      	ldr	r3, [r1, #0]
 800754c:	6826      	ldr	r6, [r4, #0]
 800754e:	1d1d      	adds	r5, r3, #4
 8007550:	6960      	ldr	r0, [r4, #20]
 8007552:	600d      	str	r5, [r1, #0]
 8007554:	0635      	lsls	r5, r6, #24
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	d501      	bpl.n	800755e <_printf_i+0x1ce>
 800755a:	6018      	str	r0, [r3, #0]
 800755c:	e002      	b.n	8007564 <_printf_i+0x1d4>
 800755e:	0671      	lsls	r1, r6, #25
 8007560:	d5fb      	bpl.n	800755a <_printf_i+0x1ca>
 8007562:	8018      	strh	r0, [r3, #0]
 8007564:	2300      	movs	r3, #0
 8007566:	4616      	mov	r6, r2
 8007568:	6123      	str	r3, [r4, #16]
 800756a:	e7ba      	b.n	80074e2 <_printf_i+0x152>
 800756c:	680b      	ldr	r3, [r1, #0]
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	600a      	str	r2, [r1, #0]
 8007572:	681e      	ldr	r6, [r3, #0]
 8007574:	2100      	movs	r1, #0
 8007576:	4630      	mov	r0, r6
 8007578:	6862      	ldr	r2, [r4, #4]
 800757a:	f001 fa27 	bl	80089cc <memchr>
 800757e:	b108      	cbz	r0, 8007584 <_printf_i+0x1f4>
 8007580:	1b80      	subs	r0, r0, r6
 8007582:	6060      	str	r0, [r4, #4]
 8007584:	6863      	ldr	r3, [r4, #4]
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	2300      	movs	r3, #0
 800758a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800758e:	e7a8      	b.n	80074e2 <_printf_i+0x152>
 8007590:	4632      	mov	r2, r6
 8007592:	4649      	mov	r1, r9
 8007594:	4640      	mov	r0, r8
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	47d0      	blx	sl
 800759a:	3001      	adds	r0, #1
 800759c:	d0ab      	beq.n	80074f6 <_printf_i+0x166>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	079b      	lsls	r3, r3, #30
 80075a2:	d413      	bmi.n	80075cc <_printf_i+0x23c>
 80075a4:	68e0      	ldr	r0, [r4, #12]
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	4298      	cmp	r0, r3
 80075aa:	bfb8      	it	lt
 80075ac:	4618      	movlt	r0, r3
 80075ae:	e7a4      	b.n	80074fa <_printf_i+0x16a>
 80075b0:	2301      	movs	r3, #1
 80075b2:	4632      	mov	r2, r6
 80075b4:	4649      	mov	r1, r9
 80075b6:	4640      	mov	r0, r8
 80075b8:	47d0      	blx	sl
 80075ba:	3001      	adds	r0, #1
 80075bc:	d09b      	beq.n	80074f6 <_printf_i+0x166>
 80075be:	3501      	adds	r5, #1
 80075c0:	68e3      	ldr	r3, [r4, #12]
 80075c2:	9903      	ldr	r1, [sp, #12]
 80075c4:	1a5b      	subs	r3, r3, r1
 80075c6:	42ab      	cmp	r3, r5
 80075c8:	dcf2      	bgt.n	80075b0 <_printf_i+0x220>
 80075ca:	e7eb      	b.n	80075a4 <_printf_i+0x214>
 80075cc:	2500      	movs	r5, #0
 80075ce:	f104 0619 	add.w	r6, r4, #25
 80075d2:	e7f5      	b.n	80075c0 <_printf_i+0x230>
 80075d4:	080098e6 	.word	0x080098e6
 80075d8:	080098f7 	.word	0x080098f7

080075dc <iprintf>:
 80075dc:	b40f      	push	{r0, r1, r2, r3}
 80075de:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <iprintf+0x2c>)
 80075e0:	b513      	push	{r0, r1, r4, lr}
 80075e2:	681c      	ldr	r4, [r3, #0]
 80075e4:	b124      	cbz	r4, 80075f0 <iprintf+0x14>
 80075e6:	69a3      	ldr	r3, [r4, #24]
 80075e8:	b913      	cbnz	r3, 80075f0 <iprintf+0x14>
 80075ea:	4620      	mov	r0, r4
 80075ec:	f001 f8dc 	bl	80087a8 <__sinit>
 80075f0:	ab05      	add	r3, sp, #20
 80075f2:	4620      	mov	r0, r4
 80075f4:	9a04      	ldr	r2, [sp, #16]
 80075f6:	68a1      	ldr	r1, [r4, #8]
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	f001 fe53 	bl	80092a4 <_vfiprintf_r>
 80075fe:	b002      	add	sp, #8
 8007600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007604:	b004      	add	sp, #16
 8007606:	4770      	bx	lr
 8007608:	20000010 	.word	0x20000010

0800760c <_puts_r>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	460e      	mov	r6, r1
 8007610:	4605      	mov	r5, r0
 8007612:	b118      	cbz	r0, 800761c <_puts_r+0x10>
 8007614:	6983      	ldr	r3, [r0, #24]
 8007616:	b90b      	cbnz	r3, 800761c <_puts_r+0x10>
 8007618:	f001 f8c6 	bl	80087a8 <__sinit>
 800761c:	69ab      	ldr	r3, [r5, #24]
 800761e:	68ac      	ldr	r4, [r5, #8]
 8007620:	b913      	cbnz	r3, 8007628 <_puts_r+0x1c>
 8007622:	4628      	mov	r0, r5
 8007624:	f001 f8c0 	bl	80087a8 <__sinit>
 8007628:	4b2c      	ldr	r3, [pc, #176]	; (80076dc <_puts_r+0xd0>)
 800762a:	429c      	cmp	r4, r3
 800762c:	d120      	bne.n	8007670 <_puts_r+0x64>
 800762e:	686c      	ldr	r4, [r5, #4]
 8007630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007632:	07db      	lsls	r3, r3, #31
 8007634:	d405      	bmi.n	8007642 <_puts_r+0x36>
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	0598      	lsls	r0, r3, #22
 800763a:	d402      	bmi.n	8007642 <_puts_r+0x36>
 800763c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800763e:	f001 f956 	bl	80088ee <__retarget_lock_acquire_recursive>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	0719      	lsls	r1, r3, #28
 8007646:	d51d      	bpl.n	8007684 <_puts_r+0x78>
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	b1db      	cbz	r3, 8007684 <_puts_r+0x78>
 800764c:	3e01      	subs	r6, #1
 800764e:	68a3      	ldr	r3, [r4, #8]
 8007650:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007654:	3b01      	subs	r3, #1
 8007656:	60a3      	str	r3, [r4, #8]
 8007658:	bb39      	cbnz	r1, 80076aa <_puts_r+0x9e>
 800765a:	2b00      	cmp	r3, #0
 800765c:	da38      	bge.n	80076d0 <_puts_r+0xc4>
 800765e:	4622      	mov	r2, r4
 8007660:	210a      	movs	r1, #10
 8007662:	4628      	mov	r0, r5
 8007664:	f000 f848 	bl	80076f8 <__swbuf_r>
 8007668:	3001      	adds	r0, #1
 800766a:	d011      	beq.n	8007690 <_puts_r+0x84>
 800766c:	250a      	movs	r5, #10
 800766e:	e011      	b.n	8007694 <_puts_r+0x88>
 8007670:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <_puts_r+0xd4>)
 8007672:	429c      	cmp	r4, r3
 8007674:	d101      	bne.n	800767a <_puts_r+0x6e>
 8007676:	68ac      	ldr	r4, [r5, #8]
 8007678:	e7da      	b.n	8007630 <_puts_r+0x24>
 800767a:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <_puts_r+0xd8>)
 800767c:	429c      	cmp	r4, r3
 800767e:	bf08      	it	eq
 8007680:	68ec      	ldreq	r4, [r5, #12]
 8007682:	e7d5      	b.n	8007630 <_puts_r+0x24>
 8007684:	4621      	mov	r1, r4
 8007686:	4628      	mov	r0, r5
 8007688:	f000 f888 	bl	800779c <__swsetup_r>
 800768c:	2800      	cmp	r0, #0
 800768e:	d0dd      	beq.n	800764c <_puts_r+0x40>
 8007690:	f04f 35ff 	mov.w	r5, #4294967295
 8007694:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007696:	07da      	lsls	r2, r3, #31
 8007698:	d405      	bmi.n	80076a6 <_puts_r+0x9a>
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	059b      	lsls	r3, r3, #22
 800769e:	d402      	bmi.n	80076a6 <_puts_r+0x9a>
 80076a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076a2:	f001 f925 	bl	80088f0 <__retarget_lock_release_recursive>
 80076a6:	4628      	mov	r0, r5
 80076a8:	bd70      	pop	{r4, r5, r6, pc}
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	da04      	bge.n	80076b8 <_puts_r+0xac>
 80076ae:	69a2      	ldr	r2, [r4, #24]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	dc06      	bgt.n	80076c2 <_puts_r+0xb6>
 80076b4:	290a      	cmp	r1, #10
 80076b6:	d004      	beq.n	80076c2 <_puts_r+0xb6>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	6022      	str	r2, [r4, #0]
 80076be:	7019      	strb	r1, [r3, #0]
 80076c0:	e7c5      	b.n	800764e <_puts_r+0x42>
 80076c2:	4622      	mov	r2, r4
 80076c4:	4628      	mov	r0, r5
 80076c6:	f000 f817 	bl	80076f8 <__swbuf_r>
 80076ca:	3001      	adds	r0, #1
 80076cc:	d1bf      	bne.n	800764e <_puts_r+0x42>
 80076ce:	e7df      	b.n	8007690 <_puts_r+0x84>
 80076d0:	250a      	movs	r5, #10
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	6022      	str	r2, [r4, #0]
 80076d8:	701d      	strb	r5, [r3, #0]
 80076da:	e7db      	b.n	8007694 <_puts_r+0x88>
 80076dc:	080099bc 	.word	0x080099bc
 80076e0:	080099dc 	.word	0x080099dc
 80076e4:	0800999c 	.word	0x0800999c

080076e8 <puts>:
 80076e8:	4b02      	ldr	r3, [pc, #8]	; (80076f4 <puts+0xc>)
 80076ea:	4601      	mov	r1, r0
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	f7ff bf8d 	b.w	800760c <_puts_r>
 80076f2:	bf00      	nop
 80076f4:	20000010 	.word	0x20000010

080076f8 <__swbuf_r>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	460e      	mov	r6, r1
 80076fc:	4614      	mov	r4, r2
 80076fe:	4605      	mov	r5, r0
 8007700:	b118      	cbz	r0, 800770a <__swbuf_r+0x12>
 8007702:	6983      	ldr	r3, [r0, #24]
 8007704:	b90b      	cbnz	r3, 800770a <__swbuf_r+0x12>
 8007706:	f001 f84f 	bl	80087a8 <__sinit>
 800770a:	4b21      	ldr	r3, [pc, #132]	; (8007790 <__swbuf_r+0x98>)
 800770c:	429c      	cmp	r4, r3
 800770e:	d12b      	bne.n	8007768 <__swbuf_r+0x70>
 8007710:	686c      	ldr	r4, [r5, #4]
 8007712:	69a3      	ldr	r3, [r4, #24]
 8007714:	60a3      	str	r3, [r4, #8]
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	071a      	lsls	r2, r3, #28
 800771a:	d52f      	bpl.n	800777c <__swbuf_r+0x84>
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	b36b      	cbz	r3, 800777c <__swbuf_r+0x84>
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	6820      	ldr	r0, [r4, #0]
 8007724:	b2f6      	uxtb	r6, r6
 8007726:	1ac0      	subs	r0, r0, r3
 8007728:	6963      	ldr	r3, [r4, #20]
 800772a:	4637      	mov	r7, r6
 800772c:	4283      	cmp	r3, r0
 800772e:	dc04      	bgt.n	800773a <__swbuf_r+0x42>
 8007730:	4621      	mov	r1, r4
 8007732:	4628      	mov	r0, r5
 8007734:	f000 ffa4 	bl	8008680 <_fflush_r>
 8007738:	bb30      	cbnz	r0, 8007788 <__swbuf_r+0x90>
 800773a:	68a3      	ldr	r3, [r4, #8]
 800773c:	3001      	adds	r0, #1
 800773e:	3b01      	subs	r3, #1
 8007740:	60a3      	str	r3, [r4, #8]
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	6022      	str	r2, [r4, #0]
 8007748:	701e      	strb	r6, [r3, #0]
 800774a:	6963      	ldr	r3, [r4, #20]
 800774c:	4283      	cmp	r3, r0
 800774e:	d004      	beq.n	800775a <__swbuf_r+0x62>
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	07db      	lsls	r3, r3, #31
 8007754:	d506      	bpl.n	8007764 <__swbuf_r+0x6c>
 8007756:	2e0a      	cmp	r6, #10
 8007758:	d104      	bne.n	8007764 <__swbuf_r+0x6c>
 800775a:	4621      	mov	r1, r4
 800775c:	4628      	mov	r0, r5
 800775e:	f000 ff8f 	bl	8008680 <_fflush_r>
 8007762:	b988      	cbnz	r0, 8007788 <__swbuf_r+0x90>
 8007764:	4638      	mov	r0, r7
 8007766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <__swbuf_r+0x9c>)
 800776a:	429c      	cmp	r4, r3
 800776c:	d101      	bne.n	8007772 <__swbuf_r+0x7a>
 800776e:	68ac      	ldr	r4, [r5, #8]
 8007770:	e7cf      	b.n	8007712 <__swbuf_r+0x1a>
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <__swbuf_r+0xa0>)
 8007774:	429c      	cmp	r4, r3
 8007776:	bf08      	it	eq
 8007778:	68ec      	ldreq	r4, [r5, #12]
 800777a:	e7ca      	b.n	8007712 <__swbuf_r+0x1a>
 800777c:	4621      	mov	r1, r4
 800777e:	4628      	mov	r0, r5
 8007780:	f000 f80c 	bl	800779c <__swsetup_r>
 8007784:	2800      	cmp	r0, #0
 8007786:	d0cb      	beq.n	8007720 <__swbuf_r+0x28>
 8007788:	f04f 37ff 	mov.w	r7, #4294967295
 800778c:	e7ea      	b.n	8007764 <__swbuf_r+0x6c>
 800778e:	bf00      	nop
 8007790:	080099bc 	.word	0x080099bc
 8007794:	080099dc 	.word	0x080099dc
 8007798:	0800999c 	.word	0x0800999c

0800779c <__swsetup_r>:
 800779c:	4b32      	ldr	r3, [pc, #200]	; (8007868 <__swsetup_r+0xcc>)
 800779e:	b570      	push	{r4, r5, r6, lr}
 80077a0:	681d      	ldr	r5, [r3, #0]
 80077a2:	4606      	mov	r6, r0
 80077a4:	460c      	mov	r4, r1
 80077a6:	b125      	cbz	r5, 80077b2 <__swsetup_r+0x16>
 80077a8:	69ab      	ldr	r3, [r5, #24]
 80077aa:	b913      	cbnz	r3, 80077b2 <__swsetup_r+0x16>
 80077ac:	4628      	mov	r0, r5
 80077ae:	f000 fffb 	bl	80087a8 <__sinit>
 80077b2:	4b2e      	ldr	r3, [pc, #184]	; (800786c <__swsetup_r+0xd0>)
 80077b4:	429c      	cmp	r4, r3
 80077b6:	d10f      	bne.n	80077d8 <__swsetup_r+0x3c>
 80077b8:	686c      	ldr	r4, [r5, #4]
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077c0:	0719      	lsls	r1, r3, #28
 80077c2:	d42c      	bmi.n	800781e <__swsetup_r+0x82>
 80077c4:	06dd      	lsls	r5, r3, #27
 80077c6:	d411      	bmi.n	80077ec <__swsetup_r+0x50>
 80077c8:	2309      	movs	r3, #9
 80077ca:	6033      	str	r3, [r6, #0]
 80077cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	e03e      	b.n	8007856 <__swsetup_r+0xba>
 80077d8:	4b25      	ldr	r3, [pc, #148]	; (8007870 <__swsetup_r+0xd4>)
 80077da:	429c      	cmp	r4, r3
 80077dc:	d101      	bne.n	80077e2 <__swsetup_r+0x46>
 80077de:	68ac      	ldr	r4, [r5, #8]
 80077e0:	e7eb      	b.n	80077ba <__swsetup_r+0x1e>
 80077e2:	4b24      	ldr	r3, [pc, #144]	; (8007874 <__swsetup_r+0xd8>)
 80077e4:	429c      	cmp	r4, r3
 80077e6:	bf08      	it	eq
 80077e8:	68ec      	ldreq	r4, [r5, #12]
 80077ea:	e7e6      	b.n	80077ba <__swsetup_r+0x1e>
 80077ec:	0758      	lsls	r0, r3, #29
 80077ee:	d512      	bpl.n	8007816 <__swsetup_r+0x7a>
 80077f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077f2:	b141      	cbz	r1, 8007806 <__swsetup_r+0x6a>
 80077f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077f8:	4299      	cmp	r1, r3
 80077fa:	d002      	beq.n	8007802 <__swsetup_r+0x66>
 80077fc:	4630      	mov	r0, r6
 80077fe:	f001 fc83 	bl	8009108 <_free_r>
 8007802:	2300      	movs	r3, #0
 8007804:	6363      	str	r3, [r4, #52]	; 0x34
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800780c:	81a3      	strh	r3, [r4, #12]
 800780e:	2300      	movs	r3, #0
 8007810:	6063      	str	r3, [r4, #4]
 8007812:	6923      	ldr	r3, [r4, #16]
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	f043 0308 	orr.w	r3, r3, #8
 800781c:	81a3      	strh	r3, [r4, #12]
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	b94b      	cbnz	r3, 8007836 <__swsetup_r+0x9a>
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782c:	d003      	beq.n	8007836 <__swsetup_r+0x9a>
 800782e:	4621      	mov	r1, r4
 8007830:	4630      	mov	r0, r6
 8007832:	f001 f883 	bl	800893c <__smakebuf_r>
 8007836:	89a0      	ldrh	r0, [r4, #12]
 8007838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800783c:	f010 0301 	ands.w	r3, r0, #1
 8007840:	d00a      	beq.n	8007858 <__swsetup_r+0xbc>
 8007842:	2300      	movs	r3, #0
 8007844:	60a3      	str	r3, [r4, #8]
 8007846:	6963      	ldr	r3, [r4, #20]
 8007848:	425b      	negs	r3, r3
 800784a:	61a3      	str	r3, [r4, #24]
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	b943      	cbnz	r3, 8007862 <__swsetup_r+0xc6>
 8007850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007854:	d1ba      	bne.n	80077cc <__swsetup_r+0x30>
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	0781      	lsls	r1, r0, #30
 800785a:	bf58      	it	pl
 800785c:	6963      	ldrpl	r3, [r4, #20]
 800785e:	60a3      	str	r3, [r4, #8]
 8007860:	e7f4      	b.n	800784c <__swsetup_r+0xb0>
 8007862:	2000      	movs	r0, #0
 8007864:	e7f7      	b.n	8007856 <__swsetup_r+0xba>
 8007866:	bf00      	nop
 8007868:	20000010 	.word	0x20000010
 800786c:	080099bc 	.word	0x080099bc
 8007870:	080099dc 	.word	0x080099dc
 8007874:	0800999c 	.word	0x0800999c

08007878 <quorem>:
 8007878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	6903      	ldr	r3, [r0, #16]
 800787e:	690c      	ldr	r4, [r1, #16]
 8007880:	4607      	mov	r7, r0
 8007882:	42a3      	cmp	r3, r4
 8007884:	f2c0 8083 	blt.w	800798e <quorem+0x116>
 8007888:	3c01      	subs	r4, #1
 800788a:	f100 0514 	add.w	r5, r0, #20
 800788e:	f101 0814 	add.w	r8, r1, #20
 8007892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800789c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078a0:	3301      	adds	r3, #1
 80078a2:	429a      	cmp	r2, r3
 80078a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80078a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80078ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078b0:	d332      	bcc.n	8007918 <quorem+0xa0>
 80078b2:	f04f 0e00 	mov.w	lr, #0
 80078b6:	4640      	mov	r0, r8
 80078b8:	46ac      	mov	ip, r5
 80078ba:	46f2      	mov	sl, lr
 80078bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80078c0:	b293      	uxth	r3, r2
 80078c2:	fb06 e303 	mla	r3, r6, r3, lr
 80078c6:	0c12      	lsrs	r2, r2, #16
 80078c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80078cc:	fb06 e202 	mla	r2, r6, r2, lr
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	ebaa 0303 	sub.w	r3, sl, r3
 80078d6:	f8dc a000 	ldr.w	sl, [ip]
 80078da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078de:	fa1f fa8a 	uxth.w	sl, sl
 80078e2:	4453      	add	r3, sl
 80078e4:	fa1f fa82 	uxth.w	sl, r2
 80078e8:	f8dc 2000 	ldr.w	r2, [ip]
 80078ec:	4581      	cmp	r9, r0
 80078ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80078f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007900:	f84c 3b04 	str.w	r3, [ip], #4
 8007904:	d2da      	bcs.n	80078bc <quorem+0x44>
 8007906:	f855 300b 	ldr.w	r3, [r5, fp]
 800790a:	b92b      	cbnz	r3, 8007918 <quorem+0xa0>
 800790c:	9b01      	ldr	r3, [sp, #4]
 800790e:	3b04      	subs	r3, #4
 8007910:	429d      	cmp	r5, r3
 8007912:	461a      	mov	r2, r3
 8007914:	d32f      	bcc.n	8007976 <quorem+0xfe>
 8007916:	613c      	str	r4, [r7, #16]
 8007918:	4638      	mov	r0, r7
 800791a:	f001 fadf 	bl	8008edc <__mcmp>
 800791e:	2800      	cmp	r0, #0
 8007920:	db25      	blt.n	800796e <quorem+0xf6>
 8007922:	4628      	mov	r0, r5
 8007924:	f04f 0c00 	mov.w	ip, #0
 8007928:	3601      	adds	r6, #1
 800792a:	f858 1b04 	ldr.w	r1, [r8], #4
 800792e:	f8d0 e000 	ldr.w	lr, [r0]
 8007932:	b28b      	uxth	r3, r1
 8007934:	ebac 0303 	sub.w	r3, ip, r3
 8007938:	fa1f f28e 	uxth.w	r2, lr
 800793c:	4413      	add	r3, r2
 800793e:	0c0a      	lsrs	r2, r1, #16
 8007940:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007948:	b29b      	uxth	r3, r3
 800794a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800794e:	45c1      	cmp	r9, r8
 8007950:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007954:	f840 3b04 	str.w	r3, [r0], #4
 8007958:	d2e7      	bcs.n	800792a <quorem+0xb2>
 800795a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800795e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007962:	b922      	cbnz	r2, 800796e <quorem+0xf6>
 8007964:	3b04      	subs	r3, #4
 8007966:	429d      	cmp	r5, r3
 8007968:	461a      	mov	r2, r3
 800796a:	d30a      	bcc.n	8007982 <quorem+0x10a>
 800796c:	613c      	str	r4, [r7, #16]
 800796e:	4630      	mov	r0, r6
 8007970:	b003      	add	sp, #12
 8007972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	3b04      	subs	r3, #4
 800797a:	2a00      	cmp	r2, #0
 800797c:	d1cb      	bne.n	8007916 <quorem+0x9e>
 800797e:	3c01      	subs	r4, #1
 8007980:	e7c6      	b.n	8007910 <quorem+0x98>
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	3b04      	subs	r3, #4
 8007986:	2a00      	cmp	r2, #0
 8007988:	d1f0      	bne.n	800796c <quorem+0xf4>
 800798a:	3c01      	subs	r4, #1
 800798c:	e7eb      	b.n	8007966 <quorem+0xee>
 800798e:	2000      	movs	r0, #0
 8007990:	e7ee      	b.n	8007970 <quorem+0xf8>
 8007992:	0000      	movs	r0, r0
 8007994:	0000      	movs	r0, r0
	...

08007998 <_dtoa_r>:
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	4616      	mov	r6, r2
 800799e:	461f      	mov	r7, r3
 80079a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80079a2:	b099      	sub	sp, #100	; 0x64
 80079a4:	4605      	mov	r5, r0
 80079a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80079aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80079ae:	b974      	cbnz	r4, 80079ce <_dtoa_r+0x36>
 80079b0:	2010      	movs	r0, #16
 80079b2:	f001 f803 	bl	80089bc <malloc>
 80079b6:	4602      	mov	r2, r0
 80079b8:	6268      	str	r0, [r5, #36]	; 0x24
 80079ba:	b920      	cbnz	r0, 80079c6 <_dtoa_r+0x2e>
 80079bc:	21ea      	movs	r1, #234	; 0xea
 80079be:	4bae      	ldr	r3, [pc, #696]	; (8007c78 <_dtoa_r+0x2e0>)
 80079c0:	48ae      	ldr	r0, [pc, #696]	; (8007c7c <_dtoa_r+0x2e4>)
 80079c2:	f001 fe05 	bl	80095d0 <__assert_func>
 80079c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079ca:	6004      	str	r4, [r0, #0]
 80079cc:	60c4      	str	r4, [r0, #12]
 80079ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079d0:	6819      	ldr	r1, [r3, #0]
 80079d2:	b151      	cbz	r1, 80079ea <_dtoa_r+0x52>
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	2301      	movs	r3, #1
 80079d8:	4093      	lsls	r3, r2
 80079da:	604a      	str	r2, [r1, #4]
 80079dc:	608b      	str	r3, [r1, #8]
 80079de:	4628      	mov	r0, r5
 80079e0:	f001 f842 	bl	8008a68 <_Bfree>
 80079e4:	2200      	movs	r2, #0
 80079e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	1e3b      	subs	r3, r7, #0
 80079ec:	bfaf      	iteee	ge
 80079ee:	2300      	movge	r3, #0
 80079f0:	2201      	movlt	r2, #1
 80079f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079f6:	9305      	strlt	r3, [sp, #20]
 80079f8:	bfa8      	it	ge
 80079fa:	f8c8 3000 	strge.w	r3, [r8]
 80079fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007a02:	4b9f      	ldr	r3, [pc, #636]	; (8007c80 <_dtoa_r+0x2e8>)
 8007a04:	bfb8      	it	lt
 8007a06:	f8c8 2000 	strlt.w	r2, [r8]
 8007a0a:	ea33 0309 	bics.w	r3, r3, r9
 8007a0e:	d119      	bne.n	8007a44 <_dtoa_r+0xac>
 8007a10:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a1c:	4333      	orrs	r3, r6
 8007a1e:	f000 8580 	beq.w	8008522 <_dtoa_r+0xb8a>
 8007a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a24:	b953      	cbnz	r3, 8007a3c <_dtoa_r+0xa4>
 8007a26:	4b97      	ldr	r3, [pc, #604]	; (8007c84 <_dtoa_r+0x2ec>)
 8007a28:	e022      	b.n	8007a70 <_dtoa_r+0xd8>
 8007a2a:	4b97      	ldr	r3, [pc, #604]	; (8007c88 <_dtoa_r+0x2f0>)
 8007a2c:	9308      	str	r3, [sp, #32]
 8007a2e:	3308      	adds	r3, #8
 8007a30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	9808      	ldr	r0, [sp, #32]
 8007a36:	b019      	add	sp, #100	; 0x64
 8007a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3c:	4b91      	ldr	r3, [pc, #580]	; (8007c84 <_dtoa_r+0x2ec>)
 8007a3e:	9308      	str	r3, [sp, #32]
 8007a40:	3303      	adds	r3, #3
 8007a42:	e7f5      	b.n	8007a30 <_dtoa_r+0x98>
 8007a44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007a4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a50:	2200      	movs	r2, #0
 8007a52:	2300      	movs	r3, #0
 8007a54:	f7f9 f818 	bl	8000a88 <__aeabi_dcmpeq>
 8007a58:	4680      	mov	r8, r0
 8007a5a:	b158      	cbz	r0, 8007a74 <_dtoa_r+0xdc>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8559 	beq.w	800851c <_dtoa_r+0xb84>
 8007a6a:	4888      	ldr	r0, [pc, #544]	; (8007c8c <_dtoa_r+0x2f4>)
 8007a6c:	6018      	str	r0, [r3, #0]
 8007a6e:	1e43      	subs	r3, r0, #1
 8007a70:	9308      	str	r3, [sp, #32]
 8007a72:	e7df      	b.n	8007a34 <_dtoa_r+0x9c>
 8007a74:	ab16      	add	r3, sp, #88	; 0x58
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	ab17      	add	r3, sp, #92	; 0x5c
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a82:	f001 fad7 	bl	8009034 <__d2b>
 8007a86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007a8a:	4682      	mov	sl, r0
 8007a8c:	2c00      	cmp	r4, #0
 8007a8e:	d07e      	beq.n	8007b8e <_dtoa_r+0x1f6>
 8007a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007aa2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007aa6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007aaa:	2200      	movs	r2, #0
 8007aac:	4b78      	ldr	r3, [pc, #480]	; (8007c90 <_dtoa_r+0x2f8>)
 8007aae:	f7f8 fbcb 	bl	8000248 <__aeabi_dsub>
 8007ab2:	a36b      	add	r3, pc, #428	; (adr r3, 8007c60 <_dtoa_r+0x2c8>)
 8007ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab8:	f7f8 fd7e 	bl	80005b8 <__aeabi_dmul>
 8007abc:	a36a      	add	r3, pc, #424	; (adr r3, 8007c68 <_dtoa_r+0x2d0>)
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	f7f8 fbc3 	bl	800024c <__adddf3>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	4620      	mov	r0, r4
 8007aca:	460f      	mov	r7, r1
 8007acc:	f7f8 fd0a 	bl	80004e4 <__aeabi_i2d>
 8007ad0:	a367      	add	r3, pc, #412	; (adr r3, 8007c70 <_dtoa_r+0x2d8>)
 8007ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad6:	f7f8 fd6f 	bl	80005b8 <__aeabi_dmul>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4630      	mov	r0, r6
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	f7f8 fbb3 	bl	800024c <__adddf3>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	460f      	mov	r7, r1
 8007aea:	f7f9 f815 	bl	8000b18 <__aeabi_d2iz>
 8007aee:	2200      	movs	r2, #0
 8007af0:	4681      	mov	r9, r0
 8007af2:	2300      	movs	r3, #0
 8007af4:	4630      	mov	r0, r6
 8007af6:	4639      	mov	r1, r7
 8007af8:	f7f8 ffd0 	bl	8000a9c <__aeabi_dcmplt>
 8007afc:	b148      	cbz	r0, 8007b12 <_dtoa_r+0x17a>
 8007afe:	4648      	mov	r0, r9
 8007b00:	f7f8 fcf0 	bl	80004e4 <__aeabi_i2d>
 8007b04:	4632      	mov	r2, r6
 8007b06:	463b      	mov	r3, r7
 8007b08:	f7f8 ffbe 	bl	8000a88 <__aeabi_dcmpeq>
 8007b0c:	b908      	cbnz	r0, 8007b12 <_dtoa_r+0x17a>
 8007b0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b12:	f1b9 0f16 	cmp.w	r9, #22
 8007b16:	d857      	bhi.n	8007bc8 <_dtoa_r+0x230>
 8007b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b1c:	4b5d      	ldr	r3, [pc, #372]	; (8007c94 <_dtoa_r+0x2fc>)
 8007b1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 ffb9 	bl	8000a9c <__aeabi_dcmplt>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d04e      	beq.n	8007bcc <_dtoa_r+0x234>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b38:	1b1c      	subs	r4, r3, r4
 8007b3a:	1e63      	subs	r3, r4, #1
 8007b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b3e:	bf49      	itett	mi
 8007b40:	f1c4 0301 	rsbmi	r3, r4, #1
 8007b44:	2300      	movpl	r3, #0
 8007b46:	9306      	strmi	r3, [sp, #24]
 8007b48:	2300      	movmi	r3, #0
 8007b4a:	bf54      	ite	pl
 8007b4c:	9306      	strpl	r3, [sp, #24]
 8007b4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007b50:	f1b9 0f00 	cmp.w	r9, #0
 8007b54:	db3c      	blt.n	8007bd0 <_dtoa_r+0x238>
 8007b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b58:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007b5c:	444b      	add	r3, r9
 8007b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b60:	2300      	movs	r3, #0
 8007b62:	930a      	str	r3, [sp, #40]	; 0x28
 8007b64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b66:	2b09      	cmp	r3, #9
 8007b68:	d86c      	bhi.n	8007c44 <_dtoa_r+0x2ac>
 8007b6a:	2b05      	cmp	r3, #5
 8007b6c:	bfc4      	itt	gt
 8007b6e:	3b04      	subgt	r3, #4
 8007b70:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b74:	bfc8      	it	gt
 8007b76:	2400      	movgt	r4, #0
 8007b78:	f1a3 0302 	sub.w	r3, r3, #2
 8007b7c:	bfd8      	it	le
 8007b7e:	2401      	movle	r4, #1
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	f200 808b 	bhi.w	8007c9c <_dtoa_r+0x304>
 8007b86:	e8df f003 	tbb	[pc, r3]
 8007b8a:	4f2d      	.short	0x4f2d
 8007b8c:	5b4d      	.short	0x5b4d
 8007b8e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007b92:	441c      	add	r4, r3
 8007b94:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	bfc3      	ittte	gt
 8007b9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ba0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007ba4:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ba8:	f1c3 0320 	rsble	r3, r3, #32
 8007bac:	bfc6      	itte	gt
 8007bae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007bb2:	4318      	orrgt	r0, r3
 8007bb4:	fa06 f003 	lslle.w	r0, r6, r3
 8007bb8:	f7f8 fc84 	bl	80004c4 <__aeabi_ui2d>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007bc2:	3c01      	subs	r4, #1
 8007bc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007bc6:	e770      	b.n	8007aaa <_dtoa_r+0x112>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e7b3      	b.n	8007b34 <_dtoa_r+0x19c>
 8007bcc:	900f      	str	r0, [sp, #60]	; 0x3c
 8007bce:	e7b2      	b.n	8007b36 <_dtoa_r+0x19e>
 8007bd0:	9b06      	ldr	r3, [sp, #24]
 8007bd2:	eba3 0309 	sub.w	r3, r3, r9
 8007bd6:	9306      	str	r3, [sp, #24]
 8007bd8:	f1c9 0300 	rsb	r3, r9, #0
 8007bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8007bde:	2300      	movs	r3, #0
 8007be0:	930e      	str	r3, [sp, #56]	; 0x38
 8007be2:	e7bf      	b.n	8007b64 <_dtoa_r+0x1cc>
 8007be4:	2300      	movs	r3, #0
 8007be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007be8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dc59      	bgt.n	8007ca2 <_dtoa_r+0x30a>
 8007bee:	f04f 0b01 	mov.w	fp, #1
 8007bf2:	465b      	mov	r3, fp
 8007bf4:	f8cd b008 	str.w	fp, [sp, #8]
 8007bf8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007c00:	6042      	str	r2, [r0, #4]
 8007c02:	2204      	movs	r2, #4
 8007c04:	f102 0614 	add.w	r6, r2, #20
 8007c08:	429e      	cmp	r6, r3
 8007c0a:	6841      	ldr	r1, [r0, #4]
 8007c0c:	d94f      	bls.n	8007cae <_dtoa_r+0x316>
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 feea 	bl	80089e8 <_Balloc>
 8007c14:	9008      	str	r0, [sp, #32]
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d14d      	bne.n	8007cb6 <_dtoa_r+0x31e>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c20:	4b1d      	ldr	r3, [pc, #116]	; (8007c98 <_dtoa_r+0x300>)
 8007c22:	e6cd      	b.n	80079c0 <_dtoa_r+0x28>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e7de      	b.n	8007be6 <_dtoa_r+0x24e>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c2e:	eb09 0b03 	add.w	fp, r9, r3
 8007c32:	f10b 0301 	add.w	r3, fp, #1
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	9302      	str	r3, [sp, #8]
 8007c3a:	bfb8      	it	lt
 8007c3c:	2301      	movlt	r3, #1
 8007c3e:	e7dd      	b.n	8007bfc <_dtoa_r+0x264>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e7f2      	b.n	8007c2a <_dtoa_r+0x292>
 8007c44:	2401      	movs	r4, #1
 8007c46:	2300      	movs	r3, #0
 8007c48:	940b      	str	r4, [sp, #44]	; 0x2c
 8007c4a:	9322      	str	r3, [sp, #136]	; 0x88
 8007c4c:	f04f 3bff 	mov.w	fp, #4294967295
 8007c50:	2200      	movs	r2, #0
 8007c52:	2312      	movs	r3, #18
 8007c54:	f8cd b008 	str.w	fp, [sp, #8]
 8007c58:	9223      	str	r2, [sp, #140]	; 0x8c
 8007c5a:	e7cf      	b.n	8007bfc <_dtoa_r+0x264>
 8007c5c:	f3af 8000 	nop.w
 8007c60:	636f4361 	.word	0x636f4361
 8007c64:	3fd287a7 	.word	0x3fd287a7
 8007c68:	8b60c8b3 	.word	0x8b60c8b3
 8007c6c:	3fc68a28 	.word	0x3fc68a28
 8007c70:	509f79fb 	.word	0x509f79fb
 8007c74:	3fd34413 	.word	0x3fd34413
 8007c78:	08009915 	.word	0x08009915
 8007c7c:	0800992c 	.word	0x0800992c
 8007c80:	7ff00000 	.word	0x7ff00000
 8007c84:	08009911 	.word	0x08009911
 8007c88:	08009908 	.word	0x08009908
 8007c8c:	080098e5 	.word	0x080098e5
 8007c90:	3ff80000 	.word	0x3ff80000
 8007c94:	08009a88 	.word	0x08009a88
 8007c98:	0800998b 	.word	0x0800998b
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ca0:	e7d4      	b.n	8007c4c <_dtoa_r+0x2b4>
 8007ca2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007ca6:	465b      	mov	r3, fp
 8007ca8:	f8cd b008 	str.w	fp, [sp, #8]
 8007cac:	e7a6      	b.n	8007bfc <_dtoa_r+0x264>
 8007cae:	3101      	adds	r1, #1
 8007cb0:	6041      	str	r1, [r0, #4]
 8007cb2:	0052      	lsls	r2, r2, #1
 8007cb4:	e7a6      	b.n	8007c04 <_dtoa_r+0x26c>
 8007cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cb8:	9a08      	ldr	r2, [sp, #32]
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	9b02      	ldr	r3, [sp, #8]
 8007cbe:	2b0e      	cmp	r3, #14
 8007cc0:	f200 80a8 	bhi.w	8007e14 <_dtoa_r+0x47c>
 8007cc4:	2c00      	cmp	r4, #0
 8007cc6:	f000 80a5 	beq.w	8007e14 <_dtoa_r+0x47c>
 8007cca:	f1b9 0f00 	cmp.w	r9, #0
 8007cce:	dd34      	ble.n	8007d3a <_dtoa_r+0x3a2>
 8007cd0:	4a9a      	ldr	r2, [pc, #616]	; (8007f3c <_dtoa_r+0x5a4>)
 8007cd2:	f009 030f 	and.w	r3, r9, #15
 8007cd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007cda:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007cde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ce2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007ce6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007cea:	d016      	beq.n	8007d1a <_dtoa_r+0x382>
 8007cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cf0:	4b93      	ldr	r3, [pc, #588]	; (8007f40 <_dtoa_r+0x5a8>)
 8007cf2:	2703      	movs	r7, #3
 8007cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cf8:	f7f8 fd88 	bl	800080c <__aeabi_ddiv>
 8007cfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d00:	f004 040f 	and.w	r4, r4, #15
 8007d04:	4e8e      	ldr	r6, [pc, #568]	; (8007f40 <_dtoa_r+0x5a8>)
 8007d06:	b954      	cbnz	r4, 8007d1e <_dtoa_r+0x386>
 8007d08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d10:	f7f8 fd7c 	bl	800080c <__aeabi_ddiv>
 8007d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d18:	e029      	b.n	8007d6e <_dtoa_r+0x3d6>
 8007d1a:	2702      	movs	r7, #2
 8007d1c:	e7f2      	b.n	8007d04 <_dtoa_r+0x36c>
 8007d1e:	07e1      	lsls	r1, r4, #31
 8007d20:	d508      	bpl.n	8007d34 <_dtoa_r+0x39c>
 8007d22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d2a:	f7f8 fc45 	bl	80005b8 <__aeabi_dmul>
 8007d2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d32:	3701      	adds	r7, #1
 8007d34:	1064      	asrs	r4, r4, #1
 8007d36:	3608      	adds	r6, #8
 8007d38:	e7e5      	b.n	8007d06 <_dtoa_r+0x36e>
 8007d3a:	f000 80a5 	beq.w	8007e88 <_dtoa_r+0x4f0>
 8007d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d42:	f1c9 0400 	rsb	r4, r9, #0
 8007d46:	4b7d      	ldr	r3, [pc, #500]	; (8007f3c <_dtoa_r+0x5a4>)
 8007d48:	f004 020f 	and.w	r2, r4, #15
 8007d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f7f8 fc30 	bl	80005b8 <__aeabi_dmul>
 8007d58:	2702      	movs	r7, #2
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d60:	4e77      	ldr	r6, [pc, #476]	; (8007f40 <_dtoa_r+0x5a8>)
 8007d62:	1124      	asrs	r4, r4, #4
 8007d64:	2c00      	cmp	r4, #0
 8007d66:	f040 8084 	bne.w	8007e72 <_dtoa_r+0x4da>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1d2      	bne.n	8007d14 <_dtoa_r+0x37c>
 8007d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 808b 	beq.w	8007e8c <_dtoa_r+0x4f4>
 8007d76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007d7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007d7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d82:	2200      	movs	r2, #0
 8007d84:	4b6f      	ldr	r3, [pc, #444]	; (8007f44 <_dtoa_r+0x5ac>)
 8007d86:	f7f8 fe89 	bl	8000a9c <__aeabi_dcmplt>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d07e      	beq.n	8007e8c <_dtoa_r+0x4f4>
 8007d8e:	9b02      	ldr	r3, [sp, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d07b      	beq.n	8007e8c <_dtoa_r+0x4f4>
 8007d94:	f1bb 0f00 	cmp.w	fp, #0
 8007d98:	dd38      	ble.n	8007e0c <_dtoa_r+0x474>
 8007d9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d9e:	2200      	movs	r2, #0
 8007da0:	4b69      	ldr	r3, [pc, #420]	; (8007f48 <_dtoa_r+0x5b0>)
 8007da2:	f7f8 fc09 	bl	80005b8 <__aeabi_dmul>
 8007da6:	465c      	mov	r4, fp
 8007da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dac:	f109 38ff 	add.w	r8, r9, #4294967295
 8007db0:	3701      	adds	r7, #1
 8007db2:	4638      	mov	r0, r7
 8007db4:	f7f8 fb96 	bl	80004e4 <__aeabi_i2d>
 8007db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dbc:	f7f8 fbfc 	bl	80005b8 <__aeabi_dmul>
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4b62      	ldr	r3, [pc, #392]	; (8007f4c <_dtoa_r+0x5b4>)
 8007dc4:	f7f8 fa42 	bl	800024c <__adddf3>
 8007dc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007dcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007dd0:	9611      	str	r6, [sp, #68]	; 0x44
 8007dd2:	2c00      	cmp	r4, #0
 8007dd4:	d15d      	bne.n	8007e92 <_dtoa_r+0x4fa>
 8007dd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	4b5c      	ldr	r3, [pc, #368]	; (8007f50 <_dtoa_r+0x5b8>)
 8007dde:	f7f8 fa33 	bl	8000248 <__aeabi_dsub>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dea:	4633      	mov	r3, r6
 8007dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dee:	f7f8 fe73 	bl	8000ad8 <__aeabi_dcmpgt>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	f040 829e 	bne.w	8008334 <_dtoa_r+0x99c>
 8007df8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dfe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e02:	f7f8 fe4b 	bl	8000a9c <__aeabi_dcmplt>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f040 8292 	bne.w	8008330 <_dtoa_r+0x998>
 8007e0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007e10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f2c0 8153 	blt.w	80080c2 <_dtoa_r+0x72a>
 8007e1c:	f1b9 0f0e 	cmp.w	r9, #14
 8007e20:	f300 814f 	bgt.w	80080c2 <_dtoa_r+0x72a>
 8007e24:	4b45      	ldr	r3, [pc, #276]	; (8007f3c <_dtoa_r+0x5a4>)
 8007e26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007e2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007e32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f280 80db 	bge.w	8007ff0 <_dtoa_r+0x658>
 8007e3a:	9b02      	ldr	r3, [sp, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f300 80d7 	bgt.w	8007ff0 <_dtoa_r+0x658>
 8007e42:	f040 8274 	bne.w	800832e <_dtoa_r+0x996>
 8007e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	4b40      	ldr	r3, [pc, #256]	; (8007f50 <_dtoa_r+0x5b8>)
 8007e4e:	f7f8 fbb3 	bl	80005b8 <__aeabi_dmul>
 8007e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e56:	f7f8 fe35 	bl	8000ac4 <__aeabi_dcmpge>
 8007e5a:	9c02      	ldr	r4, [sp, #8]
 8007e5c:	4626      	mov	r6, r4
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f040 824a 	bne.w	80082f8 <_dtoa_r+0x960>
 8007e64:	2331      	movs	r3, #49	; 0x31
 8007e66:	9f08      	ldr	r7, [sp, #32]
 8007e68:	f109 0901 	add.w	r9, r9, #1
 8007e6c:	f807 3b01 	strb.w	r3, [r7], #1
 8007e70:	e246      	b.n	8008300 <_dtoa_r+0x968>
 8007e72:	07e2      	lsls	r2, r4, #31
 8007e74:	d505      	bpl.n	8007e82 <_dtoa_r+0x4ea>
 8007e76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e7a:	f7f8 fb9d 	bl	80005b8 <__aeabi_dmul>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	3701      	adds	r7, #1
 8007e82:	1064      	asrs	r4, r4, #1
 8007e84:	3608      	adds	r6, #8
 8007e86:	e76d      	b.n	8007d64 <_dtoa_r+0x3cc>
 8007e88:	2702      	movs	r7, #2
 8007e8a:	e770      	b.n	8007d6e <_dtoa_r+0x3d6>
 8007e8c:	46c8      	mov	r8, r9
 8007e8e:	9c02      	ldr	r4, [sp, #8]
 8007e90:	e78f      	b.n	8007db2 <_dtoa_r+0x41a>
 8007e92:	9908      	ldr	r1, [sp, #32]
 8007e94:	4b29      	ldr	r3, [pc, #164]	; (8007f3c <_dtoa_r+0x5a4>)
 8007e96:	4421      	add	r1, r4
 8007e98:	9112      	str	r1, [sp, #72]	; 0x48
 8007e9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ea0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007ea4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	d055      	beq.n	8007f58 <_dtoa_r+0x5c0>
 8007eac:	2000      	movs	r0, #0
 8007eae:	4929      	ldr	r1, [pc, #164]	; (8007f54 <_dtoa_r+0x5bc>)
 8007eb0:	f7f8 fcac 	bl	800080c <__aeabi_ddiv>
 8007eb4:	463b      	mov	r3, r7
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	f7f8 f9c6 	bl	8000248 <__aeabi_dsub>
 8007ebc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ec0:	9f08      	ldr	r7, [sp, #32]
 8007ec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ec6:	f7f8 fe27 	bl	8000b18 <__aeabi_d2iz>
 8007eca:	4604      	mov	r4, r0
 8007ecc:	f7f8 fb0a 	bl	80004e4 <__aeabi_i2d>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ed8:	f7f8 f9b6 	bl	8000248 <__aeabi_dsub>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	3430      	adds	r4, #48	; 0x30
 8007ee2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007eea:	f807 4b01 	strb.w	r4, [r7], #1
 8007eee:	f7f8 fdd5 	bl	8000a9c <__aeabi_dcmplt>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d174      	bne.n	8007fe0 <_dtoa_r+0x648>
 8007ef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007efa:	2000      	movs	r0, #0
 8007efc:	4911      	ldr	r1, [pc, #68]	; (8007f44 <_dtoa_r+0x5ac>)
 8007efe:	f7f8 f9a3 	bl	8000248 <__aeabi_dsub>
 8007f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f06:	f7f8 fdc9 	bl	8000a9c <__aeabi_dcmplt>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	f040 80b6 	bne.w	800807c <_dtoa_r+0x6e4>
 8007f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f12:	429f      	cmp	r7, r3
 8007f14:	f43f af7a 	beq.w	8007e0c <_dtoa_r+0x474>
 8007f18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <_dtoa_r+0x5b0>)
 8007f20:	f7f8 fb4a 	bl	80005b8 <__aeabi_dmul>
 8007f24:	2200      	movs	r2, #0
 8007f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <_dtoa_r+0x5b0>)
 8007f30:	f7f8 fb42 	bl	80005b8 <__aeabi_dmul>
 8007f34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f38:	e7c3      	b.n	8007ec2 <_dtoa_r+0x52a>
 8007f3a:	bf00      	nop
 8007f3c:	08009a88 	.word	0x08009a88
 8007f40:	08009a60 	.word	0x08009a60
 8007f44:	3ff00000 	.word	0x3ff00000
 8007f48:	40240000 	.word	0x40240000
 8007f4c:	401c0000 	.word	0x401c0000
 8007f50:	40140000 	.word	0x40140000
 8007f54:	3fe00000 	.word	0x3fe00000
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7f8 fb2c 	bl	80005b8 <__aeabi_dmul>
 8007f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f66:	9c08      	ldr	r4, [sp, #32]
 8007f68:	9314      	str	r3, [sp, #80]	; 0x50
 8007f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f6e:	f7f8 fdd3 	bl	8000b18 <__aeabi_d2iz>
 8007f72:	9015      	str	r0, [sp, #84]	; 0x54
 8007f74:	f7f8 fab6 	bl	80004e4 <__aeabi_i2d>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f80:	f7f8 f962 	bl	8000248 <__aeabi_dsub>
 8007f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f86:	4606      	mov	r6, r0
 8007f88:	3330      	adds	r3, #48	; 0x30
 8007f8a:	f804 3b01 	strb.w	r3, [r4], #1
 8007f8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f90:	460f      	mov	r7, r1
 8007f92:	429c      	cmp	r4, r3
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	d124      	bne.n	8007fe4 <_dtoa_r+0x64c>
 8007f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f9e:	4bb3      	ldr	r3, [pc, #716]	; (800826c <_dtoa_r+0x8d4>)
 8007fa0:	f7f8 f954 	bl	800024c <__adddf3>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 fd94 	bl	8000ad8 <__aeabi_dcmpgt>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d162      	bne.n	800807a <_dtoa_r+0x6e2>
 8007fb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fb8:	2000      	movs	r0, #0
 8007fba:	49ac      	ldr	r1, [pc, #688]	; (800826c <_dtoa_r+0x8d4>)
 8007fbc:	f7f8 f944 	bl	8000248 <__aeabi_dsub>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	4639      	mov	r1, r7
 8007fc8:	f7f8 fd68 	bl	8000a9c <__aeabi_dcmplt>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	f43f af1d 	beq.w	8007e0c <_dtoa_r+0x474>
 8007fd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007fd4:	1e7b      	subs	r3, r7, #1
 8007fd6:	9314      	str	r3, [sp, #80]	; 0x50
 8007fd8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007fdc:	2b30      	cmp	r3, #48	; 0x30
 8007fde:	d0f8      	beq.n	8007fd2 <_dtoa_r+0x63a>
 8007fe0:	46c1      	mov	r9, r8
 8007fe2:	e03a      	b.n	800805a <_dtoa_r+0x6c2>
 8007fe4:	4ba2      	ldr	r3, [pc, #648]	; (8008270 <_dtoa_r+0x8d8>)
 8007fe6:	f7f8 fae7 	bl	80005b8 <__aeabi_dmul>
 8007fea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fee:	e7bc      	b.n	8007f6a <_dtoa_r+0x5d2>
 8007ff0:	9f08      	ldr	r7, [sp, #32]
 8007ff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ffa:	f7f8 fc07 	bl	800080c <__aeabi_ddiv>
 8007ffe:	f7f8 fd8b 	bl	8000b18 <__aeabi_d2iz>
 8008002:	4604      	mov	r4, r0
 8008004:	f7f8 fa6e 	bl	80004e4 <__aeabi_i2d>
 8008008:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800800c:	f7f8 fad4 	bl	80005b8 <__aeabi_dmul>
 8008010:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008014:	460b      	mov	r3, r1
 8008016:	4602      	mov	r2, r0
 8008018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800801c:	f7f8 f914 	bl	8000248 <__aeabi_dsub>
 8008020:	f807 6b01 	strb.w	r6, [r7], #1
 8008024:	9e08      	ldr	r6, [sp, #32]
 8008026:	9b02      	ldr	r3, [sp, #8]
 8008028:	1bbe      	subs	r6, r7, r6
 800802a:	42b3      	cmp	r3, r6
 800802c:	d13a      	bne.n	80080a4 <_dtoa_r+0x70c>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	f7f8 f90b 	bl	800024c <__adddf3>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800803e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008042:	f7f8 fd49 	bl	8000ad8 <__aeabi_dcmpgt>
 8008046:	bb58      	cbnz	r0, 80080a0 <_dtoa_r+0x708>
 8008048:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800804c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008050:	f7f8 fd1a 	bl	8000a88 <__aeabi_dcmpeq>
 8008054:	b108      	cbz	r0, 800805a <_dtoa_r+0x6c2>
 8008056:	07e1      	lsls	r1, r4, #31
 8008058:	d422      	bmi.n	80080a0 <_dtoa_r+0x708>
 800805a:	4628      	mov	r0, r5
 800805c:	4651      	mov	r1, sl
 800805e:	f000 fd03 	bl	8008a68 <_Bfree>
 8008062:	2300      	movs	r3, #0
 8008064:	703b      	strb	r3, [r7, #0]
 8008066:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008068:	f109 0001 	add.w	r0, r9, #1
 800806c:	6018      	str	r0, [r3, #0]
 800806e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008070:	2b00      	cmp	r3, #0
 8008072:	f43f acdf 	beq.w	8007a34 <_dtoa_r+0x9c>
 8008076:	601f      	str	r7, [r3, #0]
 8008078:	e4dc      	b.n	8007a34 <_dtoa_r+0x9c>
 800807a:	4627      	mov	r7, r4
 800807c:	463b      	mov	r3, r7
 800807e:	461f      	mov	r7, r3
 8008080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008084:	2a39      	cmp	r2, #57	; 0x39
 8008086:	d107      	bne.n	8008098 <_dtoa_r+0x700>
 8008088:	9a08      	ldr	r2, [sp, #32]
 800808a:	429a      	cmp	r2, r3
 800808c:	d1f7      	bne.n	800807e <_dtoa_r+0x6e6>
 800808e:	2230      	movs	r2, #48	; 0x30
 8008090:	9908      	ldr	r1, [sp, #32]
 8008092:	f108 0801 	add.w	r8, r8, #1
 8008096:	700a      	strb	r2, [r1, #0]
 8008098:	781a      	ldrb	r2, [r3, #0]
 800809a:	3201      	adds	r2, #1
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e79f      	b.n	8007fe0 <_dtoa_r+0x648>
 80080a0:	46c8      	mov	r8, r9
 80080a2:	e7eb      	b.n	800807c <_dtoa_r+0x6e4>
 80080a4:	2200      	movs	r2, #0
 80080a6:	4b72      	ldr	r3, [pc, #456]	; (8008270 <_dtoa_r+0x8d8>)
 80080a8:	f7f8 fa86 	bl	80005b8 <__aeabi_dmul>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080b4:	2200      	movs	r2, #0
 80080b6:	2300      	movs	r3, #0
 80080b8:	f7f8 fce6 	bl	8000a88 <__aeabi_dcmpeq>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d098      	beq.n	8007ff2 <_dtoa_r+0x65a>
 80080c0:	e7cb      	b.n	800805a <_dtoa_r+0x6c2>
 80080c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	f000 80cd 	beq.w	8008264 <_dtoa_r+0x8cc>
 80080ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80080cc:	2a01      	cmp	r2, #1
 80080ce:	f300 80af 	bgt.w	8008230 <_dtoa_r+0x898>
 80080d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	f000 80a7 	beq.w	8008228 <_dtoa_r+0x890>
 80080da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80080e0:	9f06      	ldr	r7, [sp, #24]
 80080e2:	9a06      	ldr	r2, [sp, #24]
 80080e4:	2101      	movs	r1, #1
 80080e6:	441a      	add	r2, r3
 80080e8:	9206      	str	r2, [sp, #24]
 80080ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ec:	4628      	mov	r0, r5
 80080ee:	441a      	add	r2, r3
 80080f0:	9209      	str	r2, [sp, #36]	; 0x24
 80080f2:	f000 fd73 	bl	8008bdc <__i2b>
 80080f6:	4606      	mov	r6, r0
 80080f8:	2f00      	cmp	r7, #0
 80080fa:	dd0c      	ble.n	8008116 <_dtoa_r+0x77e>
 80080fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fe:	2b00      	cmp	r3, #0
 8008100:	dd09      	ble.n	8008116 <_dtoa_r+0x77e>
 8008102:	42bb      	cmp	r3, r7
 8008104:	bfa8      	it	ge
 8008106:	463b      	movge	r3, r7
 8008108:	9a06      	ldr	r2, [sp, #24]
 800810a:	1aff      	subs	r7, r7, r3
 800810c:	1ad2      	subs	r2, r2, r3
 800810e:	9206      	str	r2, [sp, #24]
 8008110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	9309      	str	r3, [sp, #36]	; 0x24
 8008116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008118:	b1f3      	cbz	r3, 8008158 <_dtoa_r+0x7c0>
 800811a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 80a9 	beq.w	8008274 <_dtoa_r+0x8dc>
 8008122:	2c00      	cmp	r4, #0
 8008124:	dd10      	ble.n	8008148 <_dtoa_r+0x7b0>
 8008126:	4631      	mov	r1, r6
 8008128:	4622      	mov	r2, r4
 800812a:	4628      	mov	r0, r5
 800812c:	f000 fe10 	bl	8008d50 <__pow5mult>
 8008130:	4652      	mov	r2, sl
 8008132:	4601      	mov	r1, r0
 8008134:	4606      	mov	r6, r0
 8008136:	4628      	mov	r0, r5
 8008138:	f000 fd66 	bl	8008c08 <__multiply>
 800813c:	4680      	mov	r8, r0
 800813e:	4651      	mov	r1, sl
 8008140:	4628      	mov	r0, r5
 8008142:	f000 fc91 	bl	8008a68 <_Bfree>
 8008146:	46c2      	mov	sl, r8
 8008148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814a:	1b1a      	subs	r2, r3, r4
 800814c:	d004      	beq.n	8008158 <_dtoa_r+0x7c0>
 800814e:	4651      	mov	r1, sl
 8008150:	4628      	mov	r0, r5
 8008152:	f000 fdfd 	bl	8008d50 <__pow5mult>
 8008156:	4682      	mov	sl, r0
 8008158:	2101      	movs	r1, #1
 800815a:	4628      	mov	r0, r5
 800815c:	f000 fd3e 	bl	8008bdc <__i2b>
 8008160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008162:	4604      	mov	r4, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	f340 8087 	ble.w	8008278 <_dtoa_r+0x8e0>
 800816a:	461a      	mov	r2, r3
 800816c:	4601      	mov	r1, r0
 800816e:	4628      	mov	r0, r5
 8008170:	f000 fdee 	bl	8008d50 <__pow5mult>
 8008174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008176:	4604      	mov	r4, r0
 8008178:	2b01      	cmp	r3, #1
 800817a:	f340 8080 	ble.w	800827e <_dtoa_r+0x8e6>
 800817e:	f04f 0800 	mov.w	r8, #0
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008188:	6918      	ldr	r0, [r3, #16]
 800818a:	f000 fcd9 	bl	8008b40 <__hi0bits>
 800818e:	f1c0 0020 	rsb	r0, r0, #32
 8008192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008194:	4418      	add	r0, r3
 8008196:	f010 001f 	ands.w	r0, r0, #31
 800819a:	f000 8092 	beq.w	80082c2 <_dtoa_r+0x92a>
 800819e:	f1c0 0320 	rsb	r3, r0, #32
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	f340 808a 	ble.w	80082bc <_dtoa_r+0x924>
 80081a8:	f1c0 001c 	rsb	r0, r0, #28
 80081ac:	9b06      	ldr	r3, [sp, #24]
 80081ae:	4407      	add	r7, r0
 80081b0:	4403      	add	r3, r0
 80081b2:	9306      	str	r3, [sp, #24]
 80081b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b6:	4403      	add	r3, r0
 80081b8:	9309      	str	r3, [sp, #36]	; 0x24
 80081ba:	9b06      	ldr	r3, [sp, #24]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dd05      	ble.n	80081cc <_dtoa_r+0x834>
 80081c0:	4651      	mov	r1, sl
 80081c2:	461a      	mov	r2, r3
 80081c4:	4628      	mov	r0, r5
 80081c6:	f000 fe1d 	bl	8008e04 <__lshift>
 80081ca:	4682      	mov	sl, r0
 80081cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dd05      	ble.n	80081de <_dtoa_r+0x846>
 80081d2:	4621      	mov	r1, r4
 80081d4:	461a      	mov	r2, r3
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 fe14 	bl	8008e04 <__lshift>
 80081dc:	4604      	mov	r4, r0
 80081de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d070      	beq.n	80082c6 <_dtoa_r+0x92e>
 80081e4:	4621      	mov	r1, r4
 80081e6:	4650      	mov	r0, sl
 80081e8:	f000 fe78 	bl	8008edc <__mcmp>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	da6a      	bge.n	80082c6 <_dtoa_r+0x92e>
 80081f0:	2300      	movs	r3, #0
 80081f2:	4651      	mov	r1, sl
 80081f4:	220a      	movs	r2, #10
 80081f6:	4628      	mov	r0, r5
 80081f8:	f000 fc58 	bl	8008aac <__multadd>
 80081fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081fe:	4682      	mov	sl, r0
 8008200:	f109 39ff 	add.w	r9, r9, #4294967295
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8193 	beq.w	8008530 <_dtoa_r+0xb98>
 800820a:	4631      	mov	r1, r6
 800820c:	2300      	movs	r3, #0
 800820e:	220a      	movs	r2, #10
 8008210:	4628      	mov	r0, r5
 8008212:	f000 fc4b 	bl	8008aac <__multadd>
 8008216:	f1bb 0f00 	cmp.w	fp, #0
 800821a:	4606      	mov	r6, r0
 800821c:	f300 8093 	bgt.w	8008346 <_dtoa_r+0x9ae>
 8008220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008222:	2b02      	cmp	r3, #2
 8008224:	dc57      	bgt.n	80082d6 <_dtoa_r+0x93e>
 8008226:	e08e      	b.n	8008346 <_dtoa_r+0x9ae>
 8008228:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800822a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800822e:	e756      	b.n	80080de <_dtoa_r+0x746>
 8008230:	9b02      	ldr	r3, [sp, #8]
 8008232:	1e5c      	subs	r4, r3, #1
 8008234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008236:	42a3      	cmp	r3, r4
 8008238:	bfb7      	itett	lt
 800823a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800823c:	1b1c      	subge	r4, r3, r4
 800823e:	1ae2      	sublt	r2, r4, r3
 8008240:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008242:	bfbe      	ittt	lt
 8008244:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008246:	189b      	addlt	r3, r3, r2
 8008248:	930e      	strlt	r3, [sp, #56]	; 0x38
 800824a:	9b02      	ldr	r3, [sp, #8]
 800824c:	bfb8      	it	lt
 800824e:	2400      	movlt	r4, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	bfbb      	ittet	lt
 8008254:	9b06      	ldrlt	r3, [sp, #24]
 8008256:	9a02      	ldrlt	r2, [sp, #8]
 8008258:	9f06      	ldrge	r7, [sp, #24]
 800825a:	1a9f      	sublt	r7, r3, r2
 800825c:	bfac      	ite	ge
 800825e:	9b02      	ldrge	r3, [sp, #8]
 8008260:	2300      	movlt	r3, #0
 8008262:	e73e      	b.n	80080e2 <_dtoa_r+0x74a>
 8008264:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008266:	9f06      	ldr	r7, [sp, #24]
 8008268:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800826a:	e745      	b.n	80080f8 <_dtoa_r+0x760>
 800826c:	3fe00000 	.word	0x3fe00000
 8008270:	40240000 	.word	0x40240000
 8008274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008276:	e76a      	b.n	800814e <_dtoa_r+0x7b6>
 8008278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800827a:	2b01      	cmp	r3, #1
 800827c:	dc19      	bgt.n	80082b2 <_dtoa_r+0x91a>
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	b9bb      	cbnz	r3, 80082b2 <_dtoa_r+0x91a>
 8008282:	9b05      	ldr	r3, [sp, #20]
 8008284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008288:	b99b      	cbnz	r3, 80082b2 <_dtoa_r+0x91a>
 800828a:	9b05      	ldr	r3, [sp, #20]
 800828c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008290:	0d1b      	lsrs	r3, r3, #20
 8008292:	051b      	lsls	r3, r3, #20
 8008294:	b183      	cbz	r3, 80082b8 <_dtoa_r+0x920>
 8008296:	f04f 0801 	mov.w	r8, #1
 800829a:	9b06      	ldr	r3, [sp, #24]
 800829c:	3301      	adds	r3, #1
 800829e:	9306      	str	r3, [sp, #24]
 80082a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a2:	3301      	adds	r3, #1
 80082a4:	9309      	str	r3, [sp, #36]	; 0x24
 80082a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f47f af6a 	bne.w	8008182 <_dtoa_r+0x7ea>
 80082ae:	2001      	movs	r0, #1
 80082b0:	e76f      	b.n	8008192 <_dtoa_r+0x7fa>
 80082b2:	f04f 0800 	mov.w	r8, #0
 80082b6:	e7f6      	b.n	80082a6 <_dtoa_r+0x90e>
 80082b8:	4698      	mov	r8, r3
 80082ba:	e7f4      	b.n	80082a6 <_dtoa_r+0x90e>
 80082bc:	f43f af7d 	beq.w	80081ba <_dtoa_r+0x822>
 80082c0:	4618      	mov	r0, r3
 80082c2:	301c      	adds	r0, #28
 80082c4:	e772      	b.n	80081ac <_dtoa_r+0x814>
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	dc36      	bgt.n	800833a <_dtoa_r+0x9a2>
 80082cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	dd33      	ble.n	800833a <_dtoa_r+0x9a2>
 80082d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80082d6:	f1bb 0f00 	cmp.w	fp, #0
 80082da:	d10d      	bne.n	80082f8 <_dtoa_r+0x960>
 80082dc:	4621      	mov	r1, r4
 80082de:	465b      	mov	r3, fp
 80082e0:	2205      	movs	r2, #5
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 fbe2 	bl	8008aac <__multadd>
 80082e8:	4601      	mov	r1, r0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4650      	mov	r0, sl
 80082ee:	f000 fdf5 	bl	8008edc <__mcmp>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f73f adb6 	bgt.w	8007e64 <_dtoa_r+0x4cc>
 80082f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082fa:	9f08      	ldr	r7, [sp, #32]
 80082fc:	ea6f 0903 	mvn.w	r9, r3
 8008300:	f04f 0800 	mov.w	r8, #0
 8008304:	4621      	mov	r1, r4
 8008306:	4628      	mov	r0, r5
 8008308:	f000 fbae 	bl	8008a68 <_Bfree>
 800830c:	2e00      	cmp	r6, #0
 800830e:	f43f aea4 	beq.w	800805a <_dtoa_r+0x6c2>
 8008312:	f1b8 0f00 	cmp.w	r8, #0
 8008316:	d005      	beq.n	8008324 <_dtoa_r+0x98c>
 8008318:	45b0      	cmp	r8, r6
 800831a:	d003      	beq.n	8008324 <_dtoa_r+0x98c>
 800831c:	4641      	mov	r1, r8
 800831e:	4628      	mov	r0, r5
 8008320:	f000 fba2 	bl	8008a68 <_Bfree>
 8008324:	4631      	mov	r1, r6
 8008326:	4628      	mov	r0, r5
 8008328:	f000 fb9e 	bl	8008a68 <_Bfree>
 800832c:	e695      	b.n	800805a <_dtoa_r+0x6c2>
 800832e:	2400      	movs	r4, #0
 8008330:	4626      	mov	r6, r4
 8008332:	e7e1      	b.n	80082f8 <_dtoa_r+0x960>
 8008334:	46c1      	mov	r9, r8
 8008336:	4626      	mov	r6, r4
 8008338:	e594      	b.n	8007e64 <_dtoa_r+0x4cc>
 800833a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80fc 	beq.w	800853e <_dtoa_r+0xba6>
 8008346:	2f00      	cmp	r7, #0
 8008348:	dd05      	ble.n	8008356 <_dtoa_r+0x9be>
 800834a:	4631      	mov	r1, r6
 800834c:	463a      	mov	r2, r7
 800834e:	4628      	mov	r0, r5
 8008350:	f000 fd58 	bl	8008e04 <__lshift>
 8008354:	4606      	mov	r6, r0
 8008356:	f1b8 0f00 	cmp.w	r8, #0
 800835a:	d05c      	beq.n	8008416 <_dtoa_r+0xa7e>
 800835c:	4628      	mov	r0, r5
 800835e:	6871      	ldr	r1, [r6, #4]
 8008360:	f000 fb42 	bl	80089e8 <_Balloc>
 8008364:	4607      	mov	r7, r0
 8008366:	b928      	cbnz	r0, 8008374 <_dtoa_r+0x9dc>
 8008368:	4602      	mov	r2, r0
 800836a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800836e:	4b7e      	ldr	r3, [pc, #504]	; (8008568 <_dtoa_r+0xbd0>)
 8008370:	f7ff bb26 	b.w	80079c0 <_dtoa_r+0x28>
 8008374:	6932      	ldr	r2, [r6, #16]
 8008376:	f106 010c 	add.w	r1, r6, #12
 800837a:	3202      	adds	r2, #2
 800837c:	0092      	lsls	r2, r2, #2
 800837e:	300c      	adds	r0, #12
 8008380:	f7fe fcb6 	bl	8006cf0 <memcpy>
 8008384:	2201      	movs	r2, #1
 8008386:	4639      	mov	r1, r7
 8008388:	4628      	mov	r0, r5
 800838a:	f000 fd3b 	bl	8008e04 <__lshift>
 800838e:	46b0      	mov	r8, r6
 8008390:	4606      	mov	r6, r0
 8008392:	9b08      	ldr	r3, [sp, #32]
 8008394:	3301      	adds	r3, #1
 8008396:	9302      	str	r3, [sp, #8]
 8008398:	9b08      	ldr	r3, [sp, #32]
 800839a:	445b      	add	r3, fp
 800839c:	930a      	str	r3, [sp, #40]	; 0x28
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	9309      	str	r3, [sp, #36]	; 0x24
 80083a6:	9b02      	ldr	r3, [sp, #8]
 80083a8:	4621      	mov	r1, r4
 80083aa:	4650      	mov	r0, sl
 80083ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80083b0:	f7ff fa62 	bl	8007878 <quorem>
 80083b4:	4603      	mov	r3, r0
 80083b6:	4641      	mov	r1, r8
 80083b8:	3330      	adds	r3, #48	; 0x30
 80083ba:	9004      	str	r0, [sp, #16]
 80083bc:	4650      	mov	r0, sl
 80083be:	930b      	str	r3, [sp, #44]	; 0x2c
 80083c0:	f000 fd8c 	bl	8008edc <__mcmp>
 80083c4:	4632      	mov	r2, r6
 80083c6:	9006      	str	r0, [sp, #24]
 80083c8:	4621      	mov	r1, r4
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 fda2 	bl	8008f14 <__mdiff>
 80083d0:	68c2      	ldr	r2, [r0, #12]
 80083d2:	4607      	mov	r7, r0
 80083d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d6:	bb02      	cbnz	r2, 800841a <_dtoa_r+0xa82>
 80083d8:	4601      	mov	r1, r0
 80083da:	4650      	mov	r0, sl
 80083dc:	f000 fd7e 	bl	8008edc <__mcmp>
 80083e0:	4602      	mov	r2, r0
 80083e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083e4:	4639      	mov	r1, r7
 80083e6:	4628      	mov	r0, r5
 80083e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80083ec:	f000 fb3c 	bl	8008a68 <_Bfree>
 80083f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083f4:	9f02      	ldr	r7, [sp, #8]
 80083f6:	ea43 0102 	orr.w	r1, r3, r2
 80083fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fc:	430b      	orrs	r3, r1
 80083fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008400:	d10d      	bne.n	800841e <_dtoa_r+0xa86>
 8008402:	2b39      	cmp	r3, #57	; 0x39
 8008404:	d027      	beq.n	8008456 <_dtoa_r+0xabe>
 8008406:	9a06      	ldr	r2, [sp, #24]
 8008408:	2a00      	cmp	r2, #0
 800840a:	dd01      	ble.n	8008410 <_dtoa_r+0xa78>
 800840c:	9b04      	ldr	r3, [sp, #16]
 800840e:	3331      	adds	r3, #49	; 0x31
 8008410:	f88b 3000 	strb.w	r3, [fp]
 8008414:	e776      	b.n	8008304 <_dtoa_r+0x96c>
 8008416:	4630      	mov	r0, r6
 8008418:	e7b9      	b.n	800838e <_dtoa_r+0x9f6>
 800841a:	2201      	movs	r2, #1
 800841c:	e7e2      	b.n	80083e4 <_dtoa_r+0xa4c>
 800841e:	9906      	ldr	r1, [sp, #24]
 8008420:	2900      	cmp	r1, #0
 8008422:	db04      	blt.n	800842e <_dtoa_r+0xa96>
 8008424:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008426:	4301      	orrs	r1, r0
 8008428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800842a:	4301      	orrs	r1, r0
 800842c:	d120      	bne.n	8008470 <_dtoa_r+0xad8>
 800842e:	2a00      	cmp	r2, #0
 8008430:	ddee      	ble.n	8008410 <_dtoa_r+0xa78>
 8008432:	4651      	mov	r1, sl
 8008434:	2201      	movs	r2, #1
 8008436:	4628      	mov	r0, r5
 8008438:	9302      	str	r3, [sp, #8]
 800843a:	f000 fce3 	bl	8008e04 <__lshift>
 800843e:	4621      	mov	r1, r4
 8008440:	4682      	mov	sl, r0
 8008442:	f000 fd4b 	bl	8008edc <__mcmp>
 8008446:	2800      	cmp	r0, #0
 8008448:	9b02      	ldr	r3, [sp, #8]
 800844a:	dc02      	bgt.n	8008452 <_dtoa_r+0xaba>
 800844c:	d1e0      	bne.n	8008410 <_dtoa_r+0xa78>
 800844e:	07da      	lsls	r2, r3, #31
 8008450:	d5de      	bpl.n	8008410 <_dtoa_r+0xa78>
 8008452:	2b39      	cmp	r3, #57	; 0x39
 8008454:	d1da      	bne.n	800840c <_dtoa_r+0xa74>
 8008456:	2339      	movs	r3, #57	; 0x39
 8008458:	f88b 3000 	strb.w	r3, [fp]
 800845c:	463b      	mov	r3, r7
 800845e:	461f      	mov	r7, r3
 8008460:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008464:	3b01      	subs	r3, #1
 8008466:	2a39      	cmp	r2, #57	; 0x39
 8008468:	d050      	beq.n	800850c <_dtoa_r+0xb74>
 800846a:	3201      	adds	r2, #1
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	e749      	b.n	8008304 <_dtoa_r+0x96c>
 8008470:	2a00      	cmp	r2, #0
 8008472:	dd03      	ble.n	800847c <_dtoa_r+0xae4>
 8008474:	2b39      	cmp	r3, #57	; 0x39
 8008476:	d0ee      	beq.n	8008456 <_dtoa_r+0xabe>
 8008478:	3301      	adds	r3, #1
 800847a:	e7c9      	b.n	8008410 <_dtoa_r+0xa78>
 800847c:	9a02      	ldr	r2, [sp, #8]
 800847e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008480:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008484:	428a      	cmp	r2, r1
 8008486:	d02a      	beq.n	80084de <_dtoa_r+0xb46>
 8008488:	4651      	mov	r1, sl
 800848a:	2300      	movs	r3, #0
 800848c:	220a      	movs	r2, #10
 800848e:	4628      	mov	r0, r5
 8008490:	f000 fb0c 	bl	8008aac <__multadd>
 8008494:	45b0      	cmp	r8, r6
 8008496:	4682      	mov	sl, r0
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	f04f 020a 	mov.w	r2, #10
 80084a0:	4641      	mov	r1, r8
 80084a2:	4628      	mov	r0, r5
 80084a4:	d107      	bne.n	80084b6 <_dtoa_r+0xb1e>
 80084a6:	f000 fb01 	bl	8008aac <__multadd>
 80084aa:	4680      	mov	r8, r0
 80084ac:	4606      	mov	r6, r0
 80084ae:	9b02      	ldr	r3, [sp, #8]
 80084b0:	3301      	adds	r3, #1
 80084b2:	9302      	str	r3, [sp, #8]
 80084b4:	e777      	b.n	80083a6 <_dtoa_r+0xa0e>
 80084b6:	f000 faf9 	bl	8008aac <__multadd>
 80084ba:	4631      	mov	r1, r6
 80084bc:	4680      	mov	r8, r0
 80084be:	2300      	movs	r3, #0
 80084c0:	220a      	movs	r2, #10
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 faf2 	bl	8008aac <__multadd>
 80084c8:	4606      	mov	r6, r0
 80084ca:	e7f0      	b.n	80084ae <_dtoa_r+0xb16>
 80084cc:	f1bb 0f00 	cmp.w	fp, #0
 80084d0:	bfcc      	ite	gt
 80084d2:	465f      	movgt	r7, fp
 80084d4:	2701      	movle	r7, #1
 80084d6:	f04f 0800 	mov.w	r8, #0
 80084da:	9a08      	ldr	r2, [sp, #32]
 80084dc:	4417      	add	r7, r2
 80084de:	4651      	mov	r1, sl
 80084e0:	2201      	movs	r2, #1
 80084e2:	4628      	mov	r0, r5
 80084e4:	9302      	str	r3, [sp, #8]
 80084e6:	f000 fc8d 	bl	8008e04 <__lshift>
 80084ea:	4621      	mov	r1, r4
 80084ec:	4682      	mov	sl, r0
 80084ee:	f000 fcf5 	bl	8008edc <__mcmp>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	dcb2      	bgt.n	800845c <_dtoa_r+0xac4>
 80084f6:	d102      	bne.n	80084fe <_dtoa_r+0xb66>
 80084f8:	9b02      	ldr	r3, [sp, #8]
 80084fa:	07db      	lsls	r3, r3, #31
 80084fc:	d4ae      	bmi.n	800845c <_dtoa_r+0xac4>
 80084fe:	463b      	mov	r3, r7
 8008500:	461f      	mov	r7, r3
 8008502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008506:	2a30      	cmp	r2, #48	; 0x30
 8008508:	d0fa      	beq.n	8008500 <_dtoa_r+0xb68>
 800850a:	e6fb      	b.n	8008304 <_dtoa_r+0x96c>
 800850c:	9a08      	ldr	r2, [sp, #32]
 800850e:	429a      	cmp	r2, r3
 8008510:	d1a5      	bne.n	800845e <_dtoa_r+0xac6>
 8008512:	2331      	movs	r3, #49	; 0x31
 8008514:	f109 0901 	add.w	r9, r9, #1
 8008518:	7013      	strb	r3, [r2, #0]
 800851a:	e6f3      	b.n	8008304 <_dtoa_r+0x96c>
 800851c:	4b13      	ldr	r3, [pc, #76]	; (800856c <_dtoa_r+0xbd4>)
 800851e:	f7ff baa7 	b.w	8007a70 <_dtoa_r+0xd8>
 8008522:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008524:	2b00      	cmp	r3, #0
 8008526:	f47f aa80 	bne.w	8007a2a <_dtoa_r+0x92>
 800852a:	4b11      	ldr	r3, [pc, #68]	; (8008570 <_dtoa_r+0xbd8>)
 800852c:	f7ff baa0 	b.w	8007a70 <_dtoa_r+0xd8>
 8008530:	f1bb 0f00 	cmp.w	fp, #0
 8008534:	dc03      	bgt.n	800853e <_dtoa_r+0xba6>
 8008536:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008538:	2b02      	cmp	r3, #2
 800853a:	f73f aecc 	bgt.w	80082d6 <_dtoa_r+0x93e>
 800853e:	9f08      	ldr	r7, [sp, #32]
 8008540:	4621      	mov	r1, r4
 8008542:	4650      	mov	r0, sl
 8008544:	f7ff f998 	bl	8007878 <quorem>
 8008548:	9a08      	ldr	r2, [sp, #32]
 800854a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800854e:	f807 3b01 	strb.w	r3, [r7], #1
 8008552:	1aba      	subs	r2, r7, r2
 8008554:	4593      	cmp	fp, r2
 8008556:	ddb9      	ble.n	80084cc <_dtoa_r+0xb34>
 8008558:	4651      	mov	r1, sl
 800855a:	2300      	movs	r3, #0
 800855c:	220a      	movs	r2, #10
 800855e:	4628      	mov	r0, r5
 8008560:	f000 faa4 	bl	8008aac <__multadd>
 8008564:	4682      	mov	sl, r0
 8008566:	e7eb      	b.n	8008540 <_dtoa_r+0xba8>
 8008568:	0800998b 	.word	0x0800998b
 800856c:	080098e4 	.word	0x080098e4
 8008570:	08009908 	.word	0x08009908

08008574 <__sflush_r>:
 8008574:	898a      	ldrh	r2, [r1, #12]
 8008576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857a:	4605      	mov	r5, r0
 800857c:	0710      	lsls	r0, r2, #28
 800857e:	460c      	mov	r4, r1
 8008580:	d458      	bmi.n	8008634 <__sflush_r+0xc0>
 8008582:	684b      	ldr	r3, [r1, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	dc05      	bgt.n	8008594 <__sflush_r+0x20>
 8008588:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800858a:	2b00      	cmp	r3, #0
 800858c:	dc02      	bgt.n	8008594 <__sflush_r+0x20>
 800858e:	2000      	movs	r0, #0
 8008590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008596:	2e00      	cmp	r6, #0
 8008598:	d0f9      	beq.n	800858e <__sflush_r+0x1a>
 800859a:	2300      	movs	r3, #0
 800859c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085a0:	682f      	ldr	r7, [r5, #0]
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	d032      	beq.n	800860c <__sflush_r+0x98>
 80085a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	075a      	lsls	r2, r3, #29
 80085ac:	d505      	bpl.n	80085ba <__sflush_r+0x46>
 80085ae:	6863      	ldr	r3, [r4, #4]
 80085b0:	1ac0      	subs	r0, r0, r3
 80085b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085b4:	b10b      	cbz	r3, 80085ba <__sflush_r+0x46>
 80085b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085b8:	1ac0      	subs	r0, r0, r3
 80085ba:	2300      	movs	r3, #0
 80085bc:	4602      	mov	r2, r0
 80085be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085c0:	4628      	mov	r0, r5
 80085c2:	6a21      	ldr	r1, [r4, #32]
 80085c4:	47b0      	blx	r6
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	d106      	bne.n	80085da <__sflush_r+0x66>
 80085cc:	6829      	ldr	r1, [r5, #0]
 80085ce:	291d      	cmp	r1, #29
 80085d0:	d82c      	bhi.n	800862c <__sflush_r+0xb8>
 80085d2:	4a2a      	ldr	r2, [pc, #168]	; (800867c <__sflush_r+0x108>)
 80085d4:	40ca      	lsrs	r2, r1
 80085d6:	07d6      	lsls	r6, r2, #31
 80085d8:	d528      	bpl.n	800862c <__sflush_r+0xb8>
 80085da:	2200      	movs	r2, #0
 80085dc:	6062      	str	r2, [r4, #4]
 80085de:	6922      	ldr	r2, [r4, #16]
 80085e0:	04d9      	lsls	r1, r3, #19
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	d504      	bpl.n	80085f0 <__sflush_r+0x7c>
 80085e6:	1c42      	adds	r2, r0, #1
 80085e8:	d101      	bne.n	80085ee <__sflush_r+0x7a>
 80085ea:	682b      	ldr	r3, [r5, #0]
 80085ec:	b903      	cbnz	r3, 80085f0 <__sflush_r+0x7c>
 80085ee:	6560      	str	r0, [r4, #84]	; 0x54
 80085f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085f2:	602f      	str	r7, [r5, #0]
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d0ca      	beq.n	800858e <__sflush_r+0x1a>
 80085f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085fc:	4299      	cmp	r1, r3
 80085fe:	d002      	beq.n	8008606 <__sflush_r+0x92>
 8008600:	4628      	mov	r0, r5
 8008602:	f000 fd81 	bl	8009108 <_free_r>
 8008606:	2000      	movs	r0, #0
 8008608:	6360      	str	r0, [r4, #52]	; 0x34
 800860a:	e7c1      	b.n	8008590 <__sflush_r+0x1c>
 800860c:	6a21      	ldr	r1, [r4, #32]
 800860e:	2301      	movs	r3, #1
 8008610:	4628      	mov	r0, r5
 8008612:	47b0      	blx	r6
 8008614:	1c41      	adds	r1, r0, #1
 8008616:	d1c7      	bne.n	80085a8 <__sflush_r+0x34>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0c4      	beq.n	80085a8 <__sflush_r+0x34>
 800861e:	2b1d      	cmp	r3, #29
 8008620:	d001      	beq.n	8008626 <__sflush_r+0xb2>
 8008622:	2b16      	cmp	r3, #22
 8008624:	d101      	bne.n	800862a <__sflush_r+0xb6>
 8008626:	602f      	str	r7, [r5, #0]
 8008628:	e7b1      	b.n	800858e <__sflush_r+0x1a>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008630:	81a3      	strh	r3, [r4, #12]
 8008632:	e7ad      	b.n	8008590 <__sflush_r+0x1c>
 8008634:	690f      	ldr	r7, [r1, #16]
 8008636:	2f00      	cmp	r7, #0
 8008638:	d0a9      	beq.n	800858e <__sflush_r+0x1a>
 800863a:	0793      	lsls	r3, r2, #30
 800863c:	bf18      	it	ne
 800863e:	2300      	movne	r3, #0
 8008640:	680e      	ldr	r6, [r1, #0]
 8008642:	bf08      	it	eq
 8008644:	694b      	ldreq	r3, [r1, #20]
 8008646:	eba6 0807 	sub.w	r8, r6, r7
 800864a:	600f      	str	r7, [r1, #0]
 800864c:	608b      	str	r3, [r1, #8]
 800864e:	f1b8 0f00 	cmp.w	r8, #0
 8008652:	dd9c      	ble.n	800858e <__sflush_r+0x1a>
 8008654:	4643      	mov	r3, r8
 8008656:	463a      	mov	r2, r7
 8008658:	4628      	mov	r0, r5
 800865a:	6a21      	ldr	r1, [r4, #32]
 800865c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800865e:	47b0      	blx	r6
 8008660:	2800      	cmp	r0, #0
 8008662:	dc06      	bgt.n	8008672 <__sflush_r+0xfe>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800866e:	81a3      	strh	r3, [r4, #12]
 8008670:	e78e      	b.n	8008590 <__sflush_r+0x1c>
 8008672:	4407      	add	r7, r0
 8008674:	eba8 0800 	sub.w	r8, r8, r0
 8008678:	e7e9      	b.n	800864e <__sflush_r+0xda>
 800867a:	bf00      	nop
 800867c:	20400001 	.word	0x20400001

08008680 <_fflush_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	690b      	ldr	r3, [r1, #16]
 8008684:	4605      	mov	r5, r0
 8008686:	460c      	mov	r4, r1
 8008688:	b913      	cbnz	r3, 8008690 <_fflush_r+0x10>
 800868a:	2500      	movs	r5, #0
 800868c:	4628      	mov	r0, r5
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	b118      	cbz	r0, 800869a <_fflush_r+0x1a>
 8008692:	6983      	ldr	r3, [r0, #24]
 8008694:	b90b      	cbnz	r3, 800869a <_fflush_r+0x1a>
 8008696:	f000 f887 	bl	80087a8 <__sinit>
 800869a:	4b14      	ldr	r3, [pc, #80]	; (80086ec <_fflush_r+0x6c>)
 800869c:	429c      	cmp	r4, r3
 800869e:	d11b      	bne.n	80086d8 <_fflush_r+0x58>
 80086a0:	686c      	ldr	r4, [r5, #4]
 80086a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0ef      	beq.n	800868a <_fflush_r+0xa>
 80086aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086ac:	07d0      	lsls	r0, r2, #31
 80086ae:	d404      	bmi.n	80086ba <_fflush_r+0x3a>
 80086b0:	0599      	lsls	r1, r3, #22
 80086b2:	d402      	bmi.n	80086ba <_fflush_r+0x3a>
 80086b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086b6:	f000 f91a 	bl	80088ee <__retarget_lock_acquire_recursive>
 80086ba:	4628      	mov	r0, r5
 80086bc:	4621      	mov	r1, r4
 80086be:	f7ff ff59 	bl	8008574 <__sflush_r>
 80086c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086c4:	4605      	mov	r5, r0
 80086c6:	07da      	lsls	r2, r3, #31
 80086c8:	d4e0      	bmi.n	800868c <_fflush_r+0xc>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	059b      	lsls	r3, r3, #22
 80086ce:	d4dd      	bmi.n	800868c <_fflush_r+0xc>
 80086d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086d2:	f000 f90d 	bl	80088f0 <__retarget_lock_release_recursive>
 80086d6:	e7d9      	b.n	800868c <_fflush_r+0xc>
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <_fflush_r+0x70>)
 80086da:	429c      	cmp	r4, r3
 80086dc:	d101      	bne.n	80086e2 <_fflush_r+0x62>
 80086de:	68ac      	ldr	r4, [r5, #8]
 80086e0:	e7df      	b.n	80086a2 <_fflush_r+0x22>
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <_fflush_r+0x74>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	bf08      	it	eq
 80086e8:	68ec      	ldreq	r4, [r5, #12]
 80086ea:	e7da      	b.n	80086a2 <_fflush_r+0x22>
 80086ec:	080099bc 	.word	0x080099bc
 80086f0:	080099dc 	.word	0x080099dc
 80086f4:	0800999c 	.word	0x0800999c

080086f8 <std>:
 80086f8:	2300      	movs	r3, #0
 80086fa:	b510      	push	{r4, lr}
 80086fc:	4604      	mov	r4, r0
 80086fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008706:	6083      	str	r3, [r0, #8]
 8008708:	8181      	strh	r1, [r0, #12]
 800870a:	6643      	str	r3, [r0, #100]	; 0x64
 800870c:	81c2      	strh	r2, [r0, #14]
 800870e:	6183      	str	r3, [r0, #24]
 8008710:	4619      	mov	r1, r3
 8008712:	2208      	movs	r2, #8
 8008714:	305c      	adds	r0, #92	; 0x5c
 8008716:	f7fe faf9 	bl	8006d0c <memset>
 800871a:	4b05      	ldr	r3, [pc, #20]	; (8008730 <std+0x38>)
 800871c:	6224      	str	r4, [r4, #32]
 800871e:	6263      	str	r3, [r4, #36]	; 0x24
 8008720:	4b04      	ldr	r3, [pc, #16]	; (8008734 <std+0x3c>)
 8008722:	62a3      	str	r3, [r4, #40]	; 0x28
 8008724:	4b04      	ldr	r3, [pc, #16]	; (8008738 <std+0x40>)
 8008726:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008728:	4b04      	ldr	r3, [pc, #16]	; (800873c <std+0x44>)
 800872a:	6323      	str	r3, [r4, #48]	; 0x30
 800872c:	bd10      	pop	{r4, pc}
 800872e:	bf00      	nop
 8008730:	08009525 	.word	0x08009525
 8008734:	08009547 	.word	0x08009547
 8008738:	0800957f 	.word	0x0800957f
 800873c:	080095a3 	.word	0x080095a3

08008740 <_cleanup_r>:
 8008740:	4901      	ldr	r1, [pc, #4]	; (8008748 <_cleanup_r+0x8>)
 8008742:	f000 b8af 	b.w	80088a4 <_fwalk_reent>
 8008746:	bf00      	nop
 8008748:	08008681 	.word	0x08008681

0800874c <__sfmoreglue>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	2568      	movs	r5, #104	; 0x68
 8008750:	1e4a      	subs	r2, r1, #1
 8008752:	4355      	muls	r5, r2
 8008754:	460e      	mov	r6, r1
 8008756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800875a:	f000 fd21 	bl	80091a0 <_malloc_r>
 800875e:	4604      	mov	r4, r0
 8008760:	b140      	cbz	r0, 8008774 <__sfmoreglue+0x28>
 8008762:	2100      	movs	r1, #0
 8008764:	e9c0 1600 	strd	r1, r6, [r0]
 8008768:	300c      	adds	r0, #12
 800876a:	60a0      	str	r0, [r4, #8]
 800876c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008770:	f7fe facc 	bl	8006d0c <memset>
 8008774:	4620      	mov	r0, r4
 8008776:	bd70      	pop	{r4, r5, r6, pc}

08008778 <__sfp_lock_acquire>:
 8008778:	4801      	ldr	r0, [pc, #4]	; (8008780 <__sfp_lock_acquire+0x8>)
 800877a:	f000 b8b8 	b.w	80088ee <__retarget_lock_acquire_recursive>
 800877e:	bf00      	nop
 8008780:	20001c68 	.word	0x20001c68

08008784 <__sfp_lock_release>:
 8008784:	4801      	ldr	r0, [pc, #4]	; (800878c <__sfp_lock_release+0x8>)
 8008786:	f000 b8b3 	b.w	80088f0 <__retarget_lock_release_recursive>
 800878a:	bf00      	nop
 800878c:	20001c68 	.word	0x20001c68

08008790 <__sinit_lock_acquire>:
 8008790:	4801      	ldr	r0, [pc, #4]	; (8008798 <__sinit_lock_acquire+0x8>)
 8008792:	f000 b8ac 	b.w	80088ee <__retarget_lock_acquire_recursive>
 8008796:	bf00      	nop
 8008798:	20001c63 	.word	0x20001c63

0800879c <__sinit_lock_release>:
 800879c:	4801      	ldr	r0, [pc, #4]	; (80087a4 <__sinit_lock_release+0x8>)
 800879e:	f000 b8a7 	b.w	80088f0 <__retarget_lock_release_recursive>
 80087a2:	bf00      	nop
 80087a4:	20001c63 	.word	0x20001c63

080087a8 <__sinit>:
 80087a8:	b510      	push	{r4, lr}
 80087aa:	4604      	mov	r4, r0
 80087ac:	f7ff fff0 	bl	8008790 <__sinit_lock_acquire>
 80087b0:	69a3      	ldr	r3, [r4, #24]
 80087b2:	b11b      	cbz	r3, 80087bc <__sinit+0x14>
 80087b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b8:	f7ff bff0 	b.w	800879c <__sinit_lock_release>
 80087bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087c0:	6523      	str	r3, [r4, #80]	; 0x50
 80087c2:	4b13      	ldr	r3, [pc, #76]	; (8008810 <__sinit+0x68>)
 80087c4:	4a13      	ldr	r2, [pc, #76]	; (8008814 <__sinit+0x6c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80087ca:	42a3      	cmp	r3, r4
 80087cc:	bf08      	it	eq
 80087ce:	2301      	moveq	r3, #1
 80087d0:	4620      	mov	r0, r4
 80087d2:	bf08      	it	eq
 80087d4:	61a3      	streq	r3, [r4, #24]
 80087d6:	f000 f81f 	bl	8008818 <__sfp>
 80087da:	6060      	str	r0, [r4, #4]
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 f81b 	bl	8008818 <__sfp>
 80087e2:	60a0      	str	r0, [r4, #8]
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 f817 	bl	8008818 <__sfp>
 80087ea:	2200      	movs	r2, #0
 80087ec:	2104      	movs	r1, #4
 80087ee:	60e0      	str	r0, [r4, #12]
 80087f0:	6860      	ldr	r0, [r4, #4]
 80087f2:	f7ff ff81 	bl	80086f8 <std>
 80087f6:	2201      	movs	r2, #1
 80087f8:	2109      	movs	r1, #9
 80087fa:	68a0      	ldr	r0, [r4, #8]
 80087fc:	f7ff ff7c 	bl	80086f8 <std>
 8008800:	2202      	movs	r2, #2
 8008802:	2112      	movs	r1, #18
 8008804:	68e0      	ldr	r0, [r4, #12]
 8008806:	f7ff ff77 	bl	80086f8 <std>
 800880a:	2301      	movs	r3, #1
 800880c:	61a3      	str	r3, [r4, #24]
 800880e:	e7d1      	b.n	80087b4 <__sinit+0xc>
 8008810:	080098d0 	.word	0x080098d0
 8008814:	08008741 	.word	0x08008741

08008818 <__sfp>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	4607      	mov	r7, r0
 800881c:	f7ff ffac 	bl	8008778 <__sfp_lock_acquire>
 8008820:	4b1e      	ldr	r3, [pc, #120]	; (800889c <__sfp+0x84>)
 8008822:	681e      	ldr	r6, [r3, #0]
 8008824:	69b3      	ldr	r3, [r6, #24]
 8008826:	b913      	cbnz	r3, 800882e <__sfp+0x16>
 8008828:	4630      	mov	r0, r6
 800882a:	f7ff ffbd 	bl	80087a8 <__sinit>
 800882e:	3648      	adds	r6, #72	; 0x48
 8008830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008834:	3b01      	subs	r3, #1
 8008836:	d503      	bpl.n	8008840 <__sfp+0x28>
 8008838:	6833      	ldr	r3, [r6, #0]
 800883a:	b30b      	cbz	r3, 8008880 <__sfp+0x68>
 800883c:	6836      	ldr	r6, [r6, #0]
 800883e:	e7f7      	b.n	8008830 <__sfp+0x18>
 8008840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008844:	b9d5      	cbnz	r5, 800887c <__sfp+0x64>
 8008846:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <__sfp+0x88>)
 8008848:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800884c:	60e3      	str	r3, [r4, #12]
 800884e:	6665      	str	r5, [r4, #100]	; 0x64
 8008850:	f000 f84c 	bl	80088ec <__retarget_lock_init_recursive>
 8008854:	f7ff ff96 	bl	8008784 <__sfp_lock_release>
 8008858:	2208      	movs	r2, #8
 800885a:	4629      	mov	r1, r5
 800885c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008864:	6025      	str	r5, [r4, #0]
 8008866:	61a5      	str	r5, [r4, #24]
 8008868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800886c:	f7fe fa4e 	bl	8006d0c <memset>
 8008870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008878:	4620      	mov	r0, r4
 800887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800887c:	3468      	adds	r4, #104	; 0x68
 800887e:	e7d9      	b.n	8008834 <__sfp+0x1c>
 8008880:	2104      	movs	r1, #4
 8008882:	4638      	mov	r0, r7
 8008884:	f7ff ff62 	bl	800874c <__sfmoreglue>
 8008888:	4604      	mov	r4, r0
 800888a:	6030      	str	r0, [r6, #0]
 800888c:	2800      	cmp	r0, #0
 800888e:	d1d5      	bne.n	800883c <__sfp+0x24>
 8008890:	f7ff ff78 	bl	8008784 <__sfp_lock_release>
 8008894:	230c      	movs	r3, #12
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	e7ee      	b.n	8008878 <__sfp+0x60>
 800889a:	bf00      	nop
 800889c:	080098d0 	.word	0x080098d0
 80088a0:	ffff0001 	.word	0xffff0001

080088a4 <_fwalk_reent>:
 80088a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a8:	4606      	mov	r6, r0
 80088aa:	4688      	mov	r8, r1
 80088ac:	2700      	movs	r7, #0
 80088ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088b6:	f1b9 0901 	subs.w	r9, r9, #1
 80088ba:	d505      	bpl.n	80088c8 <_fwalk_reent+0x24>
 80088bc:	6824      	ldr	r4, [r4, #0]
 80088be:	2c00      	cmp	r4, #0
 80088c0:	d1f7      	bne.n	80088b2 <_fwalk_reent+0xe>
 80088c2:	4638      	mov	r0, r7
 80088c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c8:	89ab      	ldrh	r3, [r5, #12]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d907      	bls.n	80088de <_fwalk_reent+0x3a>
 80088ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088d2:	3301      	adds	r3, #1
 80088d4:	d003      	beq.n	80088de <_fwalk_reent+0x3a>
 80088d6:	4629      	mov	r1, r5
 80088d8:	4630      	mov	r0, r6
 80088da:	47c0      	blx	r8
 80088dc:	4307      	orrs	r7, r0
 80088de:	3568      	adds	r5, #104	; 0x68
 80088e0:	e7e9      	b.n	80088b6 <_fwalk_reent+0x12>
	...

080088e4 <_localeconv_r>:
 80088e4:	4800      	ldr	r0, [pc, #0]	; (80088e8 <_localeconv_r+0x4>)
 80088e6:	4770      	bx	lr
 80088e8:	20000164 	.word	0x20000164

080088ec <__retarget_lock_init_recursive>:
 80088ec:	4770      	bx	lr

080088ee <__retarget_lock_acquire_recursive>:
 80088ee:	4770      	bx	lr

080088f0 <__retarget_lock_release_recursive>:
 80088f0:	4770      	bx	lr

080088f2 <__swhatbuf_r>:
 80088f2:	b570      	push	{r4, r5, r6, lr}
 80088f4:	460e      	mov	r6, r1
 80088f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fa:	4614      	mov	r4, r2
 80088fc:	2900      	cmp	r1, #0
 80088fe:	461d      	mov	r5, r3
 8008900:	b096      	sub	sp, #88	; 0x58
 8008902:	da07      	bge.n	8008914 <__swhatbuf_r+0x22>
 8008904:	2300      	movs	r3, #0
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	89b3      	ldrh	r3, [r6, #12]
 800890a:	061a      	lsls	r2, r3, #24
 800890c:	d410      	bmi.n	8008930 <__swhatbuf_r+0x3e>
 800890e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008912:	e00e      	b.n	8008932 <__swhatbuf_r+0x40>
 8008914:	466a      	mov	r2, sp
 8008916:	f000 fe9b 	bl	8009650 <_fstat_r>
 800891a:	2800      	cmp	r0, #0
 800891c:	dbf2      	blt.n	8008904 <__swhatbuf_r+0x12>
 800891e:	9a01      	ldr	r2, [sp, #4]
 8008920:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008924:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008928:	425a      	negs	r2, r3
 800892a:	415a      	adcs	r2, r3
 800892c:	602a      	str	r2, [r5, #0]
 800892e:	e7ee      	b.n	800890e <__swhatbuf_r+0x1c>
 8008930:	2340      	movs	r3, #64	; 0x40
 8008932:	2000      	movs	r0, #0
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	b016      	add	sp, #88	; 0x58
 8008938:	bd70      	pop	{r4, r5, r6, pc}
	...

0800893c <__smakebuf_r>:
 800893c:	898b      	ldrh	r3, [r1, #12]
 800893e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008940:	079d      	lsls	r5, r3, #30
 8008942:	4606      	mov	r6, r0
 8008944:	460c      	mov	r4, r1
 8008946:	d507      	bpl.n	8008958 <__smakebuf_r+0x1c>
 8008948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	6123      	str	r3, [r4, #16]
 8008950:	2301      	movs	r3, #1
 8008952:	6163      	str	r3, [r4, #20]
 8008954:	b002      	add	sp, #8
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	466a      	mov	r2, sp
 800895a:	ab01      	add	r3, sp, #4
 800895c:	f7ff ffc9 	bl	80088f2 <__swhatbuf_r>
 8008960:	9900      	ldr	r1, [sp, #0]
 8008962:	4605      	mov	r5, r0
 8008964:	4630      	mov	r0, r6
 8008966:	f000 fc1b 	bl	80091a0 <_malloc_r>
 800896a:	b948      	cbnz	r0, 8008980 <__smakebuf_r+0x44>
 800896c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008970:	059a      	lsls	r2, r3, #22
 8008972:	d4ef      	bmi.n	8008954 <__smakebuf_r+0x18>
 8008974:	f023 0303 	bic.w	r3, r3, #3
 8008978:	f043 0302 	orr.w	r3, r3, #2
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	e7e3      	b.n	8008948 <__smakebuf_r+0xc>
 8008980:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <__smakebuf_r+0x7c>)
 8008982:	62b3      	str	r3, [r6, #40]	; 0x28
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	6020      	str	r0, [r4, #0]
 8008988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	9b00      	ldr	r3, [sp, #0]
 8008990:	6120      	str	r0, [r4, #16]
 8008992:	6163      	str	r3, [r4, #20]
 8008994:	9b01      	ldr	r3, [sp, #4]
 8008996:	b15b      	cbz	r3, 80089b0 <__smakebuf_r+0x74>
 8008998:	4630      	mov	r0, r6
 800899a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800899e:	f000 fe69 	bl	8009674 <_isatty_r>
 80089a2:	b128      	cbz	r0, 80089b0 <__smakebuf_r+0x74>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	f023 0303 	bic.w	r3, r3, #3
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	89a0      	ldrh	r0, [r4, #12]
 80089b2:	4305      	orrs	r5, r0
 80089b4:	81a5      	strh	r5, [r4, #12]
 80089b6:	e7cd      	b.n	8008954 <__smakebuf_r+0x18>
 80089b8:	08008741 	.word	0x08008741

080089bc <malloc>:
 80089bc:	4b02      	ldr	r3, [pc, #8]	; (80089c8 <malloc+0xc>)
 80089be:	4601      	mov	r1, r0
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f000 bbed 	b.w	80091a0 <_malloc_r>
 80089c6:	bf00      	nop
 80089c8:	20000010 	.word	0x20000010

080089cc <memchr>:
 80089cc:	4603      	mov	r3, r0
 80089ce:	b510      	push	{r4, lr}
 80089d0:	b2c9      	uxtb	r1, r1
 80089d2:	4402      	add	r2, r0
 80089d4:	4293      	cmp	r3, r2
 80089d6:	4618      	mov	r0, r3
 80089d8:	d101      	bne.n	80089de <memchr+0x12>
 80089da:	2000      	movs	r0, #0
 80089dc:	e003      	b.n	80089e6 <memchr+0x1a>
 80089de:	7804      	ldrb	r4, [r0, #0]
 80089e0:	3301      	adds	r3, #1
 80089e2:	428c      	cmp	r4, r1
 80089e4:	d1f6      	bne.n	80089d4 <memchr+0x8>
 80089e6:	bd10      	pop	{r4, pc}

080089e8 <_Balloc>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089ec:	4604      	mov	r4, r0
 80089ee:	460d      	mov	r5, r1
 80089f0:	b976      	cbnz	r6, 8008a10 <_Balloc+0x28>
 80089f2:	2010      	movs	r0, #16
 80089f4:	f7ff ffe2 	bl	80089bc <malloc>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6260      	str	r0, [r4, #36]	; 0x24
 80089fc:	b920      	cbnz	r0, 8008a08 <_Balloc+0x20>
 80089fe:	2166      	movs	r1, #102	; 0x66
 8008a00:	4b17      	ldr	r3, [pc, #92]	; (8008a60 <_Balloc+0x78>)
 8008a02:	4818      	ldr	r0, [pc, #96]	; (8008a64 <_Balloc+0x7c>)
 8008a04:	f000 fde4 	bl	80095d0 <__assert_func>
 8008a08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a0c:	6006      	str	r6, [r0, #0]
 8008a0e:	60c6      	str	r6, [r0, #12]
 8008a10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a12:	68f3      	ldr	r3, [r6, #12]
 8008a14:	b183      	cbz	r3, 8008a38 <_Balloc+0x50>
 8008a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a1e:	b9b8      	cbnz	r0, 8008a50 <_Balloc+0x68>
 8008a20:	2101      	movs	r1, #1
 8008a22:	fa01 f605 	lsl.w	r6, r1, r5
 8008a26:	1d72      	adds	r2, r6, #5
 8008a28:	4620      	mov	r0, r4
 8008a2a:	0092      	lsls	r2, r2, #2
 8008a2c:	f000 fb5e 	bl	80090ec <_calloc_r>
 8008a30:	b160      	cbz	r0, 8008a4c <_Balloc+0x64>
 8008a32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a36:	e00e      	b.n	8008a56 <_Balloc+0x6e>
 8008a38:	2221      	movs	r2, #33	; 0x21
 8008a3a:	2104      	movs	r1, #4
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f000 fb55 	bl	80090ec <_calloc_r>
 8008a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a44:	60f0      	str	r0, [r6, #12]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e4      	bne.n	8008a16 <_Balloc+0x2e>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}
 8008a50:	6802      	ldr	r2, [r0, #0]
 8008a52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a56:	2300      	movs	r3, #0
 8008a58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a5c:	e7f7      	b.n	8008a4e <_Balloc+0x66>
 8008a5e:	bf00      	nop
 8008a60:	08009915 	.word	0x08009915
 8008a64:	080099fc 	.word	0x080099fc

08008a68 <_Bfree>:
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	b976      	cbnz	r6, 8008a90 <_Bfree+0x28>
 8008a72:	2010      	movs	r0, #16
 8008a74:	f7ff ffa2 	bl	80089bc <malloc>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	6268      	str	r0, [r5, #36]	; 0x24
 8008a7c:	b920      	cbnz	r0, 8008a88 <_Bfree+0x20>
 8008a7e:	218a      	movs	r1, #138	; 0x8a
 8008a80:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <_Bfree+0x3c>)
 8008a82:	4809      	ldr	r0, [pc, #36]	; (8008aa8 <_Bfree+0x40>)
 8008a84:	f000 fda4 	bl	80095d0 <__assert_func>
 8008a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a8c:	6006      	str	r6, [r0, #0]
 8008a8e:	60c6      	str	r6, [r0, #12]
 8008a90:	b13c      	cbz	r4, 8008aa2 <_Bfree+0x3a>
 8008a92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a94:	6862      	ldr	r2, [r4, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a9c:	6021      	str	r1, [r4, #0]
 8008a9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	08009915 	.word	0x08009915
 8008aa8:	080099fc 	.word	0x080099fc

08008aac <__multadd>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	4698      	mov	r8, r3
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	690e      	ldr	r6, [r1, #16]
 8008ab8:	4607      	mov	r7, r0
 8008aba:	f101 0014 	add.w	r0, r1, #20
 8008abe:	6805      	ldr	r5, [r0, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	b2a9      	uxth	r1, r5
 8008ac4:	fb02 8101 	mla	r1, r2, r1, r8
 8008ac8:	0c2d      	lsrs	r5, r5, #16
 8008aca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008ace:	fb02 c505 	mla	r5, r2, r5, ip
 8008ad2:	b289      	uxth	r1, r1
 8008ad4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ad8:	429e      	cmp	r6, r3
 8008ada:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008ade:	f840 1b04 	str.w	r1, [r0], #4
 8008ae2:	dcec      	bgt.n	8008abe <__multadd+0x12>
 8008ae4:	f1b8 0f00 	cmp.w	r8, #0
 8008ae8:	d022      	beq.n	8008b30 <__multadd+0x84>
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	42b3      	cmp	r3, r6
 8008aee:	dc19      	bgt.n	8008b24 <__multadd+0x78>
 8008af0:	6861      	ldr	r1, [r4, #4]
 8008af2:	4638      	mov	r0, r7
 8008af4:	3101      	adds	r1, #1
 8008af6:	f7ff ff77 	bl	80089e8 <_Balloc>
 8008afa:	4605      	mov	r5, r0
 8008afc:	b928      	cbnz	r0, 8008b0a <__multadd+0x5e>
 8008afe:	4602      	mov	r2, r0
 8008b00:	21b5      	movs	r1, #181	; 0xb5
 8008b02:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <__multadd+0x8c>)
 8008b04:	480d      	ldr	r0, [pc, #52]	; (8008b3c <__multadd+0x90>)
 8008b06:	f000 fd63 	bl	80095d0 <__assert_func>
 8008b0a:	6922      	ldr	r2, [r4, #16]
 8008b0c:	f104 010c 	add.w	r1, r4, #12
 8008b10:	3202      	adds	r2, #2
 8008b12:	0092      	lsls	r2, r2, #2
 8008b14:	300c      	adds	r0, #12
 8008b16:	f7fe f8eb 	bl	8006cf0 <memcpy>
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f7ff ffa3 	bl	8008a68 <_Bfree>
 8008b22:	462c      	mov	r4, r5
 8008b24:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008b28:	3601      	adds	r6, #1
 8008b2a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008b2e:	6126      	str	r6, [r4, #16]
 8008b30:	4620      	mov	r0, r4
 8008b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b36:	bf00      	nop
 8008b38:	0800998b 	.word	0x0800998b
 8008b3c:	080099fc 	.word	0x080099fc

08008b40 <__hi0bits>:
 8008b40:	0c02      	lsrs	r2, r0, #16
 8008b42:	0412      	lsls	r2, r2, #16
 8008b44:	4603      	mov	r3, r0
 8008b46:	b9ca      	cbnz	r2, 8008b7c <__hi0bits+0x3c>
 8008b48:	0403      	lsls	r3, r0, #16
 8008b4a:	2010      	movs	r0, #16
 8008b4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b50:	bf04      	itt	eq
 8008b52:	021b      	lsleq	r3, r3, #8
 8008b54:	3008      	addeq	r0, #8
 8008b56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b5a:	bf04      	itt	eq
 8008b5c:	011b      	lsleq	r3, r3, #4
 8008b5e:	3004      	addeq	r0, #4
 8008b60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b64:	bf04      	itt	eq
 8008b66:	009b      	lsleq	r3, r3, #2
 8008b68:	3002      	addeq	r0, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	db05      	blt.n	8008b7a <__hi0bits+0x3a>
 8008b6e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008b72:	f100 0001 	add.w	r0, r0, #1
 8008b76:	bf08      	it	eq
 8008b78:	2020      	moveq	r0, #32
 8008b7a:	4770      	bx	lr
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e7e5      	b.n	8008b4c <__hi0bits+0xc>

08008b80 <__lo0bits>:
 8008b80:	6803      	ldr	r3, [r0, #0]
 8008b82:	4602      	mov	r2, r0
 8008b84:	f013 0007 	ands.w	r0, r3, #7
 8008b88:	d00b      	beq.n	8008ba2 <__lo0bits+0x22>
 8008b8a:	07d9      	lsls	r1, r3, #31
 8008b8c:	d422      	bmi.n	8008bd4 <__lo0bits+0x54>
 8008b8e:	0798      	lsls	r0, r3, #30
 8008b90:	bf49      	itett	mi
 8008b92:	085b      	lsrmi	r3, r3, #1
 8008b94:	089b      	lsrpl	r3, r3, #2
 8008b96:	2001      	movmi	r0, #1
 8008b98:	6013      	strmi	r3, [r2, #0]
 8008b9a:	bf5c      	itt	pl
 8008b9c:	2002      	movpl	r0, #2
 8008b9e:	6013      	strpl	r3, [r2, #0]
 8008ba0:	4770      	bx	lr
 8008ba2:	b299      	uxth	r1, r3
 8008ba4:	b909      	cbnz	r1, 8008baa <__lo0bits+0x2a>
 8008ba6:	2010      	movs	r0, #16
 8008ba8:	0c1b      	lsrs	r3, r3, #16
 8008baa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008bae:	bf04      	itt	eq
 8008bb0:	0a1b      	lsreq	r3, r3, #8
 8008bb2:	3008      	addeq	r0, #8
 8008bb4:	0719      	lsls	r1, r3, #28
 8008bb6:	bf04      	itt	eq
 8008bb8:	091b      	lsreq	r3, r3, #4
 8008bba:	3004      	addeq	r0, #4
 8008bbc:	0799      	lsls	r1, r3, #30
 8008bbe:	bf04      	itt	eq
 8008bc0:	089b      	lsreq	r3, r3, #2
 8008bc2:	3002      	addeq	r0, #2
 8008bc4:	07d9      	lsls	r1, r3, #31
 8008bc6:	d403      	bmi.n	8008bd0 <__lo0bits+0x50>
 8008bc8:	085b      	lsrs	r3, r3, #1
 8008bca:	f100 0001 	add.w	r0, r0, #1
 8008bce:	d003      	beq.n	8008bd8 <__lo0bits+0x58>
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	4770      	bx	lr
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	4770      	bx	lr
 8008bd8:	2020      	movs	r0, #32
 8008bda:	4770      	bx	lr

08008bdc <__i2b>:
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	460c      	mov	r4, r1
 8008be0:	2101      	movs	r1, #1
 8008be2:	f7ff ff01 	bl	80089e8 <_Balloc>
 8008be6:	4602      	mov	r2, r0
 8008be8:	b928      	cbnz	r0, 8008bf6 <__i2b+0x1a>
 8008bea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008bee:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <__i2b+0x24>)
 8008bf0:	4804      	ldr	r0, [pc, #16]	; (8008c04 <__i2b+0x28>)
 8008bf2:	f000 fced 	bl	80095d0 <__assert_func>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	6144      	str	r4, [r0, #20]
 8008bfa:	6103      	str	r3, [r0, #16]
 8008bfc:	bd10      	pop	{r4, pc}
 8008bfe:	bf00      	nop
 8008c00:	0800998b 	.word	0x0800998b
 8008c04:	080099fc 	.word	0x080099fc

08008c08 <__multiply>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	690a      	ldr	r2, [r1, #16]
 8008c10:	6923      	ldr	r3, [r4, #16]
 8008c12:	460d      	mov	r5, r1
 8008c14:	429a      	cmp	r2, r3
 8008c16:	bfbe      	ittt	lt
 8008c18:	460b      	movlt	r3, r1
 8008c1a:	4625      	movlt	r5, r4
 8008c1c:	461c      	movlt	r4, r3
 8008c1e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008c22:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008c26:	68ab      	ldr	r3, [r5, #8]
 8008c28:	6869      	ldr	r1, [r5, #4]
 8008c2a:	eb0a 0709 	add.w	r7, sl, r9
 8008c2e:	42bb      	cmp	r3, r7
 8008c30:	b085      	sub	sp, #20
 8008c32:	bfb8      	it	lt
 8008c34:	3101      	addlt	r1, #1
 8008c36:	f7ff fed7 	bl	80089e8 <_Balloc>
 8008c3a:	b930      	cbnz	r0, 8008c4a <__multiply+0x42>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	f240 115d 	movw	r1, #349	; 0x15d
 8008c42:	4b41      	ldr	r3, [pc, #260]	; (8008d48 <__multiply+0x140>)
 8008c44:	4841      	ldr	r0, [pc, #260]	; (8008d4c <__multiply+0x144>)
 8008c46:	f000 fcc3 	bl	80095d0 <__assert_func>
 8008c4a:	f100 0614 	add.w	r6, r0, #20
 8008c4e:	4633      	mov	r3, r6
 8008c50:	2200      	movs	r2, #0
 8008c52:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008c56:	4543      	cmp	r3, r8
 8008c58:	d31e      	bcc.n	8008c98 <__multiply+0x90>
 8008c5a:	f105 0c14 	add.w	ip, r5, #20
 8008c5e:	f104 0314 	add.w	r3, r4, #20
 8008c62:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008c66:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008c6a:	9202      	str	r2, [sp, #8]
 8008c6c:	ebac 0205 	sub.w	r2, ip, r5
 8008c70:	3a15      	subs	r2, #21
 8008c72:	f022 0203 	bic.w	r2, r2, #3
 8008c76:	3204      	adds	r2, #4
 8008c78:	f105 0115 	add.w	r1, r5, #21
 8008c7c:	458c      	cmp	ip, r1
 8008c7e:	bf38      	it	cc
 8008c80:	2204      	movcc	r2, #4
 8008c82:	9201      	str	r2, [sp, #4]
 8008c84:	9a02      	ldr	r2, [sp, #8]
 8008c86:	9303      	str	r3, [sp, #12]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d808      	bhi.n	8008c9e <__multiply+0x96>
 8008c8c:	2f00      	cmp	r7, #0
 8008c8e:	dc55      	bgt.n	8008d3c <__multiply+0x134>
 8008c90:	6107      	str	r7, [r0, #16]
 8008c92:	b005      	add	sp, #20
 8008c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c98:	f843 2b04 	str.w	r2, [r3], #4
 8008c9c:	e7db      	b.n	8008c56 <__multiply+0x4e>
 8008c9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ca2:	f1ba 0f00 	cmp.w	sl, #0
 8008ca6:	d020      	beq.n	8008cea <__multiply+0xe2>
 8008ca8:	46b1      	mov	r9, r6
 8008caa:	2200      	movs	r2, #0
 8008cac:	f105 0e14 	add.w	lr, r5, #20
 8008cb0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008cb4:	f8d9 b000 	ldr.w	fp, [r9]
 8008cb8:	b2a1      	uxth	r1, r4
 8008cba:	fa1f fb8b 	uxth.w	fp, fp
 8008cbe:	fb0a b101 	mla	r1, sl, r1, fp
 8008cc2:	4411      	add	r1, r2
 8008cc4:	f8d9 2000 	ldr.w	r2, [r9]
 8008cc8:	0c24      	lsrs	r4, r4, #16
 8008cca:	0c12      	lsrs	r2, r2, #16
 8008ccc:	fb0a 2404 	mla	r4, sl, r4, r2
 8008cd0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008cd4:	b289      	uxth	r1, r1
 8008cd6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008cda:	45f4      	cmp	ip, lr
 8008cdc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008ce0:	f849 1b04 	str.w	r1, [r9], #4
 8008ce4:	d8e4      	bhi.n	8008cb0 <__multiply+0xa8>
 8008ce6:	9901      	ldr	r1, [sp, #4]
 8008ce8:	5072      	str	r2, [r6, r1]
 8008cea:	9a03      	ldr	r2, [sp, #12]
 8008cec:	3304      	adds	r3, #4
 8008cee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cf2:	f1b9 0f00 	cmp.w	r9, #0
 8008cf6:	d01f      	beq.n	8008d38 <__multiply+0x130>
 8008cf8:	46b6      	mov	lr, r6
 8008cfa:	f04f 0a00 	mov.w	sl, #0
 8008cfe:	6834      	ldr	r4, [r6, #0]
 8008d00:	f105 0114 	add.w	r1, r5, #20
 8008d04:	880a      	ldrh	r2, [r1, #0]
 8008d06:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008d0a:	b2a4      	uxth	r4, r4
 8008d0c:	fb09 b202 	mla	r2, r9, r2, fp
 8008d10:	4492      	add	sl, r2
 8008d12:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008d16:	f84e 4b04 	str.w	r4, [lr], #4
 8008d1a:	f851 4b04 	ldr.w	r4, [r1], #4
 8008d1e:	f8be 2000 	ldrh.w	r2, [lr]
 8008d22:	0c24      	lsrs	r4, r4, #16
 8008d24:	fb09 2404 	mla	r4, r9, r4, r2
 8008d28:	458c      	cmp	ip, r1
 8008d2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008d2e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d32:	d8e7      	bhi.n	8008d04 <__multiply+0xfc>
 8008d34:	9a01      	ldr	r2, [sp, #4]
 8008d36:	50b4      	str	r4, [r6, r2]
 8008d38:	3604      	adds	r6, #4
 8008d3a:	e7a3      	b.n	8008c84 <__multiply+0x7c>
 8008d3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1a5      	bne.n	8008c90 <__multiply+0x88>
 8008d44:	3f01      	subs	r7, #1
 8008d46:	e7a1      	b.n	8008c8c <__multiply+0x84>
 8008d48:	0800998b 	.word	0x0800998b
 8008d4c:	080099fc 	.word	0x080099fc

08008d50 <__pow5mult>:
 8008d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	4615      	mov	r5, r2
 8008d56:	f012 0203 	ands.w	r2, r2, #3
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	d007      	beq.n	8008d70 <__pow5mult+0x20>
 8008d60:	4c25      	ldr	r4, [pc, #148]	; (8008df8 <__pow5mult+0xa8>)
 8008d62:	3a01      	subs	r2, #1
 8008d64:	2300      	movs	r3, #0
 8008d66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d6a:	f7ff fe9f 	bl	8008aac <__multadd>
 8008d6e:	4607      	mov	r7, r0
 8008d70:	10ad      	asrs	r5, r5, #2
 8008d72:	d03d      	beq.n	8008df0 <__pow5mult+0xa0>
 8008d74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d76:	b97c      	cbnz	r4, 8008d98 <__pow5mult+0x48>
 8008d78:	2010      	movs	r0, #16
 8008d7a:	f7ff fe1f 	bl	80089bc <malloc>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	6270      	str	r0, [r6, #36]	; 0x24
 8008d82:	b928      	cbnz	r0, 8008d90 <__pow5mult+0x40>
 8008d84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d88:	4b1c      	ldr	r3, [pc, #112]	; (8008dfc <__pow5mult+0xac>)
 8008d8a:	481d      	ldr	r0, [pc, #116]	; (8008e00 <__pow5mult+0xb0>)
 8008d8c:	f000 fc20 	bl	80095d0 <__assert_func>
 8008d90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d94:	6004      	str	r4, [r0, #0]
 8008d96:	60c4      	str	r4, [r0, #12]
 8008d98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008da0:	b94c      	cbnz	r4, 8008db6 <__pow5mult+0x66>
 8008da2:	f240 2171 	movw	r1, #625	; 0x271
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7ff ff18 	bl	8008bdc <__i2b>
 8008dac:	2300      	movs	r3, #0
 8008dae:	4604      	mov	r4, r0
 8008db0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008db4:	6003      	str	r3, [r0, #0]
 8008db6:	f04f 0900 	mov.w	r9, #0
 8008dba:	07eb      	lsls	r3, r5, #31
 8008dbc:	d50a      	bpl.n	8008dd4 <__pow5mult+0x84>
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7ff ff20 	bl	8008c08 <__multiply>
 8008dc8:	4680      	mov	r8, r0
 8008dca:	4639      	mov	r1, r7
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f7ff fe4b 	bl	8008a68 <_Bfree>
 8008dd2:	4647      	mov	r7, r8
 8008dd4:	106d      	asrs	r5, r5, #1
 8008dd6:	d00b      	beq.n	8008df0 <__pow5mult+0xa0>
 8008dd8:	6820      	ldr	r0, [r4, #0]
 8008dda:	b938      	cbnz	r0, 8008dec <__pow5mult+0x9c>
 8008ddc:	4622      	mov	r2, r4
 8008dde:	4621      	mov	r1, r4
 8008de0:	4630      	mov	r0, r6
 8008de2:	f7ff ff11 	bl	8008c08 <__multiply>
 8008de6:	6020      	str	r0, [r4, #0]
 8008de8:	f8c0 9000 	str.w	r9, [r0]
 8008dec:	4604      	mov	r4, r0
 8008dee:	e7e4      	b.n	8008dba <__pow5mult+0x6a>
 8008df0:	4638      	mov	r0, r7
 8008df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008df6:	bf00      	nop
 8008df8:	08009b50 	.word	0x08009b50
 8008dfc:	08009915 	.word	0x08009915
 8008e00:	080099fc 	.word	0x080099fc

08008e04 <__lshift>:
 8008e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e08:	460c      	mov	r4, r1
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	4691      	mov	r9, r2
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	6849      	ldr	r1, [r1, #4]
 8008e12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e16:	68a3      	ldr	r3, [r4, #8]
 8008e18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e1c:	f108 0601 	add.w	r6, r8, #1
 8008e20:	42b3      	cmp	r3, r6
 8008e22:	db0b      	blt.n	8008e3c <__lshift+0x38>
 8008e24:	4638      	mov	r0, r7
 8008e26:	f7ff fddf 	bl	80089e8 <_Balloc>
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	b948      	cbnz	r0, 8008e42 <__lshift+0x3e>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e34:	4b27      	ldr	r3, [pc, #156]	; (8008ed4 <__lshift+0xd0>)
 8008e36:	4828      	ldr	r0, [pc, #160]	; (8008ed8 <__lshift+0xd4>)
 8008e38:	f000 fbca 	bl	80095d0 <__assert_func>
 8008e3c:	3101      	adds	r1, #1
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	e7ee      	b.n	8008e20 <__lshift+0x1c>
 8008e42:	2300      	movs	r3, #0
 8008e44:	f100 0114 	add.w	r1, r0, #20
 8008e48:	f100 0210 	add.w	r2, r0, #16
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	4553      	cmp	r3, sl
 8008e50:	db33      	blt.n	8008eba <__lshift+0xb6>
 8008e52:	6920      	ldr	r0, [r4, #16]
 8008e54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e58:	f104 0314 	add.w	r3, r4, #20
 8008e5c:	f019 091f 	ands.w	r9, r9, #31
 8008e60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e68:	d02b      	beq.n	8008ec2 <__lshift+0xbe>
 8008e6a:	468a      	mov	sl, r1
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f1c9 0e20 	rsb	lr, r9, #32
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	fa00 f009 	lsl.w	r0, r0, r9
 8008e78:	4302      	orrs	r2, r0
 8008e7a:	f84a 2b04 	str.w	r2, [sl], #4
 8008e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e82:	459c      	cmp	ip, r3
 8008e84:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e88:	d8f3      	bhi.n	8008e72 <__lshift+0x6e>
 8008e8a:	ebac 0304 	sub.w	r3, ip, r4
 8008e8e:	3b15      	subs	r3, #21
 8008e90:	f023 0303 	bic.w	r3, r3, #3
 8008e94:	3304      	adds	r3, #4
 8008e96:	f104 0015 	add.w	r0, r4, #21
 8008e9a:	4584      	cmp	ip, r0
 8008e9c:	bf38      	it	cc
 8008e9e:	2304      	movcc	r3, #4
 8008ea0:	50ca      	str	r2, [r1, r3]
 8008ea2:	b10a      	cbz	r2, 8008ea8 <__lshift+0xa4>
 8008ea4:	f108 0602 	add.w	r6, r8, #2
 8008ea8:	3e01      	subs	r6, #1
 8008eaa:	4638      	mov	r0, r7
 8008eac:	4621      	mov	r1, r4
 8008eae:	612e      	str	r6, [r5, #16]
 8008eb0:	f7ff fdda 	bl	8008a68 <_Bfree>
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eba:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	e7c5      	b.n	8008e4e <__lshift+0x4a>
 8008ec2:	3904      	subs	r1, #4
 8008ec4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ec8:	459c      	cmp	ip, r3
 8008eca:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ece:	d8f9      	bhi.n	8008ec4 <__lshift+0xc0>
 8008ed0:	e7ea      	b.n	8008ea8 <__lshift+0xa4>
 8008ed2:	bf00      	nop
 8008ed4:	0800998b 	.word	0x0800998b
 8008ed8:	080099fc 	.word	0x080099fc

08008edc <__mcmp>:
 8008edc:	4603      	mov	r3, r0
 8008ede:	690a      	ldr	r2, [r1, #16]
 8008ee0:	6900      	ldr	r0, [r0, #16]
 8008ee2:	b530      	push	{r4, r5, lr}
 8008ee4:	1a80      	subs	r0, r0, r2
 8008ee6:	d10d      	bne.n	8008f04 <__mcmp+0x28>
 8008ee8:	3314      	adds	r3, #20
 8008eea:	3114      	adds	r1, #20
 8008eec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ef0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ef4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ef8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008efc:	4295      	cmp	r5, r2
 8008efe:	d002      	beq.n	8008f06 <__mcmp+0x2a>
 8008f00:	d304      	bcc.n	8008f0c <__mcmp+0x30>
 8008f02:	2001      	movs	r0, #1
 8008f04:	bd30      	pop	{r4, r5, pc}
 8008f06:	42a3      	cmp	r3, r4
 8008f08:	d3f4      	bcc.n	8008ef4 <__mcmp+0x18>
 8008f0a:	e7fb      	b.n	8008f04 <__mcmp+0x28>
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f10:	e7f8      	b.n	8008f04 <__mcmp+0x28>
	...

08008f14 <__mdiff>:
 8008f14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	460c      	mov	r4, r1
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4620      	mov	r0, r4
 8008f20:	4692      	mov	sl, r2
 8008f22:	f7ff ffdb 	bl	8008edc <__mcmp>
 8008f26:	1e05      	subs	r5, r0, #0
 8008f28:	d111      	bne.n	8008f4e <__mdiff+0x3a>
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7ff fd5b 	bl	80089e8 <_Balloc>
 8008f32:	4602      	mov	r2, r0
 8008f34:	b928      	cbnz	r0, 8008f42 <__mdiff+0x2e>
 8008f36:	f240 2132 	movw	r1, #562	; 0x232
 8008f3a:	4b3c      	ldr	r3, [pc, #240]	; (800902c <__mdiff+0x118>)
 8008f3c:	483c      	ldr	r0, [pc, #240]	; (8009030 <__mdiff+0x11c>)
 8008f3e:	f000 fb47 	bl	80095d0 <__assert_func>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f48:	4610      	mov	r0, r2
 8008f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4e:	bfa4      	itt	ge
 8008f50:	4653      	movge	r3, sl
 8008f52:	46a2      	movge	sl, r4
 8008f54:	4630      	mov	r0, r6
 8008f56:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008f5a:	bfa6      	itte	ge
 8008f5c:	461c      	movge	r4, r3
 8008f5e:	2500      	movge	r5, #0
 8008f60:	2501      	movlt	r5, #1
 8008f62:	f7ff fd41 	bl	80089e8 <_Balloc>
 8008f66:	4602      	mov	r2, r0
 8008f68:	b918      	cbnz	r0, 8008f72 <__mdiff+0x5e>
 8008f6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f6e:	4b2f      	ldr	r3, [pc, #188]	; (800902c <__mdiff+0x118>)
 8008f70:	e7e4      	b.n	8008f3c <__mdiff+0x28>
 8008f72:	f100 0814 	add.w	r8, r0, #20
 8008f76:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008f7a:	60c5      	str	r5, [r0, #12]
 8008f7c:	f04f 0c00 	mov.w	ip, #0
 8008f80:	f10a 0514 	add.w	r5, sl, #20
 8008f84:	f10a 0010 	add.w	r0, sl, #16
 8008f88:	46c2      	mov	sl, r8
 8008f8a:	6926      	ldr	r6, [r4, #16]
 8008f8c:	f104 0914 	add.w	r9, r4, #20
 8008f90:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008f94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f98:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008f9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fa0:	fa1f f18b 	uxth.w	r1, fp
 8008fa4:	4461      	add	r1, ip
 8008fa6:	fa1f fc83 	uxth.w	ip, r3
 8008faa:	0c1b      	lsrs	r3, r3, #16
 8008fac:	eba1 010c 	sub.w	r1, r1, ip
 8008fb0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fb4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008fb8:	b289      	uxth	r1, r1
 8008fba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008fbe:	454e      	cmp	r6, r9
 8008fc0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008fc4:	f84a 3b04 	str.w	r3, [sl], #4
 8008fc8:	d8e6      	bhi.n	8008f98 <__mdiff+0x84>
 8008fca:	1b33      	subs	r3, r6, r4
 8008fcc:	3b15      	subs	r3, #21
 8008fce:	f023 0303 	bic.w	r3, r3, #3
 8008fd2:	3415      	adds	r4, #21
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	42a6      	cmp	r6, r4
 8008fd8:	bf38      	it	cc
 8008fda:	2304      	movcc	r3, #4
 8008fdc:	441d      	add	r5, r3
 8008fde:	4443      	add	r3, r8
 8008fe0:	461e      	mov	r6, r3
 8008fe2:	462c      	mov	r4, r5
 8008fe4:	4574      	cmp	r4, lr
 8008fe6:	d30e      	bcc.n	8009006 <__mdiff+0xf2>
 8008fe8:	f10e 0103 	add.w	r1, lr, #3
 8008fec:	1b49      	subs	r1, r1, r5
 8008fee:	f021 0103 	bic.w	r1, r1, #3
 8008ff2:	3d03      	subs	r5, #3
 8008ff4:	45ae      	cmp	lr, r5
 8008ff6:	bf38      	it	cc
 8008ff8:	2100      	movcc	r1, #0
 8008ffa:	4419      	add	r1, r3
 8008ffc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009000:	b18b      	cbz	r3, 8009026 <__mdiff+0x112>
 8009002:	6117      	str	r7, [r2, #16]
 8009004:	e7a0      	b.n	8008f48 <__mdiff+0x34>
 8009006:	f854 8b04 	ldr.w	r8, [r4], #4
 800900a:	fa1f f188 	uxth.w	r1, r8
 800900e:	4461      	add	r1, ip
 8009010:	1408      	asrs	r0, r1, #16
 8009012:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009016:	b289      	uxth	r1, r1
 8009018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800901c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009020:	f846 1b04 	str.w	r1, [r6], #4
 8009024:	e7de      	b.n	8008fe4 <__mdiff+0xd0>
 8009026:	3f01      	subs	r7, #1
 8009028:	e7e8      	b.n	8008ffc <__mdiff+0xe8>
 800902a:	bf00      	nop
 800902c:	0800998b 	.word	0x0800998b
 8009030:	080099fc 	.word	0x080099fc

08009034 <__d2b>:
 8009034:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009038:	2101      	movs	r1, #1
 800903a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800903e:	4690      	mov	r8, r2
 8009040:	461d      	mov	r5, r3
 8009042:	f7ff fcd1 	bl	80089e8 <_Balloc>
 8009046:	4604      	mov	r4, r0
 8009048:	b930      	cbnz	r0, 8009058 <__d2b+0x24>
 800904a:	4602      	mov	r2, r0
 800904c:	f240 310a 	movw	r1, #778	; 0x30a
 8009050:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <__d2b+0xb0>)
 8009052:	4825      	ldr	r0, [pc, #148]	; (80090e8 <__d2b+0xb4>)
 8009054:	f000 fabc 	bl	80095d0 <__assert_func>
 8009058:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800905c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009060:	bb2d      	cbnz	r5, 80090ae <__d2b+0x7a>
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	f1b8 0300 	subs.w	r3, r8, #0
 8009068:	d026      	beq.n	80090b8 <__d2b+0x84>
 800906a:	4668      	mov	r0, sp
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	f7ff fd87 	bl	8008b80 <__lo0bits>
 8009072:	9900      	ldr	r1, [sp, #0]
 8009074:	b1f0      	cbz	r0, 80090b4 <__d2b+0x80>
 8009076:	9a01      	ldr	r2, [sp, #4]
 8009078:	f1c0 0320 	rsb	r3, r0, #32
 800907c:	fa02 f303 	lsl.w	r3, r2, r3
 8009080:	430b      	orrs	r3, r1
 8009082:	40c2      	lsrs	r2, r0
 8009084:	6163      	str	r3, [r4, #20]
 8009086:	9201      	str	r2, [sp, #4]
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	bf14      	ite	ne
 800908e:	2102      	movne	r1, #2
 8009090:	2101      	moveq	r1, #1
 8009092:	61a3      	str	r3, [r4, #24]
 8009094:	6121      	str	r1, [r4, #16]
 8009096:	b1c5      	cbz	r5, 80090ca <__d2b+0x96>
 8009098:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800909c:	4405      	add	r5, r0
 800909e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090a2:	603d      	str	r5, [r7, #0]
 80090a4:	6030      	str	r0, [r6, #0]
 80090a6:	4620      	mov	r0, r4
 80090a8:	b002      	add	sp, #8
 80090aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090b2:	e7d6      	b.n	8009062 <__d2b+0x2e>
 80090b4:	6161      	str	r1, [r4, #20]
 80090b6:	e7e7      	b.n	8009088 <__d2b+0x54>
 80090b8:	a801      	add	r0, sp, #4
 80090ba:	f7ff fd61 	bl	8008b80 <__lo0bits>
 80090be:	2101      	movs	r1, #1
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	6121      	str	r1, [r4, #16]
 80090c4:	6163      	str	r3, [r4, #20]
 80090c6:	3020      	adds	r0, #32
 80090c8:	e7e5      	b.n	8009096 <__d2b+0x62>
 80090ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80090ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090d2:	6038      	str	r0, [r7, #0]
 80090d4:	6918      	ldr	r0, [r3, #16]
 80090d6:	f7ff fd33 	bl	8008b40 <__hi0bits>
 80090da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80090de:	6031      	str	r1, [r6, #0]
 80090e0:	e7e1      	b.n	80090a6 <__d2b+0x72>
 80090e2:	bf00      	nop
 80090e4:	0800998b 	.word	0x0800998b
 80090e8:	080099fc 	.word	0x080099fc

080090ec <_calloc_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	fb02 f501 	mul.w	r5, r2, r1
 80090f2:	4629      	mov	r1, r5
 80090f4:	f000 f854 	bl	80091a0 <_malloc_r>
 80090f8:	4604      	mov	r4, r0
 80090fa:	b118      	cbz	r0, 8009104 <_calloc_r+0x18>
 80090fc:	462a      	mov	r2, r5
 80090fe:	2100      	movs	r1, #0
 8009100:	f7fd fe04 	bl	8006d0c <memset>
 8009104:	4620      	mov	r0, r4
 8009106:	bd38      	pop	{r3, r4, r5, pc}

08009108 <_free_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4605      	mov	r5, r0
 800910c:	2900      	cmp	r1, #0
 800910e:	d043      	beq.n	8009198 <_free_r+0x90>
 8009110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009114:	1f0c      	subs	r4, r1, #4
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfb8      	it	lt
 800911a:	18e4      	addlt	r4, r4, r3
 800911c:	f000 fade 	bl	80096dc <__malloc_lock>
 8009120:	4a1e      	ldr	r2, [pc, #120]	; (800919c <_free_r+0x94>)
 8009122:	6813      	ldr	r3, [r2, #0]
 8009124:	4610      	mov	r0, r2
 8009126:	b933      	cbnz	r3, 8009136 <_free_r+0x2e>
 8009128:	6063      	str	r3, [r4, #4]
 800912a:	6014      	str	r4, [r2, #0]
 800912c:	4628      	mov	r0, r5
 800912e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009132:	f000 bad9 	b.w	80096e8 <__malloc_unlock>
 8009136:	42a3      	cmp	r3, r4
 8009138:	d90a      	bls.n	8009150 <_free_r+0x48>
 800913a:	6821      	ldr	r1, [r4, #0]
 800913c:	1862      	adds	r2, r4, r1
 800913e:	4293      	cmp	r3, r2
 8009140:	bf01      	itttt	eq
 8009142:	681a      	ldreq	r2, [r3, #0]
 8009144:	685b      	ldreq	r3, [r3, #4]
 8009146:	1852      	addeq	r2, r2, r1
 8009148:	6022      	streq	r2, [r4, #0]
 800914a:	6063      	str	r3, [r4, #4]
 800914c:	6004      	str	r4, [r0, #0]
 800914e:	e7ed      	b.n	800912c <_free_r+0x24>
 8009150:	461a      	mov	r2, r3
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	b10b      	cbz	r3, 800915a <_free_r+0x52>
 8009156:	42a3      	cmp	r3, r4
 8009158:	d9fa      	bls.n	8009150 <_free_r+0x48>
 800915a:	6811      	ldr	r1, [r2, #0]
 800915c:	1850      	adds	r0, r2, r1
 800915e:	42a0      	cmp	r0, r4
 8009160:	d10b      	bne.n	800917a <_free_r+0x72>
 8009162:	6820      	ldr	r0, [r4, #0]
 8009164:	4401      	add	r1, r0
 8009166:	1850      	adds	r0, r2, r1
 8009168:	4283      	cmp	r3, r0
 800916a:	6011      	str	r1, [r2, #0]
 800916c:	d1de      	bne.n	800912c <_free_r+0x24>
 800916e:	6818      	ldr	r0, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	4401      	add	r1, r0
 8009174:	6011      	str	r1, [r2, #0]
 8009176:	6053      	str	r3, [r2, #4]
 8009178:	e7d8      	b.n	800912c <_free_r+0x24>
 800917a:	d902      	bls.n	8009182 <_free_r+0x7a>
 800917c:	230c      	movs	r3, #12
 800917e:	602b      	str	r3, [r5, #0]
 8009180:	e7d4      	b.n	800912c <_free_r+0x24>
 8009182:	6820      	ldr	r0, [r4, #0]
 8009184:	1821      	adds	r1, r4, r0
 8009186:	428b      	cmp	r3, r1
 8009188:	bf01      	itttt	eq
 800918a:	6819      	ldreq	r1, [r3, #0]
 800918c:	685b      	ldreq	r3, [r3, #4]
 800918e:	1809      	addeq	r1, r1, r0
 8009190:	6021      	streq	r1, [r4, #0]
 8009192:	6063      	str	r3, [r4, #4]
 8009194:	6054      	str	r4, [r2, #4]
 8009196:	e7c9      	b.n	800912c <_free_r+0x24>
 8009198:	bd38      	pop	{r3, r4, r5, pc}
 800919a:	bf00      	nop
 800919c:	20001b08 	.word	0x20001b08

080091a0 <_malloc_r>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	1ccd      	adds	r5, r1, #3
 80091a4:	f025 0503 	bic.w	r5, r5, #3
 80091a8:	3508      	adds	r5, #8
 80091aa:	2d0c      	cmp	r5, #12
 80091ac:	bf38      	it	cc
 80091ae:	250c      	movcc	r5, #12
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	4606      	mov	r6, r0
 80091b4:	db01      	blt.n	80091ba <_malloc_r+0x1a>
 80091b6:	42a9      	cmp	r1, r5
 80091b8:	d903      	bls.n	80091c2 <_malloc_r+0x22>
 80091ba:	230c      	movs	r3, #12
 80091bc:	6033      	str	r3, [r6, #0]
 80091be:	2000      	movs	r0, #0
 80091c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c2:	f000 fa8b 	bl	80096dc <__malloc_lock>
 80091c6:	4921      	ldr	r1, [pc, #132]	; (800924c <_malloc_r+0xac>)
 80091c8:	680a      	ldr	r2, [r1, #0]
 80091ca:	4614      	mov	r4, r2
 80091cc:	b99c      	cbnz	r4, 80091f6 <_malloc_r+0x56>
 80091ce:	4f20      	ldr	r7, [pc, #128]	; (8009250 <_malloc_r+0xb0>)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	b923      	cbnz	r3, 80091de <_malloc_r+0x3e>
 80091d4:	4621      	mov	r1, r4
 80091d6:	4630      	mov	r0, r6
 80091d8:	f000 f994 	bl	8009504 <_sbrk_r>
 80091dc:	6038      	str	r0, [r7, #0]
 80091de:	4629      	mov	r1, r5
 80091e0:	4630      	mov	r0, r6
 80091e2:	f000 f98f 	bl	8009504 <_sbrk_r>
 80091e6:	1c43      	adds	r3, r0, #1
 80091e8:	d123      	bne.n	8009232 <_malloc_r+0x92>
 80091ea:	230c      	movs	r3, #12
 80091ec:	4630      	mov	r0, r6
 80091ee:	6033      	str	r3, [r6, #0]
 80091f0:	f000 fa7a 	bl	80096e8 <__malloc_unlock>
 80091f4:	e7e3      	b.n	80091be <_malloc_r+0x1e>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	1b5b      	subs	r3, r3, r5
 80091fa:	d417      	bmi.n	800922c <_malloc_r+0x8c>
 80091fc:	2b0b      	cmp	r3, #11
 80091fe:	d903      	bls.n	8009208 <_malloc_r+0x68>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	441c      	add	r4, r3
 8009204:	6025      	str	r5, [r4, #0]
 8009206:	e004      	b.n	8009212 <_malloc_r+0x72>
 8009208:	6863      	ldr	r3, [r4, #4]
 800920a:	42a2      	cmp	r2, r4
 800920c:	bf0c      	ite	eq
 800920e:	600b      	streq	r3, [r1, #0]
 8009210:	6053      	strne	r3, [r2, #4]
 8009212:	4630      	mov	r0, r6
 8009214:	f000 fa68 	bl	80096e8 <__malloc_unlock>
 8009218:	f104 000b 	add.w	r0, r4, #11
 800921c:	1d23      	adds	r3, r4, #4
 800921e:	f020 0007 	bic.w	r0, r0, #7
 8009222:	1ac2      	subs	r2, r0, r3
 8009224:	d0cc      	beq.n	80091c0 <_malloc_r+0x20>
 8009226:	1a1b      	subs	r3, r3, r0
 8009228:	50a3      	str	r3, [r4, r2]
 800922a:	e7c9      	b.n	80091c0 <_malloc_r+0x20>
 800922c:	4622      	mov	r2, r4
 800922e:	6864      	ldr	r4, [r4, #4]
 8009230:	e7cc      	b.n	80091cc <_malloc_r+0x2c>
 8009232:	1cc4      	adds	r4, r0, #3
 8009234:	f024 0403 	bic.w	r4, r4, #3
 8009238:	42a0      	cmp	r0, r4
 800923a:	d0e3      	beq.n	8009204 <_malloc_r+0x64>
 800923c:	1a21      	subs	r1, r4, r0
 800923e:	4630      	mov	r0, r6
 8009240:	f000 f960 	bl	8009504 <_sbrk_r>
 8009244:	3001      	adds	r0, #1
 8009246:	d1dd      	bne.n	8009204 <_malloc_r+0x64>
 8009248:	e7cf      	b.n	80091ea <_malloc_r+0x4a>
 800924a:	bf00      	nop
 800924c:	20001b08 	.word	0x20001b08
 8009250:	20001b0c 	.word	0x20001b0c

08009254 <__sfputc_r>:
 8009254:	6893      	ldr	r3, [r2, #8]
 8009256:	b410      	push	{r4}
 8009258:	3b01      	subs	r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	6093      	str	r3, [r2, #8]
 800925e:	da07      	bge.n	8009270 <__sfputc_r+0x1c>
 8009260:	6994      	ldr	r4, [r2, #24]
 8009262:	42a3      	cmp	r3, r4
 8009264:	db01      	blt.n	800926a <__sfputc_r+0x16>
 8009266:	290a      	cmp	r1, #10
 8009268:	d102      	bne.n	8009270 <__sfputc_r+0x1c>
 800926a:	bc10      	pop	{r4}
 800926c:	f7fe ba44 	b.w	80076f8 <__swbuf_r>
 8009270:	6813      	ldr	r3, [r2, #0]
 8009272:	1c58      	adds	r0, r3, #1
 8009274:	6010      	str	r0, [r2, #0]
 8009276:	7019      	strb	r1, [r3, #0]
 8009278:	4608      	mov	r0, r1
 800927a:	bc10      	pop	{r4}
 800927c:	4770      	bx	lr

0800927e <__sfputs_r>:
 800927e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009280:	4606      	mov	r6, r0
 8009282:	460f      	mov	r7, r1
 8009284:	4614      	mov	r4, r2
 8009286:	18d5      	adds	r5, r2, r3
 8009288:	42ac      	cmp	r4, r5
 800928a:	d101      	bne.n	8009290 <__sfputs_r+0x12>
 800928c:	2000      	movs	r0, #0
 800928e:	e007      	b.n	80092a0 <__sfputs_r+0x22>
 8009290:	463a      	mov	r2, r7
 8009292:	4630      	mov	r0, r6
 8009294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009298:	f7ff ffdc 	bl	8009254 <__sfputc_r>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d1f3      	bne.n	8009288 <__sfputs_r+0xa>
 80092a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092a4 <_vfiprintf_r>:
 80092a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a8:	460d      	mov	r5, r1
 80092aa:	4614      	mov	r4, r2
 80092ac:	4698      	mov	r8, r3
 80092ae:	4606      	mov	r6, r0
 80092b0:	b09d      	sub	sp, #116	; 0x74
 80092b2:	b118      	cbz	r0, 80092bc <_vfiprintf_r+0x18>
 80092b4:	6983      	ldr	r3, [r0, #24]
 80092b6:	b90b      	cbnz	r3, 80092bc <_vfiprintf_r+0x18>
 80092b8:	f7ff fa76 	bl	80087a8 <__sinit>
 80092bc:	4b89      	ldr	r3, [pc, #548]	; (80094e4 <_vfiprintf_r+0x240>)
 80092be:	429d      	cmp	r5, r3
 80092c0:	d11b      	bne.n	80092fa <_vfiprintf_r+0x56>
 80092c2:	6875      	ldr	r5, [r6, #4]
 80092c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092c6:	07d9      	lsls	r1, r3, #31
 80092c8:	d405      	bmi.n	80092d6 <_vfiprintf_r+0x32>
 80092ca:	89ab      	ldrh	r3, [r5, #12]
 80092cc:	059a      	lsls	r2, r3, #22
 80092ce:	d402      	bmi.n	80092d6 <_vfiprintf_r+0x32>
 80092d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d2:	f7ff fb0c 	bl	80088ee <__retarget_lock_acquire_recursive>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	071b      	lsls	r3, r3, #28
 80092da:	d501      	bpl.n	80092e0 <_vfiprintf_r+0x3c>
 80092dc:	692b      	ldr	r3, [r5, #16]
 80092de:	b9eb      	cbnz	r3, 800931c <_vfiprintf_r+0x78>
 80092e0:	4629      	mov	r1, r5
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7fe fa5a 	bl	800779c <__swsetup_r>
 80092e8:	b1c0      	cbz	r0, 800931c <_vfiprintf_r+0x78>
 80092ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ec:	07dc      	lsls	r4, r3, #31
 80092ee:	d50e      	bpl.n	800930e <_vfiprintf_r+0x6a>
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	b01d      	add	sp, #116	; 0x74
 80092f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fa:	4b7b      	ldr	r3, [pc, #492]	; (80094e8 <_vfiprintf_r+0x244>)
 80092fc:	429d      	cmp	r5, r3
 80092fe:	d101      	bne.n	8009304 <_vfiprintf_r+0x60>
 8009300:	68b5      	ldr	r5, [r6, #8]
 8009302:	e7df      	b.n	80092c4 <_vfiprintf_r+0x20>
 8009304:	4b79      	ldr	r3, [pc, #484]	; (80094ec <_vfiprintf_r+0x248>)
 8009306:	429d      	cmp	r5, r3
 8009308:	bf08      	it	eq
 800930a:	68f5      	ldreq	r5, [r6, #12]
 800930c:	e7da      	b.n	80092c4 <_vfiprintf_r+0x20>
 800930e:	89ab      	ldrh	r3, [r5, #12]
 8009310:	0598      	lsls	r0, r3, #22
 8009312:	d4ed      	bmi.n	80092f0 <_vfiprintf_r+0x4c>
 8009314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009316:	f7ff faeb 	bl	80088f0 <__retarget_lock_release_recursive>
 800931a:	e7e9      	b.n	80092f0 <_vfiprintf_r+0x4c>
 800931c:	2300      	movs	r3, #0
 800931e:	9309      	str	r3, [sp, #36]	; 0x24
 8009320:	2320      	movs	r3, #32
 8009322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009326:	2330      	movs	r3, #48	; 0x30
 8009328:	f04f 0901 	mov.w	r9, #1
 800932c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009330:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80094f0 <_vfiprintf_r+0x24c>
 8009334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009338:	4623      	mov	r3, r4
 800933a:	469a      	mov	sl, r3
 800933c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009340:	b10a      	cbz	r2, 8009346 <_vfiprintf_r+0xa2>
 8009342:	2a25      	cmp	r2, #37	; 0x25
 8009344:	d1f9      	bne.n	800933a <_vfiprintf_r+0x96>
 8009346:	ebba 0b04 	subs.w	fp, sl, r4
 800934a:	d00b      	beq.n	8009364 <_vfiprintf_r+0xc0>
 800934c:	465b      	mov	r3, fp
 800934e:	4622      	mov	r2, r4
 8009350:	4629      	mov	r1, r5
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff ff93 	bl	800927e <__sfputs_r>
 8009358:	3001      	adds	r0, #1
 800935a:	f000 80aa 	beq.w	80094b2 <_vfiprintf_r+0x20e>
 800935e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009360:	445a      	add	r2, fp
 8009362:	9209      	str	r2, [sp, #36]	; 0x24
 8009364:	f89a 3000 	ldrb.w	r3, [sl]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 80a2 	beq.w	80094b2 <_vfiprintf_r+0x20e>
 800936e:	2300      	movs	r3, #0
 8009370:	f04f 32ff 	mov.w	r2, #4294967295
 8009374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009378:	f10a 0a01 	add.w	sl, sl, #1
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009384:	931a      	str	r3, [sp, #104]	; 0x68
 8009386:	4654      	mov	r4, sl
 8009388:	2205      	movs	r2, #5
 800938a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938e:	4858      	ldr	r0, [pc, #352]	; (80094f0 <_vfiprintf_r+0x24c>)
 8009390:	f7ff fb1c 	bl	80089cc <memchr>
 8009394:	9a04      	ldr	r2, [sp, #16]
 8009396:	b9d8      	cbnz	r0, 80093d0 <_vfiprintf_r+0x12c>
 8009398:	06d1      	lsls	r1, r2, #27
 800939a:	bf44      	itt	mi
 800939c:	2320      	movmi	r3, #32
 800939e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a2:	0713      	lsls	r3, r2, #28
 80093a4:	bf44      	itt	mi
 80093a6:	232b      	movmi	r3, #43	; 0x2b
 80093a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ac:	f89a 3000 	ldrb.w	r3, [sl]
 80093b0:	2b2a      	cmp	r3, #42	; 0x2a
 80093b2:	d015      	beq.n	80093e0 <_vfiprintf_r+0x13c>
 80093b4:	4654      	mov	r4, sl
 80093b6:	2000      	movs	r0, #0
 80093b8:	f04f 0c0a 	mov.w	ip, #10
 80093bc:	9a07      	ldr	r2, [sp, #28]
 80093be:	4621      	mov	r1, r4
 80093c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c4:	3b30      	subs	r3, #48	; 0x30
 80093c6:	2b09      	cmp	r3, #9
 80093c8:	d94e      	bls.n	8009468 <_vfiprintf_r+0x1c4>
 80093ca:	b1b0      	cbz	r0, 80093fa <_vfiprintf_r+0x156>
 80093cc:	9207      	str	r2, [sp, #28]
 80093ce:	e014      	b.n	80093fa <_vfiprintf_r+0x156>
 80093d0:	eba0 0308 	sub.w	r3, r0, r8
 80093d4:	fa09 f303 	lsl.w	r3, r9, r3
 80093d8:	4313      	orrs	r3, r2
 80093da:	46a2      	mov	sl, r4
 80093dc:	9304      	str	r3, [sp, #16]
 80093de:	e7d2      	b.n	8009386 <_vfiprintf_r+0xe2>
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	1d19      	adds	r1, r3, #4
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	9103      	str	r1, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bfbb      	ittet	lt
 80093ec:	425b      	neglt	r3, r3
 80093ee:	f042 0202 	orrlt.w	r2, r2, #2
 80093f2:	9307      	strge	r3, [sp, #28]
 80093f4:	9307      	strlt	r3, [sp, #28]
 80093f6:	bfb8      	it	lt
 80093f8:	9204      	strlt	r2, [sp, #16]
 80093fa:	7823      	ldrb	r3, [r4, #0]
 80093fc:	2b2e      	cmp	r3, #46	; 0x2e
 80093fe:	d10c      	bne.n	800941a <_vfiprintf_r+0x176>
 8009400:	7863      	ldrb	r3, [r4, #1]
 8009402:	2b2a      	cmp	r3, #42	; 0x2a
 8009404:	d135      	bne.n	8009472 <_vfiprintf_r+0x1ce>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	3402      	adds	r4, #2
 800940a:	1d1a      	adds	r2, r3, #4
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	9203      	str	r2, [sp, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	bfb8      	it	lt
 8009414:	f04f 33ff 	movlt.w	r3, #4294967295
 8009418:	9305      	str	r3, [sp, #20]
 800941a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009500 <_vfiprintf_r+0x25c>
 800941e:	2203      	movs	r2, #3
 8009420:	4650      	mov	r0, sl
 8009422:	7821      	ldrb	r1, [r4, #0]
 8009424:	f7ff fad2 	bl	80089cc <memchr>
 8009428:	b140      	cbz	r0, 800943c <_vfiprintf_r+0x198>
 800942a:	2340      	movs	r3, #64	; 0x40
 800942c:	eba0 000a 	sub.w	r0, r0, sl
 8009430:	fa03 f000 	lsl.w	r0, r3, r0
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	3401      	adds	r4, #1
 8009438:	4303      	orrs	r3, r0
 800943a:	9304      	str	r3, [sp, #16]
 800943c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009440:	2206      	movs	r2, #6
 8009442:	482c      	ldr	r0, [pc, #176]	; (80094f4 <_vfiprintf_r+0x250>)
 8009444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009448:	f7ff fac0 	bl	80089cc <memchr>
 800944c:	2800      	cmp	r0, #0
 800944e:	d03f      	beq.n	80094d0 <_vfiprintf_r+0x22c>
 8009450:	4b29      	ldr	r3, [pc, #164]	; (80094f8 <_vfiprintf_r+0x254>)
 8009452:	bb1b      	cbnz	r3, 800949c <_vfiprintf_r+0x1f8>
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	3307      	adds	r3, #7
 8009458:	f023 0307 	bic.w	r3, r3, #7
 800945c:	3308      	adds	r3, #8
 800945e:	9303      	str	r3, [sp, #12]
 8009460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009462:	443b      	add	r3, r7
 8009464:	9309      	str	r3, [sp, #36]	; 0x24
 8009466:	e767      	b.n	8009338 <_vfiprintf_r+0x94>
 8009468:	460c      	mov	r4, r1
 800946a:	2001      	movs	r0, #1
 800946c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009470:	e7a5      	b.n	80093be <_vfiprintf_r+0x11a>
 8009472:	2300      	movs	r3, #0
 8009474:	f04f 0c0a 	mov.w	ip, #10
 8009478:	4619      	mov	r1, r3
 800947a:	3401      	adds	r4, #1
 800947c:	9305      	str	r3, [sp, #20]
 800947e:	4620      	mov	r0, r4
 8009480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009484:	3a30      	subs	r2, #48	; 0x30
 8009486:	2a09      	cmp	r2, #9
 8009488:	d903      	bls.n	8009492 <_vfiprintf_r+0x1ee>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0c5      	beq.n	800941a <_vfiprintf_r+0x176>
 800948e:	9105      	str	r1, [sp, #20]
 8009490:	e7c3      	b.n	800941a <_vfiprintf_r+0x176>
 8009492:	4604      	mov	r4, r0
 8009494:	2301      	movs	r3, #1
 8009496:	fb0c 2101 	mla	r1, ip, r1, r2
 800949a:	e7f0      	b.n	800947e <_vfiprintf_r+0x1da>
 800949c:	ab03      	add	r3, sp, #12
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	462a      	mov	r2, r5
 80094a2:	4630      	mov	r0, r6
 80094a4:	4b15      	ldr	r3, [pc, #84]	; (80094fc <_vfiprintf_r+0x258>)
 80094a6:	a904      	add	r1, sp, #16
 80094a8:	f7fd fcd6 	bl	8006e58 <_printf_float>
 80094ac:	4607      	mov	r7, r0
 80094ae:	1c78      	adds	r0, r7, #1
 80094b0:	d1d6      	bne.n	8009460 <_vfiprintf_r+0x1bc>
 80094b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094b4:	07d9      	lsls	r1, r3, #31
 80094b6:	d405      	bmi.n	80094c4 <_vfiprintf_r+0x220>
 80094b8:	89ab      	ldrh	r3, [r5, #12]
 80094ba:	059a      	lsls	r2, r3, #22
 80094bc:	d402      	bmi.n	80094c4 <_vfiprintf_r+0x220>
 80094be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094c0:	f7ff fa16 	bl	80088f0 <__retarget_lock_release_recursive>
 80094c4:	89ab      	ldrh	r3, [r5, #12]
 80094c6:	065b      	lsls	r3, r3, #25
 80094c8:	f53f af12 	bmi.w	80092f0 <_vfiprintf_r+0x4c>
 80094cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ce:	e711      	b.n	80092f4 <_vfiprintf_r+0x50>
 80094d0:	ab03      	add	r3, sp, #12
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	462a      	mov	r2, r5
 80094d6:	4630      	mov	r0, r6
 80094d8:	4b08      	ldr	r3, [pc, #32]	; (80094fc <_vfiprintf_r+0x258>)
 80094da:	a904      	add	r1, sp, #16
 80094dc:	f7fd ff58 	bl	8007390 <_printf_i>
 80094e0:	e7e4      	b.n	80094ac <_vfiprintf_r+0x208>
 80094e2:	bf00      	nop
 80094e4:	080099bc 	.word	0x080099bc
 80094e8:	080099dc 	.word	0x080099dc
 80094ec:	0800999c 	.word	0x0800999c
 80094f0:	08009b5c 	.word	0x08009b5c
 80094f4:	08009b66 	.word	0x08009b66
 80094f8:	08006e59 	.word	0x08006e59
 80094fc:	0800927f 	.word	0x0800927f
 8009500:	08009b62 	.word	0x08009b62

08009504 <_sbrk_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	2300      	movs	r3, #0
 8009508:	4d05      	ldr	r5, [pc, #20]	; (8009520 <_sbrk_r+0x1c>)
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	f7f7 fe8c 	bl	800122c <_sbrk>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_sbrk_r+0x1a>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_sbrk_r+0x1a>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	20001c6c 	.word	0x20001c6c

08009524 <__sread>:
 8009524:	b510      	push	{r4, lr}
 8009526:	460c      	mov	r4, r1
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	f000 f8e2 	bl	80096f4 <_read_r>
 8009530:	2800      	cmp	r0, #0
 8009532:	bfab      	itete	ge
 8009534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009536:	89a3      	ldrhlt	r3, [r4, #12]
 8009538:	181b      	addge	r3, r3, r0
 800953a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800953e:	bfac      	ite	ge
 8009540:	6563      	strge	r3, [r4, #84]	; 0x54
 8009542:	81a3      	strhlt	r3, [r4, #12]
 8009544:	bd10      	pop	{r4, pc}

08009546 <__swrite>:
 8009546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	461f      	mov	r7, r3
 800954c:	898b      	ldrh	r3, [r1, #12]
 800954e:	4605      	mov	r5, r0
 8009550:	05db      	lsls	r3, r3, #23
 8009552:	460c      	mov	r4, r1
 8009554:	4616      	mov	r6, r2
 8009556:	d505      	bpl.n	8009564 <__swrite+0x1e>
 8009558:	2302      	movs	r3, #2
 800955a:	2200      	movs	r2, #0
 800955c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009560:	f000 f898 	bl	8009694 <_lseek_r>
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	4632      	mov	r2, r6
 8009568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	4628      	mov	r0, r5
 8009570:	463b      	mov	r3, r7
 8009572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800957a:	f000 b817 	b.w	80095ac <_write_r>

0800957e <__sseek>:
 800957e:	b510      	push	{r4, lr}
 8009580:	460c      	mov	r4, r1
 8009582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009586:	f000 f885 	bl	8009694 <_lseek_r>
 800958a:	1c43      	adds	r3, r0, #1
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	bf15      	itete	ne
 8009590:	6560      	strne	r0, [r4, #84]	; 0x54
 8009592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800959a:	81a3      	strheq	r3, [r4, #12]
 800959c:	bf18      	it	ne
 800959e:	81a3      	strhne	r3, [r4, #12]
 80095a0:	bd10      	pop	{r4, pc}

080095a2 <__sclose>:
 80095a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a6:	f000 b831 	b.w	800960c <_close_r>
	...

080095ac <_write_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	2200      	movs	r2, #0
 80095b6:	4d05      	ldr	r5, [pc, #20]	; (80095cc <_write_r+0x20>)
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f7f7 fc58 	bl	8000e70 <_write>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_write_r+0x1e>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_write_r+0x1e>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	20001c6c 	.word	0x20001c6c

080095d0 <__assert_func>:
 80095d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095d2:	4614      	mov	r4, r2
 80095d4:	461a      	mov	r2, r3
 80095d6:	4b09      	ldr	r3, [pc, #36]	; (80095fc <__assert_func+0x2c>)
 80095d8:	4605      	mov	r5, r0
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68d8      	ldr	r0, [r3, #12]
 80095de:	b14c      	cbz	r4, 80095f4 <__assert_func+0x24>
 80095e0:	4b07      	ldr	r3, [pc, #28]	; (8009600 <__assert_func+0x30>)
 80095e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095e6:	9100      	str	r1, [sp, #0]
 80095e8:	462b      	mov	r3, r5
 80095ea:	4906      	ldr	r1, [pc, #24]	; (8009604 <__assert_func+0x34>)
 80095ec:	f000 f81e 	bl	800962c <fiprintf>
 80095f0:	f000 f89f 	bl	8009732 <abort>
 80095f4:	4b04      	ldr	r3, [pc, #16]	; (8009608 <__assert_func+0x38>)
 80095f6:	461c      	mov	r4, r3
 80095f8:	e7f3      	b.n	80095e2 <__assert_func+0x12>
 80095fa:	bf00      	nop
 80095fc:	20000010 	.word	0x20000010
 8009600:	08009b6d 	.word	0x08009b6d
 8009604:	08009b7a 	.word	0x08009b7a
 8009608:	08009ba8 	.word	0x08009ba8

0800960c <_close_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	2300      	movs	r3, #0
 8009610:	4d05      	ldr	r5, [pc, #20]	; (8009628 <_close_r+0x1c>)
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	f7f7 fdd8 	bl	80011cc <_close>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_close_r+0x1a>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_close_r+0x1a>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	20001c6c 	.word	0x20001c6c

0800962c <fiprintf>:
 800962c:	b40e      	push	{r1, r2, r3}
 800962e:	b503      	push	{r0, r1, lr}
 8009630:	4601      	mov	r1, r0
 8009632:	ab03      	add	r3, sp, #12
 8009634:	4805      	ldr	r0, [pc, #20]	; (800964c <fiprintf+0x20>)
 8009636:	f853 2b04 	ldr.w	r2, [r3], #4
 800963a:	6800      	ldr	r0, [r0, #0]
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	f7ff fe31 	bl	80092a4 <_vfiprintf_r>
 8009642:	b002      	add	sp, #8
 8009644:	f85d eb04 	ldr.w	lr, [sp], #4
 8009648:	b003      	add	sp, #12
 800964a:	4770      	bx	lr
 800964c:	20000010 	.word	0x20000010

08009650 <_fstat_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	2300      	movs	r3, #0
 8009654:	4d06      	ldr	r5, [pc, #24]	; (8009670 <_fstat_r+0x20>)
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	4611      	mov	r1, r2
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	f7f7 fdc0 	bl	80011e2 <_fstat>
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	d102      	bne.n	800966c <_fstat_r+0x1c>
 8009666:	682b      	ldr	r3, [r5, #0]
 8009668:	b103      	cbz	r3, 800966c <_fstat_r+0x1c>
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	bd38      	pop	{r3, r4, r5, pc}
 800966e:	bf00      	nop
 8009670:	20001c6c 	.word	0x20001c6c

08009674 <_isatty_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	2300      	movs	r3, #0
 8009678:	4d05      	ldr	r5, [pc, #20]	; (8009690 <_isatty_r+0x1c>)
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	f7f7 fdbe 	bl	8001200 <_isatty>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_isatty_r+0x1a>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_isatty_r+0x1a>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	20001c6c 	.word	0x20001c6c

08009694 <_lseek_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4604      	mov	r4, r0
 8009698:	4608      	mov	r0, r1
 800969a:	4611      	mov	r1, r2
 800969c:	2200      	movs	r2, #0
 800969e:	4d05      	ldr	r5, [pc, #20]	; (80096b4 <_lseek_r+0x20>)
 80096a0:	602a      	str	r2, [r5, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	f7f7 fdb6 	bl	8001214 <_lseek>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_lseek_r+0x1e>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_lseek_r+0x1e>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	20001c6c 	.word	0x20001c6c

080096b8 <__ascii_mbtowc>:
 80096b8:	b082      	sub	sp, #8
 80096ba:	b901      	cbnz	r1, 80096be <__ascii_mbtowc+0x6>
 80096bc:	a901      	add	r1, sp, #4
 80096be:	b142      	cbz	r2, 80096d2 <__ascii_mbtowc+0x1a>
 80096c0:	b14b      	cbz	r3, 80096d6 <__ascii_mbtowc+0x1e>
 80096c2:	7813      	ldrb	r3, [r2, #0]
 80096c4:	600b      	str	r3, [r1, #0]
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	1e10      	subs	r0, r2, #0
 80096ca:	bf18      	it	ne
 80096cc:	2001      	movne	r0, #1
 80096ce:	b002      	add	sp, #8
 80096d0:	4770      	bx	lr
 80096d2:	4610      	mov	r0, r2
 80096d4:	e7fb      	b.n	80096ce <__ascii_mbtowc+0x16>
 80096d6:	f06f 0001 	mvn.w	r0, #1
 80096da:	e7f8      	b.n	80096ce <__ascii_mbtowc+0x16>

080096dc <__malloc_lock>:
 80096dc:	4801      	ldr	r0, [pc, #4]	; (80096e4 <__malloc_lock+0x8>)
 80096de:	f7ff b906 	b.w	80088ee <__retarget_lock_acquire_recursive>
 80096e2:	bf00      	nop
 80096e4:	20001c64 	.word	0x20001c64

080096e8 <__malloc_unlock>:
 80096e8:	4801      	ldr	r0, [pc, #4]	; (80096f0 <__malloc_unlock+0x8>)
 80096ea:	f7ff b901 	b.w	80088f0 <__retarget_lock_release_recursive>
 80096ee:	bf00      	nop
 80096f0:	20001c64 	.word	0x20001c64

080096f4 <_read_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	4611      	mov	r1, r2
 80096fc:	2200      	movs	r2, #0
 80096fe:	4d05      	ldr	r5, [pc, #20]	; (8009714 <_read_r+0x20>)
 8009700:	602a      	str	r2, [r5, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	f7f7 fd45 	bl	8001192 <_read>
 8009708:	1c43      	adds	r3, r0, #1
 800970a:	d102      	bne.n	8009712 <_read_r+0x1e>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	b103      	cbz	r3, 8009712 <_read_r+0x1e>
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	20001c6c 	.word	0x20001c6c

08009718 <__ascii_wctomb>:
 8009718:	4603      	mov	r3, r0
 800971a:	4608      	mov	r0, r1
 800971c:	b141      	cbz	r1, 8009730 <__ascii_wctomb+0x18>
 800971e:	2aff      	cmp	r2, #255	; 0xff
 8009720:	d904      	bls.n	800972c <__ascii_wctomb+0x14>
 8009722:	228a      	movs	r2, #138	; 0x8a
 8009724:	f04f 30ff 	mov.w	r0, #4294967295
 8009728:	601a      	str	r2, [r3, #0]
 800972a:	4770      	bx	lr
 800972c:	2001      	movs	r0, #1
 800972e:	700a      	strb	r2, [r1, #0]
 8009730:	4770      	bx	lr

08009732 <abort>:
 8009732:	2006      	movs	r0, #6
 8009734:	b508      	push	{r3, lr}
 8009736:	f000 f82b 	bl	8009790 <raise>
 800973a:	2001      	movs	r0, #1
 800973c:	f7f7 fd1f 	bl	800117e <_exit>

08009740 <_raise_r>:
 8009740:	291f      	cmp	r1, #31
 8009742:	b538      	push	{r3, r4, r5, lr}
 8009744:	4604      	mov	r4, r0
 8009746:	460d      	mov	r5, r1
 8009748:	d904      	bls.n	8009754 <_raise_r+0x14>
 800974a:	2316      	movs	r3, #22
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	f04f 30ff 	mov.w	r0, #4294967295
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009756:	b112      	cbz	r2, 800975e <_raise_r+0x1e>
 8009758:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800975c:	b94b      	cbnz	r3, 8009772 <_raise_r+0x32>
 800975e:	4620      	mov	r0, r4
 8009760:	f000 f830 	bl	80097c4 <_getpid_r>
 8009764:	462a      	mov	r2, r5
 8009766:	4601      	mov	r1, r0
 8009768:	4620      	mov	r0, r4
 800976a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800976e:	f000 b817 	b.w	80097a0 <_kill_r>
 8009772:	2b01      	cmp	r3, #1
 8009774:	d00a      	beq.n	800978c <_raise_r+0x4c>
 8009776:	1c59      	adds	r1, r3, #1
 8009778:	d103      	bne.n	8009782 <_raise_r+0x42>
 800977a:	2316      	movs	r3, #22
 800977c:	6003      	str	r3, [r0, #0]
 800977e:	2001      	movs	r0, #1
 8009780:	e7e7      	b.n	8009752 <_raise_r+0x12>
 8009782:	2400      	movs	r4, #0
 8009784:	4628      	mov	r0, r5
 8009786:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800978a:	4798      	blx	r3
 800978c:	2000      	movs	r0, #0
 800978e:	e7e0      	b.n	8009752 <_raise_r+0x12>

08009790 <raise>:
 8009790:	4b02      	ldr	r3, [pc, #8]	; (800979c <raise+0xc>)
 8009792:	4601      	mov	r1, r0
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f7ff bfd3 	b.w	8009740 <_raise_r>
 800979a:	bf00      	nop
 800979c:	20000010 	.word	0x20000010

080097a0 <_kill_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	2300      	movs	r3, #0
 80097a4:	4d06      	ldr	r5, [pc, #24]	; (80097c0 <_kill_r+0x20>)
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	4611      	mov	r1, r2
 80097ac:	602b      	str	r3, [r5, #0]
 80097ae:	f7f7 fcd6 	bl	800115e <_kill>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	d102      	bne.n	80097bc <_kill_r+0x1c>
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	b103      	cbz	r3, 80097bc <_kill_r+0x1c>
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	20001c6c 	.word	0x20001c6c

080097c4 <_getpid_r>:
 80097c4:	f7f7 bcc4 	b.w	8001150 <_getpid>

080097c8 <_init>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	bf00      	nop
 80097cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ce:	bc08      	pop	{r3}
 80097d0:	469e      	mov	lr, r3
 80097d2:	4770      	bx	lr

080097d4 <_fini>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	bf00      	nop
 80097d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097da:	bc08      	pop	{r3}
 80097dc:	469e      	mov	lr, r3
 80097de:	4770      	bx	lr
