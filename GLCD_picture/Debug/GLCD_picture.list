
GLCD_picture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002348  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000260e8  0800252c  0800252c  0001252c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028614  08028614  0004000c  2**0
                  CONTENTS
  4 .ARM          00000000  08028614  08028614  0004000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08028614  08028614  0004000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028614  08028614  00038614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028618  08028618  00038618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0802861c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08028628  0004000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08028628  0004007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0004000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006cf0  00000000  00000000  00040035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190b  00000000  00000000  00046d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00048630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  00048cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018973  00000000  00000000  00049258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008074  00000000  00000000  00061bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e57  00000000  00000000  00069c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000faa96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017d8  00000000  00000000  000faaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002514 	.word	0x08002514

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002514 	.word	0x08002514

08000224 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800023e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000242:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000246:	4a27      	ldr	r2, [pc, #156]	; (80002e4 <MX_FSMC_Init+0xc0>)
 8000248:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800025c:	4b20      	ldr	r3, [pc, #128]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800025e:	2210      	movs	r2, #16
 8000260:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000268:	4b1d      	ldr	r3, [pc, #116]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000270:	2200      	movs	r2, #0
 8000272:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800027c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000284:	2200      	movs	r2, #0
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_FSMC_Init+0xbc>)
 800028a:	2200      	movs	r2, #0
 800028c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000290:	2200      	movs	r2, #0
 8000292:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_FSMC_Init+0xbc>)
 8000296:	2200      	movs	r2, #0
 8000298:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 2;
 800029a:	2302      	movs	r3, #2
 800029c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800029e:	230f      	movs	r3, #15
 80002a0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80002aa:	2310      	movs	r3, #16
 80002ac:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80002ae:	2311      	movs	r3, #17
 80002b0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	4619      	mov	r1, r3
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <MX_FSMC_Init+0xbc>)
 80002be:	f001 ffd9 	bl	8002274 <HAL_SRAM_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80002c8:	f001 f84b 	bl	8001362 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <MX_FSMC_Init+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000030 	.word	0x20000030
 80002e4:	a0000104 	.word	0xa0000104
 80002e8:	40010000 	.word	0x40010000

080002ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d129      	bne.n	800035c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <HAL_FSMC_MspInit+0x78>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 8000314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b13      	ldr	r3, [pc, #76]	; (8000368 <HAL_FSMC_MspInit+0x7c>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000326:	f64f 7380 	movw	r3, #65408	; 0xff80
 800032a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000330:	2303      	movs	r3, #3
 8000332:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	4619      	mov	r1, r3
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <HAL_FSMC_MspInit+0x80>)
 800033c:	f001 fa06 	bl	800174c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000340:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000344:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000346:	2302      	movs	r3, #2
 8000348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_FSMC_MspInit+0x84>)
 8000356:	f001 f9f9 	bl	800174c <HAL_GPIO_Init>
 800035a:	e000      	b.n	800035e <HAL_FSMC_MspInit+0x72>
    return;
 800035c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000028 	.word	0x20000028
 8000368:	40021000 	.word	0x40021000
 800036c:	40011800 	.word	0x40011800
 8000370:	40011400 	.word	0x40011400

08000374 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800037c:	f7ff ffb6 	bl	80002ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_GPIO_Init+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <MX_GPIO_Init+0x40>)
 8000394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_GPIO_Init+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_GPIO_Init+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <MX_GPIO_Init+0x40>)
 80003ac:	f043 0320 	orr.w	r3, r3, #32
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MX_GPIO_Init+0x40>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0320 	and.w	r3, r3, #32
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <lcd_rst>:
unsigned int  BACK_COLOR=0XFFFF;



void lcd_rst(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	LCD_RESET_LOW();
 80003d0:	2200      	movs	r2, #0
 80003d2:	2102      	movs	r1, #2
 80003d4:	480c      	ldr	r0, [pc, #48]	; (8000408 <lcd_rst+0x3c>)
 80003d6:	f001 fb4d 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80003da:	200a      	movs	r0, #10
 80003dc:	f001 f8ae 	bl	800153c <HAL_Delay>
	HAL_Delay(10);
 80003e0:	200a      	movs	r0, #10
 80003e2:	f001 f8ab 	bl	800153c <HAL_Delay>
	HAL_Delay(10);
 80003e6:	200a      	movs	r0, #10
 80003e8:	f001 f8a8 	bl	800153c <HAL_Delay>
	HAL_Delay(10);
 80003ec:	200a      	movs	r0, #10
 80003ee:	f001 f8a5 	bl	800153c <HAL_Delay>
	HAL_Delay(10);
 80003f2:	200a      	movs	r0, #10
 80003f4:	f001 f8a2 	bl	800153c <HAL_Delay>
    LCD_RESET_HIGH();	
 80003f8:	2201      	movs	r2, #1
 80003fa:	2102      	movs	r1, #2
 80003fc:	4802      	ldr	r0, [pc, #8]	; (8000408 <lcd_rst+0x3c>)
 80003fe:	f001 fb39 	bl	8001a74 <HAL_GPIO_WritePin>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40011800 	.word	0x40011800

0800040c <lcd_wr_reg>:

void lcd_wr_reg(unsigned int index)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	*(__IO uint16_t *) (Bank1_LCD_C)= index;
 8000414:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	b292      	uxth	r2, r2
 800041c:	801a      	strh	r2, [r3, #0]

}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr

08000428 <lcd_wr_reg_value>:
}



void lcd_wr_reg_value(u16 LCD_Reg, u16 LCD_RegValue)
{	
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	460a      	mov	r2, r1
 8000432:	80fb      	strh	r3, [r7, #6]
 8000434:	4613      	mov	r3, r2
 8000436:	80bb      	strh	r3, [r7, #4]
	*(__IO uint16_t *) (Bank1_LCD_C)= LCD_Reg;	
 8000438:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800043c:	88fb      	ldrh	r3, [r7, #6]
 800043e:	8013      	strh	r3, [r2, #0]
	*(__IO uint16_t *) (Bank1_LCD_D)= LCD_RegValue;
 8000440:	4a03      	ldr	r2, [pc, #12]	; (8000450 <lcd_wr_reg_value+0x28>)
 8000442:	88bb      	ldrh	r3, [r7, #4]
 8000444:	8013      	strh	r3, [r2, #0]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	60020000 	.word	0x60020000

08000454 <lcd_rd_data>:


unsigned int lcd_rd_data(void)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
	unsigned int a=0;
 800045a:	2300      	movs	r3, #0
 800045c:	607b      	str	r3, [r7, #4]
	//a=(*(__IO uint16_t *) (Bank1_LCD_D)); 	//Dummy
	//a= *(__IO uint16_t *) (Bank1_LCD_D);  	//H
	//a=a<<8;
	a=*(__IO uint16_t *) (Bank1_LCD_D); //L
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <lcd_rd_data+0x20>)
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	b29b      	uxth	r3, r3
 8000464:	607b      	str	r3, [r7, #4]

	return(a);	
 8000466:	687b      	ldr	r3, [r7, #4]
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	60020000 	.word	0x60020000

08000478 <lcd_wr_data>:

void lcd_wr_data(unsigned int val)
{   
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	*(__IO uint16_t *) (Bank1_LCD_D)= val; 	
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <lcd_wr_data+0x1c>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	b292      	uxth	r2, r2
 8000486:	801a      	strh	r2, [r3, #0]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	60020000 	.word	0x60020000

08000498 <bsp_lcd32_init>:
extern unsigned int  BACK_COLOR;

extern u16 lcd_id;	 

void bsp_lcd32_init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 800049c:	200a      	movs	r0, #10
 800049e:	f001 f84d 	bl	800153c <HAL_Delay>
	LCD_CS_HIGH();
 80004a2:	2201      	movs	r2, #1
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	489f      	ldr	r0, [pc, #636]	; (8000724 <bsp_lcd32_init+0x28c>)
 80004a8:	f001 fae4 	bl	8001a74 <HAL_GPIO_WritePin>

	// LCD Data(0 ~ 7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14| GPIO_PIN_15 |GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET);  	 
 80004ac:	2201      	movs	r2, #1
 80004ae:	f24c 0103 	movw	r1, #49155	; 0xc003
 80004b2:	489c      	ldr	r0, [pc, #624]	; (8000724 <bsp_lcd32_init+0x28c>)
 80004b4:	f001 fade 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_SET);   
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80004be:	489a      	ldr	r0, [pc, #616]	; (8000728 <bsp_lcd32_init+0x290>)
 80004c0:	f001 fad8 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14| GPIO_PIN_15 |GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_SET );  	 
 80004c4:	2201      	movs	r2, #1
 80004c6:	f24c 7103 	movw	r1, #50947	; 0xc703
 80004ca:	4896      	ldr	r0, [pc, #600]	; (8000724 <bsp_lcd32_init+0x28c>)
 80004cc:	f001 fad2 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |  GPIO_PIN_15, GPIO_PIN_SET);   
 80004d0:	2201      	movs	r2, #1
 80004d2:	f64f 7180 	movw	r1, #65408	; 0xff80
 80004d6:	4894      	ldr	r0, [pc, #592]	; (8000728 <bsp_lcd32_init+0x290>)
 80004d8:	f001 facc 	bl	8001a74 <HAL_GPIO_WritePin>
	
	LCD_RESET_LOW();
 80004dc:	2200      	movs	r2, #0
 80004de:	2102      	movs	r1, #2
 80004e0:	4891      	ldr	r0, [pc, #580]	; (8000728 <bsp_lcd32_init+0x290>)
 80004e2:	f001 fac7 	bl	8001a74 <HAL_GPIO_WritePin>

	LCD_RD_HIGH();
 80004e6:	2201      	movs	r2, #1
 80004e8:	2110      	movs	r1, #16
 80004ea:	488e      	ldr	r0, [pc, #568]	; (8000724 <bsp_lcd32_init+0x28c>)
 80004ec:	f001 fac2 	bl	8001a74 <HAL_GPIO_WritePin>
	LCD_WR_HIGH();
 80004f0:	2201      	movs	r2, #1
 80004f2:	2120      	movs	r1, #32
 80004f4:	488b      	ldr	r0, [pc, #556]	; (8000724 <bsp_lcd32_init+0x28c>)
 80004f6:	f001 fabd 	bl	8001a74 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80004fa:	200a      	movs	r0, #10
 80004fc:	f001 f81e 	bl	800153c <HAL_Delay>

	HAL_Delay(10);
 8000500:	200a      	movs	r0, #10
 8000502:	f001 f81b 	bl	800153c <HAL_Delay>
	lcd_rst();	
 8000506:	f7ff ff61 	bl	80003cc <lcd_rst>

	HAL_Delay(20);
 800050a:	2014      	movs	r0, #20
 800050c:	f001 f816 	bl	800153c <HAL_Delay>
	HAL_Delay(20);
 8000510:	2014      	movs	r0, #20
 8000512:	f001 f813 	bl	800153c <HAL_Delay>
	HAL_Delay(20);
 8000516:	2014      	movs	r0, #20
 8000518:	f001 f810 	bl	800153c <HAL_Delay>
	HAL_Delay(20);
 800051c:	2014      	movs	r0, #20
 800051e:	f001 f80d 	bl	800153c <HAL_Delay>

	LCD_PWM_LIGHT_LOW();
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000528:	487e      	ldr	r0, [pc, #504]	; (8000724 <bsp_lcd32_init+0x28c>)
 800052a:	f001 faa3 	bl	8001a74 <HAL_GPIO_WritePin>

	HAL_Delay(5); 
 800052e:	2005      	movs	r0, #5
 8000530:	f001 f804 	bl	800153c <HAL_Delay>
	lcd_wr_reg_value(0x0000,0x0001);
 8000534:	2101      	movs	r1, #1
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff ff76 	bl	8000428 <lcd_wr_reg_value>
	HAL_Delay(10); 
 800053c:	200a      	movs	r0, #10
 800053e:	f000 fffd 	bl	800153c <HAL_Delay>
	
	
	// HX8347A device id(Himax ID code)	= 0x0047
	lcd_wr_reg(0x0067);
 8000542:	2067      	movs	r0, #103	; 0x67
 8000544:	f7ff ff62 	bl	800040c <lcd_wr_reg>
	lcd_id = lcd_rd_data();
 8000548:	f7ff ff84 	bl	8000454 <lcd_rd_data>
 800054c:	4603      	mov	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	4b76      	ldr	r3, [pc, #472]	; (800072c <bsp_lcd32_init+0x294>)
 8000552:	801a      	strh	r2, [r3, #0]
	
	if(lcd_id != 0x0047)
 8000554:	4b75      	ldr	r3, [pc, #468]	; (800072c <bsp_lcd32_init+0x294>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	2b47      	cmp	r3, #71	; 0x47
 800055a:	d00b      	beq.n	8000574 <bsp_lcd32_init+0xdc>
	{		
		// ILI93xx Series device id
		HAL_Delay(5); 
 800055c:	2005      	movs	r0, #5
 800055e:	f000 ffed 	bl	800153c <HAL_Delay>
		lcd_wr_reg(0x0000);
 8000562:	2000      	movs	r0, #0
 8000564:	f7ff ff52 	bl	800040c <lcd_wr_reg>
		lcd_id = lcd_rd_data();
 8000568:	f7ff ff74 	bl	8000454 <lcd_rd_data>
 800056c:	4603      	mov	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b6e      	ldr	r3, [pc, #440]	; (800072c <bsp_lcd32_init+0x294>)
 8000572:	801a      	strh	r2, [r3, #0]
	}
	
	
	if(lcd_id==0x9220 )	// ILI9220
 8000574:	4b6d      	ldr	r3, [pc, #436]	; (800072c <bsp_lcd32_init+0x294>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	f249 2220 	movw	r2, #37408	; 0x9220
 800057c:	4293      	cmp	r3, r2
 800057e:	f040 80d7 	bne.w	8000730 <bsp_lcd32_init+0x298>
	{
		lcd_wr_reg_value(0x0001,0x001B);
 8000582:	211b      	movs	r1, #27
 8000584:	2001      	movs	r0, #1
 8000586:	f7ff ff4f 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0002,0x0700);
 800058a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800058e:	2002      	movs	r0, #2
 8000590:	f7ff ff4a 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0003,0x1030);
 8000594:	f241 0130 	movw	r1, #4144	; 0x1030
 8000598:	2003      	movs	r0, #3
 800059a:	f7ff ff45 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0004,0x0000);     
 800059e:	2100      	movs	r1, #0
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ff41 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0005,0x0000);
 80005a6:	2100      	movs	r1, #0
 80005a8:	2005      	movs	r0, #5
 80005aa:	f7ff ff3d 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0007,0x0004);      
 80005ae:	2104      	movs	r1, #4
 80005b0:	2007      	movs	r0, #7
 80005b2:	f7ff ff39 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0008,0x0202);
 80005b6:	f240 2102 	movw	r1, #514	; 0x202
 80005ba:	2008      	movs	r0, #8
 80005bc:	f7ff ff34 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0009,0x0000);
 80005c0:	2100      	movs	r1, #0
 80005c2:	2009      	movs	r0, #9
 80005c4:	f7ff ff30 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x000B,0x0004);  
 80005c8:	2104      	movs	r1, #4
 80005ca:	200b      	movs	r0, #11
 80005cc:	f7ff ff2c 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x000C,0x0003);
 80005d0:	2103      	movs	r1, #3
 80005d2:	200c      	movs	r0, #12
 80005d4:	f7ff ff28 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x000B,0x0004);
 80005d8:	2104      	movs	r1, #4
 80005da:	200b      	movs	r0, #11
 80005dc:	f7ff ff24 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0021,0x0000);
 80005e0:	2100      	movs	r1, #0
 80005e2:	2021      	movs	r0, #33	; 0x21
 80005e4:	f7ff ff20 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0040,0x0000);
 80005e8:	2100      	movs	r1, #0
 80005ea:	2040      	movs	r0, #64	; 0x40
 80005ec:	f7ff ff1c 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0041,0x00EF);
 80005f0:	21ef      	movs	r1, #239	; 0xef
 80005f2:	2041      	movs	r0, #65	; 0x41
 80005f4:	f7ff ff18 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0042,0xDB00);
 80005f8:	f44f 415b 	mov.w	r1, #56064	; 0xdb00
 80005fc:	2042      	movs	r0, #66	; 0x42
 80005fe:	f7ff ff13 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0043,0xDB00);
 8000602:	f44f 415b 	mov.w	r1, #56064	; 0xdb00
 8000606:	2043      	movs	r0, #67	; 0x43
 8000608:	f7ff ff0e 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0044,0xAF00);
 800060c:	f44f 412f 	mov.w	r1, #44800	; 0xaf00
 8000610:	2044      	movs	r0, #68	; 0x44
 8000612:	f7ff ff09 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0045,0xDB00);
 8000616:	f44f 415b 	mov.w	r1, #56064	; 0xdb00
 800061a:	2045      	movs	r0, #69	; 0x45
 800061c:	f7ff ff04 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000620:	200a      	movs	r0, #10
 8000622:	f000 ff8b 	bl	800153c <HAL_Delay>
		
		//################# void Gamma_Set(void) ####################//
		lcd_wr_reg_value(0x0030,0x0000);  
 8000626:	2100      	movs	r1, #0
 8000628:	2030      	movs	r0, #48	; 0x30
 800062a:	f7ff fefd 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0031,0x0704);  
 800062e:	f240 7104 	movw	r1, #1796	; 0x704
 8000632:	2031      	movs	r0, #49	; 0x31
 8000634:	f7ff fef8 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0032,0x0004);  
 8000638:	2104      	movs	r1, #4
 800063a:	2032      	movs	r0, #50	; 0x32
 800063c:	f7ff fef4 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0033,0x0604);  
 8000640:	f240 6104 	movw	r1, #1540	; 0x604
 8000644:	2033      	movs	r0, #51	; 0x33
 8000646:	f7ff feef 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0034,0x0307);  
 800064a:	f240 3107 	movw	r1, #775	; 0x307
 800064e:	2034      	movs	r0, #52	; 0x34
 8000650:	f7ff feea 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0035,0x0103);  
 8000654:	f240 1103 	movw	r1, #259	; 0x103
 8000658:	2035      	movs	r0, #53	; 0x35
 800065a:	f7ff fee5 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0036,0x0707);  
 800065e:	f240 7107 	movw	r1, #1799	; 0x707
 8000662:	2036      	movs	r0, #54	; 0x36
 8000664:	f7ff fee0 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0037,0x0603);  
 8000668:	f240 6103 	movw	r1, #1539	; 0x603
 800066c:	2037      	movs	r0, #55	; 0x37
 800066e:	f7ff fedb 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0038,0x0000);  
 8000672:	2100      	movs	r1, #0
 8000674:	2038      	movs	r0, #56	; 0x38
 8000676:	f7ff fed7 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0039,0x0000);
 800067a:	2100      	movs	r1, #0
 800067c:	2039      	movs	r0, #57	; 0x39
 800067e:	f7ff fed3 	bl	8000428 <lcd_wr_reg_value>
		//############# void Power_Set(void) ################//
		lcd_wr_reg_value(0x0010,0x0000);
 8000682:	2100      	movs	r1, #0
 8000684:	2010      	movs	r0, #16
 8000686:	f7ff fecf 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0011,0x0000);
 800068a:	2100      	movs	r1, #0
 800068c:	2011      	movs	r0, #17
 800068e:	f7ff fecb 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0013,0x1413);
 8000692:	f241 4113 	movw	r1, #5139	; 0x1413
 8000696:	2013      	movs	r0, #19
 8000698:	f7ff fec6 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0012,0x0008);
 800069c:	2108      	movs	r1, #8
 800069e:	2012      	movs	r0, #18
 80006a0:	f7ff fec2 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 ff49 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x0012,0x0018);
 80006aa:	2118      	movs	r1, #24
 80006ac:	2012      	movs	r0, #18
 80006ae:	f7ff febb 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 80006b2:	200a      	movs	r0, #10
 80006b4:	f000 ff42 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x0010,0x0140);
 80006b8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80006bc:	2010      	movs	r0, #16
 80006be:	f7ff feb3 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20);
 80006c2:	2014      	movs	r0, #20
 80006c4:	f000 ff3a 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x0013,0x3414);
 80006c8:	f243 4114 	movw	r1, #13332	; 0x3414
 80006cc:	2013      	movs	r0, #19
 80006ce:	f7ff feab 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 80006d2:	200a      	movs	r0, #10
 80006d4:	f000 ff32 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0010,0x2140);
 80006d8:	f44f 5105 	mov.w	r1, #8512	; 0x2140
 80006dc:	2010      	movs	r0, #16
 80006de:	f7ff fea3 	bl	8000428 <lcd_wr_reg_value>
		
		//################## void Display_ON(void) ####################//
		lcd_wr_reg_value(0x0010,0x4040);
 80006e2:	f244 0140 	movw	r1, #16448	; 0x4040
 80006e6:	2010      	movs	r0, #16
 80006e8:	f7ff fe9e 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0007,0x0005);
 80006ec:	2105      	movs	r1, #5
 80006ee:	2007      	movs	r0, #7
 80006f0:	f7ff fe9a 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(4);
 80006f4:	2004      	movs	r0, #4
 80006f6:	f000 ff21 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x0007,0x0025);
 80006fa:	2125      	movs	r1, #37	; 0x25
 80006fc:	2007      	movs	r0, #7
 80006fe:	f7ff fe93 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0007,0x0027);
 8000702:	2127      	movs	r1, #39	; 0x27
 8000704:	2007      	movs	r0, #7
 8000706:	f7ff fe8f 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(4);
 800070a:	2004      	movs	r0, #4
 800070c:	f000 ff16 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x0007,0x0037);
 8000710:	2137      	movs	r1, #55	; 0x37
 8000712:	2007      	movs	r0, #7
 8000714:	f7ff fe88 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f000 ff0f 	bl	800153c <HAL_Delay>
 800071e:	f000 bcdc 	b.w	80010da <bsp_lcd32_init+0xc42>
 8000722:	bf00      	nop
 8000724:	40011400 	.word	0x40011400
 8000728:	40011800 	.word	0x40011800
 800072c:	2000002c 	.word	0x2000002c

	}
	else if(lcd_id==0x9325||lcd_id==0x9328)//ILI9325
 8000730:	4bf6      	ldr	r3, [pc, #984]	; (8000b0c <bsp_lcd32_init+0x674>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	f249 3225 	movw	r2, #37669	; 0x9325
 8000738:	4293      	cmp	r3, r2
 800073a:	d006      	beq.n	800074a <bsp_lcd32_init+0x2b2>
 800073c:	4bf3      	ldr	r3, [pc, #972]	; (8000b0c <bsp_lcd32_init+0x674>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	f249 3228 	movw	r2, #37672	; 0x9328
 8000744:	4293      	cmp	r3, r2
 8000746:	f040 8105 	bne.w	8000954 <bsp_lcd32_init+0x4bc>
	{
		lcd_wr_reg_value(0x00e7,0x0010);      
 800074a:	2110      	movs	r1, #16
 800074c:	20e7      	movs	r0, #231	; 0xe7
 800074e:	f7ff fe6b 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0000,0x0001); // opening internal clock
 8000752:	2101      	movs	r1, #1
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff fe67 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0001,0x0100);     
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff fe62 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0002,0x0700); // power source opening                    
 8000764:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000768:	2002      	movs	r0, #2
 800076a:	f7ff fe5d 	bl	8000428 <lcd_wr_reg_value>
		// 1 1 0 D->U L->R
		// 0 0 1 R->L U->D
		// 1 0 1 U->D R->L
		// 0 1 1 L->R U->D normal uses this.  	
		// 1 1 1 U->D L->R
        lcd_wr_reg_value(0x0003,(1<<12)|(3<<4)|(0<<3)); //65K    
 800076e:	f241 0130 	movw	r1, #4144	; 0x1030
 8000772:	2003      	movs	r0, #3
 8000774:	f7ff fe58 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0004,0x0000);                                   
 8000778:	2100      	movs	r1, #0
 800077a:	2004      	movs	r0, #4
 800077c:	f7ff fe54 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0008,0x0207);	           
 8000780:	f240 2107 	movw	r1, #519	; 0x207
 8000784:	2008      	movs	r0, #8
 8000786:	f7ff fe4f 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0009,0x0000);         
 800078a:	2100      	movs	r1, #0
 800078c:	2009      	movs	r0, #9
 800078e:	f7ff fe4b 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x000a,0x0000); //display setting         
 8000792:	2100      	movs	r1, #0
 8000794:	200a      	movs	r0, #10
 8000796:	f7ff fe47 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x000c,0x0001); //display setting          
 800079a:	2101      	movs	r1, #1
 800079c:	200c      	movs	r0, #12
 800079e:	f7ff fe43 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x000d,0x0000); //0f3c          
 80007a2:	2100      	movs	r1, #0
 80007a4:	200d      	movs	r0, #13
 80007a6:	f7ff fe3f 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x000f,0x0000);
 80007aa:	2100      	movs	r1, #0
 80007ac:	200f      	movs	r0, #15
 80007ae:	f7ff fe3b 	bl	8000428 <lcd_wr_reg_value>
		// power source disposition
        lcd_wr_reg_value(0x0010,0x0000);   
 80007b2:	2100      	movs	r1, #0
 80007b4:	2010      	movs	r0, #16
 80007b6:	f7ff fe37 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0011,0x0007);
 80007ba:	2107      	movs	r1, #7
 80007bc:	2011      	movs	r0, #17
 80007be:	f7ff fe33 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0012,0x0000);                                                                 
 80007c2:	2100      	movs	r1, #0
 80007c4:	2012      	movs	r0, #18
 80007c6:	f7ff fe2f 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0013,0x0000);                 
 80007ca:	2100      	movs	r1, #0
 80007cc:	2013      	movs	r0, #19
 80007ce:	f7ff fe2b 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(5); 
 80007d2:	2005      	movs	r0, #5
 80007d4:	f000 feb2 	bl	800153c <HAL_Delay>
        lcd_wr_reg_value(0x0010,0x1590);   
 80007d8:	f241 5190 	movw	r1, #5520	; 0x1590
 80007dc:	2010      	movs	r0, #16
 80007de:	f7ff fe23 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0011,0x0227);
 80007e2:	f240 2127 	movw	r1, #551	; 0x227
 80007e6:	2011      	movs	r0, #17
 80007e8:	f7ff fe1e 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(5); 
 80007ec:	2005      	movs	r0, #5
 80007ee:	f000 fea5 	bl	800153c <HAL_Delay>
        lcd_wr_reg_value(0x0012,0x009c);                  
 80007f2:	219c      	movs	r1, #156	; 0x9c
 80007f4:	2012      	movs	r0, #18
 80007f6:	f7ff fe17 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(5); 
 80007fa:	2005      	movs	r0, #5
 80007fc:	f000 fe9e 	bl	800153c <HAL_Delay>
        lcd_wr_reg_value(0x0013,0x1900);   
 8000800:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8000804:	2013      	movs	r0, #19
 8000806:	f7ff fe0f 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0029,0x0023);
 800080a:	2123      	movs	r1, #35	; 0x23
 800080c:	2029      	movs	r0, #41	; 0x29
 800080e:	f7ff fe0b 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x002b,0x000e);
 8000812:	210e      	movs	r1, #14
 8000814:	202b      	movs	r0, #43	; 0x2b
 8000816:	f7ff fe07 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(5); 
 800081a:	2005      	movs	r0, #5
 800081c:	f000 fe8e 	bl	800153c <HAL_Delay>
        lcd_wr_reg_value(0x0020,0x0000);                                                            
 8000820:	2100      	movs	r1, #0
 8000822:	2020      	movs	r0, #32
 8000824:	f7ff fe00 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0021,0x013f);           
 8000828:	f240 113f 	movw	r1, #319	; 0x13f
 800082c:	2021      	movs	r0, #33	; 0x21
 800082e:	f7ff fdfb 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(5); 
 8000832:	2005      	movs	r0, #5
 8000834:	f000 fe82 	bl	800153c <HAL_Delay>
		// gamma adjustment
        lcd_wr_reg_value(0x0030,0x0007); 
 8000838:	2107      	movs	r1, #7
 800083a:	2030      	movs	r0, #48	; 0x30
 800083c:	f7ff fdf4 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0031,0x0707);   
 8000840:	f240 7107 	movw	r1, #1799	; 0x707
 8000844:	2031      	movs	r0, #49	; 0x31
 8000846:	f7ff fdef 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0032,0x0006);
 800084a:	2106      	movs	r1, #6
 800084c:	2032      	movs	r0, #50	; 0x32
 800084e:	f7ff fdeb 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0035,0x0704);
 8000852:	f240 7104 	movw	r1, #1796	; 0x704
 8000856:	2035      	movs	r0, #53	; 0x35
 8000858:	f7ff fde6 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0036,0x1f04); 
 800085c:	f641 7104 	movw	r1, #7940	; 0x1f04
 8000860:	2036      	movs	r0, #54	; 0x36
 8000862:	f7ff fde1 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0037,0x0004);
 8000866:	2104      	movs	r1, #4
 8000868:	2037      	movs	r0, #55	; 0x37
 800086a:	f7ff fddd 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0038,0x0000);        
 800086e:	2100      	movs	r1, #0
 8000870:	2038      	movs	r0, #56	; 0x38
 8000872:	f7ff fdd9 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0039,0x0706);     
 8000876:	f240 7106 	movw	r1, #1798	; 0x706
 800087a:	2039      	movs	r0, #57	; 0x39
 800087c:	f7ff fdd4 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x003c,0x0701);
 8000880:	f240 7101 	movw	r1, #1793	; 0x701
 8000884:	203c      	movs	r0, #60	; 0x3c
 8000886:	f7ff fdcf 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x003d,0x000f);
 800088a:	210f      	movs	r1, #15
 800088c:	203d      	movs	r0, #61	; 0x3d
 800088e:	f7ff fdcb 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(5); 
 8000892:	2005      	movs	r0, #5
 8000894:	f000 fe52 	bl	800153c <HAL_Delay>
        lcd_wr_reg_value(0x0050,0x0000); // level GRAM reference 
 8000898:	2100      	movs	r1, #0
 800089a:	2050      	movs	r0, #80	; 0x50
 800089c:	f7ff fdc4 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0051,0x00ef); // level GRAM terminated the position                    
 80008a0:	21ef      	movs	r1, #239	; 0xef
 80008a2:	2051      	movs	r0, #81	; 0x51
 80008a4:	f7ff fdc0 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0052,0x0000); // vertical GRAM reference                    
 80008a8:	2100      	movs	r1, #0
 80008aa:	2052      	movs	r0, #82	; 0x52
 80008ac:	f7ff fdbc 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0053,0x013f); // vertical GRAM terminated the position  
 80008b0:	f240 113f 	movw	r1, #319	; 0x13f
 80008b4:	2053      	movs	r0, #83	; 0x53
 80008b6:	f7ff fdb7 	bl	8000428 <lcd_wr_reg_value>
        
        lcd_wr_reg_value(0x0060,0xa700);        
 80008ba:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80008be:	2060      	movs	r0, #96	; 0x60
 80008c0:	f7ff fdb2 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0061,0x0001); 
 80008c4:	2101      	movs	r1, #1
 80008c6:	2061      	movs	r0, #97	; 0x61
 80008c8:	f7ff fdae 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x006a,0x0000);
 80008cc:	2100      	movs	r1, #0
 80008ce:	206a      	movs	r0, #106	; 0x6a
 80008d0:	f7ff fdaa 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0080,0x0000);
 80008d4:	2100      	movs	r1, #0
 80008d6:	2080      	movs	r0, #128	; 0x80
 80008d8:	f7ff fda6 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0081,0x0000);
 80008dc:	2100      	movs	r1, #0
 80008de:	2081      	movs	r0, #129	; 0x81
 80008e0:	f7ff fda2 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0082,0x0000);
 80008e4:	2100      	movs	r1, #0
 80008e6:	2082      	movs	r0, #130	; 0x82
 80008e8:	f7ff fd9e 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0083,0x0000);
 80008ec:	2100      	movs	r1, #0
 80008ee:	2083      	movs	r0, #131	; 0x83
 80008f0:	f7ff fd9a 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0084,0x0000);
 80008f4:	2100      	movs	r1, #0
 80008f6:	2084      	movs	r0, #132	; 0x84
 80008f8:	f7ff fd96 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0085,0x0000);
 80008fc:	2100      	movs	r1, #0
 80008fe:	2085      	movs	r0, #133	; 0x85
 8000900:	f7ff fd92 	bl	8000428 <lcd_wr_reg_value>
      
        lcd_wr_reg_value(0x0090,0x0010);     
 8000904:	2110      	movs	r1, #16
 8000906:	2090      	movs	r0, #144	; 0x90
 8000908:	f7ff fd8e 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0092,0x0000);  
 800090c:	2100      	movs	r1, #0
 800090e:	2092      	movs	r0, #146	; 0x92
 8000910:	f7ff fd8a 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0093,0x0003);
 8000914:	2103      	movs	r1, #3
 8000916:	2093      	movs	r0, #147	; 0x93
 8000918:	f7ff fd86 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0095,0x0110);
 800091c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000920:	2095      	movs	r0, #149	; 0x95
 8000922:	f7ff fd81 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0097,0x0000);        
 8000926:	2100      	movs	r1, #0
 8000928:	2097      	movs	r0, #151	; 0x97
 800092a:	f7ff fd7d 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0098,0x0000);  
 800092e:	2100      	movs	r1, #0
 8000930:	2098      	movs	r0, #152	; 0x98
 8000932:	f7ff fd79 	bl	8000428 <lcd_wr_reg_value>
        // opens the demonstration establishment    
        lcd_wr_reg_value(0x0007,0x0133);   
 8000936:	f240 1133 	movw	r1, #307	; 0x133
 800093a:	2007      	movs	r0, #7
 800093c:	f7ff fd74 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0020,0x0000);                                                            
 8000940:	2100      	movs	r1, #0
 8000942:	2020      	movs	r0, #32
 8000944:	f7ff fd70 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0021,0x013f);
 8000948:	f240 113f 	movw	r1, #319	; 0x13f
 800094c:	2021      	movs	r0, #33	; 0x21
 800094e:	f7ff fd6b 	bl	8000428 <lcd_wr_reg_value>
 8000952:	e3c2      	b.n	80010da <bsp_lcd32_init+0xc42>
	} 
	else if(lcd_id==0x9320 || lcd_id==0x9300)
 8000954:	4b6d      	ldr	r3, [pc, #436]	; (8000b0c <bsp_lcd32_init+0x674>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	f249 3220 	movw	r2, #37664	; 0x9320
 800095c:	4293      	cmp	r3, r2
 800095e:	d005      	beq.n	800096c <bsp_lcd32_init+0x4d4>
 8000960:	4b6a      	ldr	r3, [pc, #424]	; (8000b0c <bsp_lcd32_init+0x674>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8000968:	f040 80d2 	bne.w	8000b10 <bsp_lcd32_init+0x678>
	{
		lcd_wr_reg_value(0x00,0x0001);
 800096c:	2101      	movs	r1, #1
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fd5a 	bl	8000428 <lcd_wr_reg_value>

		HAL_Delay(50);
 8000974:	2032      	movs	r0, #50	; 0x32
 8000976:	f000 fde1 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x01,0x0100);	//Driver Output Contral.
 800097a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff fd52 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x02,0x0700);	//LCD Driver Waveform Contral.
 8000984:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000988:	2002      	movs	r0, #2
 800098a:	f7ff fd4d 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20); 
 800098e:	2014      	movs	r0, #20
 8000990:	f000 fdd4 	bl	800153c <HAL_Delay>
		
		
		// ���θ��
		lcd_wr_reg_value(0x03,0x1010); //Entry Mode establishment 	   
 8000994:	f241 0110 	movw	r1, #4112	; 0x1010
 8000998:	2003      	movs	r0, #3
 800099a:	f7ff fd45 	bl	8000428 <lcd_wr_reg_value>
		// ���θ��
		//lcd_wr_reg_value(0x03,0x1018); 
		
		HAL_Delay(20); 
 800099e:	2014      	movs	r0, #20
 80009a0:	f000 fdcc 	bl	800153c <HAL_Delay>
	
		lcd_wr_reg_value(0x04,0x0000);	//Scalling Contral.
 80009a4:	2100      	movs	r1, #0
 80009a6:	2004      	movs	r0, #4
 80009a8:	f7ff fd3e 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x08,0x0202);	//Display Contral 2. (0x0207)
 80009ac:	f240 2102 	movw	r1, #514	; 0x202
 80009b0:	2008      	movs	r0, #8
 80009b2:	f7ff fd39 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x09,0x0000);	//Display Contral 3. (0x0000)
 80009b6:	2100      	movs	r1, #0
 80009b8:	2009      	movs	r0, #9
 80009ba:	f7ff fd35 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0a,0x0000);	//Frame Cycle Contal. (0x0000)
 80009be:	2100      	movs	r1, #0
 80009c0:	200a      	movs	r0, #10
 80009c2:	f7ff fd31 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0c,(1<<0));	//Extern Display Interface Contral 1. (0x0000)
 80009c6:	2101      	movs	r1, #1
 80009c8:	200c      	movs	r0, #12
 80009ca:	f7ff fd2d 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0d,0x0000);	//Frame Maker Position.
 80009ce:	2100      	movs	r1, #0
 80009d0:	200d      	movs	r0, #13
 80009d2:	f7ff fd29 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0f,0x0000);	//Extern Display Interface Contral 2.	    
 80009d6:	2100      	movs	r1, #0
 80009d8:	200f      	movs	r0, #15
 80009da:	f7ff fd25 	bl	8000428 <lcd_wr_reg_value>

		HAL_Delay(20); 
 80009de:	2014      	movs	r0, #20
 80009e0:	f000 fdac 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x07,0x0101);	//Display Contral.
 80009e4:	f240 1101 	movw	r1, #257	; 0x101
 80009e8:	2007      	movs	r0, #7
 80009ea:	f7ff fd1d 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20); 								  
 80009ee:	2014      	movs	r0, #20
 80009f0:	f000 fda4 	bl	800153c <HAL_Delay>

		lcd_wr_reg_value(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1. (0x16b0)
 80009f4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80009f8:	2010      	movs	r0, #16
 80009fa:	f7ff fd15 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20); 
 80009fe:	2014      	movs	r0, #20
 8000a00:	f000 fd9c 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x11,0x0007);								//Power Control 2. (0x0001)
 8000a04:	2107      	movs	r1, #7
 8000a06:	2011      	movs	r0, #17
 8000a08:	f7ff fd0e 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(40); 
 8000a0c:	2028      	movs	r0, #40	; 0x28
 8000a0e:	f000 fd95 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3. (0x0138)
 8000a12:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000a16:	2012      	movs	r0, #18
 8000a18:	f7ff fd06 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(40); 
 8000a1c:	2028      	movs	r0, #40	; 0x28
 8000a1e:	f000 fd8d 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x13,0x0b00);								//Power Control 4.
 8000a22:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8000a26:	2013      	movs	r0, #19
 8000a28:	f7ff fcfe 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20); 
 8000a2c:	2014      	movs	r0, #20
 8000a2e:	f000 fd85 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x29,0x0000);								//Power Control 7.
 8000a32:	2100      	movs	r1, #0
 8000a34:	2029      	movs	r0, #41	; 0x29
 8000a36:	f7ff fcf7 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20); 
 8000a3a:	2014      	movs	r0, #20
 8000a3c:	f000 fd7e 	bl	800153c <HAL_Delay>
	
		lcd_wr_reg_value(0x2b,(1<<14)|(1<<4));	    
 8000a40:	f244 0110 	movw	r1, #16400	; 0x4010
 8000a44:	202b      	movs	r0, #43	; 0x2b
 8000a46:	f7ff fcef 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x50,0);	//Set X Star
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2050      	movs	r0, #80	; 0x50
 8000a4e:	f7ff fceb 	bl	8000428 <lcd_wr_reg_value>
		// level GRAM terminated position Set X End.
		lcd_wr_reg_value(0x51,239);	//Set Y Star
 8000a52:	21ef      	movs	r1, #239	; 0xef
 8000a54:	2051      	movs	r0, #81	; 0x51
 8000a56:	f7ff fce7 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x52,0);	//Set Y End.t.
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2052      	movs	r0, #82	; 0x52
 8000a5e:	f7ff fce3 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x53,319);	//
 8000a62:	f240 113f 	movw	r1, #319	; 0x13f
 8000a66:	2053      	movs	r0, #83	; 0x53
 8000a68:	f7ff fcde 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20); 
 8000a6c:	2014      	movs	r0, #20
 8000a6e:	f000 fd65 	bl	800153c <HAL_Delay>
	
		lcd_wr_reg_value(0x60,0x2700);	//Driver Output Control.
 8000a72:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8000a76:	2060      	movs	r0, #96	; 0x60
 8000a78:	f7ff fcd6 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x61,0x0001);	//Driver Output Control.
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2061      	movs	r0, #97	; 0x61
 8000a80:	f7ff fcd2 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x6a,0x0000);	//Vertical Srcoll Control.
 8000a84:	2100      	movs	r1, #0
 8000a86:	206a      	movs	r0, #106	; 0x6a
 8000a88:	f7ff fcce 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20); 
 8000a8c:	2014      	movs	r0, #20
 8000a8e:	f000 fd55 	bl	800153c <HAL_Delay>
	
		lcd_wr_reg_value(0x80,0x0000);	//Display Position? Partial Display 1.
 8000a92:	2100      	movs	r1, #0
 8000a94:	2080      	movs	r0, #128	; 0x80
 8000a96:	f7ff fcc7 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2081      	movs	r0, #129	; 0x81
 8000a9e:	f7ff fcc3 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2082      	movs	r0, #130	; 0x82
 8000aa6:	f7ff fcbf 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2083      	movs	r0, #131	; 0x83
 8000aae:	f7ff fcbb 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2084      	movs	r0, #132	; 0x84
 8000ab6:	f7ff fcb7 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8000aba:	2100      	movs	r1, #0
 8000abc:	2085      	movs	r0, #133	; 0x85
 8000abe:	f7ff fcb3 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20); 
 8000ac2:	2014      	movs	r0, #20
 8000ac4:	f000 fd3a 	bl	800153c <HAL_Delay>
	
		lcd_wr_reg_value(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral. (0x0013)
 8000ac8:	2110      	movs	r1, #16
 8000aca:	2090      	movs	r0, #144	; 0x90
 8000acc:	f7ff fcac 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x92,0x0000);	//Panel Interface Contral 2. (0x0000)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2092      	movs	r0, #146	; 0x92
 8000ad4:	f7ff fca8 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x93,0x0001);	//Panel Interface Contral 3.
 8000ad8:	2101      	movs	r1, #1
 8000ada:	2093      	movs	r0, #147	; 0x93
 8000adc:	f7ff fca4 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x95,0x0110);	//Frame Cycle Contral. (0x0110)
 8000ae0:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000ae4:	2095      	movs	r0, #149	; 0x95
 8000ae6:	f7ff fc9f 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x97,(0<<8));	//
 8000aea:	2100      	movs	r1, #0
 8000aec:	2097      	movs	r0, #151	; 0x97
 8000aee:	f7ff fc9b 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x98,0x0000);	//Frame Cycle Contral.	   
 8000af2:	2100      	movs	r1, #0
 8000af4:	2098      	movs	r0, #152	; 0x98
 8000af6:	f7ff fc97 	bl	8000428 <lcd_wr_reg_value>

		lcd_wr_reg_value(0x07,0x0173);	// (0x0173)
 8000afa:	f240 1173 	movw	r1, #371	; 0x173
 8000afe:	2007      	movs	r0, #7
 8000b00:	f7ff fc92 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(40);
 8000b04:	2028      	movs	r0, #40	; 0x28
 8000b06:	f000 fd19 	bl	800153c <HAL_Delay>
 8000b0a:	e2e6      	b.n	80010da <bsp_lcd32_init+0xc42>
 8000b0c:	2000002c 	.word	0x2000002c
	} 
	else if(lcd_id==0x5408)
 8000b10:	4bdf      	ldr	r3, [pc, #892]	; (8000e90 <bsp_lcd32_init+0x9f8>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	f245 4208 	movw	r2, #21512	; 0x5408
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	f040 80a2 	bne.w	8000c62 <bsp_lcd32_init+0x7ca>
	{
#if 1	
		lcd_wr_reg_value(0x01,0x0100);								  
 8000b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fc80 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x02,0x0700); //LCD Driving Waveform Contral 
 8000b28:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff fc7b 	bl	8000428 <lcd_wr_reg_value>

		// ���θ��
		//lcd_wr_reg_value(0x03,0x1030); //Entry Mode establishment 	   
		lcd_wr_reg_value(0x03,0x1010);
 8000b32:	f241 0110 	movw	r1, #4112	; 0x1010
 8000b36:	2003      	movs	r0, #3
 8000b38:	f7ff fc76 	bl	8000428 <lcd_wr_reg_value>
		
		// indicator top-down increases the pattern automatically from left to right
		//Normal Mode (Window Mode disable)
		//RGB form
		//16 bit data 2 transmission 8 main line establishments
		lcd_wr_reg_value(0x04,0x0000); //Scalling Control register     
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2004      	movs	r0, #4
 8000b40:	f7ff fc72 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x08,0x0207); //Display Control 2 
 8000b44:	f240 2107 	movw	r1, #519	; 0x207
 8000b48:	2008      	movs	r0, #8
 8000b4a:	f7ff fc6d 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x09,0x0000); //Display Control 3	 
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2009      	movs	r0, #9
 8000b52:	f7ff fc69 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0A,0x0000); //Frame Cycle Control	 
 8000b56:	2100      	movs	r1, #0
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f7ff fc65 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0C,0x0000); //External Display Interface Control 1 
 8000b5e:	2100      	movs	r1, #0
 8000b60:	200c      	movs	r0, #12
 8000b62:	f7ff fc61 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0D,0x0000); //Frame Maker Position		 
 8000b66:	2100      	movs	r1, #0
 8000b68:	200d      	movs	r0, #13
 8000b6a:	f7ff fc5d 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0F,0x0000); //External Display Interface Control 2 
 8000b6e:	2100      	movs	r1, #0
 8000b70:	200f      	movs	r0, #15
 8000b72:	f7ff fc59 	bl	8000428 <lcd_wr_reg_value>
 		HAL_Delay(20);
 8000b76:	2014      	movs	r0, #20
 8000b78:	f000 fce0 	bl	800153c <HAL_Delay>
		//TFT liquid crystal color image display packing 14
		lcd_wr_reg_value(0x10,0x16B0); //0x14B0 //Power Control 1
 8000b7c:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8000b80:	2010      	movs	r0, #16
 8000b82:	f7ff fc51 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x11,0x0001); //0x0007 //Power Control 2
 8000b86:	2101      	movs	r1, #1
 8000b88:	2011      	movs	r0, #17
 8000b8a:	f7ff fc4d 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x17,0x0001); //0x0000 //Power Control 3
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2017      	movs	r0, #23
 8000b92:	f7ff fc49 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x12,0x0138); //0x013B //Power Control 4
 8000b96:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000b9a:	2012      	movs	r0, #18
 8000b9c:	f7ff fc44 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x13,0x0800); //0x0800 //Power Control 5
 8000ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba4:	2013      	movs	r0, #19
 8000ba6:	f7ff fc3f 	bl	8000428 <lcd_wr_reg_value>
		// ���� �߰� ��
	     //lcd_wr_reg_value(0x0020,0x00ef);
	     //lcd_wr_reg_value(0x0021,0x013f);
		// ���� �߰� ��
		
		lcd_wr_reg_value(0x29,0x0009); //NVM read data 2
 8000baa:	2109      	movs	r1, #9
 8000bac:	2029      	movs	r0, #41	; 0x29
 8000bae:	f7ff fc3b 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x2a,0x0009); //NVM read data 3
 8000bb2:	2109      	movs	r1, #9
 8000bb4:	202a      	movs	r0, #42	; 0x2a
 8000bb6:	f7ff fc37 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0xa4,0x0000);	 
 8000bba:	2100      	movs	r1, #0
 8000bbc:	20a4      	movs	r0, #164	; 0xa4
 8000bbe:	f7ff fc33 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x50,0x0000); // establishes the operation window X axis to start the row
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2050      	movs	r0, #80	; 0x50
 8000bc6:	f7ff fc2f 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x51,0x00EF); // establishes the operation window X axis conclusion row
 8000bca:	21ef      	movs	r1, #239	; 0xef
 8000bcc:	2051      	movs	r0, #81	; 0x51
 8000bce:	f7ff fc2b 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x52,0x0000); // establishes the operation window the Y axis to start the line
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2052      	movs	r0, #82	; 0x52
 8000bd6:	f7ff fc27 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x53,0x013F); // establishes the operation window the Y axis conclusion line
 8000bda:	f240 113f 	movw	r1, #319	; 0x13f
 8000bde:	2053      	movs	r0, #83	; 0x53
 8000be0:	f7ff fc22 	bl	8000428 <lcd_wr_reg_value>

		lcd_wr_reg_value(0x60,0x2700); //Driver Output Control  --> original
 8000be4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8000be8:	2060      	movs	r0, #96	; 0x60
 8000bea:	f7ff fc1d 	bl	8000428 <lcd_wr_reg_value>
		//lcd_wr_reg_value(0x0060, 0xA700); // Gate Scan Line
		
		// establishes screen's points as well as the scanning outset line
		lcd_wr_reg_value(0x61,0x0001); //Driver Output Control
 8000bee:	2101      	movs	r1, #1
 8000bf0:	2061      	movs	r0, #97	; 0x61
 8000bf2:	f7ff fc19 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x6A,0x0000); //Vertical Scroll Control
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	206a      	movs	r0, #106	; 0x6a
 8000bfa:	f7ff fc15 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x80,0x0000); //Display Position - Partial Display 1
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2080      	movs	r0, #128	; 0x80
 8000c02:	f7ff fc11 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x81,0x0000); //RAM Address Start - Partial Display 1
 8000c06:	2100      	movs	r1, #0
 8000c08:	2081      	movs	r0, #129	; 0x81
 8000c0a:	f7ff fc0d 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x82,0x0000); //RAM address End - Partial Display 1
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2082      	movs	r0, #130	; 0x82
 8000c12:	f7ff fc09 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x83,0x0000); //Display Position - Partial Display 2
 8000c16:	2100      	movs	r1, #0
 8000c18:	2083      	movs	r0, #131	; 0x83
 8000c1a:	f7ff fc05 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x84,0x0000); //RAM Address Start - Partial Display 2
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2084      	movs	r0, #132	; 0x84
 8000c22:	f7ff fc01 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x85,0x0000); //RAM address End - Partail Display2
 8000c26:	2100      	movs	r1, #0
 8000c28:	2085      	movs	r0, #133	; 0x85
 8000c2a:	f7ff fbfd 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x90,0x0013); //Frame Cycle Control
 8000c2e:	2113      	movs	r1, #19
 8000c30:	2090      	movs	r0, #144	; 0x90
 8000c32:	f7ff fbf9 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x92,0x0000);  //Panel Interface Control 2
 8000c36:	2100      	movs	r1, #0
 8000c38:	2092      	movs	r0, #146	; 0x92
 8000c3a:	f7ff fbf5 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x93,0x0003); //Panel Interface control 3
 8000c3e:	2103      	movs	r1, #3
 8000c40:	2093      	movs	r0, #147	; 0x93
 8000c42:	f7ff fbf1 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x95,0x0110);  //Frame Cycle Control
 8000c46:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000c4a:	2095      	movs	r0, #149	; 0x95
 8000c4c:	f7ff fbec 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x07,0x0173);		 
 8000c50:	f240 1173 	movw	r1, #371	; 0x173
 8000c54:	2007      	movs	r0, #7
 8000c56:	f7ff fbe7 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(5);
 8000c5a:	2005      	movs	r0, #5
 8000c5c:	f000 fc6e 	bl	800153c <HAL_Delay>
 8000c60:	e23b      	b.n	80010da <bsp_lcd32_init+0xc42>
         lcd_wr_reg_value(0x07, 0x0173); // 262K color and display ON   0133

		 HAL_Delay(5);
#endif		 
	}	
	else if(lcd_id==0x1505)
 8000c62:	4b8b      	ldr	r3, [pc, #556]	; (8000e90 <bsp_lcd32_init+0x9f8>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	f241 5205 	movw	r2, #5381	; 0x1505
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	f040 8112 	bne.w	8000e94 <bsp_lcd32_init+0x9fc>
	{
		// second release on 3/5, luminance is acceptable, water wave appear during camera preview lcd_wr_reg_value(0x0007,0x0000);
        HAL_Delay(5); 
 8000c70:	2005      	movs	r0, #5
 8000c72:	f000 fc63 	bl	800153c <HAL_Delay>
        lcd_wr_reg_value(0x0012,0x011C); //0x011A   why need to set several times?
 8000c76:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8000c7a:	2012      	movs	r0, #18
 8000c7c:	f7ff fbd4 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x00A4,0x0001); //NVM	 
 8000c80:	2101      	movs	r1, #1
 8000c82:	20a4      	movs	r0, #164	; 0xa4
 8000c84:	f7ff fbd0 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0008,0x000F);
 8000c88:	210f      	movs	r1, #15
 8000c8a:	2008      	movs	r0, #8
 8000c8c:	f7ff fbcc 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x000A,0x0008);
 8000c90:	2108      	movs	r1, #8
 8000c92:	200a      	movs	r0, #10
 8000c94:	f7ff fbc8 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x000D,0x0008);	    
 8000c98:	2108      	movs	r1, #8
 8000c9a:	200d      	movs	r0, #13
 8000c9c:	f7ff fbc4 	bl	8000428 <lcd_wr_reg_value>
  		// gamma adjustment
        lcd_wr_reg_value(0x0030,0x0707);
 8000ca0:	f240 7107 	movw	r1, #1799	; 0x707
 8000ca4:	2030      	movs	r0, #48	; 0x30
 8000ca6:	f7ff fbbf 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0031,0x0007); //0x0707
 8000caa:	2107      	movs	r1, #7
 8000cac:	2031      	movs	r0, #49	; 0x31
 8000cae:	f7ff fbbb 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0032,0x0603); 
 8000cb2:	f240 6103 	movw	r1, #1539	; 0x603
 8000cb6:	2032      	movs	r0, #50	; 0x32
 8000cb8:	f7ff fbb6 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0033,0x0700); 
 8000cbc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000cc0:	2033      	movs	r0, #51	; 0x33
 8000cc2:	f7ff fbb1 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0034,0x0202); 
 8000cc6:	f240 2102 	movw	r1, #514	; 0x202
 8000cca:	2034      	movs	r0, #52	; 0x34
 8000ccc:	f7ff fbac 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0035,0x0002); //? 0x0606
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	2035      	movs	r0, #53	; 0x35
 8000cd4:	f7ff fba8 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0036,0x1F0F);
 8000cd8:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8000cdc:	2036      	movs	r0, #54	; 0x36
 8000cde:	f7ff fba3 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0037,0x0707); //0x0f0f 0x0105
 8000ce2:	f240 7107 	movw	r1, #1799	; 0x707
 8000ce6:	2037      	movs	r0, #55	; 0x37
 8000ce8:	f7ff fb9e 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0038,0x0000); 
 8000cec:	2100      	movs	r1, #0
 8000cee:	2038      	movs	r0, #56	; 0x38
 8000cf0:	f7ff fb9a 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0039,0x0000); 
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2039      	movs	r0, #57	; 0x39
 8000cf8:	f7ff fb96 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x003A,0x0707); 
 8000cfc:	f240 7107 	movw	r1, #1799	; 0x707
 8000d00:	203a      	movs	r0, #58	; 0x3a
 8000d02:	f7ff fb91 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x003B,0x0000); //0x0303
 8000d06:	2100      	movs	r1, #0
 8000d08:	203b      	movs	r0, #59	; 0x3b
 8000d0a:	f7ff fb8d 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x003C,0x0007); //0x0707
 8000d0e:	2107      	movs	r1, #7
 8000d10:	203c      	movs	r0, #60	; 0x3c
 8000d12:	f7ff fb89 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x003D,0x0000); //0x1313//0x1f08
 8000d16:	2100      	movs	r1, #0
 8000d18:	203d      	movs	r0, #61	; 0x3d
 8000d1a:	f7ff fb85 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(5); 
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f000 fc0c 	bl	800153c <HAL_Delay>
        lcd_wr_reg_value(0x0007,0x0001);
 8000d24:	2101      	movs	r1, #1
 8000d26:	2007      	movs	r0, #7
 8000d28:	f7ff fb7e 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0017,0x0001); // opens the power source
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2017      	movs	r0, #23
 8000d30:	f7ff fb7a 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(5); 
 8000d34:	2005      	movs	r0, #5
 8000d36:	f000 fc01 	bl	800153c <HAL_Delay>
  		// power source disposition
        lcd_wr_reg_value(0x0010,0x17A0); 
 8000d3a:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8000d3e:	2010      	movs	r0, #16
 8000d40:	f7ff fb72 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0011,0x0217); //reference voltage VC[2:0] Vciout = 1.00*Vcivl
 8000d44:	f240 2117 	movw	r1, #535	; 0x217
 8000d48:	2011      	movs	r0, #17
 8000d4a:	f7ff fb6d 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0012,0x011E); //0x011c //Vreg1out = Vcilvl*1.80 is it the same as Vgama1out?
 8000d4e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8000d52:	2012      	movs	r0, #18
 8000d54:	f7ff fb68 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0013,0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8000d58:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000d5c:	2013      	movs	r0, #19
 8000d5e:	f7ff fb63 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x002A,0x0000);  
 8000d62:	2100      	movs	r1, #0
 8000d64:	202a      	movs	r0, #42	; 0x2a
 8000d66:	f7ff fb5f 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0029,0x000A); //0x0001F Vcomh = VCM1[4:0]*Vreg1out gate source voltage??
 8000d6a:	210a      	movs	r1, #10
 8000d6c:	2029      	movs	r0, #41	; 0x29
 8000d6e:	f7ff fb5b 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0012,0x013E); // 0x013C  power supply on
 8000d72:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000d76:	2012      	movs	r0, #18
 8000d78:	f7ff fb56 	bl	8000428 <lcd_wr_reg_value>
        //Coordinates Control//
        lcd_wr_reg_value(0x0050,0x0000); //0x0e00
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2050      	movs	r0, #80	; 0x50
 8000d80:	f7ff fb52 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0051,0x00EF); 
 8000d84:	21ef      	movs	r1, #239	; 0xef
 8000d86:	2051      	movs	r0, #81	; 0x51
 8000d88:	f7ff fb4e 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0052,0x0000); 
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2052      	movs	r0, #82	; 0x52
 8000d90:	f7ff fb4a 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0053,0x013F); 
 8000d94:	f240 113f 	movw	r1, #319	; 0x13f
 8000d98:	2053      	movs	r0, #83	; 0x53
 8000d9a:	f7ff fb45 	bl	8000428 <lcd_wr_reg_value>
    	//Pannel Image Control//
        lcd_wr_reg_value(0x0060,0x2700); 
 8000d9e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8000da2:	2060      	movs	r0, #96	; 0x60
 8000da4:	f7ff fb40 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0061,0x0001); 
 8000da8:	2101      	movs	r1, #1
 8000daa:	2061      	movs	r0, #97	; 0x61
 8000dac:	f7ff fb3c 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x006A,0x0000); 
 8000db0:	2100      	movs	r1, #0
 8000db2:	206a      	movs	r0, #106	; 0x6a
 8000db4:	f7ff fb38 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0080,0x0000); 
 8000db8:	2100      	movs	r1, #0
 8000dba:	2080      	movs	r0, #128	; 0x80
 8000dbc:	f7ff fb34 	bl	8000428 <lcd_wr_reg_value>
    	//Partial Image Control//
        lcd_wr_reg_value(0x0081,0x0000); 
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2081      	movs	r0, #129	; 0x81
 8000dc4:	f7ff fb30 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0082,0x0000); 
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2082      	movs	r0, #130	; 0x82
 8000dcc:	f7ff fb2c 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0083,0x0000); 
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2083      	movs	r0, #131	; 0x83
 8000dd4:	f7ff fb28 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0084,0x0000); 
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2084      	movs	r0, #132	; 0x84
 8000ddc:	f7ff fb24 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0085,0x0000); 
 8000de0:	2100      	movs	r1, #0
 8000de2:	2085      	movs	r0, #133	; 0x85
 8000de4:	f7ff fb20 	bl	8000428 <lcd_wr_reg_value>
  		//Panel Interface Control//
        lcd_wr_reg_value(0x0090,0x0013); //0x0010 frenqucy
 8000de8:	2113      	movs	r1, #19
 8000dea:	2090      	movs	r0, #144	; 0x90
 8000dec:	f7ff fb1c 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0092,0x0300); 
 8000df0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000df4:	2092      	movs	r0, #146	; 0x92
 8000df6:	f7ff fb17 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0093,0x0005); 
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	2093      	movs	r0, #147	; 0x93
 8000dfe:	f7ff fb13 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0095,0x0000); 
 8000e02:	2100      	movs	r1, #0
 8000e04:	2095      	movs	r0, #149	; 0x95
 8000e06:	f7ff fb0f 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0097,0x0000); 
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2097      	movs	r0, #151	; 0x97
 8000e0e:	f7ff fb0b 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0098,0x0000); 
 8000e12:	2100      	movs	r1, #0
 8000e14:	2098      	movs	r0, #152	; 0x98
 8000e16:	f7ff fb07 	bl	8000428 <lcd_wr_reg_value>
  
        lcd_wr_reg_value(0x0001,0x0100); 
 8000e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f7ff fb02 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0002,0x0700); 
 8000e24:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f7ff fafd 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0003,0x1030); 
 8000e2e:	f241 0130 	movw	r1, #4144	; 0x1030
 8000e32:	2003      	movs	r0, #3
 8000e34:	f7ff faf8 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0004,0x0000); 
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2004      	movs	r0, #4
 8000e3c:	f7ff faf4 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x000C,0x0000); 
 8000e40:	2100      	movs	r1, #0
 8000e42:	200c      	movs	r0, #12
 8000e44:	f7ff faf0 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x000F,0x0000); 
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f7ff faec 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0020,0x0000); 
 8000e50:	2100      	movs	r1, #0
 8000e52:	2020      	movs	r0, #32
 8000e54:	f7ff fae8 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0021,0x0000); 
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2021      	movs	r0, #33	; 0x21
 8000e5c:	f7ff fae4 	bl	8000428 <lcd_wr_reg_value>
        lcd_wr_reg_value(0x0007,0x0021); 
 8000e60:	2121      	movs	r1, #33	; 0x21
 8000e62:	2007      	movs	r0, #7
 8000e64:	f7ff fae0 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(20);
 8000e68:	2014      	movs	r0, #20
 8000e6a:	f000 fb67 	bl	800153c <HAL_Delay>
        lcd_wr_reg_value(0x0007,0x0061); 
 8000e6e:	2161      	movs	r1, #97	; 0x61
 8000e70:	2007      	movs	r0, #7
 8000e72:	f7ff fad9 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(20);
 8000e76:	2014      	movs	r0, #20
 8000e78:	f000 fb60 	bl	800153c <HAL_Delay>
        lcd_wr_reg_value(0x0007,0x0173); 
 8000e7c:	f240 1173 	movw	r1, #371	; 0x173
 8000e80:	2007      	movs	r0, #7
 8000e82:	f7ff fad1 	bl	8000428 <lcd_wr_reg_value>
        HAL_Delay(20);
 8000e86:	2014      	movs	r0, #20
 8000e88:	f000 fb58 	bl	800153c <HAL_Delay>
 8000e8c:	e125      	b.n	80010da <bsp_lcd32_init+0xc42>
 8000e8e:	bf00      	nop
 8000e90:	2000002c 	.word	0x2000002c
	}							 
 
	else if(lcd_id==0x0047)	// HX8347A(Himax)
 8000e94:	4b98      	ldr	r3, [pc, #608]	; (80010f8 <bsp_lcd32_init+0xc60>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	2b47      	cmp	r3, #71	; 0x47
 8000e9a:	f040 811e 	bne.w	80010da <bsp_lcd32_init+0xc42>
	{
		lcd_wr_reg_value(0x0019,0x0071);//osc setting //71
 8000e9e:	2171      	movs	r1, #113	; 0x71
 8000ea0:	2019      	movs	r0, #25
 8000ea2:	f7ff fac1 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000ea6:	200a      	movs	r0, #10
 8000ea8:	f000 fb48 	bl	800153c <HAL_Delay>
		lcd_wr_reg_value(0x0093,0x0000);   //0ff
 8000eac:	2100      	movs	r1, #0
 8000eae:	2093      	movs	r0, #147	; 0x93
 8000eb0:	f7ff faba 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x001B,0x0018);//exit sleep
 8000eb4:	2118      	movs	r1, #24
 8000eb6:	201b      	movs	r0, #27
 8000eb8:	f7ff fab6 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000ebc:	200a      	movs	r0, #10
 8000ebe:	f000 fb3d 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x001B,0x0014);//exit sleep
 8000ec2:	2114      	movs	r1, #20
 8000ec4:	201b      	movs	r0, #27
 8000ec6:	f7ff faaf 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(50);
 8000eca:	2032      	movs	r0, #50	; 0x32
 8000ecc:	f000 fb36 	bl	800153c <HAL_Delay>
		
		
		/***************display setting*******************/
		
		lcd_wr_reg_value(0x0001,0x0006);//display control 3
 8000ed0:	2106      	movs	r1, #6
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff faa8 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f000 fb2f 	bl	800153c <HAL_Delay>
		
		//lcd_wr_reg_value(0x0016,0x00c8);//memory access control //c8
		lcd_wr_reg_value(0x0016,0x0008);
 8000ede:	2108      	movs	r1, #8
 8000ee0:	2016      	movs	r0, #22
 8000ee2:	f7ff faa1 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f000 fb28 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0018,0x0000);//memory access control
 8000eec:	2100      	movs	r1, #0
 8000eee:	2018      	movs	r0, #24
 8000ef0:	f7ff fa9a 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f000 fb21 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0023,0x0095);//cycle control  //95
 8000efa:	2195      	movs	r1, #149	; 0x95
 8000efc:	2023      	movs	r0, #35	; 0x23
 8000efe:	f7ff fa93 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f02:	200a      	movs	r0, #10
 8000f04:	f000 fb1a 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0024,0x0095);//cycle control
 8000f08:	2195      	movs	r1, #149	; 0x95
 8000f0a:	2024      	movs	r0, #36	; 0x24
 8000f0c:	f7ff fa8c 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f10:	200a      	movs	r0, #10
 8000f12:	f000 fb13 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0025,0x00ff);//cycle control
 8000f16:	21ff      	movs	r1, #255	; 0xff
 8000f18:	2025      	movs	r0, #37	; 0x25
 8000f1a:	f7ff fa85 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f1e:	200a      	movs	r0, #10
 8000f20:	f000 fb0c 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0027,0x0002);// BP/FP SETTING
 8000f24:	2102      	movs	r1, #2
 8000f26:	2027      	movs	r0, #39	; 0x27
 8000f28:	f7ff fa7e 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f000 fb05 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0028,0x0002);// BP/FP SETTING
 8000f32:	2102      	movs	r1, #2
 8000f34:	2028      	movs	r0, #40	; 0x28
 8000f36:	f7ff fa77 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f000 fafe 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0029,0x0002);// BP/FP SETTING
 8000f40:	2102      	movs	r1, #2
 8000f42:	2029      	movs	r0, #41	; 0x29
 8000f44:	f7ff fa70 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f000 faf7 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x002a,0x0002);// BP/FP SETTING
 8000f4e:	2102      	movs	r1, #2
 8000f50:	202a      	movs	r0, #42	; 0x2a
 8000f52:	f7ff fa69 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f56:	200a      	movs	r0, #10
 8000f58:	f000 faf0 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x002c,0x0002);// BP/FP SETTING
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	202c      	movs	r0, #44	; 0x2c
 8000f60:	f7ff fa62 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f000 fae9 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x002d,0x0002);// BP/FP SETTING
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	202d      	movs	r0, #45	; 0x2d
 8000f6e:	f7ff fa5b 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 fae2 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x003a,0x0000);//cycle control 1
 8000f78:	2100      	movs	r1, #0
 8000f7a:	203a      	movs	r0, #58	; 0x3a
 8000f7c:	f7ff fa54 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f000 fadb 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x003b,0x0000);//cycle control 2
 8000f86:	2100      	movs	r1, #0
 8000f88:	203b      	movs	r0, #59	; 0x3b
 8000f8a:	f7ff fa4d 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f8e:	200a      	movs	r0, #10
 8000f90:	f000 fad4 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x003c,0x00f0);//cycle control 3
 8000f94:	21f0      	movs	r1, #240	; 0xf0
 8000f96:	203c      	movs	r0, #60	; 0x3c
 8000f98:	f7ff fa46 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f000 facd 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x003d,0x0000);//cycle control 4
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	203d      	movs	r0, #61	; 0x3d
 8000fa6:	f7ff fa3f 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20);
 8000faa:	2014      	movs	r0, #20
 8000fac:	f000 fac6 	bl	800153c <HAL_Delay>
		
		
		/**********power setting**********************/
		
		lcd_wr_reg_value(0x0042,0x001f);//BGP control
 8000fb0:	211f      	movs	r1, #31
 8000fb2:	2042      	movs	r0, #66	; 0x42
 8000fb4:	f7ff fa38 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(50);
 8000fb8:	2032      	movs	r0, #50	; 0x32
 8000fba:	f000 fabf 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x001c,0x0006);// AP2-0 SETTING 
 8000fbe:	2106      	movs	r1, #6
 8000fc0:	201c      	movs	r0, #28
 8000fc2:	f7ff fa31 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(30);
 8000fc6:	201e      	movs	r0, #30
 8000fc8:	f000 fab8 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x001D,0x0000);//VLCD SETTING  
 8000fcc:	2100      	movs	r1, #0
 8000fce:	201d      	movs	r0, #29
 8000fd0:	f7ff fa2a 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(30);
 8000fd4:	201e      	movs	r0, #30
 8000fd6:	f000 fab1 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x001E,0x0000);//VREG3 SETTING  
 8000fda:	2100      	movs	r1, #0
 8000fdc:	201e      	movs	r0, #30
 8000fde:	f7ff fa23 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(30);
 8000fe2:	201e      	movs	r0, #30
 8000fe4:	f000 faaa 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x001F,0x00e);//VREG1 //00  //0e
 8000fe8:	210e      	movs	r1, #14
 8000fea:	201f      	movs	r0, #31
 8000fec:	f7ff fa1c 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(30);
 8000ff0:	201e      	movs	r0, #30
 8000ff2:	f000 faa3 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0020,0x0010);// VGL/VGH SETTING   
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	2020      	movs	r0, #32
 8000ffa:	f7ff fa15 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(30);
 8000ffe:	201e      	movs	r0, #30
 8001000:	f000 fa9c 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0021,0x0011);// DC/DC SETTING   
 8001004:	2111      	movs	r1, #17
 8001006:	2021      	movs	r0, #33	; 0x21
 8001008:	f7ff fa0e 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(30);
 800100c:	201e      	movs	r0, #30
 800100e:	f000 fa95 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0043,0x0080);//vomg control
 8001012:	2180      	movs	r1, #128	; 0x80
 8001014:	2043      	movs	r0, #67	; 0x43
 8001016:	f7ff fa07 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(50);
 800101a:	2032      	movs	r0, #50	; 0x32
 800101c:	f000 fa8e 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0044,0x0036);  //vcomh control//35
 8001020:	2136      	movs	r1, #54	; 0x36
 8001022:	2044      	movs	r0, #68	; 0x44
 8001024:	f7ff fa00 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f000 fa87 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0045,0x000a);//vcom control //0a
 800102e:	210a      	movs	r1, #10
 8001030:	2045      	movs	r0, #69	; 0x45
 8001032:	f7ff f9f9 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20);
 8001036:	2014      	movs	r0, #20
 8001038:	f000 fa80 	bl	800153c <HAL_Delay>
		
		/******************GAMMA SETTING***********************/
		
		lcd_wr_reg_value(0x0046,0x0094);//GAMMA control 1  
 800103c:	2194      	movs	r1, #148	; 0x94
 800103e:	2046      	movs	r0, #70	; 0x46
 8001040:	f7ff f9f2 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x0047,0x0021);//GAMMA control 2  
 8001044:	2121      	movs	r1, #33	; 0x21
 8001046:	2047      	movs	r0, #71	; 0x47
 8001048:	f7ff f9ee 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x0048,0x0000);//GAMMA control 3   
 800104c:	2100      	movs	r1, #0
 800104e:	2048      	movs	r0, #72	; 0x48
 8001050:	f7ff f9ea 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x0049,0x0033);//GAMMA control 4  
 8001054:	2133      	movs	r1, #51	; 0x33
 8001056:	2049      	movs	r0, #73	; 0x49
 8001058:	f7ff f9e6 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x004A,0x0023);//GAMMA control 5  
 800105c:	2123      	movs	r1, #35	; 0x23
 800105e:	204a      	movs	r0, #74	; 0x4a
 8001060:	f7ff f9e2 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x004B,0x0045);//GAMMA control 6   
 8001064:	2145      	movs	r1, #69	; 0x45
 8001066:	204b      	movs	r0, #75	; 0x4b
 8001068:	f7ff f9de 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x004C,0x0044);//GAMMA control 7 
 800106c:	2144      	movs	r1, #68	; 0x44
 800106e:	204c      	movs	r0, #76	; 0x4c
 8001070:	f7ff f9da 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x004D,0x0077);//GAMMA control  8 
 8001074:	2177      	movs	r1, #119	; 0x77
 8001076:	204d      	movs	r0, #77	; 0x4d
 8001078:	f7ff f9d6 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x004E,0x0012);//GAMMA control 9   
 800107c:	2112      	movs	r1, #18
 800107e:	204e      	movs	r0, #78	; 0x4e
 8001080:	f7ff f9d2 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x004F,0x0001);//GAMMA control 10 
 8001084:	2101      	movs	r1, #1
 8001086:	204f      	movs	r0, #79	; 0x4f
 8001088:	f7ff f9ce 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x0050,0x0001);//GAMMA control 11  
 800108c:	2101      	movs	r1, #1
 800108e:	2050      	movs	r0, #80	; 0x50
 8001090:	f7ff f9ca 	bl	8000428 <lcd_wr_reg_value>
		
		lcd_wr_reg_value(0x0051,0x0001);//GAMMA control 12  
 8001094:	2101      	movs	r1, #1
 8001096:	2051      	movs	r0, #81	; 0x51
 8001098:	f7ff f9c6 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(100);
 800109c:	2064      	movs	r0, #100	; 0x64
 800109e:	f000 fa4d 	bl	800153c <HAL_Delay>
		/****************display on setting**************/
		
		lcd_wr_reg_value(0x0026,0x0004);
 80010a2:	2104      	movs	r1, #4
 80010a4:	2026      	movs	r0, #38	; 0x26
 80010a6:	f7ff f9bf 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20);
 80010aa:	2014      	movs	r0, #20
 80010ac:	f000 fa46 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0026,0x0024);
 80010b0:	2124      	movs	r1, #36	; 0x24
 80010b2:	2026      	movs	r0, #38	; 0x26
 80010b4:	f7ff f9b8 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20);
 80010b8:	2014      	movs	r0, #20
 80010ba:	f000 fa3f 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0026,0x002c);
 80010be:	212c      	movs	r1, #44	; 0x2c
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f7ff f9b1 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20);
 80010c6:	2014      	movs	r0, #20
 80010c8:	f000 fa38 	bl	800153c <HAL_Delay>
		
		lcd_wr_reg_value(0x0026,0x003c);
 80010cc:	213c      	movs	r1, #60	; 0x3c
 80010ce:	2026      	movs	r0, #38	; 0x26
 80010d0:	f7ff f9aa 	bl	8000428 <lcd_wr_reg_value>
		HAL_Delay(20);
 80010d4:	2014      	movs	r0, #20
 80010d6:	f000 fa31 	bl	800153c <HAL_Delay>
	} 

	// 3.2 lcd backlight on
	LCD_PWM_LIGHT_HIGH(); //--> 3.2 LCD original code	
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <bsp_lcd32_init+0xc64>)
 80010e2:	f000 fcc7 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010e6:	2014      	movs	r0, #20
 80010e8:	f000 fa28 	bl	800153c <HAL_Delay>
	
	lcd32_clear_screen(BLUE);
 80010ec:	201f      	movs	r0, #31
 80010ee:	f000 f85d 	bl	80011ac <lcd32_clear_screen>
	//lcd32_draw_rectangle(20, 20, 100, 100);
	//lcd32_fill_color(30, 30, 90, 90, RED);
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000002c 	.word	0x2000002c
 80010fc:	40011400 	.word	0x40011400

08001100 <lcd32_writeram_prepare>:

// starts to write GRAM
void lcd32_writeram_prepare(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	lcd_wr_reg(R34);
 8001104:	2022      	movs	r0, #34	; 0x22
 8001106:	f7ff f981 	bl	800040c <lcd_wr_reg>
}	 
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <lcd32_setcursor>:

void lcd32_setcursor (u16 Xpos, u16 Ypos)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	80fb      	strh	r3, [r7, #6]
 800111c:	4613      	mov	r3, r2
 800111e:	80bb      	strh	r3, [r7, #4]
	if(lcd_id == 0x0047)
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <lcd32_setcursor+0x98>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	2b47      	cmp	r3, #71	; 0x47
 8001126:	d130      	bne.n	800118a <lcd32_setcursor+0x7a>
	{
		lcd_wr_reg_value(0x0002,Xpos>>8);	   // Column address start2
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	2002      	movs	r0, #2
 8001132:	f7ff f979 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0003,Xpos);	   // Column address start1
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4619      	mov	r1, r3
 800113a:	2003      	movs	r0, #3
 800113c:	f7ff f974 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0004,Xpos>>8);	   // Column address end2
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	b29b      	uxth	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	2004      	movs	r0, #4
 800114a:	f7ff f96d 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0005,Xpos);	   // Column address end1
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4619      	mov	r1, r3
 8001152:	2005      	movs	r0, #5
 8001154:	f7ff f968 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0006,Ypos>>8);	   // Row address start2
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	b29b      	uxth	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	2006      	movs	r0, #6
 8001162:	f7ff f961 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0007,Ypos);	   // Row address start1
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	4619      	mov	r1, r3
 800116a:	2007      	movs	r0, #7
 800116c:	f7ff f95c 	bl	8000428 <lcd_wr_reg_value>
	    lcd_wr_reg_value(0x0008,Ypos>>8);	   // Row address end2
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	2008      	movs	r0, #8
 800117a:	f7ff f955 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0009,Ypos);	   // Row address end1
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	4619      	mov	r1, r3
 8001182:	2009      	movs	r0, #9
 8001184:	f7ff f950 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value (R32, Xpos);
		lcd_wr_reg_value (R33, Ypos);
	}

	//usart1_transmit_string("\r\n2\r\n");
} 
 8001188:	e009      	b.n	800119e <lcd32_setcursor+0x8e>
		lcd_wr_reg_value (R32, Xpos);
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	4619      	mov	r1, r3
 800118e:	2020      	movs	r0, #32
 8001190:	f7ff f94a 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value (R33, Ypos);
 8001194:	88bb      	ldrh	r3, [r7, #4]
 8001196:	4619      	mov	r1, r3
 8001198:	2021      	movs	r0, #33	; 0x21
 800119a:	f7ff f945 	bl	8000428 <lcd_wr_reg_value>
} 
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000002c 	.word	0x2000002c

080011ac <lcd32_clear_screen>:

// 320 * 240
void lcd32_clear_screen(unsigned int color)
{                    
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

	u32 index=0;      
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]


	if(lcd_id == 0x0047)
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <lcd32_clear_screen+0x88>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	2b47      	cmp	r3, #71	; 0x47
 80011be:	d120      	bne.n	8001202 <lcd32_clear_screen+0x56>
	{
		// Setcurosr
		lcd_wr_reg_value(0x0002,0x00);	   // Column address start2
 80011c0:	2100      	movs	r1, #0
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff f930 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0003,0x00);	   // Column address start1
 80011c8:	2100      	movs	r1, #0
 80011ca:	2003      	movs	r0, #3
 80011cc:	f7ff f92c 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0004,0x00);	   // Column address end2
 80011d0:	2100      	movs	r1, #0
 80011d2:	2004      	movs	r0, #4
 80011d4:	f7ff f928 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0005,0xef);	   // Column address end1
 80011d8:	21ef      	movs	r1, #239	; 0xef
 80011da:	2005      	movs	r0, #5
 80011dc:	f7ff f924 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0006,0x00);	   // Row address start2
 80011e0:	2100      	movs	r1, #0
 80011e2:	2006      	movs	r0, #6
 80011e4:	f7ff f920 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0007,0x00);	   // Row address start1
 80011e8:	2100      	movs	r1, #0
 80011ea:	2007      	movs	r0, #7
 80011ec:	f7ff f91c 	bl	8000428 <lcd_wr_reg_value>
	    lcd_wr_reg_value(0x0008,0x01);	   // Row address end2
 80011f0:	2101      	movs	r1, #1
 80011f2:	2008      	movs	r0, #8
 80011f4:	f7ff f918 	bl	8000428 <lcd_wr_reg_value>
		lcd_wr_reg_value(0x0009,0x3f);	   // Row address end1
 80011f8:	213f      	movs	r1, #63	; 0x3f
 80011fa:	2009      	movs	r0, #9
 80011fc:	f7ff f914 	bl	8000428 <lcd_wr_reg_value>
 8001200:	e003      	b.n	800120a <lcd32_clear_screen+0x5e>
		// Setcurosr
	}
	else
	{
		lcd32_setcursor(0x00,0x0000); // establishment cursor position 
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff83 	bl	8001110 <lcd32_setcursor>
	}

	lcd32_writeram_prepare();     // starts to read in GRAM	 	  
 800120a:	f7ff ff79 	bl	8001100 <lcd32_writeram_prepare>

	for (index=0; index<320*240; index++)
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	e005      	b.n	8001220 <lcd32_clear_screen+0x74>
	{
		lcd_wr_data(color);    
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff f92f 	bl	8000478 <lcd_wr_data>
	for (index=0; index<320*240; index++)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001226:	d3f5      	bcc.n	8001214 <lcd32_clear_screen+0x68>
	}
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000002c 	.word	0x2000002c

08001238 <lcd32_draw_point_color>:
	lcd_wr_reg(R34); // starts to read in GRAM
	lcd_wr_data(POINT_COLOR); 
}

void lcd32_draw_point_color (u16 x, u16 y, unsigned int color)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	603a      	str	r2, [r7, #0]
 8001242:	80fb      	strh	r3, [r7, #6]
 8001244:	460b      	mov	r3, r1
 8001246:	80bb      	strh	r3, [r7, #4]
	lcd32_setcursor(x, y); // establishment cursor position
 8001248:	88ba      	ldrh	r2, [r7, #4]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff5e 	bl	8001110 <lcd32_setcursor>
	lcd_wr_reg(R34); // starts to read in GRAM
 8001254:	2022      	movs	r0, #34	; 0x22
 8001256:	f7ff f8d9 	bl	800040c <lcd_wr_reg>
	lcd_wr_data(color);
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f7ff f90c 	bl	8000478 <lcd_wr_data>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 f903 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f831 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f7ff f887 	bl	8000388 <MX_GPIO_Init>
  MX_FSMC_Init();
 800127a:	f7fe ffd3 	bl	8000224 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */

  bsp_lcd32_init();
 800127e:	f7ff f90b 	bl	8000498 <bsp_lcd32_init>
  lcd32_clear_screen(0xFFFF);
 8001282:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001286:	f7ff ff91 	bl	80011ac <lcd32_clear_screen>

  int x, y;
  for(x=0; x<picture_w; x++)
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	e01c      	b.n	80012ca <main+0x62>
  {
    for(y=0; y<picture_h; y++)
 8001290:	2300      	movs	r3, #0
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	e012      	b.n	80012bc <main+0x54>
  	{
    	lcd32_draw_point_color(x, y, image_data_Image[picture_w*y + x]);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	b298      	uxth	r0, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b299      	uxth	r1, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	22f2      	movs	r2, #242	; 0xf2
 80012a2:	fb02 f203 	mul.w	r2, r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <main+0x6c>)
 80012ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b0:	461a      	mov	r2, r3
 80012b2:	f7ff ffc1 	bl	8001238 <lcd32_draw_point_color>
    for(y=0; y<picture_h; y++)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 80012c2:	dbe8      	blt.n	8001296 <main+0x2e>
  for(x=0; x<picture_w; x++)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3301      	adds	r3, #1
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2bf1      	cmp	r3, #241	; 0xf1
 80012ce:	dddf      	ble.n	8001290 <main+0x28>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <main+0x68>
 80012d2:	bf00      	nop
 80012d4:	0800253c 	.word	0x0800253c

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b090      	sub	sp, #64	; 0x40
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	2228      	movs	r2, #40	; 0x28
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 f90c 	bl	8002504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001316:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fbbf 	bl	8001aa4 <HAL_RCC_OscConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800132c:	f000 f819 	bl	8001362 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	230f      	movs	r3, #15
 8001332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	2302      	movs	r3, #2
 8001336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2102      	movs	r1, #2
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fe2a 	bl	8001fa4 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001356:	f000 f804 	bl	8001362 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3740      	adds	r7, #64	; 0x40
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001366:	b672      	cpsid	i
}
 8001368:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136a:	e7fe      	b.n	800136a <Error_Handler+0x8>

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_MspInit+0x5c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_MspInit+0x5c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_MspInit+0x5c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x5c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_MspInit+0x60>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_MspInit+0x60>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001416:	f000 f875 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}

0800141e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
	...

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	; (8001470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001452:	f7ff ffe4 	bl	800141e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f001 f831 	bl	80024bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff ff05 	bl	8001268 <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001468:	0802861c 	.word	0x0802861c
  ldr r2, =_sbss
 800146c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001470:	2000007c 	.word	0x2000007c

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f92b 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff ff6a 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f935 	bl	8001732 <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f90b 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x1c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x20>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_IncTick+0x20>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000008 	.word	0x20000008
 8001524:	20000078 	.word	0x20000078

08001528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000078 	.word	0x20000078

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff fff0 	bl	8001528 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffe0 	bl	8001528 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff90 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff49 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff5e 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff90 	bl	800163c <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5f 	bl	80015e8 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffb0 	bl	80016a0 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b480      	push	{r7}
 800174e:	b08b      	sub	sp, #44	; 0x2c
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175e:	e179      	b.n	8001a54 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001760:	2201      	movs	r2, #1
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	429a      	cmp	r2, r3
 800177a:	f040 8168 	bne.w	8001a4e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4aa0      	ldr	r2, [pc, #640]	; (8001a04 <HAL_GPIO_Init+0x2b8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d05e      	beq.n	8001846 <HAL_GPIO_Init+0xfa>
 8001788:	4a9e      	ldr	r2, [pc, #632]	; (8001a04 <HAL_GPIO_Init+0x2b8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d875      	bhi.n	800187a <HAL_GPIO_Init+0x12e>
 800178e:	4a9e      	ldr	r2, [pc, #632]	; (8001a08 <HAL_GPIO_Init+0x2bc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d058      	beq.n	8001846 <HAL_GPIO_Init+0xfa>
 8001794:	4a9c      	ldr	r2, [pc, #624]	; (8001a08 <HAL_GPIO_Init+0x2bc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d86f      	bhi.n	800187a <HAL_GPIO_Init+0x12e>
 800179a:	4a9c      	ldr	r2, [pc, #624]	; (8001a0c <HAL_GPIO_Init+0x2c0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d052      	beq.n	8001846 <HAL_GPIO_Init+0xfa>
 80017a0:	4a9a      	ldr	r2, [pc, #616]	; (8001a0c <HAL_GPIO_Init+0x2c0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d869      	bhi.n	800187a <HAL_GPIO_Init+0x12e>
 80017a6:	4a9a      	ldr	r2, [pc, #616]	; (8001a10 <HAL_GPIO_Init+0x2c4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d04c      	beq.n	8001846 <HAL_GPIO_Init+0xfa>
 80017ac:	4a98      	ldr	r2, [pc, #608]	; (8001a10 <HAL_GPIO_Init+0x2c4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d863      	bhi.n	800187a <HAL_GPIO_Init+0x12e>
 80017b2:	4a98      	ldr	r2, [pc, #608]	; (8001a14 <HAL_GPIO_Init+0x2c8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d046      	beq.n	8001846 <HAL_GPIO_Init+0xfa>
 80017b8:	4a96      	ldr	r2, [pc, #600]	; (8001a14 <HAL_GPIO_Init+0x2c8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d85d      	bhi.n	800187a <HAL_GPIO_Init+0x12e>
 80017be:	2b12      	cmp	r3, #18
 80017c0:	d82a      	bhi.n	8001818 <HAL_GPIO_Init+0xcc>
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	d859      	bhi.n	800187a <HAL_GPIO_Init+0x12e>
 80017c6:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <HAL_GPIO_Init+0x80>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	08001847 	.word	0x08001847
 80017d0:	08001821 	.word	0x08001821
 80017d4:	08001833 	.word	0x08001833
 80017d8:	08001875 	.word	0x08001875
 80017dc:	0800187b 	.word	0x0800187b
 80017e0:	0800187b 	.word	0x0800187b
 80017e4:	0800187b 	.word	0x0800187b
 80017e8:	0800187b 	.word	0x0800187b
 80017ec:	0800187b 	.word	0x0800187b
 80017f0:	0800187b 	.word	0x0800187b
 80017f4:	0800187b 	.word	0x0800187b
 80017f8:	0800187b 	.word	0x0800187b
 80017fc:	0800187b 	.word	0x0800187b
 8001800:	0800187b 	.word	0x0800187b
 8001804:	0800187b 	.word	0x0800187b
 8001808:	0800187b 	.word	0x0800187b
 800180c:	0800187b 	.word	0x0800187b
 8001810:	08001829 	.word	0x08001829
 8001814:	0800183d 	.word	0x0800183d
 8001818:	4a7f      	ldr	r2, [pc, #508]	; (8001a18 <HAL_GPIO_Init+0x2cc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d013      	beq.n	8001846 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800181e:	e02c      	b.n	800187a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	623b      	str	r3, [r7, #32]
          break;
 8001826:	e029      	b.n	800187c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	3304      	adds	r3, #4
 800182e:	623b      	str	r3, [r7, #32]
          break;
 8001830:	e024      	b.n	800187c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	3308      	adds	r3, #8
 8001838:	623b      	str	r3, [r7, #32]
          break;
 800183a:	e01f      	b.n	800187c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	330c      	adds	r3, #12
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e01a      	b.n	800187c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800184e:	2304      	movs	r3, #4
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e013      	b.n	800187c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d105      	bne.n	8001868 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	611a      	str	r2, [r3, #16]
          break;
 8001866:	e009      	b.n	800187c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001868:	2308      	movs	r3, #8
 800186a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	615a      	str	r2, [r3, #20]
          break;
 8001872:	e003      	b.n	800187c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
          break;
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x130>
          break;
 800187a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2bff      	cmp	r3, #255	; 0xff
 8001880:	d801      	bhi.n	8001886 <HAL_GPIO_Init+0x13a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	e001      	b.n	800188a <HAL_GPIO_Init+0x13e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3304      	adds	r3, #4
 800188a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2bff      	cmp	r3, #255	; 0xff
 8001890:	d802      	bhi.n	8001898 <HAL_GPIO_Init+0x14c>
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	e002      	b.n	800189e <HAL_GPIO_Init+0x152>
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	3b08      	subs	r3, #8
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	210f      	movs	r1, #15
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	401a      	ands	r2, r3
 80018b0:	6a39      	ldr	r1, [r7, #32]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	431a      	orrs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80c1 	beq.w	8001a4e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018e4:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <HAL_GPIO_Init+0x2d4>)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	220f      	movs	r2, #15
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a46      	ldr	r2, [pc, #280]	; (8001a24 <HAL_GPIO_Init+0x2d8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d01f      	beq.n	8001950 <HAL_GPIO_Init+0x204>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a45      	ldr	r2, [pc, #276]	; (8001a28 <HAL_GPIO_Init+0x2dc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d019      	beq.n	800194c <HAL_GPIO_Init+0x200>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a44      	ldr	r2, [pc, #272]	; (8001a2c <HAL_GPIO_Init+0x2e0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d013      	beq.n	8001948 <HAL_GPIO_Init+0x1fc>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a43      	ldr	r2, [pc, #268]	; (8001a30 <HAL_GPIO_Init+0x2e4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00d      	beq.n	8001944 <HAL_GPIO_Init+0x1f8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a42      	ldr	r2, [pc, #264]	; (8001a34 <HAL_GPIO_Init+0x2e8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d007      	beq.n	8001940 <HAL_GPIO_Init+0x1f4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a41      	ldr	r2, [pc, #260]	; (8001a38 <HAL_GPIO_Init+0x2ec>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_GPIO_Init+0x1f0>
 8001938:	2305      	movs	r3, #5
 800193a:	e00a      	b.n	8001952 <HAL_GPIO_Init+0x206>
 800193c:	2306      	movs	r3, #6
 800193e:	e008      	b.n	8001952 <HAL_GPIO_Init+0x206>
 8001940:	2304      	movs	r3, #4
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x206>
 8001944:	2303      	movs	r3, #3
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x206>
 8001948:	2302      	movs	r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x206>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x206>
 8001950:	2300      	movs	r3, #0
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001962:	492f      	ldr	r1, [pc, #188]	; (8001a20 <HAL_GPIO_Init+0x2d4>)
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	492e      	ldr	r1, [pc, #184]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	43db      	mvns	r3, r3
 8001992:	492a      	ldr	r1, [pc, #168]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 8001994:	4013      	ands	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4924      	ldr	r1, [pc, #144]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4920      	ldr	r1, [pc, #128]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	491a      	ldr	r1, [pc, #104]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4916      	ldr	r1, [pc, #88]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d025      	beq.n	8001a40 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4910      	ldr	r1, [pc, #64]	; (8001a3c <HAL_GPIO_Init+0x2f0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e025      	b.n	8001a4e <HAL_GPIO_Init+0x302>
 8001a02:	bf00      	nop
 8001a04:	10320000 	.word	0x10320000
 8001a08:	10310000 	.word	0x10310000
 8001a0c:	10220000 	.word	0x10220000
 8001a10:	10210000 	.word	0x10210000
 8001a14:	10120000 	.word	0x10120000
 8001a18:	10110000 	.word	0x10110000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40011400 	.word	0x40011400
 8001a34:	40011800 	.word	0x40011800
 8001a38:	40011c00 	.word	0x40011c00
 8001a3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_GPIO_Init+0x324>)
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	4909      	ldr	r1, [pc, #36]	; (8001a70 <HAL_GPIO_Init+0x324>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	3301      	adds	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f47f ae7e 	bne.w	8001760 <HAL_GPIO_Init+0x14>
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	372c      	adds	r7, #44	; 0x2c
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e26c      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8087 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac4:	4b92      	ldr	r3, [pc, #584]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d00c      	beq.n	8001aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad0:	4b8f      	ldr	r3, [pc, #572]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d112      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5e>
 8001adc:	4b8c      	ldr	r3, [pc, #560]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d10b      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aea:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d06c      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x12c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d168      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e246      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x76>
 8001b0c:	4b80      	ldr	r3, [pc, #512]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a7f      	ldr	r2, [pc, #508]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e02e      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x98>
 8001b22:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7a      	ldr	r2, [pc, #488]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a77      	ldr	r2, [pc, #476]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e01d      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0xbc>
 8001b46:	4b72      	ldr	r3, [pc, #456]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a71      	ldr	r2, [pc, #452]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b6f      	ldr	r3, [pc, #444]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a6e      	ldr	r2, [pc, #440]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b60:	4b6b      	ldr	r3, [pc, #428]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6a      	ldr	r2, [pc, #424]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a67      	ldr	r2, [pc, #412]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fcd2 	bl	8001528 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff fcce 	bl	8001528 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1fa      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0xe4>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fcbe 	bl	8001528 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fcba 	bl	8001528 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1e6      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x10c>
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d063      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bde:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bea:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d11c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x18c>
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d116      	bne.n	8001c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_RCC_OscConfig+0x176>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e1ba      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4939      	ldr	r1, [pc, #228]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	e03a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c38:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fc73 	bl	8001528 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff fc6f 	bl	8001528 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e19b      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4927      	ldr	r1, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fc52 	bl	8001528 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff fc4e 	bl	8001528 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e17a      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d03a      	beq.n	8001d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d019      	beq.n	8001cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fc32 	bl	8001528 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fc2e 	bl	8001528 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e15a      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f000 faa6 	bl	8002238 <RCC_Delay>
 8001cec:	e01c      	b.n	8001d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fc18 	bl	8001528 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfa:	e00f      	b.n	8001d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fc14 	bl	8001528 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d908      	bls.n	8001d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e140      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	42420000 	.word	0x42420000
 8001d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b9e      	ldr	r3, [pc, #632]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e9      	bne.n	8001cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a6 	beq.w	8001e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b97      	ldr	r3, [pc, #604]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10d      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b94      	ldr	r3, [pc, #592]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a93      	ldr	r2, [pc, #588]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	61d3      	str	r3, [r2, #28]
 8001d52:	4b91      	ldr	r3, [pc, #580]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b8e      	ldr	r3, [pc, #568]	; (8001f9c <HAL_RCC_OscConfig+0x4f8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d118      	bne.n	8001da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	; (8001f9c <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a8a      	ldr	r2, [pc, #552]	; (8001f9c <HAL_RCC_OscConfig+0x4f8>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fbd5 	bl	8001528 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d82:	f7ff fbd1 	bl	8001528 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b64      	cmp	r3, #100	; 0x64
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0fd      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b81      	ldr	r3, [pc, #516]	; (8001f9c <HAL_RCC_OscConfig+0x4f8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x312>
 8001da8:	4b7b      	ldr	r3, [pc, #492]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a7a      	ldr	r2, [pc, #488]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	e02d      	b.n	8001e12 <HAL_RCC_OscConfig+0x36e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x334>
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a72      	ldr	r2, [pc, #456]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	e01c      	b.n	8001e12 <HAL_RCC_OscConfig+0x36e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x356>
 8001de0:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a6c      	ldr	r2, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a69      	ldr	r2, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	e00b      	b.n	8001e12 <HAL_RCC_OscConfig+0x36e>
 8001dfa:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a66      	ldr	r2, [pc, #408]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a63      	ldr	r2, [pc, #396]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fb85 	bl	8001528 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff fb81 	bl	8001528 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0ab      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ee      	beq.n	8001e22 <HAL_RCC_OscConfig+0x37e>
 8001e44:	e014      	b.n	8001e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7ff fb6f 	bl	8001528 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff fb6b 	bl	8001528 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e095      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d105      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e76:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a47      	ldr	r2, [pc, #284]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8081 	beq.w	8001f8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e8c:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d061      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d146      	bne.n	8001f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <HAL_RCC_OscConfig+0x4fc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff fb3f 	bl	8001528 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff fb3b 	bl	8001528 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e067      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec0:	4b35      	ldr	r3, [pc, #212]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed4:	d108      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	492d      	ldr	r1, [pc, #180]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a19      	ldr	r1, [r3, #32]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	4927      	ldr	r1, [pc, #156]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_RCC_OscConfig+0x4fc>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fb0f 	bl	8001528 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fb0b 	bl	8001528 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e037      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46a>
 8001f2c:	e02f      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <HAL_RCC_OscConfig+0x4fc>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff faf8 	bl	8001528 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7ff faf4 	bl	8001528 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e020      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x498>
 8001f5a:	e018      	b.n	8001f8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e013      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	42420060 	.word	0x42420060

08001fa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0d0      	b.n	800215a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <HAL_RCC_ClockConfig+0x1c0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d910      	bls.n	8001fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b67      	ldr	r3, [pc, #412]	; (8002164 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0207 	bic.w	r2, r3, #7
 8001fce:	4965      	ldr	r1, [pc, #404]	; (8002164 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0b8      	b.n	800215a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002000:	4b59      	ldr	r3, [pc, #356]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a58      	ldr	r2, [pc, #352]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800200a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002022:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002024:	4b50      	ldr	r3, [pc, #320]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	494d      	ldr	r1, [pc, #308]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d040      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b47      	ldr	r3, [pc, #284]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d115      	bne.n	8002082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e07f      	b.n	800215a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002062:	4b41      	ldr	r3, [pc, #260]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d109      	bne.n	8002082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e073      	b.n	800215a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002072:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e06b      	b.n	800215a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002082:	4b39      	ldr	r3, [pc, #228]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f023 0203 	bic.w	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4936      	ldr	r1, [pc, #216]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002094:	f7ff fa48 	bl	8001528 <HAL_GetTick>
 8002098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209c:	f7ff fa44 	bl	8001528 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e053      	b.n	800215a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 020c 	and.w	r2, r3, #12
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d1eb      	bne.n	800209c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_ClockConfig+0x1c0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d210      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 0207 	bic.w	r2, r3, #7
 80020da:	4922      	ldr	r1, [pc, #136]	; (8002164 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e032      	b.n	800215a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4916      	ldr	r1, [pc, #88]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	490e      	ldr	r1, [pc, #56]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002132:	f000 f821 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8002136:	4602      	mov	r2, r0
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	490a      	ldr	r1, [pc, #40]	; (800216c <HAL_RCC_ClockConfig+0x1c8>)
 8002144:	5ccb      	ldrb	r3, [r1, r3]
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1cc>)
 800214c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1d0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f9a6 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	08028604 	.word	0x08028604
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002178:	b490      	push	{r4, r7}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002180:	1d3c      	adds	r4, r7, #4
 8002182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002188:	f240 2301 	movw	r3, #513	; 0x201
 800218c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d002      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x40>
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x46>
 80021b6:	e02d      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ba:	623b      	str	r3, [r7, #32]
      break;
 80021bc:	e02d      	b.n	800221a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	0c9b      	lsrs	r3, r3, #18
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ca:	4413      	add	r3, r2
 80021cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0c5b      	lsrs	r3, r3, #17
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ea:	4413      	add	r3, r2
 80021ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f6:	fb02 f203 	mul.w	r2, r2, r3
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	e004      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	623b      	str	r3, [r7, #32]
      break;
 8002212:	e002      	b.n	800221a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002216:	623b      	str	r3, [r7, #32]
      break;
 8002218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221a:	6a3b      	ldr	r3, [r7, #32]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bc90      	pop	{r4, r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	0800252c 	.word	0x0800252c
 800222c:	40021000 	.word	0x40021000
 8002230:	007a1200 	.word	0x007a1200
 8002234:	003d0900 	.word	0x003d0900

08002238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <RCC_Delay+0x34>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <RCC_Delay+0x38>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0a5b      	lsrs	r3, r3, #9
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002254:	bf00      	nop
  }
  while (Delay --);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	60fa      	str	r2, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f9      	bne.n	8002254 <RCC_Delay+0x1c>
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000000 	.word	0x20000000
 8002270:	10624dd3 	.word	0x10624dd3

08002274 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <HAL_SRAM_Init+0x1c>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228e:	d101      	bne.n	8002294 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e038      	b.n	8002306 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7fe f863 	bl	8000374 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3308      	adds	r3, #8
 80022b6:	4619      	mov	r1, r3
 80022b8:	4610      	mov	r0, r2
 80022ba:	f000 f829 	bl	8002310 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	f000 f88b 	bl	80023e4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6858      	ldr	r0, [r3, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f000 f8b6 	bl	800244c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	6892      	ldr	r2, [r2, #8]
 80022e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	6892      	ldr	r2, [r2, #8]
 80022f4:	f041 0101 	orr.w	r1, r1, #1
 80022f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	f023 0101 	bic.w	r1, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b08      	cmp	r3, #8
 8002338:	d102      	bne.n	8002340 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800233a:	2340      	movs	r3, #64	; 0x40
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e001      	b.n	8002344 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002350:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002356:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800235c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002362:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002368:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800236e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002374:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800237a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002380:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <FSMC_NORSRAM_Init+0xd0>)
 80023a0:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a8:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80023b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43db      	mvns	r3, r3
 80023c0:	ea02 0103 	and.w	r1, r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4319      	orrs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	0008fb7f 	.word	0x0008fb7f

080023e4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	431a      	orrs	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	431a      	orrs	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	431a      	orrs	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	3b01      	subs	r3, #1
 8002420:	051b      	lsls	r3, r3, #20
 8002422:	431a      	orrs	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	3b02      	subs	r3, #2
 800242a:	061b      	lsls	r3, r3, #24
 800242c:	431a      	orrs	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	3201      	adds	r2, #1
 8002438:	4319      	orrs	r1, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002460:	d11d      	bne.n	800249e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800246c:	4013      	ands	r3, r2
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	6811      	ldr	r1, [r2, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	6852      	ldr	r2, [r2, #4]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	4311      	orrs	r1, r2
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	6892      	ldr	r2, [r2, #8]
 800247e:	0212      	lsls	r2, r2, #8
 8002480:	4311      	orrs	r1, r2
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	6992      	ldr	r2, [r2, #24]
 8002486:	4311      	orrs	r1, r2
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	68d2      	ldr	r2, [r2, #12]
 800248c:	0412      	lsls	r2, r2, #16
 800248e:	430a      	orrs	r2, r1
 8002490:	ea43 0102 	orr.w	r1, r3, r2
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800249c:	e005      	b.n	80024aa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80024a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	cff00000 	.word	0xcff00000

080024bc <__libc_init_array>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	2600      	movs	r6, #0
 80024c0:	4d0c      	ldr	r5, [pc, #48]	; (80024f4 <__libc_init_array+0x38>)
 80024c2:	4c0d      	ldr	r4, [pc, #52]	; (80024f8 <__libc_init_array+0x3c>)
 80024c4:	1b64      	subs	r4, r4, r5
 80024c6:	10a4      	asrs	r4, r4, #2
 80024c8:	42a6      	cmp	r6, r4
 80024ca:	d109      	bne.n	80024e0 <__libc_init_array+0x24>
 80024cc:	f000 f822 	bl	8002514 <_init>
 80024d0:	2600      	movs	r6, #0
 80024d2:	4d0a      	ldr	r5, [pc, #40]	; (80024fc <__libc_init_array+0x40>)
 80024d4:	4c0a      	ldr	r4, [pc, #40]	; (8002500 <__libc_init_array+0x44>)
 80024d6:	1b64      	subs	r4, r4, r5
 80024d8:	10a4      	asrs	r4, r4, #2
 80024da:	42a6      	cmp	r6, r4
 80024dc:	d105      	bne.n	80024ea <__libc_init_array+0x2e>
 80024de:	bd70      	pop	{r4, r5, r6, pc}
 80024e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e4:	4798      	blx	r3
 80024e6:	3601      	adds	r6, #1
 80024e8:	e7ee      	b.n	80024c8 <__libc_init_array+0xc>
 80024ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ee:	4798      	blx	r3
 80024f0:	3601      	adds	r6, #1
 80024f2:	e7f2      	b.n	80024da <__libc_init_array+0x1e>
 80024f4:	08028614 	.word	0x08028614
 80024f8:	08028614 	.word	0x08028614
 80024fc:	08028614 	.word	0x08028614
 8002500:	08028618 	.word	0x08028618

08002504 <memset>:
 8002504:	4603      	mov	r3, r0
 8002506:	4402      	add	r2, r0
 8002508:	4293      	cmp	r3, r2
 800250a:	d100      	bne.n	800250e <memset+0xa>
 800250c:	4770      	bx	lr
 800250e:	f803 1b01 	strb.w	r1, [r3], #1
 8002512:	e7f9      	b.n	8002508 <memset+0x4>

08002514 <_init>:
 8002514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002516:	bf00      	nop
 8002518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251a:	bc08      	pop	{r3}
 800251c:	469e      	mov	lr, r3
 800251e:	4770      	bx	lr

08002520 <_fini>:
 8002520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002522:	bf00      	nop
 8002524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002526:	bc08      	pop	{r3}
 8002528:	469e      	mov	lr, r3
 800252a:	4770      	bx	lr
