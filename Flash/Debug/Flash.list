
Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  080060a0  080060a0  000160a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800650c  0800650c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800650c  0800650c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800650c  0800650c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006510  08006510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001dc  080066f0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080066f0  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d81f  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228c  00000000  00000000  0002da24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  000309a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adda  00000000  00000000  000315b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e64f  00000000  00000000  0004c392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a087  00000000  00000000  0005a9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4a68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ec  00000000  00000000  000f4abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08006084 	.word	0x08006084

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08006084 	.word	0x08006084

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_GPIO_Init+0x74>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	211c      	movs	r1, #28
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_GPIO_Init+0x78>)
 8000bbe:	f001 f823 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000bc2:	231c      	movs	r3, #28
 8000bc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_GPIO_Init+0x78>)
 8000bda:	f000 fe81 	bl	80018e0 <HAL_GPIO_Init>

}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40011800 	.word	0x40011800

08000bf0 <HAL_UART_RxCpltCallback>:
uint8_t Rx_Buffer[20];
uint8_t USART1_len=0;
uint8_t USART1_rx_end=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  static uint8_t usart1_chk=0;
  if(huart -> Instance == USART1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <HAL_UART_RxCpltCallback+0xa4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d144      	bne.n	8000c8c <HAL_UART_RxCpltCallback+0x9c>
  {
      USART1_rx_end=0;
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_UART_RxCpltCallback+0xa8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
      switch(usart1_chk)
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <HAL_UART_RxCpltCallback+0x26>
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d019      	beq.n	8000c48 <HAL_UART_RxCpltCallback+0x58>
 8000c14:	e030      	b.n	8000c78 <HAL_UART_RxCpltCallback+0x88>
      {
          case 0:
            if(Rx_Data[0]==0x02)
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d110      	bne.n	8000c40 <HAL_UART_RxCpltCallback+0x50>
            {
            	Rx_Buffer[USART1_len]=Rx_Data[0];
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c26:	7819      	ldrb	r1, [r3, #0]
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_UART_RxCpltCallback+0xb8>)
 8000c2a:	5499      	strb	r1, [r3, r2]
                USART1_len++;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c36:	701a      	strb	r2, [r3, #0]
                usart1_chk=1;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
            }
            else usart1_chk=0;
            break;
 8000c3e:	e020      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x92>
            else usart1_chk=0;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
            break;
 8000c46:	e01c      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x92>
          case 1:
            Rx_Buffer[USART1_len]=Rx_Data[0];
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c50:	7819      	ldrb	r1, [r3, #0]
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_RxCpltCallback+0xb8>)
 8000c54:	5499      	strb	r1, [r3, r2]
            USART1_len++;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_UART_RxCpltCallback+0xb4>)
 8000c60:	701a      	strb	r2, [r3, #0]

            if(Rx_Data[0]==0x03)
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d10a      	bne.n	8000c80 <HAL_UART_RxCpltCallback+0x90>
            {
              USART1_rx_end=1;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_UART_RxCpltCallback+0xa8>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
              usart1_chk=0;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000c76:	e003      	b.n	8000c80 <HAL_UART_RxCpltCallback+0x90>
          default:
            usart1_chk=0;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_UART_RxCpltCallback+0xac>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
            break;
 8000c7e:	e000      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x92>
            break;
 8000c80:	bf00      	nop
      }
      HAL_UART_Receive_IT(&huart1, Rx_Data, 1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <HAL_UART_RxCpltCallback+0xb0>)
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_UART_RxCpltCallback+0xbc>)
 8000c88:	f001 ffbd 	bl	8002c06 <HAL_UART_Receive_IT>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013800 	.word	0x40013800
 8000c98:	200001fd 	.word	0x200001fd
 8000c9c:	200001fe 	.word	0x200001fe
 8000ca0:	20000220 	.word	0x20000220
 8000ca4:	200001fc 	.word	0x200001fc
 8000ca8:	2000020c 	.word	0x2000020c
 8000cac:	2000026c 	.word	0x2000026c

08000cb0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)  //for printf
#endif
PUTCHAR_PROTOTYPE
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000cb8:	1d39      	adds	r1, r7, #4
 8000cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <__io_putchar+0x20>)
 8000cc2:	f001 ff0e 	bl	8002ae2 <HAL_UART_Transmit>
  return ch;
 8000cc6:	687b      	ldr	r3, [r7, #4]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000026c 	.word	0x2000026c

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 fb50 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f8d0 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f7ff ff48 	bl	8000b74 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000ce4:	f000 fa4a 	bl	800117c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000ce8:	f000 faa4 	bl	8001234 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000cec:	4847      	ldr	r0, [pc, #284]	; (8000e0c <main+0x138>)
 8000cee:	f001 fc27 	bl	8002540 <HAL_TIM_Base_Start_IT>

  setvbuf(stdout, NULL, _IONBF, 0);
 8000cf2:	4b47      	ldr	r3, [pc, #284]	; (8000e10 <main+0x13c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	6898      	ldr	r0, [r3, #8]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f003 f885 	bl	8003e0c <setvbuf>

  //main 함수 while() 문 위에 수신 인터럽트 enable 설정
  HAL_UART_Receive_IT(&huart1, Rx_Data, 1); // 수신 interrupt Enable 설정
 8000d02:	2201      	movs	r2, #1
 8000d04:	4943      	ldr	r1, [pc, #268]	; (8000e14 <main+0x140>)
 8000d06:	4844      	ldr	r0, [pc, #272]	; (8000e18 <main+0x144>)
 8000d08:	f001 ff7d 	bl	8002c06 <HAL_UART_Receive_IT>
  printf("Program start...  ");
 8000d0c:	4843      	ldr	r0, [pc, #268]	; (8000e1c <main+0x148>)
 8000d0e:	f003 f865 	bl	8003ddc <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Timer_500m >= 2)
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <main+0x14c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	dd0e      	ble.n	8000d38 <main+0x64>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	4841      	ldr	r0, [pc, #260]	; (8000e24 <main+0x150>)
 8000d1e:	f000 ff8b 	bl	8001c38 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8000d22:	2108      	movs	r1, #8
 8000d24:	483f      	ldr	r0, [pc, #252]	; (8000e24 <main+0x150>)
 8000d26:	f000 ff87 	bl	8001c38 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	483d      	ldr	r0, [pc, #244]	; (8000e24 <main+0x150>)
 8000d2e:	f000 ff83 	bl	8001c38 <HAL_GPIO_TogglePin>
		  Timer_500m = 0;
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <main+0x14c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
	  }

	  // main함수 while문 내에서 주기적으로 USART1_rx_end flag 검사
	  if(USART1_rx_end)
 8000d38:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <main+0x154>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0e8      	beq.n	8000d12 <main+0x3e>
	  {
		  // 입력 문자열 비교
	  	  if(!strcmp(Rx_Buffer, "\x02LED2 ON\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 , GPIO_PIN_SET);
 8000d40:	493a      	ldr	r1, [pc, #232]	; (8000e2c <main+0x158>)
 8000d42:	483b      	ldr	r0, [pc, #236]	; (8000e30 <main+0x15c>)
 8000d44:	f7ff fa70 	bl	8000228 <strcmp>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d105      	bne.n	8000d5a <main+0x86>
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2104      	movs	r1, #4
 8000d52:	4834      	ldr	r0, [pc, #208]	; (8000e24 <main+0x150>)
 8000d54:	f000 ff58 	bl	8001c08 <HAL_GPIO_WritePin>
 8000d58:	e03f      	b.n	8000dda <main+0x106>
	  	  else if(!strcmp(Rx_Buffer, "\x02LED2 OFF\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 , GPIO_PIN_RESET);
 8000d5a:	4936      	ldr	r1, [pc, #216]	; (8000e34 <main+0x160>)
 8000d5c:	4834      	ldr	r0, [pc, #208]	; (8000e30 <main+0x15c>)
 8000d5e:	f7ff fa63 	bl	8000228 <strcmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d105      	bne.n	8000d74 <main+0xa0>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	482d      	ldr	r0, [pc, #180]	; (8000e24 <main+0x150>)
 8000d6e:	f000 ff4b 	bl	8001c08 <HAL_GPIO_WritePin>
 8000d72:	e032      	b.n	8000dda <main+0x106>
	  	  else if(!strcmp(Rx_Buffer, "\x02LED3 ON\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 , GPIO_PIN_SET);
 8000d74:	4930      	ldr	r1, [pc, #192]	; (8000e38 <main+0x164>)
 8000d76:	482e      	ldr	r0, [pc, #184]	; (8000e30 <main+0x15c>)
 8000d78:	f7ff fa56 	bl	8000228 <strcmp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d105      	bne.n	8000d8e <main+0xba>
 8000d82:	2201      	movs	r2, #1
 8000d84:	2108      	movs	r1, #8
 8000d86:	4827      	ldr	r0, [pc, #156]	; (8000e24 <main+0x150>)
 8000d88:	f000 ff3e 	bl	8001c08 <HAL_GPIO_WritePin>
 8000d8c:	e025      	b.n	8000dda <main+0x106>
	  	  else if(!strcmp(Rx_Buffer, "\x02LED3 OFF\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 , GPIO_PIN_RESET);
 8000d8e:	492b      	ldr	r1, [pc, #172]	; (8000e3c <main+0x168>)
 8000d90:	4827      	ldr	r0, [pc, #156]	; (8000e30 <main+0x15c>)
 8000d92:	f7ff fa49 	bl	8000228 <strcmp>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d105      	bne.n	8000da8 <main+0xd4>
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4820      	ldr	r0, [pc, #128]	; (8000e24 <main+0x150>)
 8000da2:	f000 ff31 	bl	8001c08 <HAL_GPIO_WritePin>
 8000da6:	e018      	b.n	8000dda <main+0x106>
	  	  else if(!strcmp(Rx_Buffer, "\x02LED4 ON\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4 , GPIO_PIN_SET);
 8000da8:	4925      	ldr	r1, [pc, #148]	; (8000e40 <main+0x16c>)
 8000daa:	4821      	ldr	r0, [pc, #132]	; (8000e30 <main+0x15c>)
 8000dac:	f7ff fa3c 	bl	8000228 <strcmp>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <main+0xee>
 8000db6:	2201      	movs	r2, #1
 8000db8:	2110      	movs	r1, #16
 8000dba:	481a      	ldr	r0, [pc, #104]	; (8000e24 <main+0x150>)
 8000dbc:	f000 ff24 	bl	8001c08 <HAL_GPIO_WritePin>
 8000dc0:	e00b      	b.n	8000dda <main+0x106>
	  	  else if(!strcmp(Rx_Buffer, "\x02LED4 OFF\x03")) HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4 , GPIO_PIN_RESET);
 8000dc2:	4920      	ldr	r1, [pc, #128]	; (8000e44 <main+0x170>)
 8000dc4:	481a      	ldr	r0, [pc, #104]	; (8000e30 <main+0x15c>)
 8000dc6:	f7ff fa2f 	bl	8000228 <strcmp>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d104      	bne.n	8000dda <main+0x106>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <main+0x150>)
 8000dd6:	f000 ff17 	bl	8001c08 <HAL_GPIO_WritePin>

	  	  // 받은 데이터, 전송
	  	  HAL_UART_Transmit(&huart1, Rx_Buffer, USART1_len, 2);
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <main+0x174>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	2302      	movs	r3, #2
 8000de2:	4913      	ldr	r1, [pc, #76]	; (8000e30 <main+0x15c>)
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <main+0x144>)
 8000de6:	f001 fe7c 	bl	8002ae2 <HAL_UART_Transmit>
	  	  USART1_len=0;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <main+0x174>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
	  	  USART1_rx_end=0;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <main+0x154>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]

	  	  printf("%s", Rx_Buffer);
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <main+0x15c>)
 8000df8:	4814      	ldr	r0, [pc, #80]	; (8000e4c <main+0x178>)
 8000dfa:	f002 ffef 	bl	8003ddc <iprintf>

	  	  memset(Rx_Buffer, 0, 20); // 초기화
 8000dfe:	2214      	movs	r2, #20
 8000e00:	2100      	movs	r1, #0
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <main+0x15c>)
 8000e04:	f002 fb82 	bl	800350c <memset>
	  if(Timer_500m >= 2)
 8000e08:	e783      	b.n	8000d12 <main+0x3e>
 8000e0a:	bf00      	nop
 8000e0c:	20000224 	.word	0x20000224
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	20000220 	.word	0x20000220
 8000e18:	2000026c 	.word	0x2000026c
 8000e1c:	080060a0 	.word	0x080060a0
 8000e20:	200001f8 	.word	0x200001f8
 8000e24:	40011800 	.word	0x40011800
 8000e28:	200001fd 	.word	0x200001fd
 8000e2c:	080060b4 	.word	0x080060b4
 8000e30:	2000020c 	.word	0x2000020c
 8000e34:	080060c0 	.word	0x080060c0
 8000e38:	080060cc 	.word	0x080060cc
 8000e3c:	080060d8 	.word	0x080060d8
 8000e40:	080060e4 	.word	0x080060e4
 8000e44:	080060f0 	.word	0x080060f0
 8000e48:	200001fc 	.word	0x200001fc
 8000e4c:	080060fc 	.word	0x080060fc

08000e50 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    if(htim -> Instance == TIM6)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d104      	bne.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        Timer_500m++;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e6a:	6013      	str	r3, [r2, #0]
    }
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40001000 	.word	0x40001000
 8000e7c:	200001f8 	.word	0x200001f8

08000e80 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b090      	sub	sp, #64	; 0x40
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0318 	add.w	r3, r7, #24
 8000e8a:	2228      	movs	r2, #40	; 0x28
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fb3c 	bl	800350c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ebe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fecf 	bl	8001c6c <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ed4:	f000 f819 	bl	8000f0a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	230f      	movs	r3, #15
 8000eda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000edc:	2302      	movs	r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 f93a 	bl	800216c <HAL_RCC_ClockConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000efe:	f000 f804 	bl	8000f0a <Error_Handler>
  }
}
 8000f02:	bf00      	nop
 8000f04:	3740      	adds	r7, #64	; 0x40
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0e:	b672      	cpsid	i
}
 8000f10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <Error_Handler+0x8>

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_MspInit+0x60>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_MspInit+0x60>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbe:	f000 fa23 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <USART1_IRQHandler+0x10>)
 8000fce:	f001 fe4b 	bl	8002c68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000026c 	.word	0x2000026c

08000fdc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM6_IRQHandler+0x10>)
 8000fe2:	f001 fb0d 	bl	8002600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000224 	.word	0x20000224

08000ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	return 1;
 8000ff4:	2301      	movs	r3, #1
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <_kill>:

int _kill(int pid, int sig)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001008:	f002 fa56 	bl	80034b8 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	2216      	movs	r2, #22
 8001010:	601a      	str	r2, [r3, #0]
	return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_exit>:

void _exit (int status)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001026:	f04f 31ff 	mov.w	r1, #4294967295
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffe7 	bl	8000ffe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001030:	e7fe      	b.n	8001030 <_exit+0x12>

08001032 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e00a      	b.n	800105a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001044:	f3af 8000 	nop.w
 8001048:	4601      	mov	r1, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	60ba      	str	r2, [r7, #8]
 8001050:	b2ca      	uxtb	r2, r1
 8001052:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	dbf0      	blt.n	8001044 <_read+0x12>
	}

return len;
 8001062:	687b      	ldr	r3, [r7, #4]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e009      	b.n	8001092 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	60ba      	str	r2, [r7, #8]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe12 	bl	8000cb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbf1      	blt.n	800107e <_write+0x12>
	}
	return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_close>:

int _close(int file)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	return -1;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ca:	605a      	str	r2, [r3, #4]
	return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <_isatty>:

int _isatty(int file)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	return 1;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
	return 0;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f002 f9c0 	bl	80034b8 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000c000 	.word	0x2000c000
 8001164:	00000400 	.word	0x00000400
 8001168:	20000200 	.word	0x20000200
 800116c:	200002c8 	.word	0x200002c8

08001170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_TIM6_Init+0x64>)
 800118c:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <MX_TIM6_Init+0x68>)
 800118e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000;
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_TIM6_Init+0x64>)
 8001192:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8001196:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_TIM6_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_TIM6_Init+0x64>)
 80011a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_TIM6_Init+0x64>)
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_TIM6_Init+0x64>)
 80011ae:	f001 f977 	bl	80024a0 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011b8:	f7ff fea7 	bl	8000f0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_TIM6_Init+0x64>)
 80011ca:	f001 fbbf 	bl	800294c <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011d4:	f7ff fe99 	bl	8000f0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000224 	.word	0x20000224
 80011e4:	40001000 	.word	0x40001000

080011e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_TIM_Base_MspInit+0x44>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d113      	bne.n	8001222 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_TIM_Base_MspInit+0x48>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <HAL_TIM_Base_MspInit+0x48>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_TIM_Base_MspInit+0x48>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2036      	movs	r0, #54	; 0x36
 8001218:	f000 f9e9 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800121c:	2036      	movs	r0, #54	; 0x36
 800121e:	f000 fa02 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40001000 	.word	0x40001000
 8001230:	40021000 	.word	0x40021000

08001234 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_USART1_UART_Init+0x50>)
 800123c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800126c:	f001 fbec 	bl	8002a48 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001276:	f7ff fe48 	bl	8000f0a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000026c 	.word	0x2000026c
 8001284:	40013800 	.word	0x40013800

08001288 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a20      	ldr	r2, [pc, #128]	; (8001324 <HAL_UART_MspInit+0x9c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d139      	bne.n	800131c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_UART_MspInit+0xa0>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <HAL_UART_MspInit+0xa0>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_UART_MspInit+0xa0>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_UART_MspInit+0xa0>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_UART_MspInit+0xa0>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_UART_MspInit+0xa0>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <HAL_UART_MspInit+0xa4>)
 80012ee:	f000 faf7 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <HAL_UART_MspInit+0xa4>)
 8001308:	f000 faea 	bl	80018e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2025      	movs	r0, #37	; 0x25
 8001312:	f000 f96c 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001316:	2025      	movs	r0, #37	; 0x25
 8001318:	f000 f985 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40013800 	.word	0x40013800
 8001328:	40021000 	.word	0x40021000
 800132c:	40010800 	.word	0x40010800

08001330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	; (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001356:	f7ff ff0b 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f002 f8b3 	bl	80034c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135e:	f7ff fcb9 	bl	8000cd4 <main>
  bx lr
 8001362:	4770      	bx	lr
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800136c:	08006514 	.word	0x08006514
  ldr r2, =_sbss
 8001370:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001374:	200002c4 	.word	0x200002c4

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x28>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x28>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f923 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fdbc 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40022000 	.word	0x40022000

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f93b 	bl	8001642 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 f903 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000008 	.word	0x20000008
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_IncTick+0x1c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a03      	ldr	r2, [pc, #12]	; (8001428 <HAL_IncTick+0x20>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000008 	.word	0x20000008
 8001428:	200002b0 	.word	0x200002b0

0800142c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_GetTick+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	200002b0 	.word	0x200002b0

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4906      	ldr	r1, [pc, #24]	; (80014d8 <__NVIC_EnableIRQ+0x34>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff90 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff2d 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff42 	bl	8001488 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff35 	bl	80014a4 <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800166c:	2b02      	cmp	r3, #2
 800166e:	d008      	beq.n	8001682 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2204      	movs	r2, #4
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e020      	b.n	80016c4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 020e 	bic.w	r2, r2, #14
 8001690:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d005      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2204      	movs	r2, #4
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e0d6      	b.n	80018a0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 020e 	bic.w	r2, r2, #14
 8001700:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b64      	ldr	r3, [pc, #400]	; (80018ac <HAL_DMA_Abort_IT+0x1dc>)
 800171a:	429a      	cmp	r2, r3
 800171c:	d958      	bls.n	80017d0 <HAL_DMA_Abort_IT+0x100>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a63      	ldr	r2, [pc, #396]	; (80018b0 <HAL_DMA_Abort_IT+0x1e0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d04f      	beq.n	80017c8 <HAL_DMA_Abort_IT+0xf8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a61      	ldr	r2, [pc, #388]	; (80018b4 <HAL_DMA_Abort_IT+0x1e4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d048      	beq.n	80017c4 <HAL_DMA_Abort_IT+0xf4>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a60      	ldr	r2, [pc, #384]	; (80018b8 <HAL_DMA_Abort_IT+0x1e8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d040      	beq.n	80017be <HAL_DMA_Abort_IT+0xee>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <HAL_DMA_Abort_IT+0x1ec>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d038      	beq.n	80017b8 <HAL_DMA_Abort_IT+0xe8>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5d      	ldr	r2, [pc, #372]	; (80018c0 <HAL_DMA_Abort_IT+0x1f0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d030      	beq.n	80017b2 <HAL_DMA_Abort_IT+0xe2>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a5b      	ldr	r2, [pc, #364]	; (80018c4 <HAL_DMA_Abort_IT+0x1f4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d028      	beq.n	80017ac <HAL_DMA_Abort_IT+0xdc>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a53      	ldr	r2, [pc, #332]	; (80018ac <HAL_DMA_Abort_IT+0x1dc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d020      	beq.n	80017a6 <HAL_DMA_Abort_IT+0xd6>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a57      	ldr	r2, [pc, #348]	; (80018c8 <HAL_DMA_Abort_IT+0x1f8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_DMA_Abort_IT+0xd2>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a56      	ldr	r2, [pc, #344]	; (80018cc <HAL_DMA_Abort_IT+0x1fc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d012      	beq.n	800179e <HAL_DMA_Abort_IT+0xce>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a54      	ldr	r2, [pc, #336]	; (80018d0 <HAL_DMA_Abort_IT+0x200>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00a      	beq.n	8001798 <HAL_DMA_Abort_IT+0xc8>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a53      	ldr	r2, [pc, #332]	; (80018d4 <HAL_DMA_Abort_IT+0x204>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d102      	bne.n	8001792 <HAL_DMA_Abort_IT+0xc2>
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001790:	e01b      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 8001792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001796:	e018      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 8001798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179c:	e015      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 800179e:	2310      	movs	r3, #16
 80017a0:	e013      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e011      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 80017a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017aa:	e00e      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 80017ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017b0:	e00b      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 80017b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b6:	e008      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 80017b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017bc:	e005      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 80017be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c2:	e002      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 80017c4:	2310      	movs	r3, #16
 80017c6:	e000      	b.n	80017ca <HAL_DMA_Abort_IT+0xfa>
 80017c8:	2301      	movs	r3, #1
 80017ca:	4a43      	ldr	r2, [pc, #268]	; (80018d8 <HAL_DMA_Abort_IT+0x208>)
 80017cc:	6053      	str	r3, [r2, #4]
 80017ce:	e057      	b.n	8001880 <HAL_DMA_Abort_IT+0x1b0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <HAL_DMA_Abort_IT+0x1e0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d04f      	beq.n	800187a <HAL_DMA_Abort_IT+0x1aa>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a35      	ldr	r2, [pc, #212]	; (80018b4 <HAL_DMA_Abort_IT+0x1e4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d048      	beq.n	8001876 <HAL_DMA_Abort_IT+0x1a6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a33      	ldr	r2, [pc, #204]	; (80018b8 <HAL_DMA_Abort_IT+0x1e8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d040      	beq.n	8001870 <HAL_DMA_Abort_IT+0x1a0>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a32      	ldr	r2, [pc, #200]	; (80018bc <HAL_DMA_Abort_IT+0x1ec>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d038      	beq.n	800186a <HAL_DMA_Abort_IT+0x19a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <HAL_DMA_Abort_IT+0x1f0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d030      	beq.n	8001864 <HAL_DMA_Abort_IT+0x194>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <HAL_DMA_Abort_IT+0x1f4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d028      	beq.n	800185e <HAL_DMA_Abort_IT+0x18e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_DMA_Abort_IT+0x1dc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d020      	beq.n	8001858 <HAL_DMA_Abort_IT+0x188>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <HAL_DMA_Abort_IT+0x1f8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d019      	beq.n	8001854 <HAL_DMA_Abort_IT+0x184>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a29      	ldr	r2, [pc, #164]	; (80018cc <HAL_DMA_Abort_IT+0x1fc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d012      	beq.n	8001850 <HAL_DMA_Abort_IT+0x180>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <HAL_DMA_Abort_IT+0x200>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00a      	beq.n	800184a <HAL_DMA_Abort_IT+0x17a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_DMA_Abort_IT+0x204>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d102      	bne.n	8001844 <HAL_DMA_Abort_IT+0x174>
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	e01b      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 8001844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001848:	e018      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 800184a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184e:	e015      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 8001850:	2310      	movs	r3, #16
 8001852:	e013      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 8001854:	2301      	movs	r3, #1
 8001856:	e011      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 8001858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185c:	e00e      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 800185e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001862:	e00b      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 8001864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001868:	e008      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	e005      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 8001870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001874:	e002      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 8001876:	2310      	movs	r3, #16
 8001878:	e000      	b.n	800187c <HAL_DMA_Abort_IT+0x1ac>
 800187a:	2301      	movs	r3, #1
 800187c:	4a17      	ldr	r2, [pc, #92]	; (80018dc <HAL_DMA_Abort_IT+0x20c>)
 800187e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
    } 
  }
  return status;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40020080 	.word	0x40020080
 80018b0:	40020008 	.word	0x40020008
 80018b4:	4002001c 	.word	0x4002001c
 80018b8:	40020030 	.word	0x40020030
 80018bc:	40020044 	.word	0x40020044
 80018c0:	40020058 	.word	0x40020058
 80018c4:	4002006c 	.word	0x4002006c
 80018c8:	40020408 	.word	0x40020408
 80018cc:	4002041c 	.word	0x4002041c
 80018d0:	40020430 	.word	0x40020430
 80018d4:	40020444 	.word	0x40020444
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020000 	.word	0x40020000

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e179      	b.n	8001be8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018f4:	2201      	movs	r2, #1
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8168 	bne.w	8001be2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4aa0      	ldr	r2, [pc, #640]	; (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d05e      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800191c:	4a9e      	ldr	r2, [pc, #632]	; (8001b98 <HAL_GPIO_Init+0x2b8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d875      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001922:	4a9e      	ldr	r2, [pc, #632]	; (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d058      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001928:	4a9c      	ldr	r2, [pc, #624]	; (8001b9c <HAL_GPIO_Init+0x2bc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d86f      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800192e:	4a9c      	ldr	r2, [pc, #624]	; (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d052      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001934:	4a9a      	ldr	r2, [pc, #616]	; (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d869      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800193a:	4a9a      	ldr	r2, [pc, #616]	; (8001ba4 <HAL_GPIO_Init+0x2c4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d04c      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001940:	4a98      	ldr	r2, [pc, #608]	; (8001ba4 <HAL_GPIO_Init+0x2c4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d863      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001946:	4a98      	ldr	r2, [pc, #608]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d046      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800194c:	4a96      	ldr	r2, [pc, #600]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d85d      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001952:	2b12      	cmp	r3, #18
 8001954:	d82a      	bhi.n	80019ac <HAL_GPIO_Init+0xcc>
 8001956:	2b12      	cmp	r3, #18
 8001958:	d859      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <HAL_GPIO_Init+0x80>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	080019db 	.word	0x080019db
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019c7 	.word	0x080019c7
 800196c:	08001a09 	.word	0x08001a09
 8001970:	08001a0f 	.word	0x08001a0f
 8001974:	08001a0f 	.word	0x08001a0f
 8001978:	08001a0f 	.word	0x08001a0f
 800197c:	08001a0f 	.word	0x08001a0f
 8001980:	08001a0f 	.word	0x08001a0f
 8001984:	08001a0f 	.word	0x08001a0f
 8001988:	08001a0f 	.word	0x08001a0f
 800198c:	08001a0f 	.word	0x08001a0f
 8001990:	08001a0f 	.word	0x08001a0f
 8001994:	08001a0f 	.word	0x08001a0f
 8001998:	08001a0f 	.word	0x08001a0f
 800199c:	08001a0f 	.word	0x08001a0f
 80019a0:	08001a0f 	.word	0x08001a0f
 80019a4:	080019bd 	.word	0x080019bd
 80019a8:	080019d1 	.word	0x080019d1
 80019ac:	4a7f      	ldr	r2, [pc, #508]	; (8001bac <HAL_GPIO_Init+0x2cc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b2:	e02c      	b.n	8001a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e029      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e024      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	3308      	adds	r3, #8
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e01f      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	330c      	adds	r3, #12
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e01a      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019e2:	2304      	movs	r3, #4
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e013      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	611a      	str	r2, [r3, #16]
          break;
 80019fa:	e009      	b.n	8001a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	615a      	str	r2, [r3, #20]
          break;
 8001a06:	e003      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          break;
 8001a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2bff      	cmp	r3, #255	; 0xff
 8001a14:	d801      	bhi.n	8001a1a <HAL_GPIO_Init+0x13a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e001      	b.n	8001a1e <HAL_GPIO_Init+0x13e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d802      	bhi.n	8001a2c <HAL_GPIO_Init+0x14c>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	e002      	b.n	8001a32 <HAL_GPIO_Init+0x152>
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	3b08      	subs	r3, #8
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	210f      	movs	r1, #15
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80c1 	beq.w	8001be2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a78:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <HAL_GPIO_Init+0x2d4>)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a46      	ldr	r2, [pc, #280]	; (8001bb8 <HAL_GPIO_Init+0x2d8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d01f      	beq.n	8001ae4 <HAL_GPIO_Init+0x204>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a45      	ldr	r2, [pc, #276]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d019      	beq.n	8001ae0 <HAL_GPIO_Init+0x200>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a44      	ldr	r2, [pc, #272]	; (8001bc0 <HAL_GPIO_Init+0x2e0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_GPIO_Init+0x1fc>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a43      	ldr	r2, [pc, #268]	; (8001bc4 <HAL_GPIO_Init+0x2e4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_GPIO_Init+0x1f8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <HAL_GPIO_Init+0x2e8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x1f4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a41      	ldr	r2, [pc, #260]	; (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_GPIO_Init+0x1f0>
 8001acc:	2305      	movs	r3, #5
 8001ace:	e00a      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ad0:	2306      	movs	r3, #6
 8001ad2:	e008      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	e006      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e004      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_GPIO_Init+0x206>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	f002 0203 	and.w	r2, r2, #3
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	4093      	lsls	r3, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af6:	492f      	ldr	r1, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x2d4>)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	492e      	ldr	r1, [pc, #184]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	492a      	ldr	r1, [pc, #168]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4924      	ldr	r1, [pc, #144]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4920      	ldr	r1, [pc, #128]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	491a      	ldr	r1, [pc, #104]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d025      	beq.n	8001bd4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4910      	ldr	r1, [pc, #64]	; (8001bd0 <HAL_GPIO_Init+0x2f0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e025      	b.n	8001be2 <HAL_GPIO_Init+0x302>
 8001b96:	bf00      	nop
 8001b98:	10320000 	.word	0x10320000
 8001b9c:	10310000 	.word	0x10310000
 8001ba0:	10220000 	.word	0x10220000
 8001ba4:	10210000 	.word	0x10210000
 8001ba8:	10120000 	.word	0x10120000
 8001bac:	10110000 	.word	0x10110000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	40011400 	.word	0x40011400
 8001bc8:	40011800 	.word	0x40011800
 8001bcc:	40011c00 	.word	0x40011c00
 8001bd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_GPIO_Init+0x324>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4909      	ldr	r1, [pc, #36]	; (8001c04 <HAL_GPIO_Init+0x324>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f ae7e 	bne.w	80018f4 <HAL_GPIO_Init+0x14>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	372c      	adds	r7, #44	; 0x2c
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43d9      	mvns	r1, r3
 8001c56:	887b      	ldrh	r3, [r7, #2]
 8001c58:	400b      	ands	r3, r1
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	611a      	str	r2, [r3, #16]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e26c      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8087 	beq.w	8001d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8c:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c98:	4b8f      	ldr	r3, [pc, #572]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d10b      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb2:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d06c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x12c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d168      	bne.n	8001d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e246      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x76>
 8001cd4:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a7f      	ldr	r2, [pc, #508]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e02e      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7a      	ldr	r2, [pc, #488]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b78      	ldr	r3, [pc, #480]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a77      	ldr	r2, [pc, #476]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0xbc>
 8001d0e:	4b72      	ldr	r3, [pc, #456]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a71      	ldr	r2, [pc, #452]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6e      	ldr	r2, [pc, #440]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d28:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6a      	ldr	r2, [pc, #424]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a67      	ldr	r2, [pc, #412]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fb70 	bl	800142c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fb6c 	bl	800142c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1fa      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe4>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fb5c 	bl	800142c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fb58 	bl	800142c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1e6      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x10c>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d11c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d116      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e1ba      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4939      	ldr	r1, [pc, #228]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	e03a      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fb11 	bl	800142c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fb0d 	bl	800142c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e19b      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4927      	ldr	r1, [pc, #156]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff faf0 	bl	800142c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff faec 	bl	800142c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e17a      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03a      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff fad0 	bl	800142c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff facc 	bl	800142c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e15a      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 fad8 	bl	8002464 <RCC_Delay>
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fab6 	bl	800142c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fab2 	bl	800142c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d908      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e140      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	42420000 	.word	0x42420000
 8001ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	4b9e      	ldr	r3, [pc, #632]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1e9      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a6 	beq.w	800204a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b97      	ldr	r3, [pc, #604]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b94      	ldr	r3, [pc, #592]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a93      	ldr	r2, [pc, #588]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b91      	ldr	r3, [pc, #580]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4b8b      	ldr	r3, [pc, #556]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a8a      	ldr	r2, [pc, #552]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fa73 	bl	800142c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7ff fa6f 	bl	800142c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	; 0x64
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0fd      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b81      	ldr	r3, [pc, #516]	; (8002164 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x312>
 8001f70:	4b7b      	ldr	r3, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a7a      	ldr	r2, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e02d      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x334>
 8001f86:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a75      	ldr	r2, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a72      	ldr	r2, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	e01c      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x356>
 8001fa8:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a6c      	ldr	r2, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e00b      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a66      	ldr	r2, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d015      	beq.n	800200e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fa23 	bl	800142c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff fa1f 	bl	800142c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0ab      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	4b57      	ldr	r3, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ee      	beq.n	8001fea <HAL_RCC_OscConfig+0x37e>
 800200c:	e014      	b.n	8002038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff fa0d 	bl	800142c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff fa09 	bl	800142c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e095      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8081 	beq.w	8002156 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d061      	beq.n	8002124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d146      	bne.n	80020f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff f9dd 	bl	800142c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff f9d9 	bl	800142c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e067      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	492d      	ldr	r1, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a19      	ldr	r1, [r3, #32]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	430b      	orrs	r3, r1
 80020c2:	4927      	ldr	r1, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff f9ad 	bl	800142c <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff f9a9 	bl	800142c <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e037      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46a>
 80020f4:	e02f      	b.n	8002156 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_RCC_OscConfig+0x4fc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff f996 	bl	800142c <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff f992 	bl	800142c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e020      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x498>
 8002122:	e018      	b.n	8002156 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e013      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	429a      	cmp	r2, r3
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	40007000 	.word	0x40007000
 8002168:	42420060 	.word	0x42420060

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d0      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4965      	ldr	r1, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d040      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e073      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4936      	ldr	r1, [pc, #216]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7ff f8e6 	bl	800142c <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7ff f8e2 	bl	800142c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e053      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d210      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4922      	ldr	r1, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1cc>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f844 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000
 8002330:	40021000 	.word	0x40021000
 8002334:	08006110 	.word	0x08006110
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b490      	push	{r4, r7}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002348:	1d3c      	adds	r4, r7, #4
 800234a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002350:	f240 2301 	movw	r3, #513	; 0x201
 8002354:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d002      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 800237a:	2b08      	cmp	r3, #8
 800237c:	d003      	beq.n	8002386 <HAL_RCC_GetSysClockFreq+0x46>
 800237e:	e02d      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002382:	623b      	str	r3, [r7, #32]
      break;
 8002384:	e02d      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002392:	4413      	add	r3, r2
 8002394:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002398:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	0c5b      	lsrs	r3, r3, #17
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023b2:	4413      	add	r3, r2
 80023b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023be:	fb02 f203 	mul.w	r2, r2, r3
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	e004      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	623b      	str	r3, [r7, #32]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023de:	623b      	str	r3, [r7, #32]
      break;
 80023e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e2:	6a3b      	ldr	r3, [r7, #32]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc90      	pop	{r4, r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	08006100 	.word	0x08006100
 80023f4:	40021000 	.word	0x40021000
 80023f8:	007a1200 	.word	0x007a1200
 80023fc:	003d0900 	.word	0x003d0900

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b02      	ldr	r3, [pc, #8]	; (8002410 <HAL_RCC_GetHCLKFreq+0x10>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000000 	.word	0x20000000

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002418:	f7ff fff2 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	08006120 	.word	0x08006120

0800243c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002440:	f7ff ffde 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0adb      	lsrs	r3, r3, #11
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	08006120 	.word	0x08006120

08002464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <RCC_Delay+0x34>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <RCC_Delay+0x38>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0a5b      	lsrs	r3, r3, #9
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002480:	bf00      	nop
  }
  while (Delay --);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e5a      	subs	r2, r3, #1
 8002486:	60fa      	str	r2, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f9      	bne.n	8002480 <RCC_Delay+0x1c>
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	20000000 	.word	0x20000000
 800249c:	10624dd3 	.word	0x10624dd3

080024a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e041      	b.n	8002536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe fe8e 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3304      	adds	r3, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f000 f9ba 	bl	8002858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d001      	beq.n	8002558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e044      	b.n	80025e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <HAL_TIM_Base_Start_IT+0xac>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d018      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x6c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x6c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258c:	d00e      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x6c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d009      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x6c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <HAL_TIM_Base_Start_IT+0xb8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x6c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a15      	ldr	r2, [pc, #84]	; (80025fc <HAL_TIM_Base_Start_IT+0xbc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d111      	bne.n	80025d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d010      	beq.n	80025e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ce:	e007      	b.n	80025e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40013400 	.word	0x40013400
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40000800 	.word	0x40000800
 80025fc:	40000c00 	.word	0x40000c00

08002600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d122      	bne.n	800265c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d11b      	bne.n	800265c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0202 	mvn.w	r2, #2
 800262c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8ed 	bl	8002822 <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f8e0 	bl	8002810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f8ef 	bl	8002834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0204 	mvn.w	r2, #4
 8002680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8c3 	bl	8002822 <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8b6 	bl	8002810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f8c5 	bl	8002834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0208 	mvn.w	r2, #8
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2204      	movs	r2, #4
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f899 	bl	8002822 <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f88c 	bl	8002810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f89b 	bl	8002834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b10      	cmp	r3, #16
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b10      	cmp	r3, #16
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0210 	mvn.w	r2, #16
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2208      	movs	r2, #8
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f86f 	bl	8002822 <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f862 	bl	8002810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f871 	bl	8002834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10e      	bne.n	8002784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0201 	mvn.w	r2, #1
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fb66 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	2b80      	cmp	r3, #128	; 0x80
 8002790:	d10e      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d107      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f943 	bl	8002a36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d107      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f835 	bl	8002846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0220 	mvn.w	r2, #32
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f90e 	bl	8002a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a33      	ldr	r2, [pc, #204]	; (8002938 <TIM_Base_SetConfig+0xe0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d013      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a32      	ldr	r2, [pc, #200]	; (800293c <TIM_Base_SetConfig+0xe4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00f      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287e:	d00b      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <TIM_Base_SetConfig+0xe8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <TIM_Base_SetConfig+0xec>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <TIM_Base_SetConfig+0x40>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a2d      	ldr	r2, [pc, #180]	; (8002948 <TIM_Base_SetConfig+0xf0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d108      	bne.n	80028aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a22      	ldr	r2, [pc, #136]	; (8002938 <TIM_Base_SetConfig+0xe0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <TIM_Base_SetConfig+0x82>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a21      	ldr	r2, [pc, #132]	; (800293c <TIM_Base_SetConfig+0xe4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d00f      	beq.n	80028da <TIM_Base_SetConfig+0x82>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d00b      	beq.n	80028da <TIM_Base_SetConfig+0x82>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <TIM_Base_SetConfig+0xe8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <TIM_Base_SetConfig+0x82>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <TIM_Base_SetConfig+0xec>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d003      	beq.n	80028da <TIM_Base_SetConfig+0x82>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <TIM_Base_SetConfig+0xf0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d108      	bne.n	80028ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a09      	ldr	r2, [pc, #36]	; (8002938 <TIM_Base_SetConfig+0xe0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0xc8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a08      	ldr	r2, [pc, #32]	; (800293c <TIM_Base_SetConfig+0xe4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	615a      	str	r2, [r3, #20]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40013400 	.word	0x40013400
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00

0800294c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002960:	2302      	movs	r3, #2
 8002962:	e050      	b.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d00e      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10c      	bne.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40013400 	.word	0x40013400
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00

08002a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e03f      	b.n	8002ada <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fc0a 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	; 0x24
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fc85 	bl	800339c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b08a      	sub	sp, #40	; 0x28
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d17c      	bne.n	8002bfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_UART_Transmit+0x2c>
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e075      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Transmit+0x3e>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e06e      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b36:	f7fe fc79 	bl	800142c <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b50:	d108      	bne.n	8002b64 <HAL_UART_Transmit+0x82>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e003      	b.n	8002b6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b74:	e02a      	b.n	8002bcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fa38 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e036      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	e007      	b.n	8002bbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1cf      	bne.n	8002b76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fa08 	bl	8002ff6 <UART_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e006      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d11d      	bne.n	8002c5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_UART_Receive_IT+0x26>
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e016      	b.n	8002c5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Receive_IT+0x38>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e00f      	b.n	8002c5e <HAL_UART_Receive_IT+0x58>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fa19 	bl	800308a <UART_Start_Receive_IT>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	e000      	b.n	8002c5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x52>
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fac9 	bl	800324a <UART_Receive_IT>
      return;
 8002cb8:	e17b      	b.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80b1 	beq.w	8002e24 <HAL_UART_IRQHandler+0x1bc>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x70>
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80a6 	beq.w	8002e24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x90>
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_UART_IRQHandler+0xb0>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0202 	orr.w	r2, r3, #2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_UART_IRQHandler+0xd0>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0204 	orr.w	r2, r3, #4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00f      	beq.n	8002d62 <HAL_UART_IRQHandler+0xfa>
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d104      	bne.n	8002d56 <HAL_UART_IRQHandler+0xee>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0208 	orr.w	r2, r3, #8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 811e 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_UART_IRQHandler+0x11e>
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fa62 	bl	800324a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <HAL_UART_IRQHandler+0x146>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d031      	beq.n	8002e12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9a4 	bl	80030fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d023      	beq.n	8002e0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d013      	beq.n	8002e02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	4a76      	ldr	r2, [pc, #472]	; (8002fb8 <HAL_UART_IRQHandler+0x350>)
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fc72 	bl	80016d0 <HAL_DMA_Abort_IT>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	e00e      	b.n	8002e20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f8e3 	bl	8002fce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	e00a      	b.n	8002e20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8df 	bl	8002fce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	e006      	b.n	8002e20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8db 	bl	8002fce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e1e:	e0c3      	b.n	8002fa8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	bf00      	nop
    return;
 8002e22:	e0c1      	b.n	8002fa8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	f040 80a1 	bne.w	8002f70 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 809b 	beq.w	8002f70 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8095 	beq.w	8002f70 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d04e      	beq.n	8002f08 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002e74:	8a3b      	ldrh	r3, [r7, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8098 	beq.w	8002fac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e80:	8a3a      	ldrh	r2, [r7, #16]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	f080 8092 	bcs.w	8002fac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8a3a      	ldrh	r2, [r7, #16]
 8002e8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d02b      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0210 	bic.w	r2, r2, #16
 8002ee4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fbb5 	bl	800165a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f86d 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f06:	e051      	b.n	8002fac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d047      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002f20:	8a7b      	ldrh	r3, [r7, #18]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d044      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f34:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0210 	bic.w	r2, r2, #16
 8002f62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f64:	8a7b      	ldrh	r3, [r7, #18]
 8002f66:	4619      	mov	r1, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f839 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f6e:	e01f      	b.n	8002fb0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_UART_IRQHandler+0x324>
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f8f9 	bl	800317c <UART_Transmit_IT>
    return;
 8002f8a:	e012      	b.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f93a 	bl	800321a <UART_EndTransmit_IT>
    return;
 8002fa6:	e004      	b.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
    return;
 8002fa8:	bf00      	nop
 8002faa:	e002      	b.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fac:	bf00      	nop
 8002fae:	e000      	b.n	8002fb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fb0:	bf00      	nop
  }
}
 8002fb2:	3728      	adds	r7, #40	; 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	08003155 	.word	0x08003155

08002fbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003006:	e02c      	b.n	8003062 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d028      	beq.n	8003062 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0x30>
 8003016:	f7fe fa09 	bl	800142c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	429a      	cmp	r2, r3
 8003024:	d21d      	bcs.n	8003062 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003034:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e00f      	b.n	8003082 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4013      	ands	r3, r2
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	429a      	cmp	r2, r3
 800307e:	d0c3      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800308a:	b480      	push	{r7}
 800308c:	b085      	sub	sp, #20
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	4613      	mov	r3, r2
 8003096:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	88fa      	ldrh	r2, [r7, #6]
 80030a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2222      	movs	r2, #34	; 0x22
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ce:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0220 	orr.w	r2, r2, #32
 80030ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003112:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0210 	bic.w	r2, r2, #16
 800313a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff ff2d 	bl	8002fce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b21      	cmp	r3, #33	; 0x21
 800318e:	d13e      	bne.n	800320e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003198:	d114      	bne.n	80031c4 <UART_Transmit_IT+0x48>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d110      	bne.n	80031c4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	1c9a      	adds	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	621a      	str	r2, [r3, #32]
 80031c2:	e008      	b.n	80031d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	1c59      	adds	r1, r3, #1
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6211      	str	r1, [r2, #32]
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4619      	mov	r1, r3
 80031e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10f      	bne.n	800320a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003208:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003230:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff febe 	bl	8002fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b22      	cmp	r3, #34	; 0x22
 800325c:	f040 8099 	bne.w	8003392 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d117      	bne.n	800329a <UART_Receive_IT+0x50>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d113      	bne.n	800329a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	b29b      	uxth	r3, r3
 8003284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003288:	b29a      	uxth	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	1c9a      	adds	r2, r3, #2
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
 8003298:	e026      	b.n	80032e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d007      	beq.n	80032be <UART_Receive_IT+0x74>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <UART_Receive_IT+0x82>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	e008      	b.n	80032de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d148      	bne.n	800338e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0220 	bic.w	r2, r2, #32
 800330a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800331a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	2b01      	cmp	r3, #1
 800333a:	d123      	bne.n	8003384 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0210 	bic.w	r2, r2, #16
 8003350:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b10      	cmp	r3, #16
 800335e:	d10a      	bne.n	8003376 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fe2f 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
 8003382:	e002      	b.n	800338a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fd fc33 	bl	8000bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e002      	b.n	8003394 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033d6:	f023 030c 	bic.w	r3, r3, #12
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <UART_SetConfig+0x114>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d103      	bne.n	800340c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003404:	f7ff f81a 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	e002      	b.n	8003412 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800340c:	f7ff f802 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8003410:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <UART_SetConfig+0x118>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	0119      	lsls	r1, r3, #4
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	009a      	lsls	r2, r3, #2
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fbb2 f2f3 	udiv	r2, r2, r3
 8003448:	4b1a      	ldr	r3, [pc, #104]	; (80034b4 <UART_SetConfig+0x118>)
 800344a:	fba3 0302 	umull	r0, r3, r3, r2
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	2064      	movs	r0, #100	; 0x64
 8003452:	fb00 f303 	mul.w	r3, r0, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	3332      	adds	r3, #50	; 0x32
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <UART_SetConfig+0x118>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003468:	4419      	add	r1, r3
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	009a      	lsls	r2, r3, #2
 8003474:	441a      	add	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <UART_SetConfig+0x118>)
 8003482:	fba3 0302 	umull	r0, r3, r3, r2
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2064      	movs	r0, #100	; 0x64
 800348a:	fb00 f303 	mul.w	r3, r0, r3
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	3332      	adds	r3, #50	; 0x32
 8003494:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <UART_SetConfig+0x118>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	440a      	add	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40013800 	.word	0x40013800
 80034b4:	51eb851f 	.word	0x51eb851f

080034b8 <__errno>:
 80034b8:	4b01      	ldr	r3, [pc, #4]	; (80034c0 <__errno+0x8>)
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	2000000c 	.word	0x2000000c

080034c4 <__libc_init_array>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	2600      	movs	r6, #0
 80034c8:	4d0c      	ldr	r5, [pc, #48]	; (80034fc <__libc_init_array+0x38>)
 80034ca:	4c0d      	ldr	r4, [pc, #52]	; (8003500 <__libc_init_array+0x3c>)
 80034cc:	1b64      	subs	r4, r4, r5
 80034ce:	10a4      	asrs	r4, r4, #2
 80034d0:	42a6      	cmp	r6, r4
 80034d2:	d109      	bne.n	80034e8 <__libc_init_array+0x24>
 80034d4:	f002 fdd6 	bl	8006084 <_init>
 80034d8:	2600      	movs	r6, #0
 80034da:	4d0a      	ldr	r5, [pc, #40]	; (8003504 <__libc_init_array+0x40>)
 80034dc:	4c0a      	ldr	r4, [pc, #40]	; (8003508 <__libc_init_array+0x44>)
 80034de:	1b64      	subs	r4, r4, r5
 80034e0:	10a4      	asrs	r4, r4, #2
 80034e2:	42a6      	cmp	r6, r4
 80034e4:	d105      	bne.n	80034f2 <__libc_init_array+0x2e>
 80034e6:	bd70      	pop	{r4, r5, r6, pc}
 80034e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ec:	4798      	blx	r3
 80034ee:	3601      	adds	r6, #1
 80034f0:	e7ee      	b.n	80034d0 <__libc_init_array+0xc>
 80034f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f6:	4798      	blx	r3
 80034f8:	3601      	adds	r6, #1
 80034fa:	e7f2      	b.n	80034e2 <__libc_init_array+0x1e>
 80034fc:	0800650c 	.word	0x0800650c
 8003500:	0800650c 	.word	0x0800650c
 8003504:	0800650c 	.word	0x0800650c
 8003508:	08006510 	.word	0x08006510

0800350c <memset>:
 800350c:	4603      	mov	r3, r0
 800350e:	4402      	add	r2, r0
 8003510:	4293      	cmp	r3, r2
 8003512:	d100      	bne.n	8003516 <memset+0xa>
 8003514:	4770      	bx	lr
 8003516:	f803 1b01 	strb.w	r1, [r3], #1
 800351a:	e7f9      	b.n	8003510 <memset+0x4>

0800351c <__cvt>:
 800351c:	2b00      	cmp	r3, #0
 800351e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003522:	461f      	mov	r7, r3
 8003524:	bfbb      	ittet	lt
 8003526:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800352a:	461f      	movlt	r7, r3
 800352c:	2300      	movge	r3, #0
 800352e:	232d      	movlt	r3, #45	; 0x2d
 8003530:	b088      	sub	sp, #32
 8003532:	4614      	mov	r4, r2
 8003534:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003536:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003538:	7013      	strb	r3, [r2, #0]
 800353a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800353c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003540:	f023 0820 	bic.w	r8, r3, #32
 8003544:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003548:	d005      	beq.n	8003556 <__cvt+0x3a>
 800354a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800354e:	d100      	bne.n	8003552 <__cvt+0x36>
 8003550:	3501      	adds	r5, #1
 8003552:	2302      	movs	r3, #2
 8003554:	e000      	b.n	8003558 <__cvt+0x3c>
 8003556:	2303      	movs	r3, #3
 8003558:	aa07      	add	r2, sp, #28
 800355a:	9204      	str	r2, [sp, #16]
 800355c:	aa06      	add	r2, sp, #24
 800355e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003562:	e9cd 3500 	strd	r3, r5, [sp]
 8003566:	4622      	mov	r2, r4
 8003568:	463b      	mov	r3, r7
 800356a:	f000 fda5 	bl	80040b8 <_dtoa_r>
 800356e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003572:	4606      	mov	r6, r0
 8003574:	d102      	bne.n	800357c <__cvt+0x60>
 8003576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003578:	07db      	lsls	r3, r3, #31
 800357a:	d522      	bpl.n	80035c2 <__cvt+0xa6>
 800357c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003580:	eb06 0905 	add.w	r9, r6, r5
 8003584:	d110      	bne.n	80035a8 <__cvt+0x8c>
 8003586:	7833      	ldrb	r3, [r6, #0]
 8003588:	2b30      	cmp	r3, #48	; 0x30
 800358a:	d10a      	bne.n	80035a2 <__cvt+0x86>
 800358c:	2200      	movs	r2, #0
 800358e:	2300      	movs	r3, #0
 8003590:	4620      	mov	r0, r4
 8003592:	4639      	mov	r1, r7
 8003594:	f7fd fa7e 	bl	8000a94 <__aeabi_dcmpeq>
 8003598:	b918      	cbnz	r0, 80035a2 <__cvt+0x86>
 800359a:	f1c5 0501 	rsb	r5, r5, #1
 800359e:	f8ca 5000 	str.w	r5, [sl]
 80035a2:	f8da 3000 	ldr.w	r3, [sl]
 80035a6:	4499      	add	r9, r3
 80035a8:	2200      	movs	r2, #0
 80035aa:	2300      	movs	r3, #0
 80035ac:	4620      	mov	r0, r4
 80035ae:	4639      	mov	r1, r7
 80035b0:	f7fd fa70 	bl	8000a94 <__aeabi_dcmpeq>
 80035b4:	b108      	cbz	r0, 80035ba <__cvt+0x9e>
 80035b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80035ba:	2230      	movs	r2, #48	; 0x30
 80035bc:	9b07      	ldr	r3, [sp, #28]
 80035be:	454b      	cmp	r3, r9
 80035c0:	d307      	bcc.n	80035d2 <__cvt+0xb6>
 80035c2:	4630      	mov	r0, r6
 80035c4:	9b07      	ldr	r3, [sp, #28]
 80035c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80035c8:	1b9b      	subs	r3, r3, r6
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	b008      	add	sp, #32
 80035ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d2:	1c59      	adds	r1, r3, #1
 80035d4:	9107      	str	r1, [sp, #28]
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e7f0      	b.n	80035bc <__cvt+0xa0>

080035da <__exponent>:
 80035da:	4603      	mov	r3, r0
 80035dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035de:	2900      	cmp	r1, #0
 80035e0:	f803 2b02 	strb.w	r2, [r3], #2
 80035e4:	bfb6      	itet	lt
 80035e6:	222d      	movlt	r2, #45	; 0x2d
 80035e8:	222b      	movge	r2, #43	; 0x2b
 80035ea:	4249      	neglt	r1, r1
 80035ec:	2909      	cmp	r1, #9
 80035ee:	7042      	strb	r2, [r0, #1]
 80035f0:	dd2b      	ble.n	800364a <__exponent+0x70>
 80035f2:	f10d 0407 	add.w	r4, sp, #7
 80035f6:	46a4      	mov	ip, r4
 80035f8:	270a      	movs	r7, #10
 80035fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80035fe:	460a      	mov	r2, r1
 8003600:	46a6      	mov	lr, r4
 8003602:	fb07 1516 	mls	r5, r7, r6, r1
 8003606:	2a63      	cmp	r2, #99	; 0x63
 8003608:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800360c:	4631      	mov	r1, r6
 800360e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003612:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003616:	dcf0      	bgt.n	80035fa <__exponent+0x20>
 8003618:	3130      	adds	r1, #48	; 0x30
 800361a:	f1ae 0502 	sub.w	r5, lr, #2
 800361e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003622:	4629      	mov	r1, r5
 8003624:	1c44      	adds	r4, r0, #1
 8003626:	4561      	cmp	r1, ip
 8003628:	d30a      	bcc.n	8003640 <__exponent+0x66>
 800362a:	f10d 0209 	add.w	r2, sp, #9
 800362e:	eba2 020e 	sub.w	r2, r2, lr
 8003632:	4565      	cmp	r5, ip
 8003634:	bf88      	it	hi
 8003636:	2200      	movhi	r2, #0
 8003638:	4413      	add	r3, r2
 800363a:	1a18      	subs	r0, r3, r0
 800363c:	b003      	add	sp, #12
 800363e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003640:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003644:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003648:	e7ed      	b.n	8003626 <__exponent+0x4c>
 800364a:	2330      	movs	r3, #48	; 0x30
 800364c:	3130      	adds	r1, #48	; 0x30
 800364e:	7083      	strb	r3, [r0, #2]
 8003650:	70c1      	strb	r1, [r0, #3]
 8003652:	1d03      	adds	r3, r0, #4
 8003654:	e7f1      	b.n	800363a <__exponent+0x60>
	...

08003658 <_printf_float>:
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	b091      	sub	sp, #68	; 0x44
 800365e:	460c      	mov	r4, r1
 8003660:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003664:	4616      	mov	r6, r2
 8003666:	461f      	mov	r7, r3
 8003668:	4605      	mov	r5, r0
 800366a:	f001 fccb 	bl	8005004 <_localeconv_r>
 800366e:	6803      	ldr	r3, [r0, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	9309      	str	r3, [sp, #36]	; 0x24
 8003674:	f7fc fde2 	bl	800023c <strlen>
 8003678:	2300      	movs	r3, #0
 800367a:	930e      	str	r3, [sp, #56]	; 0x38
 800367c:	f8d8 3000 	ldr.w	r3, [r8]
 8003680:	900a      	str	r0, [sp, #40]	; 0x28
 8003682:	3307      	adds	r3, #7
 8003684:	f023 0307 	bic.w	r3, r3, #7
 8003688:	f103 0208 	add.w	r2, r3, #8
 800368c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003690:	f8d4 b000 	ldr.w	fp, [r4]
 8003694:	f8c8 2000 	str.w	r2, [r8]
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80036a0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80036a4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80036a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	4640      	mov	r0, r8
 80036b0:	4b9c      	ldr	r3, [pc, #624]	; (8003924 <_printf_float+0x2cc>)
 80036b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036b4:	f7fd fa20 	bl	8000af8 <__aeabi_dcmpun>
 80036b8:	bb70      	cbnz	r0, 8003718 <_printf_float+0xc0>
 80036ba:	f04f 32ff 	mov.w	r2, #4294967295
 80036be:	4640      	mov	r0, r8
 80036c0:	4b98      	ldr	r3, [pc, #608]	; (8003924 <_printf_float+0x2cc>)
 80036c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036c4:	f7fd f9fa 	bl	8000abc <__aeabi_dcmple>
 80036c8:	bb30      	cbnz	r0, 8003718 <_printf_float+0xc0>
 80036ca:	2200      	movs	r2, #0
 80036cc:	2300      	movs	r3, #0
 80036ce:	4640      	mov	r0, r8
 80036d0:	4651      	mov	r1, sl
 80036d2:	f7fd f9e9 	bl	8000aa8 <__aeabi_dcmplt>
 80036d6:	b110      	cbz	r0, 80036de <_printf_float+0x86>
 80036d8:	232d      	movs	r3, #45	; 0x2d
 80036da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036de:	4b92      	ldr	r3, [pc, #584]	; (8003928 <_printf_float+0x2d0>)
 80036e0:	4892      	ldr	r0, [pc, #584]	; (800392c <_printf_float+0x2d4>)
 80036e2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80036e6:	bf94      	ite	ls
 80036e8:	4698      	movls	r8, r3
 80036ea:	4680      	movhi	r8, r0
 80036ec:	2303      	movs	r3, #3
 80036ee:	f04f 0a00 	mov.w	sl, #0
 80036f2:	6123      	str	r3, [r4, #16]
 80036f4:	f02b 0304 	bic.w	r3, fp, #4
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	4633      	mov	r3, r6
 80036fc:	4621      	mov	r1, r4
 80036fe:	4628      	mov	r0, r5
 8003700:	9700      	str	r7, [sp, #0]
 8003702:	aa0f      	add	r2, sp, #60	; 0x3c
 8003704:	f000 f9d4 	bl	8003ab0 <_printf_common>
 8003708:	3001      	adds	r0, #1
 800370a:	f040 8090 	bne.w	800382e <_printf_float+0x1d6>
 800370e:	f04f 30ff 	mov.w	r0, #4294967295
 8003712:	b011      	add	sp, #68	; 0x44
 8003714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003718:	4642      	mov	r2, r8
 800371a:	4653      	mov	r3, sl
 800371c:	4640      	mov	r0, r8
 800371e:	4651      	mov	r1, sl
 8003720:	f7fd f9ea 	bl	8000af8 <__aeabi_dcmpun>
 8003724:	b148      	cbz	r0, 800373a <_printf_float+0xe2>
 8003726:	f1ba 0f00 	cmp.w	sl, #0
 800372a:	bfb8      	it	lt
 800372c:	232d      	movlt	r3, #45	; 0x2d
 800372e:	4880      	ldr	r0, [pc, #512]	; (8003930 <_printf_float+0x2d8>)
 8003730:	bfb8      	it	lt
 8003732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003736:	4b7f      	ldr	r3, [pc, #508]	; (8003934 <_printf_float+0x2dc>)
 8003738:	e7d3      	b.n	80036e2 <_printf_float+0x8a>
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	d142      	bne.n	80037ca <_printf_float+0x172>
 8003744:	2306      	movs	r3, #6
 8003746:	6063      	str	r3, [r4, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	9206      	str	r2, [sp, #24]
 800374c:	aa0e      	add	r2, sp, #56	; 0x38
 800374e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003752:	aa0d      	add	r2, sp, #52	; 0x34
 8003754:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003758:	9203      	str	r2, [sp, #12]
 800375a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800375e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003762:	6023      	str	r3, [r4, #0]
 8003764:	6863      	ldr	r3, [r4, #4]
 8003766:	4642      	mov	r2, r8
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4628      	mov	r0, r5
 800376c:	4653      	mov	r3, sl
 800376e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003770:	f7ff fed4 	bl	800351c <__cvt>
 8003774:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003776:	4680      	mov	r8, r0
 8003778:	2947      	cmp	r1, #71	; 0x47
 800377a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800377c:	d108      	bne.n	8003790 <_printf_float+0x138>
 800377e:	1cc8      	adds	r0, r1, #3
 8003780:	db02      	blt.n	8003788 <_printf_float+0x130>
 8003782:	6863      	ldr	r3, [r4, #4]
 8003784:	4299      	cmp	r1, r3
 8003786:	dd40      	ble.n	800380a <_printf_float+0x1b2>
 8003788:	f1a9 0902 	sub.w	r9, r9, #2
 800378c:	fa5f f989 	uxtb.w	r9, r9
 8003790:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003794:	d81f      	bhi.n	80037d6 <_printf_float+0x17e>
 8003796:	464a      	mov	r2, r9
 8003798:	3901      	subs	r1, #1
 800379a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800379e:	910d      	str	r1, [sp, #52]	; 0x34
 80037a0:	f7ff ff1b 	bl	80035da <__exponent>
 80037a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037a6:	4682      	mov	sl, r0
 80037a8:	1813      	adds	r3, r2, r0
 80037aa:	2a01      	cmp	r2, #1
 80037ac:	6123      	str	r3, [r4, #16]
 80037ae:	dc02      	bgt.n	80037b6 <_printf_float+0x15e>
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	07d2      	lsls	r2, r2, #31
 80037b4:	d501      	bpl.n	80037ba <_printf_float+0x162>
 80037b6:	3301      	adds	r3, #1
 80037b8:	6123      	str	r3, [r4, #16]
 80037ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d09b      	beq.n	80036fa <_printf_float+0xa2>
 80037c2:	232d      	movs	r3, #45	; 0x2d
 80037c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037c8:	e797      	b.n	80036fa <_printf_float+0xa2>
 80037ca:	2947      	cmp	r1, #71	; 0x47
 80037cc:	d1bc      	bne.n	8003748 <_printf_float+0xf0>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ba      	bne.n	8003748 <_printf_float+0xf0>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e7b7      	b.n	8003746 <_printf_float+0xee>
 80037d6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80037da:	d118      	bne.n	800380e <_printf_float+0x1b6>
 80037dc:	2900      	cmp	r1, #0
 80037de:	6863      	ldr	r3, [r4, #4]
 80037e0:	dd0b      	ble.n	80037fa <_printf_float+0x1a2>
 80037e2:	6121      	str	r1, [r4, #16]
 80037e4:	b913      	cbnz	r3, 80037ec <_printf_float+0x194>
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	07d0      	lsls	r0, r2, #31
 80037ea:	d502      	bpl.n	80037f2 <_printf_float+0x19a>
 80037ec:	3301      	adds	r3, #1
 80037ee:	440b      	add	r3, r1
 80037f0:	6123      	str	r3, [r4, #16]
 80037f2:	f04f 0a00 	mov.w	sl, #0
 80037f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80037f8:	e7df      	b.n	80037ba <_printf_float+0x162>
 80037fa:	b913      	cbnz	r3, 8003802 <_printf_float+0x1aa>
 80037fc:	6822      	ldr	r2, [r4, #0]
 80037fe:	07d2      	lsls	r2, r2, #31
 8003800:	d501      	bpl.n	8003806 <_printf_float+0x1ae>
 8003802:	3302      	adds	r3, #2
 8003804:	e7f4      	b.n	80037f0 <_printf_float+0x198>
 8003806:	2301      	movs	r3, #1
 8003808:	e7f2      	b.n	80037f0 <_printf_float+0x198>
 800380a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800380e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003810:	4299      	cmp	r1, r3
 8003812:	db05      	blt.n	8003820 <_printf_float+0x1c8>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	6121      	str	r1, [r4, #16]
 8003818:	07d8      	lsls	r0, r3, #31
 800381a:	d5ea      	bpl.n	80037f2 <_printf_float+0x19a>
 800381c:	1c4b      	adds	r3, r1, #1
 800381e:	e7e7      	b.n	80037f0 <_printf_float+0x198>
 8003820:	2900      	cmp	r1, #0
 8003822:	bfcc      	ite	gt
 8003824:	2201      	movgt	r2, #1
 8003826:	f1c1 0202 	rsble	r2, r1, #2
 800382a:	4413      	add	r3, r2
 800382c:	e7e0      	b.n	80037f0 <_printf_float+0x198>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	055a      	lsls	r2, r3, #21
 8003832:	d407      	bmi.n	8003844 <_printf_float+0x1ec>
 8003834:	6923      	ldr	r3, [r4, #16]
 8003836:	4642      	mov	r2, r8
 8003838:	4631      	mov	r1, r6
 800383a:	4628      	mov	r0, r5
 800383c:	47b8      	blx	r7
 800383e:	3001      	adds	r0, #1
 8003840:	d12b      	bne.n	800389a <_printf_float+0x242>
 8003842:	e764      	b.n	800370e <_printf_float+0xb6>
 8003844:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003848:	f240 80dd 	bls.w	8003a06 <_printf_float+0x3ae>
 800384c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003850:	2200      	movs	r2, #0
 8003852:	2300      	movs	r3, #0
 8003854:	f7fd f91e 	bl	8000a94 <__aeabi_dcmpeq>
 8003858:	2800      	cmp	r0, #0
 800385a:	d033      	beq.n	80038c4 <_printf_float+0x26c>
 800385c:	2301      	movs	r3, #1
 800385e:	4631      	mov	r1, r6
 8003860:	4628      	mov	r0, r5
 8003862:	4a35      	ldr	r2, [pc, #212]	; (8003938 <_printf_float+0x2e0>)
 8003864:	47b8      	blx	r7
 8003866:	3001      	adds	r0, #1
 8003868:	f43f af51 	beq.w	800370e <_printf_float+0xb6>
 800386c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003870:	429a      	cmp	r2, r3
 8003872:	db02      	blt.n	800387a <_printf_float+0x222>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	07d8      	lsls	r0, r3, #31
 8003878:	d50f      	bpl.n	800389a <_printf_float+0x242>
 800387a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800387e:	4631      	mov	r1, r6
 8003880:	4628      	mov	r0, r5
 8003882:	47b8      	blx	r7
 8003884:	3001      	adds	r0, #1
 8003886:	f43f af42 	beq.w	800370e <_printf_float+0xb6>
 800388a:	f04f 0800 	mov.w	r8, #0
 800388e:	f104 091a 	add.w	r9, r4, #26
 8003892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003894:	3b01      	subs	r3, #1
 8003896:	4543      	cmp	r3, r8
 8003898:	dc09      	bgt.n	80038ae <_printf_float+0x256>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	079b      	lsls	r3, r3, #30
 800389e:	f100 8102 	bmi.w	8003aa6 <_printf_float+0x44e>
 80038a2:	68e0      	ldr	r0, [r4, #12]
 80038a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038a6:	4298      	cmp	r0, r3
 80038a8:	bfb8      	it	lt
 80038aa:	4618      	movlt	r0, r3
 80038ac:	e731      	b.n	8003712 <_printf_float+0xba>
 80038ae:	2301      	movs	r3, #1
 80038b0:	464a      	mov	r2, r9
 80038b2:	4631      	mov	r1, r6
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b8      	blx	r7
 80038b8:	3001      	adds	r0, #1
 80038ba:	f43f af28 	beq.w	800370e <_printf_float+0xb6>
 80038be:	f108 0801 	add.w	r8, r8, #1
 80038c2:	e7e6      	b.n	8003892 <_printf_float+0x23a>
 80038c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	dc38      	bgt.n	800393c <_printf_float+0x2e4>
 80038ca:	2301      	movs	r3, #1
 80038cc:	4631      	mov	r1, r6
 80038ce:	4628      	mov	r0, r5
 80038d0:	4a19      	ldr	r2, [pc, #100]	; (8003938 <_printf_float+0x2e0>)
 80038d2:	47b8      	blx	r7
 80038d4:	3001      	adds	r0, #1
 80038d6:	f43f af1a 	beq.w	800370e <_printf_float+0xb6>
 80038da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038de:	4313      	orrs	r3, r2
 80038e0:	d102      	bne.n	80038e8 <_printf_float+0x290>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	07d9      	lsls	r1, r3, #31
 80038e6:	d5d8      	bpl.n	800389a <_printf_float+0x242>
 80038e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80038ec:	4631      	mov	r1, r6
 80038ee:	4628      	mov	r0, r5
 80038f0:	47b8      	blx	r7
 80038f2:	3001      	adds	r0, #1
 80038f4:	f43f af0b 	beq.w	800370e <_printf_float+0xb6>
 80038f8:	f04f 0900 	mov.w	r9, #0
 80038fc:	f104 0a1a 	add.w	sl, r4, #26
 8003900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003902:	425b      	negs	r3, r3
 8003904:	454b      	cmp	r3, r9
 8003906:	dc01      	bgt.n	800390c <_printf_float+0x2b4>
 8003908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800390a:	e794      	b.n	8003836 <_printf_float+0x1de>
 800390c:	2301      	movs	r3, #1
 800390e:	4652      	mov	r2, sl
 8003910:	4631      	mov	r1, r6
 8003912:	4628      	mov	r0, r5
 8003914:	47b8      	blx	r7
 8003916:	3001      	adds	r0, #1
 8003918:	f43f aef9 	beq.w	800370e <_printf_float+0xb6>
 800391c:	f109 0901 	add.w	r9, r9, #1
 8003920:	e7ee      	b.n	8003900 <_printf_float+0x2a8>
 8003922:	bf00      	nop
 8003924:	7fefffff 	.word	0x7fefffff
 8003928:	0800612c 	.word	0x0800612c
 800392c:	08006130 	.word	0x08006130
 8003930:	08006138 	.word	0x08006138
 8003934:	08006134 	.word	0x08006134
 8003938:	0800613c 	.word	0x0800613c
 800393c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800393e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003940:	429a      	cmp	r2, r3
 8003942:	bfa8      	it	ge
 8003944:	461a      	movge	r2, r3
 8003946:	2a00      	cmp	r2, #0
 8003948:	4691      	mov	r9, r2
 800394a:	dc37      	bgt.n	80039bc <_printf_float+0x364>
 800394c:	f04f 0b00 	mov.w	fp, #0
 8003950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003954:	f104 021a 	add.w	r2, r4, #26
 8003958:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800395c:	ebaa 0309 	sub.w	r3, sl, r9
 8003960:	455b      	cmp	r3, fp
 8003962:	dc33      	bgt.n	80039cc <_printf_float+0x374>
 8003964:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003968:	429a      	cmp	r2, r3
 800396a:	db3b      	blt.n	80039e4 <_printf_float+0x38c>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	07da      	lsls	r2, r3, #31
 8003970:	d438      	bmi.n	80039e4 <_printf_float+0x38c>
 8003972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003974:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003976:	eba2 030a 	sub.w	r3, r2, sl
 800397a:	eba2 0901 	sub.w	r9, r2, r1
 800397e:	4599      	cmp	r9, r3
 8003980:	bfa8      	it	ge
 8003982:	4699      	movge	r9, r3
 8003984:	f1b9 0f00 	cmp.w	r9, #0
 8003988:	dc34      	bgt.n	80039f4 <_printf_float+0x39c>
 800398a:	f04f 0800 	mov.w	r8, #0
 800398e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003992:	f104 0a1a 	add.w	sl, r4, #26
 8003996:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	eba3 0309 	sub.w	r3, r3, r9
 80039a0:	4543      	cmp	r3, r8
 80039a2:	f77f af7a 	ble.w	800389a <_printf_float+0x242>
 80039a6:	2301      	movs	r3, #1
 80039a8:	4652      	mov	r2, sl
 80039aa:	4631      	mov	r1, r6
 80039ac:	4628      	mov	r0, r5
 80039ae:	47b8      	blx	r7
 80039b0:	3001      	adds	r0, #1
 80039b2:	f43f aeac 	beq.w	800370e <_printf_float+0xb6>
 80039b6:	f108 0801 	add.w	r8, r8, #1
 80039ba:	e7ec      	b.n	8003996 <_printf_float+0x33e>
 80039bc:	4613      	mov	r3, r2
 80039be:	4631      	mov	r1, r6
 80039c0:	4642      	mov	r2, r8
 80039c2:	4628      	mov	r0, r5
 80039c4:	47b8      	blx	r7
 80039c6:	3001      	adds	r0, #1
 80039c8:	d1c0      	bne.n	800394c <_printf_float+0x2f4>
 80039ca:	e6a0      	b.n	800370e <_printf_float+0xb6>
 80039cc:	2301      	movs	r3, #1
 80039ce:	4631      	mov	r1, r6
 80039d0:	4628      	mov	r0, r5
 80039d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80039d4:	47b8      	blx	r7
 80039d6:	3001      	adds	r0, #1
 80039d8:	f43f ae99 	beq.w	800370e <_printf_float+0xb6>
 80039dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80039de:	f10b 0b01 	add.w	fp, fp, #1
 80039e2:	e7b9      	b.n	8003958 <_printf_float+0x300>
 80039e4:	4631      	mov	r1, r6
 80039e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039ea:	4628      	mov	r0, r5
 80039ec:	47b8      	blx	r7
 80039ee:	3001      	adds	r0, #1
 80039f0:	d1bf      	bne.n	8003972 <_printf_float+0x31a>
 80039f2:	e68c      	b.n	800370e <_printf_float+0xb6>
 80039f4:	464b      	mov	r3, r9
 80039f6:	4631      	mov	r1, r6
 80039f8:	4628      	mov	r0, r5
 80039fa:	eb08 020a 	add.w	r2, r8, sl
 80039fe:	47b8      	blx	r7
 8003a00:	3001      	adds	r0, #1
 8003a02:	d1c2      	bne.n	800398a <_printf_float+0x332>
 8003a04:	e683      	b.n	800370e <_printf_float+0xb6>
 8003a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a08:	2a01      	cmp	r2, #1
 8003a0a:	dc01      	bgt.n	8003a10 <_printf_float+0x3b8>
 8003a0c:	07db      	lsls	r3, r3, #31
 8003a0e:	d537      	bpl.n	8003a80 <_printf_float+0x428>
 8003a10:	2301      	movs	r3, #1
 8003a12:	4642      	mov	r2, r8
 8003a14:	4631      	mov	r1, r6
 8003a16:	4628      	mov	r0, r5
 8003a18:	47b8      	blx	r7
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	f43f ae77 	beq.w	800370e <_printf_float+0xb6>
 8003a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a24:	4631      	mov	r1, r6
 8003a26:	4628      	mov	r0, r5
 8003a28:	47b8      	blx	r7
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	f43f ae6f 	beq.w	800370e <_printf_float+0xb6>
 8003a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a34:	2200      	movs	r2, #0
 8003a36:	2300      	movs	r3, #0
 8003a38:	f7fd f82c 	bl	8000a94 <__aeabi_dcmpeq>
 8003a3c:	b9d8      	cbnz	r0, 8003a76 <_printf_float+0x41e>
 8003a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a40:	f108 0201 	add.w	r2, r8, #1
 8003a44:	3b01      	subs	r3, #1
 8003a46:	4631      	mov	r1, r6
 8003a48:	4628      	mov	r0, r5
 8003a4a:	47b8      	blx	r7
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d10e      	bne.n	8003a6e <_printf_float+0x416>
 8003a50:	e65d      	b.n	800370e <_printf_float+0xb6>
 8003a52:	2301      	movs	r3, #1
 8003a54:	464a      	mov	r2, r9
 8003a56:	4631      	mov	r1, r6
 8003a58:	4628      	mov	r0, r5
 8003a5a:	47b8      	blx	r7
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	f43f ae56 	beq.w	800370e <_printf_float+0xb6>
 8003a62:	f108 0801 	add.w	r8, r8, #1
 8003a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	4543      	cmp	r3, r8
 8003a6c:	dcf1      	bgt.n	8003a52 <_printf_float+0x3fa>
 8003a6e:	4653      	mov	r3, sl
 8003a70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a74:	e6e0      	b.n	8003838 <_printf_float+0x1e0>
 8003a76:	f04f 0800 	mov.w	r8, #0
 8003a7a:	f104 091a 	add.w	r9, r4, #26
 8003a7e:	e7f2      	b.n	8003a66 <_printf_float+0x40e>
 8003a80:	2301      	movs	r3, #1
 8003a82:	4642      	mov	r2, r8
 8003a84:	e7df      	b.n	8003a46 <_printf_float+0x3ee>
 8003a86:	2301      	movs	r3, #1
 8003a88:	464a      	mov	r2, r9
 8003a8a:	4631      	mov	r1, r6
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	47b8      	blx	r7
 8003a90:	3001      	adds	r0, #1
 8003a92:	f43f ae3c 	beq.w	800370e <_printf_float+0xb6>
 8003a96:	f108 0801 	add.w	r8, r8, #1
 8003a9a:	68e3      	ldr	r3, [r4, #12]
 8003a9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a9e:	1a5b      	subs	r3, r3, r1
 8003aa0:	4543      	cmp	r3, r8
 8003aa2:	dcf0      	bgt.n	8003a86 <_printf_float+0x42e>
 8003aa4:	e6fd      	b.n	80038a2 <_printf_float+0x24a>
 8003aa6:	f04f 0800 	mov.w	r8, #0
 8003aaa:	f104 0919 	add.w	r9, r4, #25
 8003aae:	e7f4      	b.n	8003a9a <_printf_float+0x442>

08003ab0 <_printf_common>:
 8003ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab4:	4616      	mov	r6, r2
 8003ab6:	4699      	mov	r9, r3
 8003ab8:	688a      	ldr	r2, [r1, #8]
 8003aba:	690b      	ldr	r3, [r1, #16]
 8003abc:	4607      	mov	r7, r0
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	bfb8      	it	lt
 8003ac2:	4613      	movlt	r3, r2
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aca:	460c      	mov	r4, r1
 8003acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ad0:	b10a      	cbz	r2, 8003ad6 <_printf_common+0x26>
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	6033      	str	r3, [r6, #0]
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	0699      	lsls	r1, r3, #26
 8003ada:	bf42      	ittt	mi
 8003adc:	6833      	ldrmi	r3, [r6, #0]
 8003ade:	3302      	addmi	r3, #2
 8003ae0:	6033      	strmi	r3, [r6, #0]
 8003ae2:	6825      	ldr	r5, [r4, #0]
 8003ae4:	f015 0506 	ands.w	r5, r5, #6
 8003ae8:	d106      	bne.n	8003af8 <_printf_common+0x48>
 8003aea:	f104 0a19 	add.w	sl, r4, #25
 8003aee:	68e3      	ldr	r3, [r4, #12]
 8003af0:	6832      	ldr	r2, [r6, #0]
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	42ab      	cmp	r3, r5
 8003af6:	dc28      	bgt.n	8003b4a <_printf_common+0x9a>
 8003af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003afc:	1e13      	subs	r3, r2, #0
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	bf18      	it	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	0692      	lsls	r2, r2, #26
 8003b06:	d42d      	bmi.n	8003b64 <_printf_common+0xb4>
 8003b08:	4649      	mov	r1, r9
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b10:	47c0      	blx	r8
 8003b12:	3001      	adds	r0, #1
 8003b14:	d020      	beq.n	8003b58 <_printf_common+0xa8>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	68e5      	ldr	r5, [r4, #12]
 8003b1a:	f003 0306 	and.w	r3, r3, #6
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	bf18      	it	ne
 8003b22:	2500      	movne	r5, #0
 8003b24:	6832      	ldr	r2, [r6, #0]
 8003b26:	f04f 0600 	mov.w	r6, #0
 8003b2a:	68a3      	ldr	r3, [r4, #8]
 8003b2c:	bf08      	it	eq
 8003b2e:	1aad      	subeq	r5, r5, r2
 8003b30:	6922      	ldr	r2, [r4, #16]
 8003b32:	bf08      	it	eq
 8003b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	bfc4      	itt	gt
 8003b3c:	1a9b      	subgt	r3, r3, r2
 8003b3e:	18ed      	addgt	r5, r5, r3
 8003b40:	341a      	adds	r4, #26
 8003b42:	42b5      	cmp	r5, r6
 8003b44:	d11a      	bne.n	8003b7c <_printf_common+0xcc>
 8003b46:	2000      	movs	r0, #0
 8003b48:	e008      	b.n	8003b5c <_printf_common+0xac>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4652      	mov	r2, sl
 8003b4e:	4649      	mov	r1, r9
 8003b50:	4638      	mov	r0, r7
 8003b52:	47c0      	blx	r8
 8003b54:	3001      	adds	r0, #1
 8003b56:	d103      	bne.n	8003b60 <_printf_common+0xb0>
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b60:	3501      	adds	r5, #1
 8003b62:	e7c4      	b.n	8003aee <_printf_common+0x3e>
 8003b64:	2030      	movs	r0, #48	; 0x30
 8003b66:	18e1      	adds	r1, r4, r3
 8003b68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b72:	4422      	add	r2, r4
 8003b74:	3302      	adds	r3, #2
 8003b76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b7a:	e7c5      	b.n	8003b08 <_printf_common+0x58>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	4622      	mov	r2, r4
 8003b80:	4649      	mov	r1, r9
 8003b82:	4638      	mov	r0, r7
 8003b84:	47c0      	blx	r8
 8003b86:	3001      	adds	r0, #1
 8003b88:	d0e6      	beq.n	8003b58 <_printf_common+0xa8>
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7d9      	b.n	8003b42 <_printf_common+0x92>
	...

08003b90 <_printf_i>:
 8003b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	460c      	mov	r4, r1
 8003b96:	7e27      	ldrb	r7, [r4, #24]
 8003b98:	4691      	mov	r9, r2
 8003b9a:	2f78      	cmp	r7, #120	; 0x78
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	469a      	mov	sl, r3
 8003ba0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ba6:	d807      	bhi.n	8003bb8 <_printf_i+0x28>
 8003ba8:	2f62      	cmp	r7, #98	; 0x62
 8003baa:	d80a      	bhi.n	8003bc2 <_printf_i+0x32>
 8003bac:	2f00      	cmp	r7, #0
 8003bae:	f000 80d9 	beq.w	8003d64 <_printf_i+0x1d4>
 8003bb2:	2f58      	cmp	r7, #88	; 0x58
 8003bb4:	f000 80a4 	beq.w	8003d00 <_printf_i+0x170>
 8003bb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bc0:	e03a      	b.n	8003c38 <_printf_i+0xa8>
 8003bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bc6:	2b15      	cmp	r3, #21
 8003bc8:	d8f6      	bhi.n	8003bb8 <_printf_i+0x28>
 8003bca:	a001      	add	r0, pc, #4	; (adr r0, 8003bd0 <_printf_i+0x40>)
 8003bcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003bd0:	08003c29 	.word	0x08003c29
 8003bd4:	08003c3d 	.word	0x08003c3d
 8003bd8:	08003bb9 	.word	0x08003bb9
 8003bdc:	08003bb9 	.word	0x08003bb9
 8003be0:	08003bb9 	.word	0x08003bb9
 8003be4:	08003bb9 	.word	0x08003bb9
 8003be8:	08003c3d 	.word	0x08003c3d
 8003bec:	08003bb9 	.word	0x08003bb9
 8003bf0:	08003bb9 	.word	0x08003bb9
 8003bf4:	08003bb9 	.word	0x08003bb9
 8003bf8:	08003bb9 	.word	0x08003bb9
 8003bfc:	08003d4b 	.word	0x08003d4b
 8003c00:	08003c6d 	.word	0x08003c6d
 8003c04:	08003d2d 	.word	0x08003d2d
 8003c08:	08003bb9 	.word	0x08003bb9
 8003c0c:	08003bb9 	.word	0x08003bb9
 8003c10:	08003d6d 	.word	0x08003d6d
 8003c14:	08003bb9 	.word	0x08003bb9
 8003c18:	08003c6d 	.word	0x08003c6d
 8003c1c:	08003bb9 	.word	0x08003bb9
 8003c20:	08003bb9 	.word	0x08003bb9
 8003c24:	08003d35 	.word	0x08003d35
 8003c28:	680b      	ldr	r3, [r1, #0]
 8003c2a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c2e:	1d1a      	adds	r2, r3, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	600a      	str	r2, [r1, #0]
 8003c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0a4      	b.n	8003d86 <_printf_i+0x1f6>
 8003c3c:	6825      	ldr	r5, [r4, #0]
 8003c3e:	6808      	ldr	r0, [r1, #0]
 8003c40:	062e      	lsls	r6, r5, #24
 8003c42:	f100 0304 	add.w	r3, r0, #4
 8003c46:	d50a      	bpl.n	8003c5e <_printf_i+0xce>
 8003c48:	6805      	ldr	r5, [r0, #0]
 8003c4a:	600b      	str	r3, [r1, #0]
 8003c4c:	2d00      	cmp	r5, #0
 8003c4e:	da03      	bge.n	8003c58 <_printf_i+0xc8>
 8003c50:	232d      	movs	r3, #45	; 0x2d
 8003c52:	426d      	negs	r5, r5
 8003c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c58:	230a      	movs	r3, #10
 8003c5a:	485e      	ldr	r0, [pc, #376]	; (8003dd4 <_printf_i+0x244>)
 8003c5c:	e019      	b.n	8003c92 <_printf_i+0x102>
 8003c5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c62:	6805      	ldr	r5, [r0, #0]
 8003c64:	600b      	str	r3, [r1, #0]
 8003c66:	bf18      	it	ne
 8003c68:	b22d      	sxthne	r5, r5
 8003c6a:	e7ef      	b.n	8003c4c <_printf_i+0xbc>
 8003c6c:	680b      	ldr	r3, [r1, #0]
 8003c6e:	6825      	ldr	r5, [r4, #0]
 8003c70:	1d18      	adds	r0, r3, #4
 8003c72:	6008      	str	r0, [r1, #0]
 8003c74:	0628      	lsls	r0, r5, #24
 8003c76:	d501      	bpl.n	8003c7c <_printf_i+0xec>
 8003c78:	681d      	ldr	r5, [r3, #0]
 8003c7a:	e002      	b.n	8003c82 <_printf_i+0xf2>
 8003c7c:	0669      	lsls	r1, r5, #25
 8003c7e:	d5fb      	bpl.n	8003c78 <_printf_i+0xe8>
 8003c80:	881d      	ldrh	r5, [r3, #0]
 8003c82:	2f6f      	cmp	r7, #111	; 0x6f
 8003c84:	bf0c      	ite	eq
 8003c86:	2308      	moveq	r3, #8
 8003c88:	230a      	movne	r3, #10
 8003c8a:	4852      	ldr	r0, [pc, #328]	; (8003dd4 <_printf_i+0x244>)
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c92:	6866      	ldr	r6, [r4, #4]
 8003c94:	2e00      	cmp	r6, #0
 8003c96:	bfa8      	it	ge
 8003c98:	6821      	ldrge	r1, [r4, #0]
 8003c9a:	60a6      	str	r6, [r4, #8]
 8003c9c:	bfa4      	itt	ge
 8003c9e:	f021 0104 	bicge.w	r1, r1, #4
 8003ca2:	6021      	strge	r1, [r4, #0]
 8003ca4:	b90d      	cbnz	r5, 8003caa <_printf_i+0x11a>
 8003ca6:	2e00      	cmp	r6, #0
 8003ca8:	d04d      	beq.n	8003d46 <_printf_i+0x1b6>
 8003caa:	4616      	mov	r6, r2
 8003cac:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cb0:	fb03 5711 	mls	r7, r3, r1, r5
 8003cb4:	5dc7      	ldrb	r7, [r0, r7]
 8003cb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cba:	462f      	mov	r7, r5
 8003cbc:	42bb      	cmp	r3, r7
 8003cbe:	460d      	mov	r5, r1
 8003cc0:	d9f4      	bls.n	8003cac <_printf_i+0x11c>
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d10b      	bne.n	8003cde <_printf_i+0x14e>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	07df      	lsls	r7, r3, #31
 8003cca:	d508      	bpl.n	8003cde <_printf_i+0x14e>
 8003ccc:	6923      	ldr	r3, [r4, #16]
 8003cce:	6861      	ldr	r1, [r4, #4]
 8003cd0:	4299      	cmp	r1, r3
 8003cd2:	bfde      	ittt	le
 8003cd4:	2330      	movle	r3, #48	; 0x30
 8003cd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cde:	1b92      	subs	r2, r2, r6
 8003ce0:	6122      	str	r2, [r4, #16]
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4640      	mov	r0, r8
 8003ce8:	f8cd a000 	str.w	sl, [sp]
 8003cec:	aa03      	add	r2, sp, #12
 8003cee:	f7ff fedf 	bl	8003ab0 <_printf_common>
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d14c      	bne.n	8003d90 <_printf_i+0x200>
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	b004      	add	sp, #16
 8003cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d00:	4834      	ldr	r0, [pc, #208]	; (8003dd4 <_printf_i+0x244>)
 8003d02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d06:	680e      	ldr	r6, [r1, #0]
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d0e:	061f      	lsls	r7, r3, #24
 8003d10:	600e      	str	r6, [r1, #0]
 8003d12:	d514      	bpl.n	8003d3e <_printf_i+0x1ae>
 8003d14:	07d9      	lsls	r1, r3, #31
 8003d16:	bf44      	itt	mi
 8003d18:	f043 0320 	orrmi.w	r3, r3, #32
 8003d1c:	6023      	strmi	r3, [r4, #0]
 8003d1e:	b91d      	cbnz	r5, 8003d28 <_printf_i+0x198>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	f023 0320 	bic.w	r3, r3, #32
 8003d26:	6023      	str	r3, [r4, #0]
 8003d28:	2310      	movs	r3, #16
 8003d2a:	e7af      	b.n	8003c8c <_printf_i+0xfc>
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	f043 0320 	orr.w	r3, r3, #32
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	2378      	movs	r3, #120	; 0x78
 8003d36:	4828      	ldr	r0, [pc, #160]	; (8003dd8 <_printf_i+0x248>)
 8003d38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d3c:	e7e3      	b.n	8003d06 <_printf_i+0x176>
 8003d3e:	065e      	lsls	r6, r3, #25
 8003d40:	bf48      	it	mi
 8003d42:	b2ad      	uxthmi	r5, r5
 8003d44:	e7e6      	b.n	8003d14 <_printf_i+0x184>
 8003d46:	4616      	mov	r6, r2
 8003d48:	e7bb      	b.n	8003cc2 <_printf_i+0x132>
 8003d4a:	680b      	ldr	r3, [r1, #0]
 8003d4c:	6826      	ldr	r6, [r4, #0]
 8003d4e:	1d1d      	adds	r5, r3, #4
 8003d50:	6960      	ldr	r0, [r4, #20]
 8003d52:	600d      	str	r5, [r1, #0]
 8003d54:	0635      	lsls	r5, r6, #24
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	d501      	bpl.n	8003d5e <_printf_i+0x1ce>
 8003d5a:	6018      	str	r0, [r3, #0]
 8003d5c:	e002      	b.n	8003d64 <_printf_i+0x1d4>
 8003d5e:	0671      	lsls	r1, r6, #25
 8003d60:	d5fb      	bpl.n	8003d5a <_printf_i+0x1ca>
 8003d62:	8018      	strh	r0, [r3, #0]
 8003d64:	2300      	movs	r3, #0
 8003d66:	4616      	mov	r6, r2
 8003d68:	6123      	str	r3, [r4, #16]
 8003d6a:	e7ba      	b.n	8003ce2 <_printf_i+0x152>
 8003d6c:	680b      	ldr	r3, [r1, #0]
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	600a      	str	r2, [r1, #0]
 8003d72:	681e      	ldr	r6, [r3, #0]
 8003d74:	2100      	movs	r1, #0
 8003d76:	4630      	mov	r0, r6
 8003d78:	6862      	ldr	r2, [r4, #4]
 8003d7a:	f001 f9b7 	bl	80050ec <memchr>
 8003d7e:	b108      	cbz	r0, 8003d84 <_printf_i+0x1f4>
 8003d80:	1b80      	subs	r0, r0, r6
 8003d82:	6060      	str	r0, [r4, #4]
 8003d84:	6863      	ldr	r3, [r4, #4]
 8003d86:	6123      	str	r3, [r4, #16]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d8e:	e7a8      	b.n	8003ce2 <_printf_i+0x152>
 8003d90:	4632      	mov	r2, r6
 8003d92:	4649      	mov	r1, r9
 8003d94:	4640      	mov	r0, r8
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	47d0      	blx	sl
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d0ab      	beq.n	8003cf6 <_printf_i+0x166>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	079b      	lsls	r3, r3, #30
 8003da2:	d413      	bmi.n	8003dcc <_printf_i+0x23c>
 8003da4:	68e0      	ldr	r0, [r4, #12]
 8003da6:	9b03      	ldr	r3, [sp, #12]
 8003da8:	4298      	cmp	r0, r3
 8003daa:	bfb8      	it	lt
 8003dac:	4618      	movlt	r0, r3
 8003dae:	e7a4      	b.n	8003cfa <_printf_i+0x16a>
 8003db0:	2301      	movs	r3, #1
 8003db2:	4632      	mov	r2, r6
 8003db4:	4649      	mov	r1, r9
 8003db6:	4640      	mov	r0, r8
 8003db8:	47d0      	blx	sl
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d09b      	beq.n	8003cf6 <_printf_i+0x166>
 8003dbe:	3501      	adds	r5, #1
 8003dc0:	68e3      	ldr	r3, [r4, #12]
 8003dc2:	9903      	ldr	r1, [sp, #12]
 8003dc4:	1a5b      	subs	r3, r3, r1
 8003dc6:	42ab      	cmp	r3, r5
 8003dc8:	dcf2      	bgt.n	8003db0 <_printf_i+0x220>
 8003dca:	e7eb      	b.n	8003da4 <_printf_i+0x214>
 8003dcc:	2500      	movs	r5, #0
 8003dce:	f104 0619 	add.w	r6, r4, #25
 8003dd2:	e7f5      	b.n	8003dc0 <_printf_i+0x230>
 8003dd4:	0800613e 	.word	0x0800613e
 8003dd8:	0800614f 	.word	0x0800614f

08003ddc <iprintf>:
 8003ddc:	b40f      	push	{r0, r1, r2, r3}
 8003dde:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <iprintf+0x2c>)
 8003de0:	b513      	push	{r0, r1, r4, lr}
 8003de2:	681c      	ldr	r4, [r3, #0]
 8003de4:	b124      	cbz	r4, 8003df0 <iprintf+0x14>
 8003de6:	69a3      	ldr	r3, [r4, #24]
 8003de8:	b913      	cbnz	r3, 8003df0 <iprintf+0x14>
 8003dea:	4620      	mov	r0, r4
 8003dec:	f001 f86c 	bl	8004ec8 <__sinit>
 8003df0:	ab05      	add	r3, sp, #20
 8003df2:	4620      	mov	r0, r4
 8003df4:	9a04      	ldr	r2, [sp, #16]
 8003df6:	68a1      	ldr	r1, [r4, #8]
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	f001 fdf1 	bl	80059e0 <_vfiprintf_r>
 8003dfe:	b002      	add	sp, #8
 8003e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e04:	b004      	add	sp, #16
 8003e06:	4770      	bx	lr
 8003e08:	2000000c 	.word	0x2000000c

08003e0c <setvbuf>:
 8003e0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e10:	461d      	mov	r5, r3
 8003e12:	4b5d      	ldr	r3, [pc, #372]	; (8003f88 <setvbuf+0x17c>)
 8003e14:	4604      	mov	r4, r0
 8003e16:	681f      	ldr	r7, [r3, #0]
 8003e18:	460e      	mov	r6, r1
 8003e1a:	4690      	mov	r8, r2
 8003e1c:	b127      	cbz	r7, 8003e28 <setvbuf+0x1c>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	b913      	cbnz	r3, 8003e28 <setvbuf+0x1c>
 8003e22:	4638      	mov	r0, r7
 8003e24:	f001 f850 	bl	8004ec8 <__sinit>
 8003e28:	4b58      	ldr	r3, [pc, #352]	; (8003f8c <setvbuf+0x180>)
 8003e2a:	429c      	cmp	r4, r3
 8003e2c:	d167      	bne.n	8003efe <setvbuf+0xf2>
 8003e2e:	687c      	ldr	r4, [r7, #4]
 8003e30:	f1b8 0f02 	cmp.w	r8, #2
 8003e34:	d006      	beq.n	8003e44 <setvbuf+0x38>
 8003e36:	f1b8 0f01 	cmp.w	r8, #1
 8003e3a:	f200 809f 	bhi.w	8003f7c <setvbuf+0x170>
 8003e3e:	2d00      	cmp	r5, #0
 8003e40:	f2c0 809c 	blt.w	8003f7c <setvbuf+0x170>
 8003e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e46:	07db      	lsls	r3, r3, #31
 8003e48:	d405      	bmi.n	8003e56 <setvbuf+0x4a>
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	0598      	lsls	r0, r3, #22
 8003e4e:	d402      	bmi.n	8003e56 <setvbuf+0x4a>
 8003e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e52:	f001 f8dc 	bl	800500e <__retarget_lock_acquire_recursive>
 8003e56:	4621      	mov	r1, r4
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f000 ffa1 	bl	8004da0 <_fflush_r>
 8003e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e60:	b141      	cbz	r1, 8003e74 <setvbuf+0x68>
 8003e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e66:	4299      	cmp	r1, r3
 8003e68:	d002      	beq.n	8003e70 <setvbuf+0x64>
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	f001 fcea 	bl	8005844 <_free_r>
 8003e70:	2300      	movs	r3, #0
 8003e72:	6363      	str	r3, [r4, #52]	; 0x34
 8003e74:	2300      	movs	r3, #0
 8003e76:	61a3      	str	r3, [r4, #24]
 8003e78:	6063      	str	r3, [r4, #4]
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	0619      	lsls	r1, r3, #24
 8003e7e:	d503      	bpl.n	8003e88 <setvbuf+0x7c>
 8003e80:	4638      	mov	r0, r7
 8003e82:	6921      	ldr	r1, [r4, #16]
 8003e84:	f001 fcde 	bl	8005844 <_free_r>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f1b8 0f02 	cmp.w	r8, #2
 8003e8e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	81a3      	strh	r3, [r4, #12]
 8003e98:	d06c      	beq.n	8003f74 <setvbuf+0x168>
 8003e9a:	ab01      	add	r3, sp, #4
 8003e9c:	466a      	mov	r2, sp
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f001 f8b6 	bl	8005012 <__swhatbuf_r>
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	4318      	orrs	r0, r3
 8003eaa:	81a0      	strh	r0, [r4, #12]
 8003eac:	2d00      	cmp	r5, #0
 8003eae:	d130      	bne.n	8003f12 <setvbuf+0x106>
 8003eb0:	9d00      	ldr	r5, [sp, #0]
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f001 f912 	bl	80050dc <malloc>
 8003eb8:	4606      	mov	r6, r0
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d155      	bne.n	8003f6a <setvbuf+0x15e>
 8003ebe:	f8dd 9000 	ldr.w	r9, [sp]
 8003ec2:	45a9      	cmp	r9, r5
 8003ec4:	d14a      	bne.n	8003f5c <setvbuf+0x150>
 8003ec6:	f04f 35ff 	mov.w	r5, #4294967295
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60a2      	str	r2, [r4, #8]
 8003ece:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003ed2:	6022      	str	r2, [r4, #0]
 8003ed4:	6122      	str	r2, [r4, #16]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003edc:	6162      	str	r2, [r4, #20]
 8003ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	07d2      	lsls	r2, r2, #31
 8003ee6:	81a3      	strh	r3, [r4, #12]
 8003ee8:	d405      	bmi.n	8003ef6 <setvbuf+0xea>
 8003eea:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003eee:	d102      	bne.n	8003ef6 <setvbuf+0xea>
 8003ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ef2:	f001 f88d 	bl	8005010 <__retarget_lock_release_recursive>
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	b003      	add	sp, #12
 8003efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <setvbuf+0x184>)
 8003f00:	429c      	cmp	r4, r3
 8003f02:	d101      	bne.n	8003f08 <setvbuf+0xfc>
 8003f04:	68bc      	ldr	r4, [r7, #8]
 8003f06:	e793      	b.n	8003e30 <setvbuf+0x24>
 8003f08:	4b22      	ldr	r3, [pc, #136]	; (8003f94 <setvbuf+0x188>)
 8003f0a:	429c      	cmp	r4, r3
 8003f0c:	bf08      	it	eq
 8003f0e:	68fc      	ldreq	r4, [r7, #12]
 8003f10:	e78e      	b.n	8003e30 <setvbuf+0x24>
 8003f12:	2e00      	cmp	r6, #0
 8003f14:	d0cd      	beq.n	8003eb2 <setvbuf+0xa6>
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	b913      	cbnz	r3, 8003f20 <setvbuf+0x114>
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	f000 ffd4 	bl	8004ec8 <__sinit>
 8003f20:	f1b8 0f01 	cmp.w	r8, #1
 8003f24:	bf08      	it	eq
 8003f26:	89a3      	ldrheq	r3, [r4, #12]
 8003f28:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003f2c:	bf04      	itt	eq
 8003f2e:	f043 0301 	orreq.w	r3, r3, #1
 8003f32:	81a3      	strheq	r3, [r4, #12]
 8003f34:	89a2      	ldrh	r2, [r4, #12]
 8003f36:	6026      	str	r6, [r4, #0]
 8003f38:	f012 0308 	ands.w	r3, r2, #8
 8003f3c:	d01c      	beq.n	8003f78 <setvbuf+0x16c>
 8003f3e:	07d3      	lsls	r3, r2, #31
 8003f40:	bf41      	itttt	mi
 8003f42:	2300      	movmi	r3, #0
 8003f44:	426d      	negmi	r5, r5
 8003f46:	60a3      	strmi	r3, [r4, #8]
 8003f48:	61a5      	strmi	r5, [r4, #24]
 8003f4a:	bf58      	it	pl
 8003f4c:	60a5      	strpl	r5, [r4, #8]
 8003f4e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003f50:	f015 0501 	ands.w	r5, r5, #1
 8003f54:	d115      	bne.n	8003f82 <setvbuf+0x176>
 8003f56:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003f5a:	e7c8      	b.n	8003eee <setvbuf+0xe2>
 8003f5c:	4648      	mov	r0, r9
 8003f5e:	f001 f8bd 	bl	80050dc <malloc>
 8003f62:	4606      	mov	r6, r0
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d0ae      	beq.n	8003ec6 <setvbuf+0xba>
 8003f68:	464d      	mov	r5, r9
 8003f6a:	89a3      	ldrh	r3, [r4, #12]
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	e7d0      	b.n	8003f16 <setvbuf+0x10a>
 8003f74:	2500      	movs	r5, #0
 8003f76:	e7a8      	b.n	8003eca <setvbuf+0xbe>
 8003f78:	60a3      	str	r3, [r4, #8]
 8003f7a:	e7e8      	b.n	8003f4e <setvbuf+0x142>
 8003f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8003f80:	e7b9      	b.n	8003ef6 <setvbuf+0xea>
 8003f82:	2500      	movs	r5, #0
 8003f84:	e7b7      	b.n	8003ef6 <setvbuf+0xea>
 8003f86:	bf00      	nop
 8003f88:	2000000c 	.word	0x2000000c
 8003f8c:	08006214 	.word	0x08006214
 8003f90:	08006234 	.word	0x08006234
 8003f94:	080061f4 	.word	0x080061f4

08003f98 <quorem>:
 8003f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f9c:	6903      	ldr	r3, [r0, #16]
 8003f9e:	690c      	ldr	r4, [r1, #16]
 8003fa0:	4607      	mov	r7, r0
 8003fa2:	42a3      	cmp	r3, r4
 8003fa4:	f2c0 8083 	blt.w	80040ae <quorem+0x116>
 8003fa8:	3c01      	subs	r4, #1
 8003faa:	f100 0514 	add.w	r5, r0, #20
 8003fae:	f101 0814 	add.w	r8, r1, #20
 8003fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003fcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003fd0:	d332      	bcc.n	8004038 <quorem+0xa0>
 8003fd2:	f04f 0e00 	mov.w	lr, #0
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	46ac      	mov	ip, r5
 8003fda:	46f2      	mov	sl, lr
 8003fdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8003fe0:	b293      	uxth	r3, r2
 8003fe2:	fb06 e303 	mla	r3, r6, r3, lr
 8003fe6:	0c12      	lsrs	r2, r2, #16
 8003fe8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003fec:	fb06 e202 	mla	r2, r6, r2, lr
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8003ff6:	f8dc a000 	ldr.w	sl, [ip]
 8003ffa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ffe:	fa1f fa8a 	uxth.w	sl, sl
 8004002:	4453      	add	r3, sl
 8004004:	fa1f fa82 	uxth.w	sl, r2
 8004008:	f8dc 2000 	ldr.w	r2, [ip]
 800400c:	4581      	cmp	r9, r0
 800400e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004012:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004016:	b29b      	uxth	r3, r3
 8004018:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800401c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004020:	f84c 3b04 	str.w	r3, [ip], #4
 8004024:	d2da      	bcs.n	8003fdc <quorem+0x44>
 8004026:	f855 300b 	ldr.w	r3, [r5, fp]
 800402a:	b92b      	cbnz	r3, 8004038 <quorem+0xa0>
 800402c:	9b01      	ldr	r3, [sp, #4]
 800402e:	3b04      	subs	r3, #4
 8004030:	429d      	cmp	r5, r3
 8004032:	461a      	mov	r2, r3
 8004034:	d32f      	bcc.n	8004096 <quorem+0xfe>
 8004036:	613c      	str	r4, [r7, #16]
 8004038:	4638      	mov	r0, r7
 800403a:	f001 faed 	bl	8005618 <__mcmp>
 800403e:	2800      	cmp	r0, #0
 8004040:	db25      	blt.n	800408e <quorem+0xf6>
 8004042:	4628      	mov	r0, r5
 8004044:	f04f 0c00 	mov.w	ip, #0
 8004048:	3601      	adds	r6, #1
 800404a:	f858 1b04 	ldr.w	r1, [r8], #4
 800404e:	f8d0 e000 	ldr.w	lr, [r0]
 8004052:	b28b      	uxth	r3, r1
 8004054:	ebac 0303 	sub.w	r3, ip, r3
 8004058:	fa1f f28e 	uxth.w	r2, lr
 800405c:	4413      	add	r3, r2
 800405e:	0c0a      	lsrs	r2, r1, #16
 8004060:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004068:	b29b      	uxth	r3, r3
 800406a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800406e:	45c1      	cmp	r9, r8
 8004070:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004074:	f840 3b04 	str.w	r3, [r0], #4
 8004078:	d2e7      	bcs.n	800404a <quorem+0xb2>
 800407a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800407e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004082:	b922      	cbnz	r2, 800408e <quorem+0xf6>
 8004084:	3b04      	subs	r3, #4
 8004086:	429d      	cmp	r5, r3
 8004088:	461a      	mov	r2, r3
 800408a:	d30a      	bcc.n	80040a2 <quorem+0x10a>
 800408c:	613c      	str	r4, [r7, #16]
 800408e:	4630      	mov	r0, r6
 8004090:	b003      	add	sp, #12
 8004092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	3b04      	subs	r3, #4
 800409a:	2a00      	cmp	r2, #0
 800409c:	d1cb      	bne.n	8004036 <quorem+0x9e>
 800409e:	3c01      	subs	r4, #1
 80040a0:	e7c6      	b.n	8004030 <quorem+0x98>
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	3b04      	subs	r3, #4
 80040a6:	2a00      	cmp	r2, #0
 80040a8:	d1f0      	bne.n	800408c <quorem+0xf4>
 80040aa:	3c01      	subs	r4, #1
 80040ac:	e7eb      	b.n	8004086 <quorem+0xee>
 80040ae:	2000      	movs	r0, #0
 80040b0:	e7ee      	b.n	8004090 <quorem+0xf8>
 80040b2:	0000      	movs	r0, r0
 80040b4:	0000      	movs	r0, r0
	...

080040b8 <_dtoa_r>:
 80040b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040bc:	4616      	mov	r6, r2
 80040be:	461f      	mov	r7, r3
 80040c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80040c2:	b099      	sub	sp, #100	; 0x64
 80040c4:	4605      	mov	r5, r0
 80040c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80040ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80040ce:	b974      	cbnz	r4, 80040ee <_dtoa_r+0x36>
 80040d0:	2010      	movs	r0, #16
 80040d2:	f001 f803 	bl	80050dc <malloc>
 80040d6:	4602      	mov	r2, r0
 80040d8:	6268      	str	r0, [r5, #36]	; 0x24
 80040da:	b920      	cbnz	r0, 80040e6 <_dtoa_r+0x2e>
 80040dc:	21ea      	movs	r1, #234	; 0xea
 80040de:	4bae      	ldr	r3, [pc, #696]	; (8004398 <_dtoa_r+0x2e0>)
 80040e0:	48ae      	ldr	r0, [pc, #696]	; (800439c <_dtoa_r+0x2e4>)
 80040e2:	f001 fed3 	bl	8005e8c <__assert_func>
 80040e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80040ea:	6004      	str	r4, [r0, #0]
 80040ec:	60c4      	str	r4, [r0, #12]
 80040ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	b151      	cbz	r1, 800410a <_dtoa_r+0x52>
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	2301      	movs	r3, #1
 80040f8:	4093      	lsls	r3, r2
 80040fa:	604a      	str	r2, [r1, #4]
 80040fc:	608b      	str	r3, [r1, #8]
 80040fe:	4628      	mov	r0, r5
 8004100:	f001 f850 	bl	80051a4 <_Bfree>
 8004104:	2200      	movs	r2, #0
 8004106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	1e3b      	subs	r3, r7, #0
 800410c:	bfaf      	iteee	ge
 800410e:	2300      	movge	r3, #0
 8004110:	2201      	movlt	r2, #1
 8004112:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004116:	9305      	strlt	r3, [sp, #20]
 8004118:	bfa8      	it	ge
 800411a:	f8c8 3000 	strge.w	r3, [r8]
 800411e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004122:	4b9f      	ldr	r3, [pc, #636]	; (80043a0 <_dtoa_r+0x2e8>)
 8004124:	bfb8      	it	lt
 8004126:	f8c8 2000 	strlt.w	r2, [r8]
 800412a:	ea33 0309 	bics.w	r3, r3, r9
 800412e:	d119      	bne.n	8004164 <_dtoa_r+0xac>
 8004130:	f242 730f 	movw	r3, #9999	; 0x270f
 8004134:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800413c:	4333      	orrs	r3, r6
 800413e:	f000 8580 	beq.w	8004c42 <_dtoa_r+0xb8a>
 8004142:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004144:	b953      	cbnz	r3, 800415c <_dtoa_r+0xa4>
 8004146:	4b97      	ldr	r3, [pc, #604]	; (80043a4 <_dtoa_r+0x2ec>)
 8004148:	e022      	b.n	8004190 <_dtoa_r+0xd8>
 800414a:	4b97      	ldr	r3, [pc, #604]	; (80043a8 <_dtoa_r+0x2f0>)
 800414c:	9308      	str	r3, [sp, #32]
 800414e:	3308      	adds	r3, #8
 8004150:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	9808      	ldr	r0, [sp, #32]
 8004156:	b019      	add	sp, #100	; 0x64
 8004158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415c:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <_dtoa_r+0x2ec>)
 800415e:	9308      	str	r3, [sp, #32]
 8004160:	3303      	adds	r3, #3
 8004162:	e7f5      	b.n	8004150 <_dtoa_r+0x98>
 8004164:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004168:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800416c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004170:	2200      	movs	r2, #0
 8004172:	2300      	movs	r3, #0
 8004174:	f7fc fc8e 	bl	8000a94 <__aeabi_dcmpeq>
 8004178:	4680      	mov	r8, r0
 800417a:	b158      	cbz	r0, 8004194 <_dtoa_r+0xdc>
 800417c:	2301      	movs	r3, #1
 800417e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8559 	beq.w	8004c3c <_dtoa_r+0xb84>
 800418a:	4888      	ldr	r0, [pc, #544]	; (80043ac <_dtoa_r+0x2f4>)
 800418c:	6018      	str	r0, [r3, #0]
 800418e:	1e43      	subs	r3, r0, #1
 8004190:	9308      	str	r3, [sp, #32]
 8004192:	e7df      	b.n	8004154 <_dtoa_r+0x9c>
 8004194:	ab16      	add	r3, sp, #88	; 0x58
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	ab17      	add	r3, sp, #92	; 0x5c
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4628      	mov	r0, r5
 800419e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80041a2:	f001 fae5 	bl	8005770 <__d2b>
 80041a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80041aa:	4682      	mov	sl, r0
 80041ac:	2c00      	cmp	r4, #0
 80041ae:	d07e      	beq.n	80042ae <_dtoa_r+0x1f6>
 80041b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80041ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80041c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80041c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80041ca:	2200      	movs	r2, #0
 80041cc:	4b78      	ldr	r3, [pc, #480]	; (80043b0 <_dtoa_r+0x2f8>)
 80041ce:	f7fc f841 	bl	8000254 <__aeabi_dsub>
 80041d2:	a36b      	add	r3, pc, #428	; (adr r3, 8004380 <_dtoa_r+0x2c8>)
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f7fc f9f4 	bl	80005c4 <__aeabi_dmul>
 80041dc:	a36a      	add	r3, pc, #424	; (adr r3, 8004388 <_dtoa_r+0x2d0>)
 80041de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e2:	f7fc f839 	bl	8000258 <__adddf3>
 80041e6:	4606      	mov	r6, r0
 80041e8:	4620      	mov	r0, r4
 80041ea:	460f      	mov	r7, r1
 80041ec:	f7fc f980 	bl	80004f0 <__aeabi_i2d>
 80041f0:	a367      	add	r3, pc, #412	; (adr r3, 8004390 <_dtoa_r+0x2d8>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fc f9e5 	bl	80005c4 <__aeabi_dmul>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4630      	mov	r0, r6
 8004200:	4639      	mov	r1, r7
 8004202:	f7fc f829 	bl	8000258 <__adddf3>
 8004206:	4606      	mov	r6, r0
 8004208:	460f      	mov	r7, r1
 800420a:	f7fc fc8b 	bl	8000b24 <__aeabi_d2iz>
 800420e:	2200      	movs	r2, #0
 8004210:	4681      	mov	r9, r0
 8004212:	2300      	movs	r3, #0
 8004214:	4630      	mov	r0, r6
 8004216:	4639      	mov	r1, r7
 8004218:	f7fc fc46 	bl	8000aa8 <__aeabi_dcmplt>
 800421c:	b148      	cbz	r0, 8004232 <_dtoa_r+0x17a>
 800421e:	4648      	mov	r0, r9
 8004220:	f7fc f966 	bl	80004f0 <__aeabi_i2d>
 8004224:	4632      	mov	r2, r6
 8004226:	463b      	mov	r3, r7
 8004228:	f7fc fc34 	bl	8000a94 <__aeabi_dcmpeq>
 800422c:	b908      	cbnz	r0, 8004232 <_dtoa_r+0x17a>
 800422e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004232:	f1b9 0f16 	cmp.w	r9, #22
 8004236:	d857      	bhi.n	80042e8 <_dtoa_r+0x230>
 8004238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800423c:	4b5d      	ldr	r3, [pc, #372]	; (80043b4 <_dtoa_r+0x2fc>)
 800423e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f7fc fc2f 	bl	8000aa8 <__aeabi_dcmplt>
 800424a:	2800      	cmp	r0, #0
 800424c:	d04e      	beq.n	80042ec <_dtoa_r+0x234>
 800424e:	2300      	movs	r3, #0
 8004250:	f109 39ff 	add.w	r9, r9, #4294967295
 8004254:	930f      	str	r3, [sp, #60]	; 0x3c
 8004256:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004258:	1b1c      	subs	r4, r3, r4
 800425a:	1e63      	subs	r3, r4, #1
 800425c:	9309      	str	r3, [sp, #36]	; 0x24
 800425e:	bf49      	itett	mi
 8004260:	f1c4 0301 	rsbmi	r3, r4, #1
 8004264:	2300      	movpl	r3, #0
 8004266:	9306      	strmi	r3, [sp, #24]
 8004268:	2300      	movmi	r3, #0
 800426a:	bf54      	ite	pl
 800426c:	9306      	strpl	r3, [sp, #24]
 800426e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004270:	f1b9 0f00 	cmp.w	r9, #0
 8004274:	db3c      	blt.n	80042f0 <_dtoa_r+0x238>
 8004276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004278:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800427c:	444b      	add	r3, r9
 800427e:	9309      	str	r3, [sp, #36]	; 0x24
 8004280:	2300      	movs	r3, #0
 8004282:	930a      	str	r3, [sp, #40]	; 0x28
 8004284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004286:	2b09      	cmp	r3, #9
 8004288:	d86c      	bhi.n	8004364 <_dtoa_r+0x2ac>
 800428a:	2b05      	cmp	r3, #5
 800428c:	bfc4      	itt	gt
 800428e:	3b04      	subgt	r3, #4
 8004290:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004292:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004294:	bfc8      	it	gt
 8004296:	2400      	movgt	r4, #0
 8004298:	f1a3 0302 	sub.w	r3, r3, #2
 800429c:	bfd8      	it	le
 800429e:	2401      	movle	r4, #1
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	f200 808b 	bhi.w	80043bc <_dtoa_r+0x304>
 80042a6:	e8df f003 	tbb	[pc, r3]
 80042aa:	4f2d      	.short	0x4f2d
 80042ac:	5b4d      	.short	0x5b4d
 80042ae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80042b2:	441c      	add	r4, r3
 80042b4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	bfc3      	ittte	gt
 80042bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80042c0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80042c4:	fa09 f303 	lslgt.w	r3, r9, r3
 80042c8:	f1c3 0320 	rsble	r3, r3, #32
 80042cc:	bfc6      	itte	gt
 80042ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80042d2:	4318      	orrgt	r0, r3
 80042d4:	fa06 f003 	lslle.w	r0, r6, r3
 80042d8:	f7fc f8fa 	bl	80004d0 <__aeabi_ui2d>
 80042dc:	2301      	movs	r3, #1
 80042de:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80042e2:	3c01      	subs	r4, #1
 80042e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80042e6:	e770      	b.n	80041ca <_dtoa_r+0x112>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e7b3      	b.n	8004254 <_dtoa_r+0x19c>
 80042ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80042ee:	e7b2      	b.n	8004256 <_dtoa_r+0x19e>
 80042f0:	9b06      	ldr	r3, [sp, #24]
 80042f2:	eba3 0309 	sub.w	r3, r3, r9
 80042f6:	9306      	str	r3, [sp, #24]
 80042f8:	f1c9 0300 	rsb	r3, r9, #0
 80042fc:	930a      	str	r3, [sp, #40]	; 0x28
 80042fe:	2300      	movs	r3, #0
 8004300:	930e      	str	r3, [sp, #56]	; 0x38
 8004302:	e7bf      	b.n	8004284 <_dtoa_r+0x1cc>
 8004304:	2300      	movs	r3, #0
 8004306:	930b      	str	r3, [sp, #44]	; 0x2c
 8004308:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800430a:	2b00      	cmp	r3, #0
 800430c:	dc59      	bgt.n	80043c2 <_dtoa_r+0x30a>
 800430e:	f04f 0b01 	mov.w	fp, #1
 8004312:	465b      	mov	r3, fp
 8004314:	f8cd b008 	str.w	fp, [sp, #8]
 8004318:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800431c:	2200      	movs	r2, #0
 800431e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004320:	6042      	str	r2, [r0, #4]
 8004322:	2204      	movs	r2, #4
 8004324:	f102 0614 	add.w	r6, r2, #20
 8004328:	429e      	cmp	r6, r3
 800432a:	6841      	ldr	r1, [r0, #4]
 800432c:	d94f      	bls.n	80043ce <_dtoa_r+0x316>
 800432e:	4628      	mov	r0, r5
 8004330:	f000 fef8 	bl	8005124 <_Balloc>
 8004334:	9008      	str	r0, [sp, #32]
 8004336:	2800      	cmp	r0, #0
 8004338:	d14d      	bne.n	80043d6 <_dtoa_r+0x31e>
 800433a:	4602      	mov	r2, r0
 800433c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004340:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <_dtoa_r+0x300>)
 8004342:	e6cd      	b.n	80040e0 <_dtoa_r+0x28>
 8004344:	2301      	movs	r3, #1
 8004346:	e7de      	b.n	8004306 <_dtoa_r+0x24e>
 8004348:	2300      	movs	r3, #0
 800434a:	930b      	str	r3, [sp, #44]	; 0x2c
 800434c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800434e:	eb09 0b03 	add.w	fp, r9, r3
 8004352:	f10b 0301 	add.w	r3, fp, #1
 8004356:	2b01      	cmp	r3, #1
 8004358:	9302      	str	r3, [sp, #8]
 800435a:	bfb8      	it	lt
 800435c:	2301      	movlt	r3, #1
 800435e:	e7dd      	b.n	800431c <_dtoa_r+0x264>
 8004360:	2301      	movs	r3, #1
 8004362:	e7f2      	b.n	800434a <_dtoa_r+0x292>
 8004364:	2401      	movs	r4, #1
 8004366:	2300      	movs	r3, #0
 8004368:	940b      	str	r4, [sp, #44]	; 0x2c
 800436a:	9322      	str	r3, [sp, #136]	; 0x88
 800436c:	f04f 3bff 	mov.w	fp, #4294967295
 8004370:	2200      	movs	r2, #0
 8004372:	2312      	movs	r3, #18
 8004374:	f8cd b008 	str.w	fp, [sp, #8]
 8004378:	9223      	str	r2, [sp, #140]	; 0x8c
 800437a:	e7cf      	b.n	800431c <_dtoa_r+0x264>
 800437c:	f3af 8000 	nop.w
 8004380:	636f4361 	.word	0x636f4361
 8004384:	3fd287a7 	.word	0x3fd287a7
 8004388:	8b60c8b3 	.word	0x8b60c8b3
 800438c:	3fc68a28 	.word	0x3fc68a28
 8004390:	509f79fb 	.word	0x509f79fb
 8004394:	3fd34413 	.word	0x3fd34413
 8004398:	0800616d 	.word	0x0800616d
 800439c:	08006184 	.word	0x08006184
 80043a0:	7ff00000 	.word	0x7ff00000
 80043a4:	08006169 	.word	0x08006169
 80043a8:	08006160 	.word	0x08006160
 80043ac:	0800613d 	.word	0x0800613d
 80043b0:	3ff80000 	.word	0x3ff80000
 80043b4:	080062e0 	.word	0x080062e0
 80043b8:	080061e3 	.word	0x080061e3
 80043bc:	2301      	movs	r3, #1
 80043be:	930b      	str	r3, [sp, #44]	; 0x2c
 80043c0:	e7d4      	b.n	800436c <_dtoa_r+0x2b4>
 80043c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80043c6:	465b      	mov	r3, fp
 80043c8:	f8cd b008 	str.w	fp, [sp, #8]
 80043cc:	e7a6      	b.n	800431c <_dtoa_r+0x264>
 80043ce:	3101      	adds	r1, #1
 80043d0:	6041      	str	r1, [r0, #4]
 80043d2:	0052      	lsls	r2, r2, #1
 80043d4:	e7a6      	b.n	8004324 <_dtoa_r+0x26c>
 80043d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043d8:	9a08      	ldr	r2, [sp, #32]
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	9b02      	ldr	r3, [sp, #8]
 80043de:	2b0e      	cmp	r3, #14
 80043e0:	f200 80a8 	bhi.w	8004534 <_dtoa_r+0x47c>
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	f000 80a5 	beq.w	8004534 <_dtoa_r+0x47c>
 80043ea:	f1b9 0f00 	cmp.w	r9, #0
 80043ee:	dd34      	ble.n	800445a <_dtoa_r+0x3a2>
 80043f0:	4a9a      	ldr	r2, [pc, #616]	; (800465c <_dtoa_r+0x5a4>)
 80043f2:	f009 030f 	and.w	r3, r9, #15
 80043f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80043fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80043fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004402:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004406:	ea4f 1429 	mov.w	r4, r9, asr #4
 800440a:	d016      	beq.n	800443a <_dtoa_r+0x382>
 800440c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004410:	4b93      	ldr	r3, [pc, #588]	; (8004660 <_dtoa_r+0x5a8>)
 8004412:	2703      	movs	r7, #3
 8004414:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004418:	f7fc f9fe 	bl	8000818 <__aeabi_ddiv>
 800441c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004420:	f004 040f 	and.w	r4, r4, #15
 8004424:	4e8e      	ldr	r6, [pc, #568]	; (8004660 <_dtoa_r+0x5a8>)
 8004426:	b954      	cbnz	r4, 800443e <_dtoa_r+0x386>
 8004428:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800442c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004430:	f7fc f9f2 	bl	8000818 <__aeabi_ddiv>
 8004434:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004438:	e029      	b.n	800448e <_dtoa_r+0x3d6>
 800443a:	2702      	movs	r7, #2
 800443c:	e7f2      	b.n	8004424 <_dtoa_r+0x36c>
 800443e:	07e1      	lsls	r1, r4, #31
 8004440:	d508      	bpl.n	8004454 <_dtoa_r+0x39c>
 8004442:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004446:	e9d6 2300 	ldrd	r2, r3, [r6]
 800444a:	f7fc f8bb 	bl	80005c4 <__aeabi_dmul>
 800444e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004452:	3701      	adds	r7, #1
 8004454:	1064      	asrs	r4, r4, #1
 8004456:	3608      	adds	r6, #8
 8004458:	e7e5      	b.n	8004426 <_dtoa_r+0x36e>
 800445a:	f000 80a5 	beq.w	80045a8 <_dtoa_r+0x4f0>
 800445e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004462:	f1c9 0400 	rsb	r4, r9, #0
 8004466:	4b7d      	ldr	r3, [pc, #500]	; (800465c <_dtoa_r+0x5a4>)
 8004468:	f004 020f 	and.w	r2, r4, #15
 800446c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fc f8a6 	bl	80005c4 <__aeabi_dmul>
 8004478:	2702      	movs	r7, #2
 800447a:	2300      	movs	r3, #0
 800447c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004480:	4e77      	ldr	r6, [pc, #476]	; (8004660 <_dtoa_r+0x5a8>)
 8004482:	1124      	asrs	r4, r4, #4
 8004484:	2c00      	cmp	r4, #0
 8004486:	f040 8084 	bne.w	8004592 <_dtoa_r+0x4da>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1d2      	bne.n	8004434 <_dtoa_r+0x37c>
 800448e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 808b 	beq.w	80045ac <_dtoa_r+0x4f4>
 8004496:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800449a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800449e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80044a2:	2200      	movs	r2, #0
 80044a4:	4b6f      	ldr	r3, [pc, #444]	; (8004664 <_dtoa_r+0x5ac>)
 80044a6:	f7fc faff 	bl	8000aa8 <__aeabi_dcmplt>
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d07e      	beq.n	80045ac <_dtoa_r+0x4f4>
 80044ae:	9b02      	ldr	r3, [sp, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d07b      	beq.n	80045ac <_dtoa_r+0x4f4>
 80044b4:	f1bb 0f00 	cmp.w	fp, #0
 80044b8:	dd38      	ble.n	800452c <_dtoa_r+0x474>
 80044ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80044be:	2200      	movs	r2, #0
 80044c0:	4b69      	ldr	r3, [pc, #420]	; (8004668 <_dtoa_r+0x5b0>)
 80044c2:	f7fc f87f 	bl	80005c4 <__aeabi_dmul>
 80044c6:	465c      	mov	r4, fp
 80044c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044cc:	f109 38ff 	add.w	r8, r9, #4294967295
 80044d0:	3701      	adds	r7, #1
 80044d2:	4638      	mov	r0, r7
 80044d4:	f7fc f80c 	bl	80004f0 <__aeabi_i2d>
 80044d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044dc:	f7fc f872 	bl	80005c4 <__aeabi_dmul>
 80044e0:	2200      	movs	r2, #0
 80044e2:	4b62      	ldr	r3, [pc, #392]	; (800466c <_dtoa_r+0x5b4>)
 80044e4:	f7fb feb8 	bl	8000258 <__adddf3>
 80044e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80044ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044f0:	9611      	str	r6, [sp, #68]	; 0x44
 80044f2:	2c00      	cmp	r4, #0
 80044f4:	d15d      	bne.n	80045b2 <_dtoa_r+0x4fa>
 80044f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044fa:	2200      	movs	r2, #0
 80044fc:	4b5c      	ldr	r3, [pc, #368]	; (8004670 <_dtoa_r+0x5b8>)
 80044fe:	f7fb fea9 	bl	8000254 <__aeabi_dsub>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800450a:	4633      	mov	r3, r6
 800450c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800450e:	f7fc fae9 	bl	8000ae4 <__aeabi_dcmpgt>
 8004512:	2800      	cmp	r0, #0
 8004514:	f040 829e 	bne.w	8004a54 <_dtoa_r+0x99c>
 8004518:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800451c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800451e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004522:	f7fc fac1 	bl	8000aa8 <__aeabi_dcmplt>
 8004526:	2800      	cmp	r0, #0
 8004528:	f040 8292 	bne.w	8004a50 <_dtoa_r+0x998>
 800452c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004530:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004536:	2b00      	cmp	r3, #0
 8004538:	f2c0 8153 	blt.w	80047e2 <_dtoa_r+0x72a>
 800453c:	f1b9 0f0e 	cmp.w	r9, #14
 8004540:	f300 814f 	bgt.w	80047e2 <_dtoa_r+0x72a>
 8004544:	4b45      	ldr	r3, [pc, #276]	; (800465c <_dtoa_r+0x5a4>)
 8004546:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800454a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800454e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004552:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004554:	2b00      	cmp	r3, #0
 8004556:	f280 80db 	bge.w	8004710 <_dtoa_r+0x658>
 800455a:	9b02      	ldr	r3, [sp, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f300 80d7 	bgt.w	8004710 <_dtoa_r+0x658>
 8004562:	f040 8274 	bne.w	8004a4e <_dtoa_r+0x996>
 8004566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800456a:	2200      	movs	r2, #0
 800456c:	4b40      	ldr	r3, [pc, #256]	; (8004670 <_dtoa_r+0x5b8>)
 800456e:	f7fc f829 	bl	80005c4 <__aeabi_dmul>
 8004572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004576:	f7fc faab 	bl	8000ad0 <__aeabi_dcmpge>
 800457a:	9c02      	ldr	r4, [sp, #8]
 800457c:	4626      	mov	r6, r4
 800457e:	2800      	cmp	r0, #0
 8004580:	f040 824a 	bne.w	8004a18 <_dtoa_r+0x960>
 8004584:	2331      	movs	r3, #49	; 0x31
 8004586:	9f08      	ldr	r7, [sp, #32]
 8004588:	f109 0901 	add.w	r9, r9, #1
 800458c:	f807 3b01 	strb.w	r3, [r7], #1
 8004590:	e246      	b.n	8004a20 <_dtoa_r+0x968>
 8004592:	07e2      	lsls	r2, r4, #31
 8004594:	d505      	bpl.n	80045a2 <_dtoa_r+0x4ea>
 8004596:	e9d6 2300 	ldrd	r2, r3, [r6]
 800459a:	f7fc f813 	bl	80005c4 <__aeabi_dmul>
 800459e:	2301      	movs	r3, #1
 80045a0:	3701      	adds	r7, #1
 80045a2:	1064      	asrs	r4, r4, #1
 80045a4:	3608      	adds	r6, #8
 80045a6:	e76d      	b.n	8004484 <_dtoa_r+0x3cc>
 80045a8:	2702      	movs	r7, #2
 80045aa:	e770      	b.n	800448e <_dtoa_r+0x3d6>
 80045ac:	46c8      	mov	r8, r9
 80045ae:	9c02      	ldr	r4, [sp, #8]
 80045b0:	e78f      	b.n	80044d2 <_dtoa_r+0x41a>
 80045b2:	9908      	ldr	r1, [sp, #32]
 80045b4:	4b29      	ldr	r3, [pc, #164]	; (800465c <_dtoa_r+0x5a4>)
 80045b6:	4421      	add	r1, r4
 80045b8:	9112      	str	r1, [sp, #72]	; 0x48
 80045ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80045c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045c8:	2900      	cmp	r1, #0
 80045ca:	d055      	beq.n	8004678 <_dtoa_r+0x5c0>
 80045cc:	2000      	movs	r0, #0
 80045ce:	4929      	ldr	r1, [pc, #164]	; (8004674 <_dtoa_r+0x5bc>)
 80045d0:	f7fc f922 	bl	8000818 <__aeabi_ddiv>
 80045d4:	463b      	mov	r3, r7
 80045d6:	4632      	mov	r2, r6
 80045d8:	f7fb fe3c 	bl	8000254 <__aeabi_dsub>
 80045dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045e0:	9f08      	ldr	r7, [sp, #32]
 80045e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045e6:	f7fc fa9d 	bl	8000b24 <__aeabi_d2iz>
 80045ea:	4604      	mov	r4, r0
 80045ec:	f7fb ff80 	bl	80004f0 <__aeabi_i2d>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045f8:	f7fb fe2c 	bl	8000254 <__aeabi_dsub>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	3430      	adds	r4, #48	; 0x30
 8004602:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800460a:	f807 4b01 	strb.w	r4, [r7], #1
 800460e:	f7fc fa4b 	bl	8000aa8 <__aeabi_dcmplt>
 8004612:	2800      	cmp	r0, #0
 8004614:	d174      	bne.n	8004700 <_dtoa_r+0x648>
 8004616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800461a:	2000      	movs	r0, #0
 800461c:	4911      	ldr	r1, [pc, #68]	; (8004664 <_dtoa_r+0x5ac>)
 800461e:	f7fb fe19 	bl	8000254 <__aeabi_dsub>
 8004622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004626:	f7fc fa3f 	bl	8000aa8 <__aeabi_dcmplt>
 800462a:	2800      	cmp	r0, #0
 800462c:	f040 80b6 	bne.w	800479c <_dtoa_r+0x6e4>
 8004630:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004632:	429f      	cmp	r7, r3
 8004634:	f43f af7a 	beq.w	800452c <_dtoa_r+0x474>
 8004638:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800463c:	2200      	movs	r2, #0
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <_dtoa_r+0x5b0>)
 8004640:	f7fb ffc0 	bl	80005c4 <__aeabi_dmul>
 8004644:	2200      	movs	r2, #0
 8004646:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800464a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <_dtoa_r+0x5b0>)
 8004650:	f7fb ffb8 	bl	80005c4 <__aeabi_dmul>
 8004654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004658:	e7c3      	b.n	80045e2 <_dtoa_r+0x52a>
 800465a:	bf00      	nop
 800465c:	080062e0 	.word	0x080062e0
 8004660:	080062b8 	.word	0x080062b8
 8004664:	3ff00000 	.word	0x3ff00000
 8004668:	40240000 	.word	0x40240000
 800466c:	401c0000 	.word	0x401c0000
 8004670:	40140000 	.word	0x40140000
 8004674:	3fe00000 	.word	0x3fe00000
 8004678:	4630      	mov	r0, r6
 800467a:	4639      	mov	r1, r7
 800467c:	f7fb ffa2 	bl	80005c4 <__aeabi_dmul>
 8004680:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004682:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004686:	9c08      	ldr	r4, [sp, #32]
 8004688:	9314      	str	r3, [sp, #80]	; 0x50
 800468a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800468e:	f7fc fa49 	bl	8000b24 <__aeabi_d2iz>
 8004692:	9015      	str	r0, [sp, #84]	; 0x54
 8004694:	f7fb ff2c 	bl	80004f0 <__aeabi_i2d>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046a0:	f7fb fdd8 	bl	8000254 <__aeabi_dsub>
 80046a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046a6:	4606      	mov	r6, r0
 80046a8:	3330      	adds	r3, #48	; 0x30
 80046aa:	f804 3b01 	strb.w	r3, [r4], #1
 80046ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046b0:	460f      	mov	r7, r1
 80046b2:	429c      	cmp	r4, r3
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	d124      	bne.n	8004704 <_dtoa_r+0x64c>
 80046ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046be:	4bb3      	ldr	r3, [pc, #716]	; (800498c <_dtoa_r+0x8d4>)
 80046c0:	f7fb fdca 	bl	8000258 <__adddf3>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4630      	mov	r0, r6
 80046ca:	4639      	mov	r1, r7
 80046cc:	f7fc fa0a 	bl	8000ae4 <__aeabi_dcmpgt>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d162      	bne.n	800479a <_dtoa_r+0x6e2>
 80046d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046d8:	2000      	movs	r0, #0
 80046da:	49ac      	ldr	r1, [pc, #688]	; (800498c <_dtoa_r+0x8d4>)
 80046dc:	f7fb fdba 	bl	8000254 <__aeabi_dsub>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4630      	mov	r0, r6
 80046e6:	4639      	mov	r1, r7
 80046e8:	f7fc f9de 	bl	8000aa8 <__aeabi_dcmplt>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	f43f af1d 	beq.w	800452c <_dtoa_r+0x474>
 80046f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80046f4:	1e7b      	subs	r3, r7, #1
 80046f6:	9314      	str	r3, [sp, #80]	; 0x50
 80046f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d0f8      	beq.n	80046f2 <_dtoa_r+0x63a>
 8004700:	46c1      	mov	r9, r8
 8004702:	e03a      	b.n	800477a <_dtoa_r+0x6c2>
 8004704:	4ba2      	ldr	r3, [pc, #648]	; (8004990 <_dtoa_r+0x8d8>)
 8004706:	f7fb ff5d 	bl	80005c4 <__aeabi_dmul>
 800470a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800470e:	e7bc      	b.n	800468a <_dtoa_r+0x5d2>
 8004710:	9f08      	ldr	r7, [sp, #32]
 8004712:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800471a:	f7fc f87d 	bl	8000818 <__aeabi_ddiv>
 800471e:	f7fc fa01 	bl	8000b24 <__aeabi_d2iz>
 8004722:	4604      	mov	r4, r0
 8004724:	f7fb fee4 	bl	80004f0 <__aeabi_i2d>
 8004728:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800472c:	f7fb ff4a 	bl	80005c4 <__aeabi_dmul>
 8004730:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004734:	460b      	mov	r3, r1
 8004736:	4602      	mov	r2, r0
 8004738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800473c:	f7fb fd8a 	bl	8000254 <__aeabi_dsub>
 8004740:	f807 6b01 	strb.w	r6, [r7], #1
 8004744:	9e08      	ldr	r6, [sp, #32]
 8004746:	9b02      	ldr	r3, [sp, #8]
 8004748:	1bbe      	subs	r6, r7, r6
 800474a:	42b3      	cmp	r3, r6
 800474c:	d13a      	bne.n	80047c4 <_dtoa_r+0x70c>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	f7fb fd81 	bl	8000258 <__adddf3>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800475e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004762:	f7fc f9bf 	bl	8000ae4 <__aeabi_dcmpgt>
 8004766:	bb58      	cbnz	r0, 80047c0 <_dtoa_r+0x708>
 8004768:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800476c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004770:	f7fc f990 	bl	8000a94 <__aeabi_dcmpeq>
 8004774:	b108      	cbz	r0, 800477a <_dtoa_r+0x6c2>
 8004776:	07e1      	lsls	r1, r4, #31
 8004778:	d422      	bmi.n	80047c0 <_dtoa_r+0x708>
 800477a:	4628      	mov	r0, r5
 800477c:	4651      	mov	r1, sl
 800477e:	f000 fd11 	bl	80051a4 <_Bfree>
 8004782:	2300      	movs	r3, #0
 8004784:	703b      	strb	r3, [r7, #0]
 8004786:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004788:	f109 0001 	add.w	r0, r9, #1
 800478c:	6018      	str	r0, [r3, #0]
 800478e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004790:	2b00      	cmp	r3, #0
 8004792:	f43f acdf 	beq.w	8004154 <_dtoa_r+0x9c>
 8004796:	601f      	str	r7, [r3, #0]
 8004798:	e4dc      	b.n	8004154 <_dtoa_r+0x9c>
 800479a:	4627      	mov	r7, r4
 800479c:	463b      	mov	r3, r7
 800479e:	461f      	mov	r7, r3
 80047a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047a4:	2a39      	cmp	r2, #57	; 0x39
 80047a6:	d107      	bne.n	80047b8 <_dtoa_r+0x700>
 80047a8:	9a08      	ldr	r2, [sp, #32]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d1f7      	bne.n	800479e <_dtoa_r+0x6e6>
 80047ae:	2230      	movs	r2, #48	; 0x30
 80047b0:	9908      	ldr	r1, [sp, #32]
 80047b2:	f108 0801 	add.w	r8, r8, #1
 80047b6:	700a      	strb	r2, [r1, #0]
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	3201      	adds	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	e79f      	b.n	8004700 <_dtoa_r+0x648>
 80047c0:	46c8      	mov	r8, r9
 80047c2:	e7eb      	b.n	800479c <_dtoa_r+0x6e4>
 80047c4:	2200      	movs	r2, #0
 80047c6:	4b72      	ldr	r3, [pc, #456]	; (8004990 <_dtoa_r+0x8d8>)
 80047c8:	f7fb fefc 	bl	80005c4 <__aeabi_dmul>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2300      	movs	r3, #0
 80047d8:	f7fc f95c 	bl	8000a94 <__aeabi_dcmpeq>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d098      	beq.n	8004712 <_dtoa_r+0x65a>
 80047e0:	e7cb      	b.n	800477a <_dtoa_r+0x6c2>
 80047e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047e4:	2a00      	cmp	r2, #0
 80047e6:	f000 80cd 	beq.w	8004984 <_dtoa_r+0x8cc>
 80047ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80047ec:	2a01      	cmp	r2, #1
 80047ee:	f300 80af 	bgt.w	8004950 <_dtoa_r+0x898>
 80047f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80047f4:	2a00      	cmp	r2, #0
 80047f6:	f000 80a7 	beq.w	8004948 <_dtoa_r+0x890>
 80047fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80047fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004800:	9f06      	ldr	r7, [sp, #24]
 8004802:	9a06      	ldr	r2, [sp, #24]
 8004804:	2101      	movs	r1, #1
 8004806:	441a      	add	r2, r3
 8004808:	9206      	str	r2, [sp, #24]
 800480a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800480c:	4628      	mov	r0, r5
 800480e:	441a      	add	r2, r3
 8004810:	9209      	str	r2, [sp, #36]	; 0x24
 8004812:	f000 fd81 	bl	8005318 <__i2b>
 8004816:	4606      	mov	r6, r0
 8004818:	2f00      	cmp	r7, #0
 800481a:	dd0c      	ble.n	8004836 <_dtoa_r+0x77e>
 800481c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	dd09      	ble.n	8004836 <_dtoa_r+0x77e>
 8004822:	42bb      	cmp	r3, r7
 8004824:	bfa8      	it	ge
 8004826:	463b      	movge	r3, r7
 8004828:	9a06      	ldr	r2, [sp, #24]
 800482a:	1aff      	subs	r7, r7, r3
 800482c:	1ad2      	subs	r2, r2, r3
 800482e:	9206      	str	r2, [sp, #24]
 8004830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	9309      	str	r3, [sp, #36]	; 0x24
 8004836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004838:	b1f3      	cbz	r3, 8004878 <_dtoa_r+0x7c0>
 800483a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80a9 	beq.w	8004994 <_dtoa_r+0x8dc>
 8004842:	2c00      	cmp	r4, #0
 8004844:	dd10      	ble.n	8004868 <_dtoa_r+0x7b0>
 8004846:	4631      	mov	r1, r6
 8004848:	4622      	mov	r2, r4
 800484a:	4628      	mov	r0, r5
 800484c:	f000 fe1e 	bl	800548c <__pow5mult>
 8004850:	4652      	mov	r2, sl
 8004852:	4601      	mov	r1, r0
 8004854:	4606      	mov	r6, r0
 8004856:	4628      	mov	r0, r5
 8004858:	f000 fd74 	bl	8005344 <__multiply>
 800485c:	4680      	mov	r8, r0
 800485e:	4651      	mov	r1, sl
 8004860:	4628      	mov	r0, r5
 8004862:	f000 fc9f 	bl	80051a4 <_Bfree>
 8004866:	46c2      	mov	sl, r8
 8004868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800486a:	1b1a      	subs	r2, r3, r4
 800486c:	d004      	beq.n	8004878 <_dtoa_r+0x7c0>
 800486e:	4651      	mov	r1, sl
 8004870:	4628      	mov	r0, r5
 8004872:	f000 fe0b 	bl	800548c <__pow5mult>
 8004876:	4682      	mov	sl, r0
 8004878:	2101      	movs	r1, #1
 800487a:	4628      	mov	r0, r5
 800487c:	f000 fd4c 	bl	8005318 <__i2b>
 8004880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004882:	4604      	mov	r4, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	f340 8087 	ble.w	8004998 <_dtoa_r+0x8e0>
 800488a:	461a      	mov	r2, r3
 800488c:	4601      	mov	r1, r0
 800488e:	4628      	mov	r0, r5
 8004890:	f000 fdfc 	bl	800548c <__pow5mult>
 8004894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004896:	4604      	mov	r4, r0
 8004898:	2b01      	cmp	r3, #1
 800489a:	f340 8080 	ble.w	800499e <_dtoa_r+0x8e6>
 800489e:	f04f 0800 	mov.w	r8, #0
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80048a8:	6918      	ldr	r0, [r3, #16]
 80048aa:	f000 fce7 	bl	800527c <__hi0bits>
 80048ae:	f1c0 0020 	rsb	r0, r0, #32
 80048b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b4:	4418      	add	r0, r3
 80048b6:	f010 001f 	ands.w	r0, r0, #31
 80048ba:	f000 8092 	beq.w	80049e2 <_dtoa_r+0x92a>
 80048be:	f1c0 0320 	rsb	r3, r0, #32
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	f340 808a 	ble.w	80049dc <_dtoa_r+0x924>
 80048c8:	f1c0 001c 	rsb	r0, r0, #28
 80048cc:	9b06      	ldr	r3, [sp, #24]
 80048ce:	4407      	add	r7, r0
 80048d0:	4403      	add	r3, r0
 80048d2:	9306      	str	r3, [sp, #24]
 80048d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d6:	4403      	add	r3, r0
 80048d8:	9309      	str	r3, [sp, #36]	; 0x24
 80048da:	9b06      	ldr	r3, [sp, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	dd05      	ble.n	80048ec <_dtoa_r+0x834>
 80048e0:	4651      	mov	r1, sl
 80048e2:	461a      	mov	r2, r3
 80048e4:	4628      	mov	r0, r5
 80048e6:	f000 fe2b 	bl	8005540 <__lshift>
 80048ea:	4682      	mov	sl, r0
 80048ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	dd05      	ble.n	80048fe <_dtoa_r+0x846>
 80048f2:	4621      	mov	r1, r4
 80048f4:	461a      	mov	r2, r3
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 fe22 	bl	8005540 <__lshift>
 80048fc:	4604      	mov	r4, r0
 80048fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d070      	beq.n	80049e6 <_dtoa_r+0x92e>
 8004904:	4621      	mov	r1, r4
 8004906:	4650      	mov	r0, sl
 8004908:	f000 fe86 	bl	8005618 <__mcmp>
 800490c:	2800      	cmp	r0, #0
 800490e:	da6a      	bge.n	80049e6 <_dtoa_r+0x92e>
 8004910:	2300      	movs	r3, #0
 8004912:	4651      	mov	r1, sl
 8004914:	220a      	movs	r2, #10
 8004916:	4628      	mov	r0, r5
 8004918:	f000 fc66 	bl	80051e8 <__multadd>
 800491c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800491e:	4682      	mov	sl, r0
 8004920:	f109 39ff 	add.w	r9, r9, #4294967295
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8193 	beq.w	8004c50 <_dtoa_r+0xb98>
 800492a:	4631      	mov	r1, r6
 800492c:	2300      	movs	r3, #0
 800492e:	220a      	movs	r2, #10
 8004930:	4628      	mov	r0, r5
 8004932:	f000 fc59 	bl	80051e8 <__multadd>
 8004936:	f1bb 0f00 	cmp.w	fp, #0
 800493a:	4606      	mov	r6, r0
 800493c:	f300 8093 	bgt.w	8004a66 <_dtoa_r+0x9ae>
 8004940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004942:	2b02      	cmp	r3, #2
 8004944:	dc57      	bgt.n	80049f6 <_dtoa_r+0x93e>
 8004946:	e08e      	b.n	8004a66 <_dtoa_r+0x9ae>
 8004948:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800494a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800494e:	e756      	b.n	80047fe <_dtoa_r+0x746>
 8004950:	9b02      	ldr	r3, [sp, #8]
 8004952:	1e5c      	subs	r4, r3, #1
 8004954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004956:	42a3      	cmp	r3, r4
 8004958:	bfb7      	itett	lt
 800495a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800495c:	1b1c      	subge	r4, r3, r4
 800495e:	1ae2      	sublt	r2, r4, r3
 8004960:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004962:	bfbe      	ittt	lt
 8004964:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004966:	189b      	addlt	r3, r3, r2
 8004968:	930e      	strlt	r3, [sp, #56]	; 0x38
 800496a:	9b02      	ldr	r3, [sp, #8]
 800496c:	bfb8      	it	lt
 800496e:	2400      	movlt	r4, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	bfbb      	ittet	lt
 8004974:	9b06      	ldrlt	r3, [sp, #24]
 8004976:	9a02      	ldrlt	r2, [sp, #8]
 8004978:	9f06      	ldrge	r7, [sp, #24]
 800497a:	1a9f      	sublt	r7, r3, r2
 800497c:	bfac      	ite	ge
 800497e:	9b02      	ldrge	r3, [sp, #8]
 8004980:	2300      	movlt	r3, #0
 8004982:	e73e      	b.n	8004802 <_dtoa_r+0x74a>
 8004984:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004986:	9f06      	ldr	r7, [sp, #24]
 8004988:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800498a:	e745      	b.n	8004818 <_dtoa_r+0x760>
 800498c:	3fe00000 	.word	0x3fe00000
 8004990:	40240000 	.word	0x40240000
 8004994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004996:	e76a      	b.n	800486e <_dtoa_r+0x7b6>
 8004998:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800499a:	2b01      	cmp	r3, #1
 800499c:	dc19      	bgt.n	80049d2 <_dtoa_r+0x91a>
 800499e:	9b04      	ldr	r3, [sp, #16]
 80049a0:	b9bb      	cbnz	r3, 80049d2 <_dtoa_r+0x91a>
 80049a2:	9b05      	ldr	r3, [sp, #20]
 80049a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049a8:	b99b      	cbnz	r3, 80049d2 <_dtoa_r+0x91a>
 80049aa:	9b05      	ldr	r3, [sp, #20]
 80049ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049b0:	0d1b      	lsrs	r3, r3, #20
 80049b2:	051b      	lsls	r3, r3, #20
 80049b4:	b183      	cbz	r3, 80049d8 <_dtoa_r+0x920>
 80049b6:	f04f 0801 	mov.w	r8, #1
 80049ba:	9b06      	ldr	r3, [sp, #24]
 80049bc:	3301      	adds	r3, #1
 80049be:	9306      	str	r3, [sp, #24]
 80049c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c2:	3301      	adds	r3, #1
 80049c4:	9309      	str	r3, [sp, #36]	; 0x24
 80049c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f47f af6a 	bne.w	80048a2 <_dtoa_r+0x7ea>
 80049ce:	2001      	movs	r0, #1
 80049d0:	e76f      	b.n	80048b2 <_dtoa_r+0x7fa>
 80049d2:	f04f 0800 	mov.w	r8, #0
 80049d6:	e7f6      	b.n	80049c6 <_dtoa_r+0x90e>
 80049d8:	4698      	mov	r8, r3
 80049da:	e7f4      	b.n	80049c6 <_dtoa_r+0x90e>
 80049dc:	f43f af7d 	beq.w	80048da <_dtoa_r+0x822>
 80049e0:	4618      	mov	r0, r3
 80049e2:	301c      	adds	r0, #28
 80049e4:	e772      	b.n	80048cc <_dtoa_r+0x814>
 80049e6:	9b02      	ldr	r3, [sp, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dc36      	bgt.n	8004a5a <_dtoa_r+0x9a2>
 80049ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	dd33      	ble.n	8004a5a <_dtoa_r+0x9a2>
 80049f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80049f6:	f1bb 0f00 	cmp.w	fp, #0
 80049fa:	d10d      	bne.n	8004a18 <_dtoa_r+0x960>
 80049fc:	4621      	mov	r1, r4
 80049fe:	465b      	mov	r3, fp
 8004a00:	2205      	movs	r2, #5
 8004a02:	4628      	mov	r0, r5
 8004a04:	f000 fbf0 	bl	80051e8 <__multadd>
 8004a08:	4601      	mov	r1, r0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4650      	mov	r0, sl
 8004a0e:	f000 fe03 	bl	8005618 <__mcmp>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	f73f adb6 	bgt.w	8004584 <_dtoa_r+0x4cc>
 8004a18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a1a:	9f08      	ldr	r7, [sp, #32]
 8004a1c:	ea6f 0903 	mvn.w	r9, r3
 8004a20:	f04f 0800 	mov.w	r8, #0
 8004a24:	4621      	mov	r1, r4
 8004a26:	4628      	mov	r0, r5
 8004a28:	f000 fbbc 	bl	80051a4 <_Bfree>
 8004a2c:	2e00      	cmp	r6, #0
 8004a2e:	f43f aea4 	beq.w	800477a <_dtoa_r+0x6c2>
 8004a32:	f1b8 0f00 	cmp.w	r8, #0
 8004a36:	d005      	beq.n	8004a44 <_dtoa_r+0x98c>
 8004a38:	45b0      	cmp	r8, r6
 8004a3a:	d003      	beq.n	8004a44 <_dtoa_r+0x98c>
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 fbb0 	bl	80051a4 <_Bfree>
 8004a44:	4631      	mov	r1, r6
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 fbac 	bl	80051a4 <_Bfree>
 8004a4c:	e695      	b.n	800477a <_dtoa_r+0x6c2>
 8004a4e:	2400      	movs	r4, #0
 8004a50:	4626      	mov	r6, r4
 8004a52:	e7e1      	b.n	8004a18 <_dtoa_r+0x960>
 8004a54:	46c1      	mov	r9, r8
 8004a56:	4626      	mov	r6, r4
 8004a58:	e594      	b.n	8004584 <_dtoa_r+0x4cc>
 8004a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a5c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80fc 	beq.w	8004c5e <_dtoa_r+0xba6>
 8004a66:	2f00      	cmp	r7, #0
 8004a68:	dd05      	ble.n	8004a76 <_dtoa_r+0x9be>
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	463a      	mov	r2, r7
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 fd66 	bl	8005540 <__lshift>
 8004a74:	4606      	mov	r6, r0
 8004a76:	f1b8 0f00 	cmp.w	r8, #0
 8004a7a:	d05c      	beq.n	8004b36 <_dtoa_r+0xa7e>
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	6871      	ldr	r1, [r6, #4]
 8004a80:	f000 fb50 	bl	8005124 <_Balloc>
 8004a84:	4607      	mov	r7, r0
 8004a86:	b928      	cbnz	r0, 8004a94 <_dtoa_r+0x9dc>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004a8e:	4b7e      	ldr	r3, [pc, #504]	; (8004c88 <_dtoa_r+0xbd0>)
 8004a90:	f7ff bb26 	b.w	80040e0 <_dtoa_r+0x28>
 8004a94:	6932      	ldr	r2, [r6, #16]
 8004a96:	f106 010c 	add.w	r1, r6, #12
 8004a9a:	3202      	adds	r2, #2
 8004a9c:	0092      	lsls	r2, r2, #2
 8004a9e:	300c      	adds	r0, #12
 8004aa0:	f000 fb32 	bl	8005108 <memcpy>
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 fd49 	bl	8005540 <__lshift>
 8004aae:	46b0      	mov	r8, r6
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	9b08      	ldr	r3, [sp, #32]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	9302      	str	r3, [sp, #8]
 8004ab8:	9b08      	ldr	r3, [sp, #32]
 8004aba:	445b      	add	r3, fp
 8004abc:	930a      	str	r3, [sp, #40]	; 0x28
 8004abe:	9b04      	ldr	r3, [sp, #16]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac6:	9b02      	ldr	r3, [sp, #8]
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4650      	mov	r0, sl
 8004acc:	f103 3bff 	add.w	fp, r3, #4294967295
 8004ad0:	f7ff fa62 	bl	8003f98 <quorem>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	3330      	adds	r3, #48	; 0x30
 8004ada:	9004      	str	r0, [sp, #16]
 8004adc:	4650      	mov	r0, sl
 8004ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ae0:	f000 fd9a 	bl	8005618 <__mcmp>
 8004ae4:	4632      	mov	r2, r6
 8004ae6:	9006      	str	r0, [sp, #24]
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 fdb0 	bl	8005650 <__mdiff>
 8004af0:	68c2      	ldr	r2, [r0, #12]
 8004af2:	4607      	mov	r7, r0
 8004af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004af6:	bb02      	cbnz	r2, 8004b3a <_dtoa_r+0xa82>
 8004af8:	4601      	mov	r1, r0
 8004afa:	4650      	mov	r0, sl
 8004afc:	f000 fd8c 	bl	8005618 <__mcmp>
 8004b00:	4602      	mov	r2, r0
 8004b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b04:	4639      	mov	r1, r7
 8004b06:	4628      	mov	r0, r5
 8004b08:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004b0c:	f000 fb4a 	bl	80051a4 <_Bfree>
 8004b10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b14:	9f02      	ldr	r7, [sp, #8]
 8004b16:	ea43 0102 	orr.w	r1, r3, r2
 8004b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b20:	d10d      	bne.n	8004b3e <_dtoa_r+0xa86>
 8004b22:	2b39      	cmp	r3, #57	; 0x39
 8004b24:	d027      	beq.n	8004b76 <_dtoa_r+0xabe>
 8004b26:	9a06      	ldr	r2, [sp, #24]
 8004b28:	2a00      	cmp	r2, #0
 8004b2a:	dd01      	ble.n	8004b30 <_dtoa_r+0xa78>
 8004b2c:	9b04      	ldr	r3, [sp, #16]
 8004b2e:	3331      	adds	r3, #49	; 0x31
 8004b30:	f88b 3000 	strb.w	r3, [fp]
 8004b34:	e776      	b.n	8004a24 <_dtoa_r+0x96c>
 8004b36:	4630      	mov	r0, r6
 8004b38:	e7b9      	b.n	8004aae <_dtoa_r+0x9f6>
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	e7e2      	b.n	8004b04 <_dtoa_r+0xa4c>
 8004b3e:	9906      	ldr	r1, [sp, #24]
 8004b40:	2900      	cmp	r1, #0
 8004b42:	db04      	blt.n	8004b4e <_dtoa_r+0xa96>
 8004b44:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004b46:	4301      	orrs	r1, r0
 8004b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b4a:	4301      	orrs	r1, r0
 8004b4c:	d120      	bne.n	8004b90 <_dtoa_r+0xad8>
 8004b4e:	2a00      	cmp	r2, #0
 8004b50:	ddee      	ble.n	8004b30 <_dtoa_r+0xa78>
 8004b52:	4651      	mov	r1, sl
 8004b54:	2201      	movs	r2, #1
 8004b56:	4628      	mov	r0, r5
 8004b58:	9302      	str	r3, [sp, #8]
 8004b5a:	f000 fcf1 	bl	8005540 <__lshift>
 8004b5e:	4621      	mov	r1, r4
 8004b60:	4682      	mov	sl, r0
 8004b62:	f000 fd59 	bl	8005618 <__mcmp>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	9b02      	ldr	r3, [sp, #8]
 8004b6a:	dc02      	bgt.n	8004b72 <_dtoa_r+0xaba>
 8004b6c:	d1e0      	bne.n	8004b30 <_dtoa_r+0xa78>
 8004b6e:	07da      	lsls	r2, r3, #31
 8004b70:	d5de      	bpl.n	8004b30 <_dtoa_r+0xa78>
 8004b72:	2b39      	cmp	r3, #57	; 0x39
 8004b74:	d1da      	bne.n	8004b2c <_dtoa_r+0xa74>
 8004b76:	2339      	movs	r3, #57	; 0x39
 8004b78:	f88b 3000 	strb.w	r3, [fp]
 8004b7c:	463b      	mov	r3, r7
 8004b7e:	461f      	mov	r7, r3
 8004b80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	2a39      	cmp	r2, #57	; 0x39
 8004b88:	d050      	beq.n	8004c2c <_dtoa_r+0xb74>
 8004b8a:	3201      	adds	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	e749      	b.n	8004a24 <_dtoa_r+0x96c>
 8004b90:	2a00      	cmp	r2, #0
 8004b92:	dd03      	ble.n	8004b9c <_dtoa_r+0xae4>
 8004b94:	2b39      	cmp	r3, #57	; 0x39
 8004b96:	d0ee      	beq.n	8004b76 <_dtoa_r+0xabe>
 8004b98:	3301      	adds	r3, #1
 8004b9a:	e7c9      	b.n	8004b30 <_dtoa_r+0xa78>
 8004b9c:	9a02      	ldr	r2, [sp, #8]
 8004b9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ba0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004ba4:	428a      	cmp	r2, r1
 8004ba6:	d02a      	beq.n	8004bfe <_dtoa_r+0xb46>
 8004ba8:	4651      	mov	r1, sl
 8004baa:	2300      	movs	r3, #0
 8004bac:	220a      	movs	r2, #10
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f000 fb1a 	bl	80051e8 <__multadd>
 8004bb4:	45b0      	cmp	r8, r6
 8004bb6:	4682      	mov	sl, r0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	f04f 020a 	mov.w	r2, #10
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	d107      	bne.n	8004bd6 <_dtoa_r+0xb1e>
 8004bc6:	f000 fb0f 	bl	80051e8 <__multadd>
 8004bca:	4680      	mov	r8, r0
 8004bcc:	4606      	mov	r6, r0
 8004bce:	9b02      	ldr	r3, [sp, #8]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	9302      	str	r3, [sp, #8]
 8004bd4:	e777      	b.n	8004ac6 <_dtoa_r+0xa0e>
 8004bd6:	f000 fb07 	bl	80051e8 <__multadd>
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4680      	mov	r8, r0
 8004bde:	2300      	movs	r3, #0
 8004be0:	220a      	movs	r2, #10
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 fb00 	bl	80051e8 <__multadd>
 8004be8:	4606      	mov	r6, r0
 8004bea:	e7f0      	b.n	8004bce <_dtoa_r+0xb16>
 8004bec:	f1bb 0f00 	cmp.w	fp, #0
 8004bf0:	bfcc      	ite	gt
 8004bf2:	465f      	movgt	r7, fp
 8004bf4:	2701      	movle	r7, #1
 8004bf6:	f04f 0800 	mov.w	r8, #0
 8004bfa:	9a08      	ldr	r2, [sp, #32]
 8004bfc:	4417      	add	r7, r2
 8004bfe:	4651      	mov	r1, sl
 8004c00:	2201      	movs	r2, #1
 8004c02:	4628      	mov	r0, r5
 8004c04:	9302      	str	r3, [sp, #8]
 8004c06:	f000 fc9b 	bl	8005540 <__lshift>
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	4682      	mov	sl, r0
 8004c0e:	f000 fd03 	bl	8005618 <__mcmp>
 8004c12:	2800      	cmp	r0, #0
 8004c14:	dcb2      	bgt.n	8004b7c <_dtoa_r+0xac4>
 8004c16:	d102      	bne.n	8004c1e <_dtoa_r+0xb66>
 8004c18:	9b02      	ldr	r3, [sp, #8]
 8004c1a:	07db      	lsls	r3, r3, #31
 8004c1c:	d4ae      	bmi.n	8004b7c <_dtoa_r+0xac4>
 8004c1e:	463b      	mov	r3, r7
 8004c20:	461f      	mov	r7, r3
 8004c22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c26:	2a30      	cmp	r2, #48	; 0x30
 8004c28:	d0fa      	beq.n	8004c20 <_dtoa_r+0xb68>
 8004c2a:	e6fb      	b.n	8004a24 <_dtoa_r+0x96c>
 8004c2c:	9a08      	ldr	r2, [sp, #32]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d1a5      	bne.n	8004b7e <_dtoa_r+0xac6>
 8004c32:	2331      	movs	r3, #49	; 0x31
 8004c34:	f109 0901 	add.w	r9, r9, #1
 8004c38:	7013      	strb	r3, [r2, #0]
 8004c3a:	e6f3      	b.n	8004a24 <_dtoa_r+0x96c>
 8004c3c:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <_dtoa_r+0xbd4>)
 8004c3e:	f7ff baa7 	b.w	8004190 <_dtoa_r+0xd8>
 8004c42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f47f aa80 	bne.w	800414a <_dtoa_r+0x92>
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <_dtoa_r+0xbd8>)
 8004c4c:	f7ff baa0 	b.w	8004190 <_dtoa_r+0xd8>
 8004c50:	f1bb 0f00 	cmp.w	fp, #0
 8004c54:	dc03      	bgt.n	8004c5e <_dtoa_r+0xba6>
 8004c56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	f73f aecc 	bgt.w	80049f6 <_dtoa_r+0x93e>
 8004c5e:	9f08      	ldr	r7, [sp, #32]
 8004c60:	4621      	mov	r1, r4
 8004c62:	4650      	mov	r0, sl
 8004c64:	f7ff f998 	bl	8003f98 <quorem>
 8004c68:	9a08      	ldr	r2, [sp, #32]
 8004c6a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004c6e:	f807 3b01 	strb.w	r3, [r7], #1
 8004c72:	1aba      	subs	r2, r7, r2
 8004c74:	4593      	cmp	fp, r2
 8004c76:	ddb9      	ble.n	8004bec <_dtoa_r+0xb34>
 8004c78:	4651      	mov	r1, sl
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	220a      	movs	r2, #10
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 fab2 	bl	80051e8 <__multadd>
 8004c84:	4682      	mov	sl, r0
 8004c86:	e7eb      	b.n	8004c60 <_dtoa_r+0xba8>
 8004c88:	080061e3 	.word	0x080061e3
 8004c8c:	0800613c 	.word	0x0800613c
 8004c90:	08006160 	.word	0x08006160

08004c94 <__sflush_r>:
 8004c94:	898a      	ldrh	r2, [r1, #12]
 8004c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9a:	4605      	mov	r5, r0
 8004c9c:	0710      	lsls	r0, r2, #28
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	d458      	bmi.n	8004d54 <__sflush_r+0xc0>
 8004ca2:	684b      	ldr	r3, [r1, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	dc05      	bgt.n	8004cb4 <__sflush_r+0x20>
 8004ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dc02      	bgt.n	8004cb4 <__sflush_r+0x20>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	d0f9      	beq.n	8004cae <__sflush_r+0x1a>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cc0:	682f      	ldr	r7, [r5, #0]
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	d032      	beq.n	8004d2c <__sflush_r+0x98>
 8004cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	075a      	lsls	r2, r3, #29
 8004ccc:	d505      	bpl.n	8004cda <__sflush_r+0x46>
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	1ac0      	subs	r0, r0, r3
 8004cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cd4:	b10b      	cbz	r3, 8004cda <__sflush_r+0x46>
 8004cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cd8:	1ac0      	subs	r0, r0, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	6a21      	ldr	r1, [r4, #32]
 8004ce4:	47b0      	blx	r6
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	d106      	bne.n	8004cfa <__sflush_r+0x66>
 8004cec:	6829      	ldr	r1, [r5, #0]
 8004cee:	291d      	cmp	r1, #29
 8004cf0:	d82c      	bhi.n	8004d4c <__sflush_r+0xb8>
 8004cf2:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <__sflush_r+0x108>)
 8004cf4:	40ca      	lsrs	r2, r1
 8004cf6:	07d6      	lsls	r6, r2, #31
 8004cf8:	d528      	bpl.n	8004d4c <__sflush_r+0xb8>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	6062      	str	r2, [r4, #4]
 8004cfe:	6922      	ldr	r2, [r4, #16]
 8004d00:	04d9      	lsls	r1, r3, #19
 8004d02:	6022      	str	r2, [r4, #0]
 8004d04:	d504      	bpl.n	8004d10 <__sflush_r+0x7c>
 8004d06:	1c42      	adds	r2, r0, #1
 8004d08:	d101      	bne.n	8004d0e <__sflush_r+0x7a>
 8004d0a:	682b      	ldr	r3, [r5, #0]
 8004d0c:	b903      	cbnz	r3, 8004d10 <__sflush_r+0x7c>
 8004d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d12:	602f      	str	r7, [r5, #0]
 8004d14:	2900      	cmp	r1, #0
 8004d16:	d0ca      	beq.n	8004cae <__sflush_r+0x1a>
 8004d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d1c:	4299      	cmp	r1, r3
 8004d1e:	d002      	beq.n	8004d26 <__sflush_r+0x92>
 8004d20:	4628      	mov	r0, r5
 8004d22:	f000 fd8f 	bl	8005844 <_free_r>
 8004d26:	2000      	movs	r0, #0
 8004d28:	6360      	str	r0, [r4, #52]	; 0x34
 8004d2a:	e7c1      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d2c:	6a21      	ldr	r1, [r4, #32]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b0      	blx	r6
 8004d34:	1c41      	adds	r1, r0, #1
 8004d36:	d1c7      	bne.n	8004cc8 <__sflush_r+0x34>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0c4      	beq.n	8004cc8 <__sflush_r+0x34>
 8004d3e:	2b1d      	cmp	r3, #29
 8004d40:	d001      	beq.n	8004d46 <__sflush_r+0xb2>
 8004d42:	2b16      	cmp	r3, #22
 8004d44:	d101      	bne.n	8004d4a <__sflush_r+0xb6>
 8004d46:	602f      	str	r7, [r5, #0]
 8004d48:	e7b1      	b.n	8004cae <__sflush_r+0x1a>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d50:	81a3      	strh	r3, [r4, #12]
 8004d52:	e7ad      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d54:	690f      	ldr	r7, [r1, #16]
 8004d56:	2f00      	cmp	r7, #0
 8004d58:	d0a9      	beq.n	8004cae <__sflush_r+0x1a>
 8004d5a:	0793      	lsls	r3, r2, #30
 8004d5c:	bf18      	it	ne
 8004d5e:	2300      	movne	r3, #0
 8004d60:	680e      	ldr	r6, [r1, #0]
 8004d62:	bf08      	it	eq
 8004d64:	694b      	ldreq	r3, [r1, #20]
 8004d66:	eba6 0807 	sub.w	r8, r6, r7
 8004d6a:	600f      	str	r7, [r1, #0]
 8004d6c:	608b      	str	r3, [r1, #8]
 8004d6e:	f1b8 0f00 	cmp.w	r8, #0
 8004d72:	dd9c      	ble.n	8004cae <__sflush_r+0x1a>
 8004d74:	4643      	mov	r3, r8
 8004d76:	463a      	mov	r2, r7
 8004d78:	4628      	mov	r0, r5
 8004d7a:	6a21      	ldr	r1, [r4, #32]
 8004d7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d7e:	47b0      	blx	r6
 8004d80:	2800      	cmp	r0, #0
 8004d82:	dc06      	bgt.n	8004d92 <__sflush_r+0xfe>
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8e:	81a3      	strh	r3, [r4, #12]
 8004d90:	e78e      	b.n	8004cb0 <__sflush_r+0x1c>
 8004d92:	4407      	add	r7, r0
 8004d94:	eba8 0800 	sub.w	r8, r8, r0
 8004d98:	e7e9      	b.n	8004d6e <__sflush_r+0xda>
 8004d9a:	bf00      	nop
 8004d9c:	20400001 	.word	0x20400001

08004da0 <_fflush_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	690b      	ldr	r3, [r1, #16]
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	b913      	cbnz	r3, 8004db0 <_fflush_r+0x10>
 8004daa:	2500      	movs	r5, #0
 8004dac:	4628      	mov	r0, r5
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	b118      	cbz	r0, 8004dba <_fflush_r+0x1a>
 8004db2:	6983      	ldr	r3, [r0, #24]
 8004db4:	b90b      	cbnz	r3, 8004dba <_fflush_r+0x1a>
 8004db6:	f000 f887 	bl	8004ec8 <__sinit>
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <_fflush_r+0x6c>)
 8004dbc:	429c      	cmp	r4, r3
 8004dbe:	d11b      	bne.n	8004df8 <_fflush_r+0x58>
 8004dc0:	686c      	ldr	r4, [r5, #4]
 8004dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ef      	beq.n	8004daa <_fflush_r+0xa>
 8004dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dcc:	07d0      	lsls	r0, r2, #31
 8004dce:	d404      	bmi.n	8004dda <_fflush_r+0x3a>
 8004dd0:	0599      	lsls	r1, r3, #22
 8004dd2:	d402      	bmi.n	8004dda <_fflush_r+0x3a>
 8004dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dd6:	f000 f91a 	bl	800500e <__retarget_lock_acquire_recursive>
 8004dda:	4628      	mov	r0, r5
 8004ddc:	4621      	mov	r1, r4
 8004dde:	f7ff ff59 	bl	8004c94 <__sflush_r>
 8004de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004de4:	4605      	mov	r5, r0
 8004de6:	07da      	lsls	r2, r3, #31
 8004de8:	d4e0      	bmi.n	8004dac <_fflush_r+0xc>
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	059b      	lsls	r3, r3, #22
 8004dee:	d4dd      	bmi.n	8004dac <_fflush_r+0xc>
 8004df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df2:	f000 f90d 	bl	8005010 <__retarget_lock_release_recursive>
 8004df6:	e7d9      	b.n	8004dac <_fflush_r+0xc>
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <_fflush_r+0x70>)
 8004dfa:	429c      	cmp	r4, r3
 8004dfc:	d101      	bne.n	8004e02 <_fflush_r+0x62>
 8004dfe:	68ac      	ldr	r4, [r5, #8]
 8004e00:	e7df      	b.n	8004dc2 <_fflush_r+0x22>
 8004e02:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <_fflush_r+0x74>)
 8004e04:	429c      	cmp	r4, r3
 8004e06:	bf08      	it	eq
 8004e08:	68ec      	ldreq	r4, [r5, #12]
 8004e0a:	e7da      	b.n	8004dc2 <_fflush_r+0x22>
 8004e0c:	08006214 	.word	0x08006214
 8004e10:	08006234 	.word	0x08006234
 8004e14:	080061f4 	.word	0x080061f4

08004e18 <std>:
 8004e18:	2300      	movs	r3, #0
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e26:	6083      	str	r3, [r0, #8]
 8004e28:	8181      	strh	r1, [r0, #12]
 8004e2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004e2c:	81c2      	strh	r2, [r0, #14]
 8004e2e:	6183      	str	r3, [r0, #24]
 8004e30:	4619      	mov	r1, r3
 8004e32:	2208      	movs	r2, #8
 8004e34:	305c      	adds	r0, #92	; 0x5c
 8004e36:	f7fe fb69 	bl	800350c <memset>
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <std+0x38>)
 8004e3c:	6224      	str	r4, [r4, #32]
 8004e3e:	6263      	str	r3, [r4, #36]	; 0x24
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <std+0x3c>)
 8004e42:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <std+0x40>)
 8004e46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <std+0x44>)
 8004e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	bf00      	nop
 8004e50:	08005c61 	.word	0x08005c61
 8004e54:	08005c83 	.word	0x08005c83
 8004e58:	08005cbb 	.word	0x08005cbb
 8004e5c:	08005cdf 	.word	0x08005cdf

08004e60 <_cleanup_r>:
 8004e60:	4901      	ldr	r1, [pc, #4]	; (8004e68 <_cleanup_r+0x8>)
 8004e62:	f000 b8af 	b.w	8004fc4 <_fwalk_reent>
 8004e66:	bf00      	nop
 8004e68:	08004da1 	.word	0x08004da1

08004e6c <__sfmoreglue>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	2568      	movs	r5, #104	; 0x68
 8004e70:	1e4a      	subs	r2, r1, #1
 8004e72:	4355      	muls	r5, r2
 8004e74:	460e      	mov	r6, r1
 8004e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e7a:	f000 fd2f 	bl	80058dc <_malloc_r>
 8004e7e:	4604      	mov	r4, r0
 8004e80:	b140      	cbz	r0, 8004e94 <__sfmoreglue+0x28>
 8004e82:	2100      	movs	r1, #0
 8004e84:	e9c0 1600 	strd	r1, r6, [r0]
 8004e88:	300c      	adds	r0, #12
 8004e8a:	60a0      	str	r0, [r4, #8]
 8004e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e90:	f7fe fb3c 	bl	800350c <memset>
 8004e94:	4620      	mov	r0, r4
 8004e96:	bd70      	pop	{r4, r5, r6, pc}

08004e98 <__sfp_lock_acquire>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__sfp_lock_acquire+0x8>)
 8004e9a:	f000 b8b8 	b.w	800500e <__retarget_lock_acquire_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	200002bc 	.word	0x200002bc

08004ea4 <__sfp_lock_release>:
 8004ea4:	4801      	ldr	r0, [pc, #4]	; (8004eac <__sfp_lock_release+0x8>)
 8004ea6:	f000 b8b3 	b.w	8005010 <__retarget_lock_release_recursive>
 8004eaa:	bf00      	nop
 8004eac:	200002bc 	.word	0x200002bc

08004eb0 <__sinit_lock_acquire>:
 8004eb0:	4801      	ldr	r0, [pc, #4]	; (8004eb8 <__sinit_lock_acquire+0x8>)
 8004eb2:	f000 b8ac 	b.w	800500e <__retarget_lock_acquire_recursive>
 8004eb6:	bf00      	nop
 8004eb8:	200002b7 	.word	0x200002b7

08004ebc <__sinit_lock_release>:
 8004ebc:	4801      	ldr	r0, [pc, #4]	; (8004ec4 <__sinit_lock_release+0x8>)
 8004ebe:	f000 b8a7 	b.w	8005010 <__retarget_lock_release_recursive>
 8004ec2:	bf00      	nop
 8004ec4:	200002b7 	.word	0x200002b7

08004ec8 <__sinit>:
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	4604      	mov	r4, r0
 8004ecc:	f7ff fff0 	bl	8004eb0 <__sinit_lock_acquire>
 8004ed0:	69a3      	ldr	r3, [r4, #24]
 8004ed2:	b11b      	cbz	r3, 8004edc <__sinit+0x14>
 8004ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed8:	f7ff bff0 	b.w	8004ebc <__sinit_lock_release>
 8004edc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ee0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <__sinit+0x68>)
 8004ee4:	4a13      	ldr	r2, [pc, #76]	; (8004f34 <__sinit+0x6c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004eea:	42a3      	cmp	r3, r4
 8004eec:	bf08      	it	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	bf08      	it	eq
 8004ef4:	61a3      	streq	r3, [r4, #24]
 8004ef6:	f000 f81f 	bl	8004f38 <__sfp>
 8004efa:	6060      	str	r0, [r4, #4]
 8004efc:	4620      	mov	r0, r4
 8004efe:	f000 f81b 	bl	8004f38 <__sfp>
 8004f02:	60a0      	str	r0, [r4, #8]
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 f817 	bl	8004f38 <__sfp>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	60e0      	str	r0, [r4, #12]
 8004f10:	6860      	ldr	r0, [r4, #4]
 8004f12:	f7ff ff81 	bl	8004e18 <std>
 8004f16:	2201      	movs	r2, #1
 8004f18:	2109      	movs	r1, #9
 8004f1a:	68a0      	ldr	r0, [r4, #8]
 8004f1c:	f7ff ff7c 	bl	8004e18 <std>
 8004f20:	2202      	movs	r2, #2
 8004f22:	2112      	movs	r1, #18
 8004f24:	68e0      	ldr	r0, [r4, #12]
 8004f26:	f7ff ff77 	bl	8004e18 <std>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	61a3      	str	r3, [r4, #24]
 8004f2e:	e7d1      	b.n	8004ed4 <__sinit+0xc>
 8004f30:	08006128 	.word	0x08006128
 8004f34:	08004e61 	.word	0x08004e61

08004f38 <__sfp>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	4607      	mov	r7, r0
 8004f3c:	f7ff ffac 	bl	8004e98 <__sfp_lock_acquire>
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <__sfp+0x84>)
 8004f42:	681e      	ldr	r6, [r3, #0]
 8004f44:	69b3      	ldr	r3, [r6, #24]
 8004f46:	b913      	cbnz	r3, 8004f4e <__sfp+0x16>
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f7ff ffbd 	bl	8004ec8 <__sinit>
 8004f4e:	3648      	adds	r6, #72	; 0x48
 8004f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	d503      	bpl.n	8004f60 <__sfp+0x28>
 8004f58:	6833      	ldr	r3, [r6, #0]
 8004f5a:	b30b      	cbz	r3, 8004fa0 <__sfp+0x68>
 8004f5c:	6836      	ldr	r6, [r6, #0]
 8004f5e:	e7f7      	b.n	8004f50 <__sfp+0x18>
 8004f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f64:	b9d5      	cbnz	r5, 8004f9c <__sfp+0x64>
 8004f66:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <__sfp+0x88>)
 8004f68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f6c:	60e3      	str	r3, [r4, #12]
 8004f6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f70:	f000 f84c 	bl	800500c <__retarget_lock_init_recursive>
 8004f74:	f7ff ff96 	bl	8004ea4 <__sfp_lock_release>
 8004f78:	2208      	movs	r2, #8
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f84:	6025      	str	r5, [r4, #0]
 8004f86:	61a5      	str	r5, [r4, #24]
 8004f88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f8c:	f7fe fabe 	bl	800350c <memset>
 8004f90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f98:	4620      	mov	r0, r4
 8004f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9c:	3468      	adds	r4, #104	; 0x68
 8004f9e:	e7d9      	b.n	8004f54 <__sfp+0x1c>
 8004fa0:	2104      	movs	r1, #4
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f7ff ff62 	bl	8004e6c <__sfmoreglue>
 8004fa8:	4604      	mov	r4, r0
 8004faa:	6030      	str	r0, [r6, #0]
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d1d5      	bne.n	8004f5c <__sfp+0x24>
 8004fb0:	f7ff ff78 	bl	8004ea4 <__sfp_lock_release>
 8004fb4:	230c      	movs	r3, #12
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	e7ee      	b.n	8004f98 <__sfp+0x60>
 8004fba:	bf00      	nop
 8004fbc:	08006128 	.word	0x08006128
 8004fc0:	ffff0001 	.word	0xffff0001

08004fc4 <_fwalk_reent>:
 8004fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc8:	4606      	mov	r6, r0
 8004fca:	4688      	mov	r8, r1
 8004fcc:	2700      	movs	r7, #0
 8004fce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fd6:	f1b9 0901 	subs.w	r9, r9, #1
 8004fda:	d505      	bpl.n	8004fe8 <_fwalk_reent+0x24>
 8004fdc:	6824      	ldr	r4, [r4, #0]
 8004fde:	2c00      	cmp	r4, #0
 8004fe0:	d1f7      	bne.n	8004fd2 <_fwalk_reent+0xe>
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fe8:	89ab      	ldrh	r3, [r5, #12]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d907      	bls.n	8004ffe <_fwalk_reent+0x3a>
 8004fee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	d003      	beq.n	8004ffe <_fwalk_reent+0x3a>
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	47c0      	blx	r8
 8004ffc:	4307      	orrs	r7, r0
 8004ffe:	3568      	adds	r5, #104	; 0x68
 8005000:	e7e9      	b.n	8004fd6 <_fwalk_reent+0x12>
	...

08005004 <_localeconv_r>:
 8005004:	4800      	ldr	r0, [pc, #0]	; (8005008 <_localeconv_r+0x4>)
 8005006:	4770      	bx	lr
 8005008:	20000160 	.word	0x20000160

0800500c <__retarget_lock_init_recursive>:
 800500c:	4770      	bx	lr

0800500e <__retarget_lock_acquire_recursive>:
 800500e:	4770      	bx	lr

08005010 <__retarget_lock_release_recursive>:
 8005010:	4770      	bx	lr

08005012 <__swhatbuf_r>:
 8005012:	b570      	push	{r4, r5, r6, lr}
 8005014:	460e      	mov	r6, r1
 8005016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501a:	4614      	mov	r4, r2
 800501c:	2900      	cmp	r1, #0
 800501e:	461d      	mov	r5, r3
 8005020:	b096      	sub	sp, #88	; 0x58
 8005022:	da07      	bge.n	8005034 <__swhatbuf_r+0x22>
 8005024:	2300      	movs	r3, #0
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	89b3      	ldrh	r3, [r6, #12]
 800502a:	061a      	lsls	r2, r3, #24
 800502c:	d410      	bmi.n	8005050 <__swhatbuf_r+0x3e>
 800502e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005032:	e00e      	b.n	8005052 <__swhatbuf_r+0x40>
 8005034:	466a      	mov	r2, sp
 8005036:	f000 ff69 	bl	8005f0c <_fstat_r>
 800503a:	2800      	cmp	r0, #0
 800503c:	dbf2      	blt.n	8005024 <__swhatbuf_r+0x12>
 800503e:	9a01      	ldr	r2, [sp, #4]
 8005040:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005044:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005048:	425a      	negs	r2, r3
 800504a:	415a      	adcs	r2, r3
 800504c:	602a      	str	r2, [r5, #0]
 800504e:	e7ee      	b.n	800502e <__swhatbuf_r+0x1c>
 8005050:	2340      	movs	r3, #64	; 0x40
 8005052:	2000      	movs	r0, #0
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	b016      	add	sp, #88	; 0x58
 8005058:	bd70      	pop	{r4, r5, r6, pc}
	...

0800505c <__smakebuf_r>:
 800505c:	898b      	ldrh	r3, [r1, #12]
 800505e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005060:	079d      	lsls	r5, r3, #30
 8005062:	4606      	mov	r6, r0
 8005064:	460c      	mov	r4, r1
 8005066:	d507      	bpl.n	8005078 <__smakebuf_r+0x1c>
 8005068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	6123      	str	r3, [r4, #16]
 8005070:	2301      	movs	r3, #1
 8005072:	6163      	str	r3, [r4, #20]
 8005074:	b002      	add	sp, #8
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	466a      	mov	r2, sp
 800507a:	ab01      	add	r3, sp, #4
 800507c:	f7ff ffc9 	bl	8005012 <__swhatbuf_r>
 8005080:	9900      	ldr	r1, [sp, #0]
 8005082:	4605      	mov	r5, r0
 8005084:	4630      	mov	r0, r6
 8005086:	f000 fc29 	bl	80058dc <_malloc_r>
 800508a:	b948      	cbnz	r0, 80050a0 <__smakebuf_r+0x44>
 800508c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005090:	059a      	lsls	r2, r3, #22
 8005092:	d4ef      	bmi.n	8005074 <__smakebuf_r+0x18>
 8005094:	f023 0303 	bic.w	r3, r3, #3
 8005098:	f043 0302 	orr.w	r3, r3, #2
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	e7e3      	b.n	8005068 <__smakebuf_r+0xc>
 80050a0:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <__smakebuf_r+0x7c>)
 80050a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	6020      	str	r0, [r4, #0]
 80050a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ac:	81a3      	strh	r3, [r4, #12]
 80050ae:	9b00      	ldr	r3, [sp, #0]
 80050b0:	6120      	str	r0, [r4, #16]
 80050b2:	6163      	str	r3, [r4, #20]
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	b15b      	cbz	r3, 80050d0 <__smakebuf_r+0x74>
 80050b8:	4630      	mov	r0, r6
 80050ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050be:	f000 ff37 	bl	8005f30 <_isatty_r>
 80050c2:	b128      	cbz	r0, 80050d0 <__smakebuf_r+0x74>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f023 0303 	bic.w	r3, r3, #3
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	81a3      	strh	r3, [r4, #12]
 80050d0:	89a0      	ldrh	r0, [r4, #12]
 80050d2:	4305      	orrs	r5, r0
 80050d4:	81a5      	strh	r5, [r4, #12]
 80050d6:	e7cd      	b.n	8005074 <__smakebuf_r+0x18>
 80050d8:	08004e61 	.word	0x08004e61

080050dc <malloc>:
 80050dc:	4b02      	ldr	r3, [pc, #8]	; (80050e8 <malloc+0xc>)
 80050de:	4601      	mov	r1, r0
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	f000 bbfb 	b.w	80058dc <_malloc_r>
 80050e6:	bf00      	nop
 80050e8:	2000000c 	.word	0x2000000c

080050ec <memchr>:
 80050ec:	4603      	mov	r3, r0
 80050ee:	b510      	push	{r4, lr}
 80050f0:	b2c9      	uxtb	r1, r1
 80050f2:	4402      	add	r2, r0
 80050f4:	4293      	cmp	r3, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	d101      	bne.n	80050fe <memchr+0x12>
 80050fa:	2000      	movs	r0, #0
 80050fc:	e003      	b.n	8005106 <memchr+0x1a>
 80050fe:	7804      	ldrb	r4, [r0, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	428c      	cmp	r4, r1
 8005104:	d1f6      	bne.n	80050f4 <memchr+0x8>
 8005106:	bd10      	pop	{r4, pc}

08005108 <memcpy>:
 8005108:	440a      	add	r2, r1
 800510a:	4291      	cmp	r1, r2
 800510c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005110:	d100      	bne.n	8005114 <memcpy+0xc>
 8005112:	4770      	bx	lr
 8005114:	b510      	push	{r4, lr}
 8005116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800511a:	4291      	cmp	r1, r2
 800511c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005120:	d1f9      	bne.n	8005116 <memcpy+0xe>
 8005122:	bd10      	pop	{r4, pc}

08005124 <_Balloc>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005128:	4604      	mov	r4, r0
 800512a:	460d      	mov	r5, r1
 800512c:	b976      	cbnz	r6, 800514c <_Balloc+0x28>
 800512e:	2010      	movs	r0, #16
 8005130:	f7ff ffd4 	bl	80050dc <malloc>
 8005134:	4602      	mov	r2, r0
 8005136:	6260      	str	r0, [r4, #36]	; 0x24
 8005138:	b920      	cbnz	r0, 8005144 <_Balloc+0x20>
 800513a:	2166      	movs	r1, #102	; 0x66
 800513c:	4b17      	ldr	r3, [pc, #92]	; (800519c <_Balloc+0x78>)
 800513e:	4818      	ldr	r0, [pc, #96]	; (80051a0 <_Balloc+0x7c>)
 8005140:	f000 fea4 	bl	8005e8c <__assert_func>
 8005144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005148:	6006      	str	r6, [r0, #0]
 800514a:	60c6      	str	r6, [r0, #12]
 800514c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800514e:	68f3      	ldr	r3, [r6, #12]
 8005150:	b183      	cbz	r3, 8005174 <_Balloc+0x50>
 8005152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800515a:	b9b8      	cbnz	r0, 800518c <_Balloc+0x68>
 800515c:	2101      	movs	r1, #1
 800515e:	fa01 f605 	lsl.w	r6, r1, r5
 8005162:	1d72      	adds	r2, r6, #5
 8005164:	4620      	mov	r0, r4
 8005166:	0092      	lsls	r2, r2, #2
 8005168:	f000 fb5e 	bl	8005828 <_calloc_r>
 800516c:	b160      	cbz	r0, 8005188 <_Balloc+0x64>
 800516e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005172:	e00e      	b.n	8005192 <_Balloc+0x6e>
 8005174:	2221      	movs	r2, #33	; 0x21
 8005176:	2104      	movs	r1, #4
 8005178:	4620      	mov	r0, r4
 800517a:	f000 fb55 	bl	8005828 <_calloc_r>
 800517e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005180:	60f0      	str	r0, [r6, #12]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e4      	bne.n	8005152 <_Balloc+0x2e>
 8005188:	2000      	movs	r0, #0
 800518a:	bd70      	pop	{r4, r5, r6, pc}
 800518c:	6802      	ldr	r2, [r0, #0]
 800518e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005192:	2300      	movs	r3, #0
 8005194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005198:	e7f7      	b.n	800518a <_Balloc+0x66>
 800519a:	bf00      	nop
 800519c:	0800616d 	.word	0x0800616d
 80051a0:	08006254 	.word	0x08006254

080051a4 <_Bfree>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051a8:	4605      	mov	r5, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	b976      	cbnz	r6, 80051cc <_Bfree+0x28>
 80051ae:	2010      	movs	r0, #16
 80051b0:	f7ff ff94 	bl	80050dc <malloc>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6268      	str	r0, [r5, #36]	; 0x24
 80051b8:	b920      	cbnz	r0, 80051c4 <_Bfree+0x20>
 80051ba:	218a      	movs	r1, #138	; 0x8a
 80051bc:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <_Bfree+0x3c>)
 80051be:	4809      	ldr	r0, [pc, #36]	; (80051e4 <_Bfree+0x40>)
 80051c0:	f000 fe64 	bl	8005e8c <__assert_func>
 80051c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051c8:	6006      	str	r6, [r0, #0]
 80051ca:	60c6      	str	r6, [r0, #12]
 80051cc:	b13c      	cbz	r4, 80051de <_Bfree+0x3a>
 80051ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051d0:	6862      	ldr	r2, [r4, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051d8:	6021      	str	r1, [r4, #0]
 80051da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	0800616d 	.word	0x0800616d
 80051e4:	08006254 	.word	0x08006254

080051e8 <__multadd>:
 80051e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ec:	4698      	mov	r8, r3
 80051ee:	460c      	mov	r4, r1
 80051f0:	2300      	movs	r3, #0
 80051f2:	690e      	ldr	r6, [r1, #16]
 80051f4:	4607      	mov	r7, r0
 80051f6:	f101 0014 	add.w	r0, r1, #20
 80051fa:	6805      	ldr	r5, [r0, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	b2a9      	uxth	r1, r5
 8005200:	fb02 8101 	mla	r1, r2, r1, r8
 8005204:	0c2d      	lsrs	r5, r5, #16
 8005206:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800520a:	fb02 c505 	mla	r5, r2, r5, ip
 800520e:	b289      	uxth	r1, r1
 8005210:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005214:	429e      	cmp	r6, r3
 8005216:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800521a:	f840 1b04 	str.w	r1, [r0], #4
 800521e:	dcec      	bgt.n	80051fa <__multadd+0x12>
 8005220:	f1b8 0f00 	cmp.w	r8, #0
 8005224:	d022      	beq.n	800526c <__multadd+0x84>
 8005226:	68a3      	ldr	r3, [r4, #8]
 8005228:	42b3      	cmp	r3, r6
 800522a:	dc19      	bgt.n	8005260 <__multadd+0x78>
 800522c:	6861      	ldr	r1, [r4, #4]
 800522e:	4638      	mov	r0, r7
 8005230:	3101      	adds	r1, #1
 8005232:	f7ff ff77 	bl	8005124 <_Balloc>
 8005236:	4605      	mov	r5, r0
 8005238:	b928      	cbnz	r0, 8005246 <__multadd+0x5e>
 800523a:	4602      	mov	r2, r0
 800523c:	21b5      	movs	r1, #181	; 0xb5
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <__multadd+0x8c>)
 8005240:	480d      	ldr	r0, [pc, #52]	; (8005278 <__multadd+0x90>)
 8005242:	f000 fe23 	bl	8005e8c <__assert_func>
 8005246:	6922      	ldr	r2, [r4, #16]
 8005248:	f104 010c 	add.w	r1, r4, #12
 800524c:	3202      	adds	r2, #2
 800524e:	0092      	lsls	r2, r2, #2
 8005250:	300c      	adds	r0, #12
 8005252:	f7ff ff59 	bl	8005108 <memcpy>
 8005256:	4621      	mov	r1, r4
 8005258:	4638      	mov	r0, r7
 800525a:	f7ff ffa3 	bl	80051a4 <_Bfree>
 800525e:	462c      	mov	r4, r5
 8005260:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005264:	3601      	adds	r6, #1
 8005266:	f8c3 8014 	str.w	r8, [r3, #20]
 800526a:	6126      	str	r6, [r4, #16]
 800526c:	4620      	mov	r0, r4
 800526e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005272:	bf00      	nop
 8005274:	080061e3 	.word	0x080061e3
 8005278:	08006254 	.word	0x08006254

0800527c <__hi0bits>:
 800527c:	0c02      	lsrs	r2, r0, #16
 800527e:	0412      	lsls	r2, r2, #16
 8005280:	4603      	mov	r3, r0
 8005282:	b9ca      	cbnz	r2, 80052b8 <__hi0bits+0x3c>
 8005284:	0403      	lsls	r3, r0, #16
 8005286:	2010      	movs	r0, #16
 8005288:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800528c:	bf04      	itt	eq
 800528e:	021b      	lsleq	r3, r3, #8
 8005290:	3008      	addeq	r0, #8
 8005292:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005296:	bf04      	itt	eq
 8005298:	011b      	lsleq	r3, r3, #4
 800529a:	3004      	addeq	r0, #4
 800529c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80052a0:	bf04      	itt	eq
 80052a2:	009b      	lsleq	r3, r3, #2
 80052a4:	3002      	addeq	r0, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	db05      	blt.n	80052b6 <__hi0bits+0x3a>
 80052aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80052ae:	f100 0001 	add.w	r0, r0, #1
 80052b2:	bf08      	it	eq
 80052b4:	2020      	moveq	r0, #32
 80052b6:	4770      	bx	lr
 80052b8:	2000      	movs	r0, #0
 80052ba:	e7e5      	b.n	8005288 <__hi0bits+0xc>

080052bc <__lo0bits>:
 80052bc:	6803      	ldr	r3, [r0, #0]
 80052be:	4602      	mov	r2, r0
 80052c0:	f013 0007 	ands.w	r0, r3, #7
 80052c4:	d00b      	beq.n	80052de <__lo0bits+0x22>
 80052c6:	07d9      	lsls	r1, r3, #31
 80052c8:	d422      	bmi.n	8005310 <__lo0bits+0x54>
 80052ca:	0798      	lsls	r0, r3, #30
 80052cc:	bf49      	itett	mi
 80052ce:	085b      	lsrmi	r3, r3, #1
 80052d0:	089b      	lsrpl	r3, r3, #2
 80052d2:	2001      	movmi	r0, #1
 80052d4:	6013      	strmi	r3, [r2, #0]
 80052d6:	bf5c      	itt	pl
 80052d8:	2002      	movpl	r0, #2
 80052da:	6013      	strpl	r3, [r2, #0]
 80052dc:	4770      	bx	lr
 80052de:	b299      	uxth	r1, r3
 80052e0:	b909      	cbnz	r1, 80052e6 <__lo0bits+0x2a>
 80052e2:	2010      	movs	r0, #16
 80052e4:	0c1b      	lsrs	r3, r3, #16
 80052e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80052ea:	bf04      	itt	eq
 80052ec:	0a1b      	lsreq	r3, r3, #8
 80052ee:	3008      	addeq	r0, #8
 80052f0:	0719      	lsls	r1, r3, #28
 80052f2:	bf04      	itt	eq
 80052f4:	091b      	lsreq	r3, r3, #4
 80052f6:	3004      	addeq	r0, #4
 80052f8:	0799      	lsls	r1, r3, #30
 80052fa:	bf04      	itt	eq
 80052fc:	089b      	lsreq	r3, r3, #2
 80052fe:	3002      	addeq	r0, #2
 8005300:	07d9      	lsls	r1, r3, #31
 8005302:	d403      	bmi.n	800530c <__lo0bits+0x50>
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	f100 0001 	add.w	r0, r0, #1
 800530a:	d003      	beq.n	8005314 <__lo0bits+0x58>
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4770      	bx	lr
 8005310:	2000      	movs	r0, #0
 8005312:	4770      	bx	lr
 8005314:	2020      	movs	r0, #32
 8005316:	4770      	bx	lr

08005318 <__i2b>:
 8005318:	b510      	push	{r4, lr}
 800531a:	460c      	mov	r4, r1
 800531c:	2101      	movs	r1, #1
 800531e:	f7ff ff01 	bl	8005124 <_Balloc>
 8005322:	4602      	mov	r2, r0
 8005324:	b928      	cbnz	r0, 8005332 <__i2b+0x1a>
 8005326:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800532a:	4b04      	ldr	r3, [pc, #16]	; (800533c <__i2b+0x24>)
 800532c:	4804      	ldr	r0, [pc, #16]	; (8005340 <__i2b+0x28>)
 800532e:	f000 fdad 	bl	8005e8c <__assert_func>
 8005332:	2301      	movs	r3, #1
 8005334:	6144      	str	r4, [r0, #20]
 8005336:	6103      	str	r3, [r0, #16]
 8005338:	bd10      	pop	{r4, pc}
 800533a:	bf00      	nop
 800533c:	080061e3 	.word	0x080061e3
 8005340:	08006254 	.word	0x08006254

08005344 <__multiply>:
 8005344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005348:	4614      	mov	r4, r2
 800534a:	690a      	ldr	r2, [r1, #16]
 800534c:	6923      	ldr	r3, [r4, #16]
 800534e:	460d      	mov	r5, r1
 8005350:	429a      	cmp	r2, r3
 8005352:	bfbe      	ittt	lt
 8005354:	460b      	movlt	r3, r1
 8005356:	4625      	movlt	r5, r4
 8005358:	461c      	movlt	r4, r3
 800535a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800535e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005362:	68ab      	ldr	r3, [r5, #8]
 8005364:	6869      	ldr	r1, [r5, #4]
 8005366:	eb0a 0709 	add.w	r7, sl, r9
 800536a:	42bb      	cmp	r3, r7
 800536c:	b085      	sub	sp, #20
 800536e:	bfb8      	it	lt
 8005370:	3101      	addlt	r1, #1
 8005372:	f7ff fed7 	bl	8005124 <_Balloc>
 8005376:	b930      	cbnz	r0, 8005386 <__multiply+0x42>
 8005378:	4602      	mov	r2, r0
 800537a:	f240 115d 	movw	r1, #349	; 0x15d
 800537e:	4b41      	ldr	r3, [pc, #260]	; (8005484 <__multiply+0x140>)
 8005380:	4841      	ldr	r0, [pc, #260]	; (8005488 <__multiply+0x144>)
 8005382:	f000 fd83 	bl	8005e8c <__assert_func>
 8005386:	f100 0614 	add.w	r6, r0, #20
 800538a:	4633      	mov	r3, r6
 800538c:	2200      	movs	r2, #0
 800538e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005392:	4543      	cmp	r3, r8
 8005394:	d31e      	bcc.n	80053d4 <__multiply+0x90>
 8005396:	f105 0c14 	add.w	ip, r5, #20
 800539a:	f104 0314 	add.w	r3, r4, #20
 800539e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80053a2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80053a6:	9202      	str	r2, [sp, #8]
 80053a8:	ebac 0205 	sub.w	r2, ip, r5
 80053ac:	3a15      	subs	r2, #21
 80053ae:	f022 0203 	bic.w	r2, r2, #3
 80053b2:	3204      	adds	r2, #4
 80053b4:	f105 0115 	add.w	r1, r5, #21
 80053b8:	458c      	cmp	ip, r1
 80053ba:	bf38      	it	cc
 80053bc:	2204      	movcc	r2, #4
 80053be:	9201      	str	r2, [sp, #4]
 80053c0:	9a02      	ldr	r2, [sp, #8]
 80053c2:	9303      	str	r3, [sp, #12]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d808      	bhi.n	80053da <__multiply+0x96>
 80053c8:	2f00      	cmp	r7, #0
 80053ca:	dc55      	bgt.n	8005478 <__multiply+0x134>
 80053cc:	6107      	str	r7, [r0, #16]
 80053ce:	b005      	add	sp, #20
 80053d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d4:	f843 2b04 	str.w	r2, [r3], #4
 80053d8:	e7db      	b.n	8005392 <__multiply+0x4e>
 80053da:	f8b3 a000 	ldrh.w	sl, [r3]
 80053de:	f1ba 0f00 	cmp.w	sl, #0
 80053e2:	d020      	beq.n	8005426 <__multiply+0xe2>
 80053e4:	46b1      	mov	r9, r6
 80053e6:	2200      	movs	r2, #0
 80053e8:	f105 0e14 	add.w	lr, r5, #20
 80053ec:	f85e 4b04 	ldr.w	r4, [lr], #4
 80053f0:	f8d9 b000 	ldr.w	fp, [r9]
 80053f4:	b2a1      	uxth	r1, r4
 80053f6:	fa1f fb8b 	uxth.w	fp, fp
 80053fa:	fb0a b101 	mla	r1, sl, r1, fp
 80053fe:	4411      	add	r1, r2
 8005400:	f8d9 2000 	ldr.w	r2, [r9]
 8005404:	0c24      	lsrs	r4, r4, #16
 8005406:	0c12      	lsrs	r2, r2, #16
 8005408:	fb0a 2404 	mla	r4, sl, r4, r2
 800540c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005410:	b289      	uxth	r1, r1
 8005412:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005416:	45f4      	cmp	ip, lr
 8005418:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800541c:	f849 1b04 	str.w	r1, [r9], #4
 8005420:	d8e4      	bhi.n	80053ec <__multiply+0xa8>
 8005422:	9901      	ldr	r1, [sp, #4]
 8005424:	5072      	str	r2, [r6, r1]
 8005426:	9a03      	ldr	r2, [sp, #12]
 8005428:	3304      	adds	r3, #4
 800542a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800542e:	f1b9 0f00 	cmp.w	r9, #0
 8005432:	d01f      	beq.n	8005474 <__multiply+0x130>
 8005434:	46b6      	mov	lr, r6
 8005436:	f04f 0a00 	mov.w	sl, #0
 800543a:	6834      	ldr	r4, [r6, #0]
 800543c:	f105 0114 	add.w	r1, r5, #20
 8005440:	880a      	ldrh	r2, [r1, #0]
 8005442:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005446:	b2a4      	uxth	r4, r4
 8005448:	fb09 b202 	mla	r2, r9, r2, fp
 800544c:	4492      	add	sl, r2
 800544e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005452:	f84e 4b04 	str.w	r4, [lr], #4
 8005456:	f851 4b04 	ldr.w	r4, [r1], #4
 800545a:	f8be 2000 	ldrh.w	r2, [lr]
 800545e:	0c24      	lsrs	r4, r4, #16
 8005460:	fb09 2404 	mla	r4, r9, r4, r2
 8005464:	458c      	cmp	ip, r1
 8005466:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800546a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800546e:	d8e7      	bhi.n	8005440 <__multiply+0xfc>
 8005470:	9a01      	ldr	r2, [sp, #4]
 8005472:	50b4      	str	r4, [r6, r2]
 8005474:	3604      	adds	r6, #4
 8005476:	e7a3      	b.n	80053c0 <__multiply+0x7c>
 8005478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1a5      	bne.n	80053cc <__multiply+0x88>
 8005480:	3f01      	subs	r7, #1
 8005482:	e7a1      	b.n	80053c8 <__multiply+0x84>
 8005484:	080061e3 	.word	0x080061e3
 8005488:	08006254 	.word	0x08006254

0800548c <__pow5mult>:
 800548c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005490:	4615      	mov	r5, r2
 8005492:	f012 0203 	ands.w	r2, r2, #3
 8005496:	4606      	mov	r6, r0
 8005498:	460f      	mov	r7, r1
 800549a:	d007      	beq.n	80054ac <__pow5mult+0x20>
 800549c:	4c25      	ldr	r4, [pc, #148]	; (8005534 <__pow5mult+0xa8>)
 800549e:	3a01      	subs	r2, #1
 80054a0:	2300      	movs	r3, #0
 80054a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054a6:	f7ff fe9f 	bl	80051e8 <__multadd>
 80054aa:	4607      	mov	r7, r0
 80054ac:	10ad      	asrs	r5, r5, #2
 80054ae:	d03d      	beq.n	800552c <__pow5mult+0xa0>
 80054b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80054b2:	b97c      	cbnz	r4, 80054d4 <__pow5mult+0x48>
 80054b4:	2010      	movs	r0, #16
 80054b6:	f7ff fe11 	bl	80050dc <malloc>
 80054ba:	4602      	mov	r2, r0
 80054bc:	6270      	str	r0, [r6, #36]	; 0x24
 80054be:	b928      	cbnz	r0, 80054cc <__pow5mult+0x40>
 80054c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80054c4:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <__pow5mult+0xac>)
 80054c6:	481d      	ldr	r0, [pc, #116]	; (800553c <__pow5mult+0xb0>)
 80054c8:	f000 fce0 	bl	8005e8c <__assert_func>
 80054cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054d0:	6004      	str	r4, [r0, #0]
 80054d2:	60c4      	str	r4, [r0, #12]
 80054d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80054d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80054dc:	b94c      	cbnz	r4, 80054f2 <__pow5mult+0x66>
 80054de:	f240 2171 	movw	r1, #625	; 0x271
 80054e2:	4630      	mov	r0, r6
 80054e4:	f7ff ff18 	bl	8005318 <__i2b>
 80054e8:	2300      	movs	r3, #0
 80054ea:	4604      	mov	r4, r0
 80054ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80054f0:	6003      	str	r3, [r0, #0]
 80054f2:	f04f 0900 	mov.w	r9, #0
 80054f6:	07eb      	lsls	r3, r5, #31
 80054f8:	d50a      	bpl.n	8005510 <__pow5mult+0x84>
 80054fa:	4639      	mov	r1, r7
 80054fc:	4622      	mov	r2, r4
 80054fe:	4630      	mov	r0, r6
 8005500:	f7ff ff20 	bl	8005344 <__multiply>
 8005504:	4680      	mov	r8, r0
 8005506:	4639      	mov	r1, r7
 8005508:	4630      	mov	r0, r6
 800550a:	f7ff fe4b 	bl	80051a4 <_Bfree>
 800550e:	4647      	mov	r7, r8
 8005510:	106d      	asrs	r5, r5, #1
 8005512:	d00b      	beq.n	800552c <__pow5mult+0xa0>
 8005514:	6820      	ldr	r0, [r4, #0]
 8005516:	b938      	cbnz	r0, 8005528 <__pow5mult+0x9c>
 8005518:	4622      	mov	r2, r4
 800551a:	4621      	mov	r1, r4
 800551c:	4630      	mov	r0, r6
 800551e:	f7ff ff11 	bl	8005344 <__multiply>
 8005522:	6020      	str	r0, [r4, #0]
 8005524:	f8c0 9000 	str.w	r9, [r0]
 8005528:	4604      	mov	r4, r0
 800552a:	e7e4      	b.n	80054f6 <__pow5mult+0x6a>
 800552c:	4638      	mov	r0, r7
 800552e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005532:	bf00      	nop
 8005534:	080063a8 	.word	0x080063a8
 8005538:	0800616d 	.word	0x0800616d
 800553c:	08006254 	.word	0x08006254

08005540 <__lshift>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	460c      	mov	r4, r1
 8005546:	4607      	mov	r7, r0
 8005548:	4691      	mov	r9, r2
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	6849      	ldr	r1, [r1, #4]
 800554e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005552:	68a3      	ldr	r3, [r4, #8]
 8005554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005558:	f108 0601 	add.w	r6, r8, #1
 800555c:	42b3      	cmp	r3, r6
 800555e:	db0b      	blt.n	8005578 <__lshift+0x38>
 8005560:	4638      	mov	r0, r7
 8005562:	f7ff fddf 	bl	8005124 <_Balloc>
 8005566:	4605      	mov	r5, r0
 8005568:	b948      	cbnz	r0, 800557e <__lshift+0x3e>
 800556a:	4602      	mov	r2, r0
 800556c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005570:	4b27      	ldr	r3, [pc, #156]	; (8005610 <__lshift+0xd0>)
 8005572:	4828      	ldr	r0, [pc, #160]	; (8005614 <__lshift+0xd4>)
 8005574:	f000 fc8a 	bl	8005e8c <__assert_func>
 8005578:	3101      	adds	r1, #1
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	e7ee      	b.n	800555c <__lshift+0x1c>
 800557e:	2300      	movs	r3, #0
 8005580:	f100 0114 	add.w	r1, r0, #20
 8005584:	f100 0210 	add.w	r2, r0, #16
 8005588:	4618      	mov	r0, r3
 800558a:	4553      	cmp	r3, sl
 800558c:	db33      	blt.n	80055f6 <__lshift+0xb6>
 800558e:	6920      	ldr	r0, [r4, #16]
 8005590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005594:	f104 0314 	add.w	r3, r4, #20
 8005598:	f019 091f 	ands.w	r9, r9, #31
 800559c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80055a4:	d02b      	beq.n	80055fe <__lshift+0xbe>
 80055a6:	468a      	mov	sl, r1
 80055a8:	2200      	movs	r2, #0
 80055aa:	f1c9 0e20 	rsb	lr, r9, #32
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	fa00 f009 	lsl.w	r0, r0, r9
 80055b4:	4302      	orrs	r2, r0
 80055b6:	f84a 2b04 	str.w	r2, [sl], #4
 80055ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80055be:	459c      	cmp	ip, r3
 80055c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80055c4:	d8f3      	bhi.n	80055ae <__lshift+0x6e>
 80055c6:	ebac 0304 	sub.w	r3, ip, r4
 80055ca:	3b15      	subs	r3, #21
 80055cc:	f023 0303 	bic.w	r3, r3, #3
 80055d0:	3304      	adds	r3, #4
 80055d2:	f104 0015 	add.w	r0, r4, #21
 80055d6:	4584      	cmp	ip, r0
 80055d8:	bf38      	it	cc
 80055da:	2304      	movcc	r3, #4
 80055dc:	50ca      	str	r2, [r1, r3]
 80055de:	b10a      	cbz	r2, 80055e4 <__lshift+0xa4>
 80055e0:	f108 0602 	add.w	r6, r8, #2
 80055e4:	3e01      	subs	r6, #1
 80055e6:	4638      	mov	r0, r7
 80055e8:	4621      	mov	r1, r4
 80055ea:	612e      	str	r6, [r5, #16]
 80055ec:	f7ff fdda 	bl	80051a4 <_Bfree>
 80055f0:	4628      	mov	r0, r5
 80055f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80055fa:	3301      	adds	r3, #1
 80055fc:	e7c5      	b.n	800558a <__lshift+0x4a>
 80055fe:	3904      	subs	r1, #4
 8005600:	f853 2b04 	ldr.w	r2, [r3], #4
 8005604:	459c      	cmp	ip, r3
 8005606:	f841 2f04 	str.w	r2, [r1, #4]!
 800560a:	d8f9      	bhi.n	8005600 <__lshift+0xc0>
 800560c:	e7ea      	b.n	80055e4 <__lshift+0xa4>
 800560e:	bf00      	nop
 8005610:	080061e3 	.word	0x080061e3
 8005614:	08006254 	.word	0x08006254

08005618 <__mcmp>:
 8005618:	4603      	mov	r3, r0
 800561a:	690a      	ldr	r2, [r1, #16]
 800561c:	6900      	ldr	r0, [r0, #16]
 800561e:	b530      	push	{r4, r5, lr}
 8005620:	1a80      	subs	r0, r0, r2
 8005622:	d10d      	bne.n	8005640 <__mcmp+0x28>
 8005624:	3314      	adds	r3, #20
 8005626:	3114      	adds	r1, #20
 8005628:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800562c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005630:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005634:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005638:	4295      	cmp	r5, r2
 800563a:	d002      	beq.n	8005642 <__mcmp+0x2a>
 800563c:	d304      	bcc.n	8005648 <__mcmp+0x30>
 800563e:	2001      	movs	r0, #1
 8005640:	bd30      	pop	{r4, r5, pc}
 8005642:	42a3      	cmp	r3, r4
 8005644:	d3f4      	bcc.n	8005630 <__mcmp+0x18>
 8005646:	e7fb      	b.n	8005640 <__mcmp+0x28>
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	e7f8      	b.n	8005640 <__mcmp+0x28>
	...

08005650 <__mdiff>:
 8005650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	460c      	mov	r4, r1
 8005656:	4606      	mov	r6, r0
 8005658:	4611      	mov	r1, r2
 800565a:	4620      	mov	r0, r4
 800565c:	4692      	mov	sl, r2
 800565e:	f7ff ffdb 	bl	8005618 <__mcmp>
 8005662:	1e05      	subs	r5, r0, #0
 8005664:	d111      	bne.n	800568a <__mdiff+0x3a>
 8005666:	4629      	mov	r1, r5
 8005668:	4630      	mov	r0, r6
 800566a:	f7ff fd5b 	bl	8005124 <_Balloc>
 800566e:	4602      	mov	r2, r0
 8005670:	b928      	cbnz	r0, 800567e <__mdiff+0x2e>
 8005672:	f240 2132 	movw	r1, #562	; 0x232
 8005676:	4b3c      	ldr	r3, [pc, #240]	; (8005768 <__mdiff+0x118>)
 8005678:	483c      	ldr	r0, [pc, #240]	; (800576c <__mdiff+0x11c>)
 800567a:	f000 fc07 	bl	8005e8c <__assert_func>
 800567e:	2301      	movs	r3, #1
 8005680:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005684:	4610      	mov	r0, r2
 8005686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568a:	bfa4      	itt	ge
 800568c:	4653      	movge	r3, sl
 800568e:	46a2      	movge	sl, r4
 8005690:	4630      	mov	r0, r6
 8005692:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005696:	bfa6      	itte	ge
 8005698:	461c      	movge	r4, r3
 800569a:	2500      	movge	r5, #0
 800569c:	2501      	movlt	r5, #1
 800569e:	f7ff fd41 	bl	8005124 <_Balloc>
 80056a2:	4602      	mov	r2, r0
 80056a4:	b918      	cbnz	r0, 80056ae <__mdiff+0x5e>
 80056a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80056aa:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <__mdiff+0x118>)
 80056ac:	e7e4      	b.n	8005678 <__mdiff+0x28>
 80056ae:	f100 0814 	add.w	r8, r0, #20
 80056b2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80056b6:	60c5      	str	r5, [r0, #12]
 80056b8:	f04f 0c00 	mov.w	ip, #0
 80056bc:	f10a 0514 	add.w	r5, sl, #20
 80056c0:	f10a 0010 	add.w	r0, sl, #16
 80056c4:	46c2      	mov	sl, r8
 80056c6:	6926      	ldr	r6, [r4, #16]
 80056c8:	f104 0914 	add.w	r9, r4, #20
 80056cc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80056d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80056d4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80056d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80056dc:	fa1f f18b 	uxth.w	r1, fp
 80056e0:	4461      	add	r1, ip
 80056e2:	fa1f fc83 	uxth.w	ip, r3
 80056e6:	0c1b      	lsrs	r3, r3, #16
 80056e8:	eba1 010c 	sub.w	r1, r1, ip
 80056ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80056f4:	b289      	uxth	r1, r1
 80056f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80056fa:	454e      	cmp	r6, r9
 80056fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005700:	f84a 3b04 	str.w	r3, [sl], #4
 8005704:	d8e6      	bhi.n	80056d4 <__mdiff+0x84>
 8005706:	1b33      	subs	r3, r6, r4
 8005708:	3b15      	subs	r3, #21
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	3415      	adds	r4, #21
 8005710:	3304      	adds	r3, #4
 8005712:	42a6      	cmp	r6, r4
 8005714:	bf38      	it	cc
 8005716:	2304      	movcc	r3, #4
 8005718:	441d      	add	r5, r3
 800571a:	4443      	add	r3, r8
 800571c:	461e      	mov	r6, r3
 800571e:	462c      	mov	r4, r5
 8005720:	4574      	cmp	r4, lr
 8005722:	d30e      	bcc.n	8005742 <__mdiff+0xf2>
 8005724:	f10e 0103 	add.w	r1, lr, #3
 8005728:	1b49      	subs	r1, r1, r5
 800572a:	f021 0103 	bic.w	r1, r1, #3
 800572e:	3d03      	subs	r5, #3
 8005730:	45ae      	cmp	lr, r5
 8005732:	bf38      	it	cc
 8005734:	2100      	movcc	r1, #0
 8005736:	4419      	add	r1, r3
 8005738:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800573c:	b18b      	cbz	r3, 8005762 <__mdiff+0x112>
 800573e:	6117      	str	r7, [r2, #16]
 8005740:	e7a0      	b.n	8005684 <__mdiff+0x34>
 8005742:	f854 8b04 	ldr.w	r8, [r4], #4
 8005746:	fa1f f188 	uxth.w	r1, r8
 800574a:	4461      	add	r1, ip
 800574c:	1408      	asrs	r0, r1, #16
 800574e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005752:	b289      	uxth	r1, r1
 8005754:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005758:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800575c:	f846 1b04 	str.w	r1, [r6], #4
 8005760:	e7de      	b.n	8005720 <__mdiff+0xd0>
 8005762:	3f01      	subs	r7, #1
 8005764:	e7e8      	b.n	8005738 <__mdiff+0xe8>
 8005766:	bf00      	nop
 8005768:	080061e3 	.word	0x080061e3
 800576c:	08006254 	.word	0x08006254

08005770 <__d2b>:
 8005770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005774:	2101      	movs	r1, #1
 8005776:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800577a:	4690      	mov	r8, r2
 800577c:	461d      	mov	r5, r3
 800577e:	f7ff fcd1 	bl	8005124 <_Balloc>
 8005782:	4604      	mov	r4, r0
 8005784:	b930      	cbnz	r0, 8005794 <__d2b+0x24>
 8005786:	4602      	mov	r2, r0
 8005788:	f240 310a 	movw	r1, #778	; 0x30a
 800578c:	4b24      	ldr	r3, [pc, #144]	; (8005820 <__d2b+0xb0>)
 800578e:	4825      	ldr	r0, [pc, #148]	; (8005824 <__d2b+0xb4>)
 8005790:	f000 fb7c 	bl	8005e8c <__assert_func>
 8005794:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005798:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800579c:	bb2d      	cbnz	r5, 80057ea <__d2b+0x7a>
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	f1b8 0300 	subs.w	r3, r8, #0
 80057a4:	d026      	beq.n	80057f4 <__d2b+0x84>
 80057a6:	4668      	mov	r0, sp
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	f7ff fd87 	bl	80052bc <__lo0bits>
 80057ae:	9900      	ldr	r1, [sp, #0]
 80057b0:	b1f0      	cbz	r0, 80057f0 <__d2b+0x80>
 80057b2:	9a01      	ldr	r2, [sp, #4]
 80057b4:	f1c0 0320 	rsb	r3, r0, #32
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	430b      	orrs	r3, r1
 80057be:	40c2      	lsrs	r2, r0
 80057c0:	6163      	str	r3, [r4, #20]
 80057c2:	9201      	str	r2, [sp, #4]
 80057c4:	9b01      	ldr	r3, [sp, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf14      	ite	ne
 80057ca:	2102      	movne	r1, #2
 80057cc:	2101      	moveq	r1, #1
 80057ce:	61a3      	str	r3, [r4, #24]
 80057d0:	6121      	str	r1, [r4, #16]
 80057d2:	b1c5      	cbz	r5, 8005806 <__d2b+0x96>
 80057d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80057d8:	4405      	add	r5, r0
 80057da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80057de:	603d      	str	r5, [r7, #0]
 80057e0:	6030      	str	r0, [r6, #0]
 80057e2:	4620      	mov	r0, r4
 80057e4:	b002      	add	sp, #8
 80057e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ee:	e7d6      	b.n	800579e <__d2b+0x2e>
 80057f0:	6161      	str	r1, [r4, #20]
 80057f2:	e7e7      	b.n	80057c4 <__d2b+0x54>
 80057f4:	a801      	add	r0, sp, #4
 80057f6:	f7ff fd61 	bl	80052bc <__lo0bits>
 80057fa:	2101      	movs	r1, #1
 80057fc:	9b01      	ldr	r3, [sp, #4]
 80057fe:	6121      	str	r1, [r4, #16]
 8005800:	6163      	str	r3, [r4, #20]
 8005802:	3020      	adds	r0, #32
 8005804:	e7e5      	b.n	80057d2 <__d2b+0x62>
 8005806:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800580a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800580e:	6038      	str	r0, [r7, #0]
 8005810:	6918      	ldr	r0, [r3, #16]
 8005812:	f7ff fd33 	bl	800527c <__hi0bits>
 8005816:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800581a:	6031      	str	r1, [r6, #0]
 800581c:	e7e1      	b.n	80057e2 <__d2b+0x72>
 800581e:	bf00      	nop
 8005820:	080061e3 	.word	0x080061e3
 8005824:	08006254 	.word	0x08006254

08005828 <_calloc_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	fb02 f501 	mul.w	r5, r2, r1
 800582e:	4629      	mov	r1, r5
 8005830:	f000 f854 	bl	80058dc <_malloc_r>
 8005834:	4604      	mov	r4, r0
 8005836:	b118      	cbz	r0, 8005840 <_calloc_r+0x18>
 8005838:	462a      	mov	r2, r5
 800583a:	2100      	movs	r1, #0
 800583c:	f7fd fe66 	bl	800350c <memset>
 8005840:	4620      	mov	r0, r4
 8005842:	bd38      	pop	{r3, r4, r5, pc}

08005844 <_free_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4605      	mov	r5, r0
 8005848:	2900      	cmp	r1, #0
 800584a:	d043      	beq.n	80058d4 <_free_r+0x90>
 800584c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005850:	1f0c      	subs	r4, r1, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	bfb8      	it	lt
 8005856:	18e4      	addlt	r4, r4, r3
 8005858:	f000 fb9e 	bl	8005f98 <__malloc_lock>
 800585c:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <_free_r+0x94>)
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	4610      	mov	r0, r2
 8005862:	b933      	cbnz	r3, 8005872 <_free_r+0x2e>
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	6014      	str	r4, [r2, #0]
 8005868:	4628      	mov	r0, r5
 800586a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800586e:	f000 bb99 	b.w	8005fa4 <__malloc_unlock>
 8005872:	42a3      	cmp	r3, r4
 8005874:	d90a      	bls.n	800588c <_free_r+0x48>
 8005876:	6821      	ldr	r1, [r4, #0]
 8005878:	1862      	adds	r2, r4, r1
 800587a:	4293      	cmp	r3, r2
 800587c:	bf01      	itttt	eq
 800587e:	681a      	ldreq	r2, [r3, #0]
 8005880:	685b      	ldreq	r3, [r3, #4]
 8005882:	1852      	addeq	r2, r2, r1
 8005884:	6022      	streq	r2, [r4, #0]
 8005886:	6063      	str	r3, [r4, #4]
 8005888:	6004      	str	r4, [r0, #0]
 800588a:	e7ed      	b.n	8005868 <_free_r+0x24>
 800588c:	461a      	mov	r2, r3
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	b10b      	cbz	r3, 8005896 <_free_r+0x52>
 8005892:	42a3      	cmp	r3, r4
 8005894:	d9fa      	bls.n	800588c <_free_r+0x48>
 8005896:	6811      	ldr	r1, [r2, #0]
 8005898:	1850      	adds	r0, r2, r1
 800589a:	42a0      	cmp	r0, r4
 800589c:	d10b      	bne.n	80058b6 <_free_r+0x72>
 800589e:	6820      	ldr	r0, [r4, #0]
 80058a0:	4401      	add	r1, r0
 80058a2:	1850      	adds	r0, r2, r1
 80058a4:	4283      	cmp	r3, r0
 80058a6:	6011      	str	r1, [r2, #0]
 80058a8:	d1de      	bne.n	8005868 <_free_r+0x24>
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4401      	add	r1, r0
 80058b0:	6011      	str	r1, [r2, #0]
 80058b2:	6053      	str	r3, [r2, #4]
 80058b4:	e7d8      	b.n	8005868 <_free_r+0x24>
 80058b6:	d902      	bls.n	80058be <_free_r+0x7a>
 80058b8:	230c      	movs	r3, #12
 80058ba:	602b      	str	r3, [r5, #0]
 80058bc:	e7d4      	b.n	8005868 <_free_r+0x24>
 80058be:	6820      	ldr	r0, [r4, #0]
 80058c0:	1821      	adds	r1, r4, r0
 80058c2:	428b      	cmp	r3, r1
 80058c4:	bf01      	itttt	eq
 80058c6:	6819      	ldreq	r1, [r3, #0]
 80058c8:	685b      	ldreq	r3, [r3, #4]
 80058ca:	1809      	addeq	r1, r1, r0
 80058cc:	6021      	streq	r1, [r4, #0]
 80058ce:	6063      	str	r3, [r4, #4]
 80058d0:	6054      	str	r4, [r2, #4]
 80058d2:	e7c9      	b.n	8005868 <_free_r+0x24>
 80058d4:	bd38      	pop	{r3, r4, r5, pc}
 80058d6:	bf00      	nop
 80058d8:	20000204 	.word	0x20000204

080058dc <_malloc_r>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	1ccd      	adds	r5, r1, #3
 80058e0:	f025 0503 	bic.w	r5, r5, #3
 80058e4:	3508      	adds	r5, #8
 80058e6:	2d0c      	cmp	r5, #12
 80058e8:	bf38      	it	cc
 80058ea:	250c      	movcc	r5, #12
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	4606      	mov	r6, r0
 80058f0:	db01      	blt.n	80058f6 <_malloc_r+0x1a>
 80058f2:	42a9      	cmp	r1, r5
 80058f4:	d903      	bls.n	80058fe <_malloc_r+0x22>
 80058f6:	230c      	movs	r3, #12
 80058f8:	6033      	str	r3, [r6, #0]
 80058fa:	2000      	movs	r0, #0
 80058fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058fe:	f000 fb4b 	bl	8005f98 <__malloc_lock>
 8005902:	4921      	ldr	r1, [pc, #132]	; (8005988 <_malloc_r+0xac>)
 8005904:	680a      	ldr	r2, [r1, #0]
 8005906:	4614      	mov	r4, r2
 8005908:	b99c      	cbnz	r4, 8005932 <_malloc_r+0x56>
 800590a:	4f20      	ldr	r7, [pc, #128]	; (800598c <_malloc_r+0xb0>)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	b923      	cbnz	r3, 800591a <_malloc_r+0x3e>
 8005910:	4621      	mov	r1, r4
 8005912:	4630      	mov	r0, r6
 8005914:	f000 f994 	bl	8005c40 <_sbrk_r>
 8005918:	6038      	str	r0, [r7, #0]
 800591a:	4629      	mov	r1, r5
 800591c:	4630      	mov	r0, r6
 800591e:	f000 f98f 	bl	8005c40 <_sbrk_r>
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	d123      	bne.n	800596e <_malloc_r+0x92>
 8005926:	230c      	movs	r3, #12
 8005928:	4630      	mov	r0, r6
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	f000 fb3a 	bl	8005fa4 <__malloc_unlock>
 8005930:	e7e3      	b.n	80058fa <_malloc_r+0x1e>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	1b5b      	subs	r3, r3, r5
 8005936:	d417      	bmi.n	8005968 <_malloc_r+0x8c>
 8005938:	2b0b      	cmp	r3, #11
 800593a:	d903      	bls.n	8005944 <_malloc_r+0x68>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	441c      	add	r4, r3
 8005940:	6025      	str	r5, [r4, #0]
 8005942:	e004      	b.n	800594e <_malloc_r+0x72>
 8005944:	6863      	ldr	r3, [r4, #4]
 8005946:	42a2      	cmp	r2, r4
 8005948:	bf0c      	ite	eq
 800594a:	600b      	streq	r3, [r1, #0]
 800594c:	6053      	strne	r3, [r2, #4]
 800594e:	4630      	mov	r0, r6
 8005950:	f000 fb28 	bl	8005fa4 <__malloc_unlock>
 8005954:	f104 000b 	add.w	r0, r4, #11
 8005958:	1d23      	adds	r3, r4, #4
 800595a:	f020 0007 	bic.w	r0, r0, #7
 800595e:	1ac2      	subs	r2, r0, r3
 8005960:	d0cc      	beq.n	80058fc <_malloc_r+0x20>
 8005962:	1a1b      	subs	r3, r3, r0
 8005964:	50a3      	str	r3, [r4, r2]
 8005966:	e7c9      	b.n	80058fc <_malloc_r+0x20>
 8005968:	4622      	mov	r2, r4
 800596a:	6864      	ldr	r4, [r4, #4]
 800596c:	e7cc      	b.n	8005908 <_malloc_r+0x2c>
 800596e:	1cc4      	adds	r4, r0, #3
 8005970:	f024 0403 	bic.w	r4, r4, #3
 8005974:	42a0      	cmp	r0, r4
 8005976:	d0e3      	beq.n	8005940 <_malloc_r+0x64>
 8005978:	1a21      	subs	r1, r4, r0
 800597a:	4630      	mov	r0, r6
 800597c:	f000 f960 	bl	8005c40 <_sbrk_r>
 8005980:	3001      	adds	r0, #1
 8005982:	d1dd      	bne.n	8005940 <_malloc_r+0x64>
 8005984:	e7cf      	b.n	8005926 <_malloc_r+0x4a>
 8005986:	bf00      	nop
 8005988:	20000204 	.word	0x20000204
 800598c:	20000208 	.word	0x20000208

08005990 <__sfputc_r>:
 8005990:	6893      	ldr	r3, [r2, #8]
 8005992:	b410      	push	{r4}
 8005994:	3b01      	subs	r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	6093      	str	r3, [r2, #8]
 800599a:	da07      	bge.n	80059ac <__sfputc_r+0x1c>
 800599c:	6994      	ldr	r4, [r2, #24]
 800599e:	42a3      	cmp	r3, r4
 80059a0:	db01      	blt.n	80059a6 <__sfputc_r+0x16>
 80059a2:	290a      	cmp	r1, #10
 80059a4:	d102      	bne.n	80059ac <__sfputc_r+0x1c>
 80059a6:	bc10      	pop	{r4}
 80059a8:	f000 b99e 	b.w	8005ce8 <__swbuf_r>
 80059ac:	6813      	ldr	r3, [r2, #0]
 80059ae:	1c58      	adds	r0, r3, #1
 80059b0:	6010      	str	r0, [r2, #0]
 80059b2:	7019      	strb	r1, [r3, #0]
 80059b4:	4608      	mov	r0, r1
 80059b6:	bc10      	pop	{r4}
 80059b8:	4770      	bx	lr

080059ba <__sfputs_r>:
 80059ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059bc:	4606      	mov	r6, r0
 80059be:	460f      	mov	r7, r1
 80059c0:	4614      	mov	r4, r2
 80059c2:	18d5      	adds	r5, r2, r3
 80059c4:	42ac      	cmp	r4, r5
 80059c6:	d101      	bne.n	80059cc <__sfputs_r+0x12>
 80059c8:	2000      	movs	r0, #0
 80059ca:	e007      	b.n	80059dc <__sfputs_r+0x22>
 80059cc:	463a      	mov	r2, r7
 80059ce:	4630      	mov	r0, r6
 80059d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d4:	f7ff ffdc 	bl	8005990 <__sfputc_r>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d1f3      	bne.n	80059c4 <__sfputs_r+0xa>
 80059dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059e0 <_vfiprintf_r>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	460d      	mov	r5, r1
 80059e6:	4614      	mov	r4, r2
 80059e8:	4698      	mov	r8, r3
 80059ea:	4606      	mov	r6, r0
 80059ec:	b09d      	sub	sp, #116	; 0x74
 80059ee:	b118      	cbz	r0, 80059f8 <_vfiprintf_r+0x18>
 80059f0:	6983      	ldr	r3, [r0, #24]
 80059f2:	b90b      	cbnz	r3, 80059f8 <_vfiprintf_r+0x18>
 80059f4:	f7ff fa68 	bl	8004ec8 <__sinit>
 80059f8:	4b89      	ldr	r3, [pc, #548]	; (8005c20 <_vfiprintf_r+0x240>)
 80059fa:	429d      	cmp	r5, r3
 80059fc:	d11b      	bne.n	8005a36 <_vfiprintf_r+0x56>
 80059fe:	6875      	ldr	r5, [r6, #4]
 8005a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a02:	07d9      	lsls	r1, r3, #31
 8005a04:	d405      	bmi.n	8005a12 <_vfiprintf_r+0x32>
 8005a06:	89ab      	ldrh	r3, [r5, #12]
 8005a08:	059a      	lsls	r2, r3, #22
 8005a0a:	d402      	bmi.n	8005a12 <_vfiprintf_r+0x32>
 8005a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a0e:	f7ff fafe 	bl	800500e <__retarget_lock_acquire_recursive>
 8005a12:	89ab      	ldrh	r3, [r5, #12]
 8005a14:	071b      	lsls	r3, r3, #28
 8005a16:	d501      	bpl.n	8005a1c <_vfiprintf_r+0x3c>
 8005a18:	692b      	ldr	r3, [r5, #16]
 8005a1a:	b9eb      	cbnz	r3, 8005a58 <_vfiprintf_r+0x78>
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f000 f9c6 	bl	8005db0 <__swsetup_r>
 8005a24:	b1c0      	cbz	r0, 8005a58 <_vfiprintf_r+0x78>
 8005a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a28:	07dc      	lsls	r4, r3, #31
 8005a2a:	d50e      	bpl.n	8005a4a <_vfiprintf_r+0x6a>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	b01d      	add	sp, #116	; 0x74
 8005a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a36:	4b7b      	ldr	r3, [pc, #492]	; (8005c24 <_vfiprintf_r+0x244>)
 8005a38:	429d      	cmp	r5, r3
 8005a3a:	d101      	bne.n	8005a40 <_vfiprintf_r+0x60>
 8005a3c:	68b5      	ldr	r5, [r6, #8]
 8005a3e:	e7df      	b.n	8005a00 <_vfiprintf_r+0x20>
 8005a40:	4b79      	ldr	r3, [pc, #484]	; (8005c28 <_vfiprintf_r+0x248>)
 8005a42:	429d      	cmp	r5, r3
 8005a44:	bf08      	it	eq
 8005a46:	68f5      	ldreq	r5, [r6, #12]
 8005a48:	e7da      	b.n	8005a00 <_vfiprintf_r+0x20>
 8005a4a:	89ab      	ldrh	r3, [r5, #12]
 8005a4c:	0598      	lsls	r0, r3, #22
 8005a4e:	d4ed      	bmi.n	8005a2c <_vfiprintf_r+0x4c>
 8005a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a52:	f7ff fadd 	bl	8005010 <__retarget_lock_release_recursive>
 8005a56:	e7e9      	b.n	8005a2c <_vfiprintf_r+0x4c>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a5c:	2320      	movs	r3, #32
 8005a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a62:	2330      	movs	r3, #48	; 0x30
 8005a64:	f04f 0901 	mov.w	r9, #1
 8005a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a6c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005c2c <_vfiprintf_r+0x24c>
 8005a70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a74:	4623      	mov	r3, r4
 8005a76:	469a      	mov	sl, r3
 8005a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a7c:	b10a      	cbz	r2, 8005a82 <_vfiprintf_r+0xa2>
 8005a7e:	2a25      	cmp	r2, #37	; 0x25
 8005a80:	d1f9      	bne.n	8005a76 <_vfiprintf_r+0x96>
 8005a82:	ebba 0b04 	subs.w	fp, sl, r4
 8005a86:	d00b      	beq.n	8005aa0 <_vfiprintf_r+0xc0>
 8005a88:	465b      	mov	r3, fp
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f7ff ff93 	bl	80059ba <__sfputs_r>
 8005a94:	3001      	adds	r0, #1
 8005a96:	f000 80aa 	beq.w	8005bee <_vfiprintf_r+0x20e>
 8005a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a9c:	445a      	add	r2, fp
 8005a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 80a2 	beq.w	8005bee <_vfiprintf_r+0x20e>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ab4:	f10a 0a01 	add.w	sl, sl, #1
 8005ab8:	9304      	str	r3, [sp, #16]
 8005aba:	9307      	str	r3, [sp, #28]
 8005abc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ac0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ac2:	4654      	mov	r4, sl
 8005ac4:	2205      	movs	r2, #5
 8005ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aca:	4858      	ldr	r0, [pc, #352]	; (8005c2c <_vfiprintf_r+0x24c>)
 8005acc:	f7ff fb0e 	bl	80050ec <memchr>
 8005ad0:	9a04      	ldr	r2, [sp, #16]
 8005ad2:	b9d8      	cbnz	r0, 8005b0c <_vfiprintf_r+0x12c>
 8005ad4:	06d1      	lsls	r1, r2, #27
 8005ad6:	bf44      	itt	mi
 8005ad8:	2320      	movmi	r3, #32
 8005ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ade:	0713      	lsls	r3, r2, #28
 8005ae0:	bf44      	itt	mi
 8005ae2:	232b      	movmi	r3, #43	; 0x2b
 8005ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8005aec:	2b2a      	cmp	r3, #42	; 0x2a
 8005aee:	d015      	beq.n	8005b1c <_vfiprintf_r+0x13c>
 8005af0:	4654      	mov	r4, sl
 8005af2:	2000      	movs	r0, #0
 8005af4:	f04f 0c0a 	mov.w	ip, #10
 8005af8:	9a07      	ldr	r2, [sp, #28]
 8005afa:	4621      	mov	r1, r4
 8005afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b00:	3b30      	subs	r3, #48	; 0x30
 8005b02:	2b09      	cmp	r3, #9
 8005b04:	d94e      	bls.n	8005ba4 <_vfiprintf_r+0x1c4>
 8005b06:	b1b0      	cbz	r0, 8005b36 <_vfiprintf_r+0x156>
 8005b08:	9207      	str	r2, [sp, #28]
 8005b0a:	e014      	b.n	8005b36 <_vfiprintf_r+0x156>
 8005b0c:	eba0 0308 	sub.w	r3, r0, r8
 8005b10:	fa09 f303 	lsl.w	r3, r9, r3
 8005b14:	4313      	orrs	r3, r2
 8005b16:	46a2      	mov	sl, r4
 8005b18:	9304      	str	r3, [sp, #16]
 8005b1a:	e7d2      	b.n	8005ac2 <_vfiprintf_r+0xe2>
 8005b1c:	9b03      	ldr	r3, [sp, #12]
 8005b1e:	1d19      	adds	r1, r3, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	9103      	str	r1, [sp, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bfbb      	ittet	lt
 8005b28:	425b      	neglt	r3, r3
 8005b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b2e:	9307      	strge	r3, [sp, #28]
 8005b30:	9307      	strlt	r3, [sp, #28]
 8005b32:	bfb8      	it	lt
 8005b34:	9204      	strlt	r2, [sp, #16]
 8005b36:	7823      	ldrb	r3, [r4, #0]
 8005b38:	2b2e      	cmp	r3, #46	; 0x2e
 8005b3a:	d10c      	bne.n	8005b56 <_vfiprintf_r+0x176>
 8005b3c:	7863      	ldrb	r3, [r4, #1]
 8005b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b40:	d135      	bne.n	8005bae <_vfiprintf_r+0x1ce>
 8005b42:	9b03      	ldr	r3, [sp, #12]
 8005b44:	3402      	adds	r4, #2
 8005b46:	1d1a      	adds	r2, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	9203      	str	r2, [sp, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bfb8      	it	lt
 8005b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b54:	9305      	str	r3, [sp, #20]
 8005b56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c3c <_vfiprintf_r+0x25c>
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	4650      	mov	r0, sl
 8005b5e:	7821      	ldrb	r1, [r4, #0]
 8005b60:	f7ff fac4 	bl	80050ec <memchr>
 8005b64:	b140      	cbz	r0, 8005b78 <_vfiprintf_r+0x198>
 8005b66:	2340      	movs	r3, #64	; 0x40
 8005b68:	eba0 000a 	sub.w	r0, r0, sl
 8005b6c:	fa03 f000 	lsl.w	r0, r3, r0
 8005b70:	9b04      	ldr	r3, [sp, #16]
 8005b72:	3401      	adds	r4, #1
 8005b74:	4303      	orrs	r3, r0
 8005b76:	9304      	str	r3, [sp, #16]
 8005b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7c:	2206      	movs	r2, #6
 8005b7e:	482c      	ldr	r0, [pc, #176]	; (8005c30 <_vfiprintf_r+0x250>)
 8005b80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b84:	f7ff fab2 	bl	80050ec <memchr>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d03f      	beq.n	8005c0c <_vfiprintf_r+0x22c>
 8005b8c:	4b29      	ldr	r3, [pc, #164]	; (8005c34 <_vfiprintf_r+0x254>)
 8005b8e:	bb1b      	cbnz	r3, 8005bd8 <_vfiprintf_r+0x1f8>
 8005b90:	9b03      	ldr	r3, [sp, #12]
 8005b92:	3307      	adds	r3, #7
 8005b94:	f023 0307 	bic.w	r3, r3, #7
 8005b98:	3308      	adds	r3, #8
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9e:	443b      	add	r3, r7
 8005ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba2:	e767      	b.n	8005a74 <_vfiprintf_r+0x94>
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bac:	e7a5      	b.n	8005afa <_vfiprintf_r+0x11a>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f04f 0c0a 	mov.w	ip, #10
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	3401      	adds	r4, #1
 8005bb8:	9305      	str	r3, [sp, #20]
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bc0:	3a30      	subs	r2, #48	; 0x30
 8005bc2:	2a09      	cmp	r2, #9
 8005bc4:	d903      	bls.n	8005bce <_vfiprintf_r+0x1ee>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0c5      	beq.n	8005b56 <_vfiprintf_r+0x176>
 8005bca:	9105      	str	r1, [sp, #20]
 8005bcc:	e7c3      	b.n	8005b56 <_vfiprintf_r+0x176>
 8005bce:	4604      	mov	r4, r0
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bd6:	e7f0      	b.n	8005bba <_vfiprintf_r+0x1da>
 8005bd8:	ab03      	add	r3, sp, #12
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	462a      	mov	r2, r5
 8005bde:	4630      	mov	r0, r6
 8005be0:	4b15      	ldr	r3, [pc, #84]	; (8005c38 <_vfiprintf_r+0x258>)
 8005be2:	a904      	add	r1, sp, #16
 8005be4:	f7fd fd38 	bl	8003658 <_printf_float>
 8005be8:	4607      	mov	r7, r0
 8005bea:	1c78      	adds	r0, r7, #1
 8005bec:	d1d6      	bne.n	8005b9c <_vfiprintf_r+0x1bc>
 8005bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf0:	07d9      	lsls	r1, r3, #31
 8005bf2:	d405      	bmi.n	8005c00 <_vfiprintf_r+0x220>
 8005bf4:	89ab      	ldrh	r3, [r5, #12]
 8005bf6:	059a      	lsls	r2, r3, #22
 8005bf8:	d402      	bmi.n	8005c00 <_vfiprintf_r+0x220>
 8005bfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bfc:	f7ff fa08 	bl	8005010 <__retarget_lock_release_recursive>
 8005c00:	89ab      	ldrh	r3, [r5, #12]
 8005c02:	065b      	lsls	r3, r3, #25
 8005c04:	f53f af12 	bmi.w	8005a2c <_vfiprintf_r+0x4c>
 8005c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c0a:	e711      	b.n	8005a30 <_vfiprintf_r+0x50>
 8005c0c:	ab03      	add	r3, sp, #12
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	462a      	mov	r2, r5
 8005c12:	4630      	mov	r0, r6
 8005c14:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <_vfiprintf_r+0x258>)
 8005c16:	a904      	add	r1, sp, #16
 8005c18:	f7fd ffba 	bl	8003b90 <_printf_i>
 8005c1c:	e7e4      	b.n	8005be8 <_vfiprintf_r+0x208>
 8005c1e:	bf00      	nop
 8005c20:	08006214 	.word	0x08006214
 8005c24:	08006234 	.word	0x08006234
 8005c28:	080061f4 	.word	0x080061f4
 8005c2c:	080063b4 	.word	0x080063b4
 8005c30:	080063be 	.word	0x080063be
 8005c34:	08003659 	.word	0x08003659
 8005c38:	080059bb 	.word	0x080059bb
 8005c3c:	080063ba 	.word	0x080063ba

08005c40 <_sbrk_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	2300      	movs	r3, #0
 8005c44:	4d05      	ldr	r5, [pc, #20]	; (8005c5c <_sbrk_r+0x1c>)
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fb fa5a 	bl	8001104 <_sbrk>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_sbrk_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_sbrk_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	200002c0 	.word	0x200002c0

08005c60 <__sread>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	460c      	mov	r4, r1
 8005c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c68:	f000 f9a2 	bl	8005fb0 <_read_r>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	bfab      	itete	ge
 8005c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c72:	89a3      	ldrhlt	r3, [r4, #12]
 8005c74:	181b      	addge	r3, r3, r0
 8005c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c7a:	bfac      	ite	ge
 8005c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c7e:	81a3      	strhlt	r3, [r4, #12]
 8005c80:	bd10      	pop	{r4, pc}

08005c82 <__swrite>:
 8005c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c86:	461f      	mov	r7, r3
 8005c88:	898b      	ldrh	r3, [r1, #12]
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	05db      	lsls	r3, r3, #23
 8005c8e:	460c      	mov	r4, r1
 8005c90:	4616      	mov	r6, r2
 8005c92:	d505      	bpl.n	8005ca0 <__swrite+0x1e>
 8005c94:	2302      	movs	r3, #2
 8005c96:	2200      	movs	r2, #0
 8005c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9c:	f000 f958 	bl	8005f50 <_lseek_r>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	4628      	mov	r0, r5
 8005cac:	463b      	mov	r3, r7
 8005cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb6:	f000 b869 	b.w	8005d8c <_write_r>

08005cba <__sseek>:
 8005cba:	b510      	push	{r4, lr}
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc2:	f000 f945 	bl	8005f50 <_lseek_r>
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	bf15      	itete	ne
 8005ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cd6:	81a3      	strheq	r3, [r4, #12]
 8005cd8:	bf18      	it	ne
 8005cda:	81a3      	strhne	r3, [r4, #12]
 8005cdc:	bd10      	pop	{r4, pc}

08005cde <__sclose>:
 8005cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce2:	f000 b8f1 	b.w	8005ec8 <_close_r>
	...

08005ce8 <__swbuf_r>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	460e      	mov	r6, r1
 8005cec:	4614      	mov	r4, r2
 8005cee:	4605      	mov	r5, r0
 8005cf0:	b118      	cbz	r0, 8005cfa <__swbuf_r+0x12>
 8005cf2:	6983      	ldr	r3, [r0, #24]
 8005cf4:	b90b      	cbnz	r3, 8005cfa <__swbuf_r+0x12>
 8005cf6:	f7ff f8e7 	bl	8004ec8 <__sinit>
 8005cfa:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <__swbuf_r+0x98>)
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	d12b      	bne.n	8005d58 <__swbuf_r+0x70>
 8005d00:	686c      	ldr	r4, [r5, #4]
 8005d02:	69a3      	ldr	r3, [r4, #24]
 8005d04:	60a3      	str	r3, [r4, #8]
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	071a      	lsls	r2, r3, #28
 8005d0a:	d52f      	bpl.n	8005d6c <__swbuf_r+0x84>
 8005d0c:	6923      	ldr	r3, [r4, #16]
 8005d0e:	b36b      	cbz	r3, 8005d6c <__swbuf_r+0x84>
 8005d10:	6923      	ldr	r3, [r4, #16]
 8005d12:	6820      	ldr	r0, [r4, #0]
 8005d14:	b2f6      	uxtb	r6, r6
 8005d16:	1ac0      	subs	r0, r0, r3
 8005d18:	6963      	ldr	r3, [r4, #20]
 8005d1a:	4637      	mov	r7, r6
 8005d1c:	4283      	cmp	r3, r0
 8005d1e:	dc04      	bgt.n	8005d2a <__swbuf_r+0x42>
 8005d20:	4621      	mov	r1, r4
 8005d22:	4628      	mov	r0, r5
 8005d24:	f7ff f83c 	bl	8004da0 <_fflush_r>
 8005d28:	bb30      	cbnz	r0, 8005d78 <__swbuf_r+0x90>
 8005d2a:	68a3      	ldr	r3, [r4, #8]
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	60a3      	str	r3, [r4, #8]
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	6022      	str	r2, [r4, #0]
 8005d38:	701e      	strb	r6, [r3, #0]
 8005d3a:	6963      	ldr	r3, [r4, #20]
 8005d3c:	4283      	cmp	r3, r0
 8005d3e:	d004      	beq.n	8005d4a <__swbuf_r+0x62>
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	07db      	lsls	r3, r3, #31
 8005d44:	d506      	bpl.n	8005d54 <__swbuf_r+0x6c>
 8005d46:	2e0a      	cmp	r6, #10
 8005d48:	d104      	bne.n	8005d54 <__swbuf_r+0x6c>
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f7ff f827 	bl	8004da0 <_fflush_r>
 8005d52:	b988      	cbnz	r0, 8005d78 <__swbuf_r+0x90>
 8005d54:	4638      	mov	r0, r7
 8005d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <__swbuf_r+0x9c>)
 8005d5a:	429c      	cmp	r4, r3
 8005d5c:	d101      	bne.n	8005d62 <__swbuf_r+0x7a>
 8005d5e:	68ac      	ldr	r4, [r5, #8]
 8005d60:	e7cf      	b.n	8005d02 <__swbuf_r+0x1a>
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <__swbuf_r+0xa0>)
 8005d64:	429c      	cmp	r4, r3
 8005d66:	bf08      	it	eq
 8005d68:	68ec      	ldreq	r4, [r5, #12]
 8005d6a:	e7ca      	b.n	8005d02 <__swbuf_r+0x1a>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 f81e 	bl	8005db0 <__swsetup_r>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d0cb      	beq.n	8005d10 <__swbuf_r+0x28>
 8005d78:	f04f 37ff 	mov.w	r7, #4294967295
 8005d7c:	e7ea      	b.n	8005d54 <__swbuf_r+0x6c>
 8005d7e:	bf00      	nop
 8005d80:	08006214 	.word	0x08006214
 8005d84:	08006234 	.word	0x08006234
 8005d88:	080061f4 	.word	0x080061f4

08005d8c <_write_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	2200      	movs	r2, #0
 8005d96:	4d05      	ldr	r5, [pc, #20]	; (8005dac <_write_r+0x20>)
 8005d98:	602a      	str	r2, [r5, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f7fb f966 	bl	800106c <_write>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_write_r+0x1e>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_write_r+0x1e>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	200002c0 	.word	0x200002c0

08005db0 <__swsetup_r>:
 8005db0:	4b32      	ldr	r3, [pc, #200]	; (8005e7c <__swsetup_r+0xcc>)
 8005db2:	b570      	push	{r4, r5, r6, lr}
 8005db4:	681d      	ldr	r5, [r3, #0]
 8005db6:	4606      	mov	r6, r0
 8005db8:	460c      	mov	r4, r1
 8005dba:	b125      	cbz	r5, 8005dc6 <__swsetup_r+0x16>
 8005dbc:	69ab      	ldr	r3, [r5, #24]
 8005dbe:	b913      	cbnz	r3, 8005dc6 <__swsetup_r+0x16>
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f7ff f881 	bl	8004ec8 <__sinit>
 8005dc6:	4b2e      	ldr	r3, [pc, #184]	; (8005e80 <__swsetup_r+0xd0>)
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	d10f      	bne.n	8005dec <__swsetup_r+0x3c>
 8005dcc:	686c      	ldr	r4, [r5, #4]
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dd4:	0719      	lsls	r1, r3, #28
 8005dd6:	d42c      	bmi.n	8005e32 <__swsetup_r+0x82>
 8005dd8:	06dd      	lsls	r5, r3, #27
 8005dda:	d411      	bmi.n	8005e00 <__swsetup_r+0x50>
 8005ddc:	2309      	movs	r3, #9
 8005dde:	6033      	str	r3, [r6, #0]
 8005de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	e03e      	b.n	8005e6a <__swsetup_r+0xba>
 8005dec:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <__swsetup_r+0xd4>)
 8005dee:	429c      	cmp	r4, r3
 8005df0:	d101      	bne.n	8005df6 <__swsetup_r+0x46>
 8005df2:	68ac      	ldr	r4, [r5, #8]
 8005df4:	e7eb      	b.n	8005dce <__swsetup_r+0x1e>
 8005df6:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <__swsetup_r+0xd8>)
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	bf08      	it	eq
 8005dfc:	68ec      	ldreq	r4, [r5, #12]
 8005dfe:	e7e6      	b.n	8005dce <__swsetup_r+0x1e>
 8005e00:	0758      	lsls	r0, r3, #29
 8005e02:	d512      	bpl.n	8005e2a <__swsetup_r+0x7a>
 8005e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e06:	b141      	cbz	r1, 8005e1a <__swsetup_r+0x6a>
 8005e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	d002      	beq.n	8005e16 <__swsetup_r+0x66>
 8005e10:	4630      	mov	r0, r6
 8005e12:	f7ff fd17 	bl	8005844 <_free_r>
 8005e16:	2300      	movs	r3, #0
 8005e18:	6363      	str	r3, [r4, #52]	; 0x34
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	2300      	movs	r3, #0
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	6923      	ldr	r3, [r4, #16]
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f043 0308 	orr.w	r3, r3, #8
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	6923      	ldr	r3, [r4, #16]
 8005e34:	b94b      	cbnz	r3, 8005e4a <__swsetup_r+0x9a>
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e40:	d003      	beq.n	8005e4a <__swsetup_r+0x9a>
 8005e42:	4621      	mov	r1, r4
 8005e44:	4630      	mov	r0, r6
 8005e46:	f7ff f909 	bl	800505c <__smakebuf_r>
 8005e4a:	89a0      	ldrh	r0, [r4, #12]
 8005e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e50:	f010 0301 	ands.w	r3, r0, #1
 8005e54:	d00a      	beq.n	8005e6c <__swsetup_r+0xbc>
 8005e56:	2300      	movs	r3, #0
 8005e58:	60a3      	str	r3, [r4, #8]
 8005e5a:	6963      	ldr	r3, [r4, #20]
 8005e5c:	425b      	negs	r3, r3
 8005e5e:	61a3      	str	r3, [r4, #24]
 8005e60:	6923      	ldr	r3, [r4, #16]
 8005e62:	b943      	cbnz	r3, 8005e76 <__swsetup_r+0xc6>
 8005e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e68:	d1ba      	bne.n	8005de0 <__swsetup_r+0x30>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	0781      	lsls	r1, r0, #30
 8005e6e:	bf58      	it	pl
 8005e70:	6963      	ldrpl	r3, [r4, #20]
 8005e72:	60a3      	str	r3, [r4, #8]
 8005e74:	e7f4      	b.n	8005e60 <__swsetup_r+0xb0>
 8005e76:	2000      	movs	r0, #0
 8005e78:	e7f7      	b.n	8005e6a <__swsetup_r+0xba>
 8005e7a:	bf00      	nop
 8005e7c:	2000000c 	.word	0x2000000c
 8005e80:	08006214 	.word	0x08006214
 8005e84:	08006234 	.word	0x08006234
 8005e88:	080061f4 	.word	0x080061f4

08005e8c <__assert_func>:
 8005e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e8e:	4614      	mov	r4, r2
 8005e90:	461a      	mov	r2, r3
 8005e92:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <__assert_func+0x2c>)
 8005e94:	4605      	mov	r5, r0
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68d8      	ldr	r0, [r3, #12]
 8005e9a:	b14c      	cbz	r4, 8005eb0 <__assert_func+0x24>
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <__assert_func+0x30>)
 8005e9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ea2:	9100      	str	r1, [sp, #0]
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	4906      	ldr	r1, [pc, #24]	; (8005ec0 <__assert_func+0x34>)
 8005ea8:	f000 f81e 	bl	8005ee8 <fiprintf>
 8005eac:	f000 f89f 	bl	8005fee <abort>
 8005eb0:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <__assert_func+0x38>)
 8005eb2:	461c      	mov	r4, r3
 8005eb4:	e7f3      	b.n	8005e9e <__assert_func+0x12>
 8005eb6:	bf00      	nop
 8005eb8:	2000000c 	.word	0x2000000c
 8005ebc:	080063c5 	.word	0x080063c5
 8005ec0:	080063d2 	.word	0x080063d2
 8005ec4:	08006400 	.word	0x08006400

08005ec8 <_close_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	2300      	movs	r3, #0
 8005ecc:	4d05      	ldr	r5, [pc, #20]	; (8005ee4 <_close_r+0x1c>)
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	f7fb f8e6 	bl	80010a4 <_close>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_close_r+0x1a>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_close_r+0x1a>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	200002c0 	.word	0x200002c0

08005ee8 <fiprintf>:
 8005ee8:	b40e      	push	{r1, r2, r3}
 8005eea:	b503      	push	{r0, r1, lr}
 8005eec:	4601      	mov	r1, r0
 8005eee:	ab03      	add	r3, sp, #12
 8005ef0:	4805      	ldr	r0, [pc, #20]	; (8005f08 <fiprintf+0x20>)
 8005ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	9301      	str	r3, [sp, #4]
 8005efa:	f7ff fd71 	bl	80059e0 <_vfiprintf_r>
 8005efe:	b002      	add	sp, #8
 8005f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f04:	b003      	add	sp, #12
 8005f06:	4770      	bx	lr
 8005f08:	2000000c 	.word	0x2000000c

08005f0c <_fstat_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	2300      	movs	r3, #0
 8005f10:	4d06      	ldr	r5, [pc, #24]	; (8005f2c <_fstat_r+0x20>)
 8005f12:	4604      	mov	r4, r0
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	f7fb f8ce 	bl	80010ba <_fstat>
 8005f1e:	1c43      	adds	r3, r0, #1
 8005f20:	d102      	bne.n	8005f28 <_fstat_r+0x1c>
 8005f22:	682b      	ldr	r3, [r5, #0]
 8005f24:	b103      	cbz	r3, 8005f28 <_fstat_r+0x1c>
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	bd38      	pop	{r3, r4, r5, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200002c0 	.word	0x200002c0

08005f30 <_isatty_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	2300      	movs	r3, #0
 8005f34:	4d05      	ldr	r5, [pc, #20]	; (8005f4c <_isatty_r+0x1c>)
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fb f8cc 	bl	80010d8 <_isatty>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_isatty_r+0x1a>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_isatty_r+0x1a>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	200002c0 	.word	0x200002c0

08005f50 <_lseek_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4604      	mov	r4, r0
 8005f54:	4608      	mov	r0, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4d05      	ldr	r5, [pc, #20]	; (8005f70 <_lseek_r+0x20>)
 8005f5c:	602a      	str	r2, [r5, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f7fb f8c4 	bl	80010ec <_lseek>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_lseek_r+0x1e>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_lseek_r+0x1e>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	200002c0 	.word	0x200002c0

08005f74 <__ascii_mbtowc>:
 8005f74:	b082      	sub	sp, #8
 8005f76:	b901      	cbnz	r1, 8005f7a <__ascii_mbtowc+0x6>
 8005f78:	a901      	add	r1, sp, #4
 8005f7a:	b142      	cbz	r2, 8005f8e <__ascii_mbtowc+0x1a>
 8005f7c:	b14b      	cbz	r3, 8005f92 <__ascii_mbtowc+0x1e>
 8005f7e:	7813      	ldrb	r3, [r2, #0]
 8005f80:	600b      	str	r3, [r1, #0]
 8005f82:	7812      	ldrb	r2, [r2, #0]
 8005f84:	1e10      	subs	r0, r2, #0
 8005f86:	bf18      	it	ne
 8005f88:	2001      	movne	r0, #1
 8005f8a:	b002      	add	sp, #8
 8005f8c:	4770      	bx	lr
 8005f8e:	4610      	mov	r0, r2
 8005f90:	e7fb      	b.n	8005f8a <__ascii_mbtowc+0x16>
 8005f92:	f06f 0001 	mvn.w	r0, #1
 8005f96:	e7f8      	b.n	8005f8a <__ascii_mbtowc+0x16>

08005f98 <__malloc_lock>:
 8005f98:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <__malloc_lock+0x8>)
 8005f9a:	f7ff b838 	b.w	800500e <__retarget_lock_acquire_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	200002b8 	.word	0x200002b8

08005fa4 <__malloc_unlock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__malloc_unlock+0x8>)
 8005fa6:	f7ff b833 	b.w	8005010 <__retarget_lock_release_recursive>
 8005faa:	bf00      	nop
 8005fac:	200002b8 	.word	0x200002b8

08005fb0 <_read_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4d05      	ldr	r5, [pc, #20]	; (8005fd0 <_read_r+0x20>)
 8005fbc:	602a      	str	r2, [r5, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f7fb f837 	bl	8001032 <_read>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_read_r+0x1e>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_read_r+0x1e>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	200002c0 	.word	0x200002c0

08005fd4 <__ascii_wctomb>:
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	4608      	mov	r0, r1
 8005fd8:	b141      	cbz	r1, 8005fec <__ascii_wctomb+0x18>
 8005fda:	2aff      	cmp	r2, #255	; 0xff
 8005fdc:	d904      	bls.n	8005fe8 <__ascii_wctomb+0x14>
 8005fde:	228a      	movs	r2, #138	; 0x8a
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	4770      	bx	lr
 8005fe8:	2001      	movs	r0, #1
 8005fea:	700a      	strb	r2, [r1, #0]
 8005fec:	4770      	bx	lr

08005fee <abort>:
 8005fee:	2006      	movs	r0, #6
 8005ff0:	b508      	push	{r3, lr}
 8005ff2:	f000 f82b 	bl	800604c <raise>
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	f7fb f811 	bl	800101e <_exit>

08005ffc <_raise_r>:
 8005ffc:	291f      	cmp	r1, #31
 8005ffe:	b538      	push	{r3, r4, r5, lr}
 8006000:	4604      	mov	r4, r0
 8006002:	460d      	mov	r5, r1
 8006004:	d904      	bls.n	8006010 <_raise_r+0x14>
 8006006:	2316      	movs	r3, #22
 8006008:	6003      	str	r3, [r0, #0]
 800600a:	f04f 30ff 	mov.w	r0, #4294967295
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006012:	b112      	cbz	r2, 800601a <_raise_r+0x1e>
 8006014:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006018:	b94b      	cbnz	r3, 800602e <_raise_r+0x32>
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f830 	bl	8006080 <_getpid_r>
 8006020:	462a      	mov	r2, r5
 8006022:	4601      	mov	r1, r0
 8006024:	4620      	mov	r0, r4
 8006026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800602a:	f000 b817 	b.w	800605c <_kill_r>
 800602e:	2b01      	cmp	r3, #1
 8006030:	d00a      	beq.n	8006048 <_raise_r+0x4c>
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	d103      	bne.n	800603e <_raise_r+0x42>
 8006036:	2316      	movs	r3, #22
 8006038:	6003      	str	r3, [r0, #0]
 800603a:	2001      	movs	r0, #1
 800603c:	e7e7      	b.n	800600e <_raise_r+0x12>
 800603e:	2400      	movs	r4, #0
 8006040:	4628      	mov	r0, r5
 8006042:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006046:	4798      	blx	r3
 8006048:	2000      	movs	r0, #0
 800604a:	e7e0      	b.n	800600e <_raise_r+0x12>

0800604c <raise>:
 800604c:	4b02      	ldr	r3, [pc, #8]	; (8006058 <raise+0xc>)
 800604e:	4601      	mov	r1, r0
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	f7ff bfd3 	b.w	8005ffc <_raise_r>
 8006056:	bf00      	nop
 8006058:	2000000c 	.word	0x2000000c

0800605c <_kill_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	2300      	movs	r3, #0
 8006060:	4d06      	ldr	r5, [pc, #24]	; (800607c <_kill_r+0x20>)
 8006062:	4604      	mov	r4, r0
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	f7fa ffc8 	bl	8000ffe <_kill>
 800606e:	1c43      	adds	r3, r0, #1
 8006070:	d102      	bne.n	8006078 <_kill_r+0x1c>
 8006072:	682b      	ldr	r3, [r5, #0]
 8006074:	b103      	cbz	r3, 8006078 <_kill_r+0x1c>
 8006076:	6023      	str	r3, [r4, #0]
 8006078:	bd38      	pop	{r3, r4, r5, pc}
 800607a:	bf00      	nop
 800607c:	200002c0 	.word	0x200002c0

08006080 <_getpid_r>:
 8006080:	f7fa bfb6 	b.w	8000ff0 <_getpid>

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr
