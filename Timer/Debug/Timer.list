
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001828  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001a0c  08001a0c  00011a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a2c  08001a2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a2c  08001a2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a2c  08001a2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a2c  08001a2c  00011a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a30  08001a30  00011a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001a40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001a40  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000874b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016fd  00000000  00000000  00028780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00029e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001888c  00000000  00000000  0002b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a34e  00000000  00000000  00043904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d57  00000000  00000000  0004dc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df9a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f4  00000000  00000000  000df9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080019f4 	.word	0x080019f4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080019f4 	.word	0x080019f4

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <MX_GPIO_Init+0x5c>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a10      	ldr	r2, [pc, #64]	; (8000280 <MX_GPIO_Init+0x5c>)
 800023e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <MX_GPIO_Init+0x5c>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	211c      	movs	r1, #28
 8000254:	480b      	ldr	r0, [pc, #44]	; (8000284 <MX_GPIO_Init+0x60>)
 8000256:	f000 fcb3 	bl	8000bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800025a:	231c      	movs	r3, #28
 800025c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025e:	2301      	movs	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000262:	2301      	movs	r3, #1
 8000264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000266:	2302      	movs	r3, #2
 8000268:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800026a:	f107 0308 	add.w	r3, r7, #8
 800026e:	4619      	mov	r1, r3
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <MX_GPIO_Init+0x60>)
 8000272:	f000 fb11 	bl	8000898 <HAL_GPIO_Init>

}
 8000276:	bf00      	nop
 8000278:	3718      	adds	r7, #24
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000
 8000284:	40011800 	.word	0x40011800

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028c:	f000 f994 	bl	80005b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000290:	f000 f85c 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000294:	f7ff ffc6 	bl	8000224 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000298:	f000 f90c 	bl	80004b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800029c:	4812      	ldr	r0, [pc, #72]	; (80002e8 <main+0x60>)
 800029e:	f001 f8f9 	bl	8001494 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Timer_200m >= 2)
 80002a2:	4b12      	ldr	r3, [pc, #72]	; (80002ec <main+0x64>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d906      	bls.n	80002b8 <main+0x30>
	  {
	   	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80002aa:	2104      	movs	r1, #4
 80002ac:	4810      	ldr	r0, [pc, #64]	; (80002f0 <main+0x68>)
 80002ae:	f000 fc9f 	bl	8000bf0 <HAL_GPIO_TogglePin>
	   	 Timer_200m=0;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <main+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
	  }
	  if(Timer_500m >= 5)
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <main+0x6c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	d906      	bls.n	80002ce <main+0x46>
	  {
	  	 HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80002c0:	2108      	movs	r1, #8
 80002c2:	480b      	ldr	r0, [pc, #44]	; (80002f0 <main+0x68>)
 80002c4:	f000 fc94 	bl	8000bf0 <HAL_GPIO_TogglePin>
	  	 Timer_500m=0;
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <main+0x6c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	701a      	strb	r2, [r3, #0]
	  }
	  if(Timer_1000m >= 10)
 80002ce:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <main+0x70>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b09      	cmp	r3, #9
 80002d4:	d9e5      	bls.n	80002a2 <main+0x1a>
	  {
		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80002d6:	2110      	movs	r1, #16
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <main+0x68>)
 80002da:	f000 fc89 	bl	8000bf0 <HAL_GPIO_TogglePin>
		  Timer_1000m=0;
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <main+0x70>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
	  if(Timer_200m >= 2)
 80002e4:	e7dd      	b.n	80002a2 <main+0x1a>
 80002e6:	bf00      	nop
 80002e8:	2000002c 	.word	0x2000002c
 80002ec:	20000028 	.word	0x20000028
 80002f0:	40011800 	.word	0x40011800
 80002f4:	20000029 	.word	0x20000029
 80002f8:	2000002a 	.word	0x2000002a

080002fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief System Clock Configuration
  * @retval None
  */
// Interrupt Callback 함수
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
    if(htim -> Instance == TIM6)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a0c      	ldr	r2, [pc, #48]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d111      	bne.n	8000332 <HAL_TIM_PeriodElapsedCallback+0x36>
    {
    	Timer_200m++;
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	3301      	adds	r3, #1
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000318:	701a      	strb	r2, [r3, #0]
        Timer_500m++;
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	3301      	adds	r3, #1
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000324:	701a      	strb	r2, [r3, #0]
        Timer_1000m++;
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000330:	701a      	strb	r2, [r3, #0]
    }
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40001000 	.word	0x40001000
 8000340:	20000028 	.word	0x20000028
 8000344:	20000029 	.word	0x20000029
 8000348:	2000002a 	.word	0x2000002a

0800034c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b090      	sub	sp, #64	; 0x40
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0318 	add.w	r3, r7, #24
 8000356:	2228      	movs	r2, #40	; 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f001 fb42 	bl	80019e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800036e:	2301      	movs	r3, #1
 8000370:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000376:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037c:	2301      	movs	r3, #1
 800037e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000380:	2302      	movs	r3, #2
 8000382:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800038a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800038e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 0318 	add.w	r3, r7, #24
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fc45 	bl	8000c24 <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a0:	f000 f819 	bl	80003d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a8:	2302      	movs	r3, #2
 80003aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2102      	movs	r1, #2
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 feb0 	bl	8001124 <HAL_RCC_ClockConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ca:	f000 f804 	bl	80003d6 <Error_Handler>
  }
}
 80003ce:	bf00      	nop
 80003d0:	3740      	adds	r7, #64	; 0x40
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003da:	b672      	cpsid	i
}
 80003dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003de:	e7fe      	b.n	80003de <Error_Handler+0x8>

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a14      	ldr	r2, [pc, #80]	; (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_MspInit+0x60>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_MspInit+0x60>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40010000 	.word	0x40010000

08000444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <NMI_Handler+0x4>

0800044a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <HardFault_Handler+0x4>

08000450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <MemManage_Handler+0x4>

08000456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <BusFault_Handler+0x4>

0800045c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <UsageFault_Handler+0x4>

08000462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800048a:	f000 f8db 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <TIM6_IRQHandler+0x10>)
 800049a:	f001 f85b 	bl	8001554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000002c 	.word	0x2000002c

080004a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ba:	463b      	mov	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <MX_TIM6_Init+0x64>)
 80004c4:	4a15      	ldr	r2, [pc, #84]	; (800051c <MX_TIM6_Init+0x68>)
 80004c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 36000;
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <MX_TIM6_Init+0x64>)
 80004ca:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80004ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_TIM6_Init+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_TIM6_Init+0x64>)
 80004d8:	22c7      	movs	r2, #199	; 0xc7
 80004da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_TIM6_Init+0x64>)
 80004de:	2280      	movs	r2, #128	; 0x80
 80004e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004e2:	480d      	ldr	r0, [pc, #52]	; (8000518 <MX_TIM6_Init+0x64>)
 80004e4:	f000 ff86 	bl	80013f4 <HAL_TIM_Base_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80004ee:	f7ff ff72 	bl	80003d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	2300      	movs	r3, #0
 80004f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004fa:	463b      	mov	r3, r7
 80004fc:	4619      	mov	r1, r3
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <MX_TIM6_Init+0x64>)
 8000500:	f001 f9ce 	bl	80018a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800050a:	f7ff ff64 	bl	80003d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	2000002c 	.word	0x2000002c
 800051c:	40001000 	.word	0x40001000

08000520 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <HAL_TIM_Base_MspInit+0x44>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d113      	bne.n	800055a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <HAL_TIM_Base_MspInit+0x48>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <HAL_TIM_Base_MspInit+0x48>)
 8000538:	f043 0310 	orr.w	r3, r3, #16
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_TIM_Base_MspInit+0x48>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 0310 	and.w	r3, r3, #16
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2036      	movs	r0, #54	; 0x36
 8000550:	f000 f96b 	bl	800082a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000554:	2036      	movs	r0, #54	; 0x36
 8000556:	f000 f984 	bl	8000862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40001000 	.word	0x40001000
 8000568:	40021000 	.word	0x40021000

0800056c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800056c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800056e:	e003      	b.n	8000578 <LoopCopyDataInit>

08000570 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000572:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000574:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000576:	3104      	adds	r1, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000578:	480a      	ldr	r0, [pc, #40]	; (80005a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800057c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800057e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000580:	d3f6      	bcc.n	8000570 <CopyDataInit>
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000584:	e002      	b.n	800058c <LoopFillZerobss>

08000586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000588:	f842 3b04 	str.w	r3, [r2], #4

0800058c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800058e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000590:	d3f9      	bcc.n	8000586 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000592:	f7ff ff89 	bl	80004a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000596:	f001 fa01 	bl	800199c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff fe75 	bl	8000288 <main>
  bx lr
 800059e:	4770      	bx	lr
  ldr r3, =_sidata
 80005a0:	08001a34 	.word	0x08001a34
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80005ac:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80005b0:	20000078 	.word	0x20000078

080005b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_2_IRQHandler>
	...

080005b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x28>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_Init+0x28>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f923 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f7ff ff04 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40022000 	.word	0x40022000

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f93b 	bl	800087e <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f903 	bl	800082a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	20000008 	.word	0x20000008
 8000640:	20000004 	.word	0x20000004

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x20>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000008 	.word	0x20000008
 8000664:	20000074 	.word	0x20000074

08000668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000074 	.word	0x20000074

0800067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <__NVIC_GetPriorityGrouping+0x18>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	f003 0307 	and.w	r3, r3, #7
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db0b      	blt.n	800070a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f003 021f 	and.w	r2, r3, #31
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <__NVIC_EnableIRQ+0x34>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	095b      	lsrs	r3, r3, #5
 8000700:	2001      	movs	r0, #1
 8000702:	fa00 f202 	lsl.w	r2, r0, r2
 8000706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100

08000718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f1c3 0307 	rsb	r3, r3, #7
 8000786:	2b04      	cmp	r3, #4
 8000788:	bf28      	it	cs
 800078a:	2304      	movcs	r3, #4
 800078c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3304      	adds	r3, #4
 8000792:	2b06      	cmp	r3, #6
 8000794:	d902      	bls.n	800079c <NVIC_EncodePriority+0x30>
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3b03      	subs	r3, #3
 800079a:	e000      	b.n	800079e <NVIC_EncodePriority+0x32>
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a0:	f04f 32ff 	mov.w	r2, #4294967295
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43da      	mvns	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	401a      	ands	r2, r3
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43d9      	mvns	r1, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	4313      	orrs	r3, r2
         );
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3724      	adds	r7, #36	; 0x24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f7ff ff90 	bl	8000718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff2d 	bl	800067c <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff42 	bl	80006c4 <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff90 	bl	800076c <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5f 	bl	8000718 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff35 	bl	80006e0 <__NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffa2 	bl	80007d0 <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000898:	b480      	push	{r7}
 800089a:	b08b      	sub	sp, #44	; 0x2c
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008aa:	e179      	b.n	8000ba0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008ac:	2201      	movs	r2, #1
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	69fa      	ldr	r2, [r7, #28]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	f040 8168 	bne.w	8000b9a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	4aa0      	ldr	r2, [pc, #640]	; (8000b50 <HAL_GPIO_Init+0x2b8>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d05e      	beq.n	8000992 <HAL_GPIO_Init+0xfa>
 80008d4:	4a9e      	ldr	r2, [pc, #632]	; (8000b50 <HAL_GPIO_Init+0x2b8>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d875      	bhi.n	80009c6 <HAL_GPIO_Init+0x12e>
 80008da:	4a9e      	ldr	r2, [pc, #632]	; (8000b54 <HAL_GPIO_Init+0x2bc>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d058      	beq.n	8000992 <HAL_GPIO_Init+0xfa>
 80008e0:	4a9c      	ldr	r2, [pc, #624]	; (8000b54 <HAL_GPIO_Init+0x2bc>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d86f      	bhi.n	80009c6 <HAL_GPIO_Init+0x12e>
 80008e6:	4a9c      	ldr	r2, [pc, #624]	; (8000b58 <HAL_GPIO_Init+0x2c0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d052      	beq.n	8000992 <HAL_GPIO_Init+0xfa>
 80008ec:	4a9a      	ldr	r2, [pc, #616]	; (8000b58 <HAL_GPIO_Init+0x2c0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d869      	bhi.n	80009c6 <HAL_GPIO_Init+0x12e>
 80008f2:	4a9a      	ldr	r2, [pc, #616]	; (8000b5c <HAL_GPIO_Init+0x2c4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d04c      	beq.n	8000992 <HAL_GPIO_Init+0xfa>
 80008f8:	4a98      	ldr	r2, [pc, #608]	; (8000b5c <HAL_GPIO_Init+0x2c4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d863      	bhi.n	80009c6 <HAL_GPIO_Init+0x12e>
 80008fe:	4a98      	ldr	r2, [pc, #608]	; (8000b60 <HAL_GPIO_Init+0x2c8>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d046      	beq.n	8000992 <HAL_GPIO_Init+0xfa>
 8000904:	4a96      	ldr	r2, [pc, #600]	; (8000b60 <HAL_GPIO_Init+0x2c8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d85d      	bhi.n	80009c6 <HAL_GPIO_Init+0x12e>
 800090a:	2b12      	cmp	r3, #18
 800090c:	d82a      	bhi.n	8000964 <HAL_GPIO_Init+0xcc>
 800090e:	2b12      	cmp	r3, #18
 8000910:	d859      	bhi.n	80009c6 <HAL_GPIO_Init+0x12e>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <HAL_GPIO_Init+0x80>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000993 	.word	0x08000993
 800091c:	0800096d 	.word	0x0800096d
 8000920:	0800097f 	.word	0x0800097f
 8000924:	080009c1 	.word	0x080009c1
 8000928:	080009c7 	.word	0x080009c7
 800092c:	080009c7 	.word	0x080009c7
 8000930:	080009c7 	.word	0x080009c7
 8000934:	080009c7 	.word	0x080009c7
 8000938:	080009c7 	.word	0x080009c7
 800093c:	080009c7 	.word	0x080009c7
 8000940:	080009c7 	.word	0x080009c7
 8000944:	080009c7 	.word	0x080009c7
 8000948:	080009c7 	.word	0x080009c7
 800094c:	080009c7 	.word	0x080009c7
 8000950:	080009c7 	.word	0x080009c7
 8000954:	080009c7 	.word	0x080009c7
 8000958:	080009c7 	.word	0x080009c7
 800095c:	08000975 	.word	0x08000975
 8000960:	08000989 	.word	0x08000989
 8000964:	4a7f      	ldr	r2, [pc, #508]	; (8000b64 <HAL_GPIO_Init+0x2cc>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800096a:	e02c      	b.n	80009c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	623b      	str	r3, [r7, #32]
          break;
 8000972:	e029      	b.n	80009c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	3304      	adds	r3, #4
 800097a:	623b      	str	r3, [r7, #32]
          break;
 800097c:	e024      	b.n	80009c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	3308      	adds	r3, #8
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e01f      	b.n	80009c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	330c      	adds	r3, #12
 800098e:	623b      	str	r3, [r7, #32]
          break;
 8000990:	e01a      	b.n	80009c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d102      	bne.n	80009a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800099a:	2304      	movs	r3, #4
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e013      	b.n	80009c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d105      	bne.n	80009b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a8:	2308      	movs	r3, #8
 80009aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	611a      	str	r2, [r3, #16]
          break;
 80009b2:	e009      	b.n	80009c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b4:	2308      	movs	r3, #8
 80009b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	69fa      	ldr	r2, [r7, #28]
 80009bc:	615a      	str	r2, [r3, #20]
          break;
 80009be:	e003      	b.n	80009c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	e000      	b.n	80009c8 <HAL_GPIO_Init+0x130>
          break;
 80009c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	2bff      	cmp	r3, #255	; 0xff
 80009cc:	d801      	bhi.n	80009d2 <HAL_GPIO_Init+0x13a>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	e001      	b.n	80009d6 <HAL_GPIO_Init+0x13e>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3304      	adds	r3, #4
 80009d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	2bff      	cmp	r3, #255	; 0xff
 80009dc:	d802      	bhi.n	80009e4 <HAL_GPIO_Init+0x14c>
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	e002      	b.n	80009ea <HAL_GPIO_Init+0x152>
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	3b08      	subs	r3, #8
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	210f      	movs	r1, #15
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	401a      	ands	r2, r3
 80009fc:	6a39      	ldr	r1, [r7, #32]
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	431a      	orrs	r2, r3
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f000 80c1 	beq.w	8000b9a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a52      	ldr	r2, [pc, #328]	; (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b50      	ldr	r3, [pc, #320]	; (8000b68 <HAL_GPIO_Init+0x2d0>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a30:	4a4e      	ldr	r2, [pc, #312]	; (8000b6c <HAL_GPIO_Init+0x2d4>)
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	220f      	movs	r2, #15
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a46      	ldr	r2, [pc, #280]	; (8000b70 <HAL_GPIO_Init+0x2d8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d01f      	beq.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <HAL_GPIO_Init+0x2dc>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d019      	beq.n	8000a98 <HAL_GPIO_Init+0x200>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a44      	ldr	r2, [pc, #272]	; (8000b78 <HAL_GPIO_Init+0x2e0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d013      	beq.n	8000a94 <HAL_GPIO_Init+0x1fc>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a43      	ldr	r2, [pc, #268]	; (8000b7c <HAL_GPIO_Init+0x2e4>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d00d      	beq.n	8000a90 <HAL_GPIO_Init+0x1f8>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a42      	ldr	r2, [pc, #264]	; (8000b80 <HAL_GPIO_Init+0x2e8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d007      	beq.n	8000a8c <HAL_GPIO_Init+0x1f4>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a41      	ldr	r2, [pc, #260]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d101      	bne.n	8000a88 <HAL_GPIO_Init+0x1f0>
 8000a84:	2305      	movs	r3, #5
 8000a86:	e00a      	b.n	8000a9e <HAL_GPIO_Init+0x206>
 8000a88:	2306      	movs	r3, #6
 8000a8a:	e008      	b.n	8000a9e <HAL_GPIO_Init+0x206>
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	e006      	b.n	8000a9e <HAL_GPIO_Init+0x206>
 8000a90:	2303      	movs	r3, #3
 8000a92:	e004      	b.n	8000a9e <HAL_GPIO_Init+0x206>
 8000a94:	2302      	movs	r3, #2
 8000a96:	e002      	b.n	8000a9e <HAL_GPIO_Init+0x206>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <HAL_GPIO_Init+0x206>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa0:	f002 0203 	and.w	r2, r2, #3
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	4093      	lsls	r3, r2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aae:	492f      	ldr	r1, [pc, #188]	; (8000b6c <HAL_GPIO_Init+0x2d4>)
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	492e      	ldr	r1, [pc, #184]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	600b      	str	r3, [r1, #0]
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	492a      	ldr	r1, [pc, #168]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d006      	beq.n	8000afe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4924      	ldr	r1, [pc, #144]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	604b      	str	r3, [r1, #4]
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4920      	ldr	r1, [pc, #128]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	491a      	ldr	r1, [pc, #104]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	608b      	str	r3, [r1, #8]
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4916      	ldr	r1, [pc, #88]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d025      	beq.n	8000b8c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	4910      	ldr	r1, [pc, #64]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60cb      	str	r3, [r1, #12]
 8000b4c:	e025      	b.n	8000b9a <HAL_GPIO_Init+0x302>
 8000b4e:	bf00      	nop
 8000b50:	10320000 	.word	0x10320000
 8000b54:	10310000 	.word	0x10310000
 8000b58:	10220000 	.word	0x10220000
 8000b5c:	10210000 	.word	0x10210000
 8000b60:	10120000 	.word	0x10120000
 8000b64:	10110000 	.word	0x10110000
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40011400 	.word	0x40011400
 8000b80:	40011800 	.word	0x40011800
 8000b84:	40011c00 	.word	0x40011c00
 8000b88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_GPIO_Init+0x324>)
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	4909      	ldr	r1, [pc, #36]	; (8000bbc <HAL_GPIO_Init+0x324>)
 8000b96:	4013      	ands	r3, r2
 8000b98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f47f ae7e 	bne.w	80008ac <HAL_GPIO_Init+0x14>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	372c      	adds	r7, #44	; 0x2c
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bd0:	787b      	ldrb	r3, [r7, #1]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bdc:	e003      	b.n	8000be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	041a      	lsls	r2, r3, #16
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	611a      	str	r2, [r3, #16]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4013      	ands	r3, r2
 8000c08:	041a      	lsls	r2, r3, #16
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43d9      	mvns	r1, r3
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	400b      	ands	r3, r1
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	611a      	str	r2, [r3, #16]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
	...

08000c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e26c      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 8087 	beq.w	8000d52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c44:	4b92      	ldr	r3, [pc, #584]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 030c 	and.w	r3, r3, #12
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d00c      	beq.n	8000c6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c50:	4b8f      	ldr	r3, [pc, #572]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 030c 	and.w	r3, r3, #12
 8000c58:	2b08      	cmp	r3, #8
 8000c5a:	d112      	bne.n	8000c82 <HAL_RCC_OscConfig+0x5e>
 8000c5c:	4b8c      	ldr	r3, [pc, #560]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c68:	d10b      	bne.n	8000c82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6a:	4b89      	ldr	r3, [pc, #548]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d06c      	beq.n	8000d50 <HAL_RCC_OscConfig+0x12c>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d168      	bne.n	8000d50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e246      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8a:	d106      	bne.n	8000c9a <HAL_RCC_OscConfig+0x76>
 8000c8c:	4b80      	ldr	r3, [pc, #512]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a7f      	ldr	r2, [pc, #508]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	e02e      	b.n	8000cf8 <HAL_RCC_OscConfig+0xd4>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x98>
 8000ca2:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a7a      	ldr	r2, [pc, #488]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b78      	ldr	r3, [pc, #480]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a77      	ldr	r2, [pc, #476]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e01d      	b.n	8000cf8 <HAL_RCC_OscConfig+0xd4>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc4:	d10c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0xbc>
 8000cc6:	4b72      	ldr	r3, [pc, #456]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a71      	ldr	r2, [pc, #452]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b6f      	ldr	r3, [pc, #444]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a6e      	ldr	r2, [pc, #440]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e00b      	b.n	8000cf8 <HAL_RCC_OscConfig+0xd4>
 8000ce0:	4b6b      	ldr	r3, [pc, #428]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a6a      	ldr	r2, [pc, #424]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b68      	ldr	r3, [pc, #416]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a67      	ldr	r2, [pc, #412]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d013      	beq.n	8000d28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff fcb2 	bl	8000668 <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d08:	f7ff fcae 	bl	8000668 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b64      	cmp	r3, #100	; 0x64
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e1fa      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0xe4>
 8000d26:	e014      	b.n	8000d52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d28:	f7ff fc9e 	bl	8000668 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d30:	f7ff fc9a 	bl	8000668 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b64      	cmp	r3, #100	; 0x64
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e1e6      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d42:	4b53      	ldr	r3, [pc, #332]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f0      	bne.n	8000d30 <HAL_RCC_OscConfig+0x10c>
 8000d4e:	e000      	b.n	8000d52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d063      	beq.n	8000e26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d5e:	4b4c      	ldr	r3, [pc, #304]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00b      	beq.n	8000d82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d6a:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d11c      	bne.n	8000db0 <HAL_RCC_OscConfig+0x18c>
 8000d76:	4b46      	ldr	r3, [pc, #280]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d116      	bne.n	8000db0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d82:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <HAL_RCC_OscConfig+0x176>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d001      	beq.n	8000d9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e1ba      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4939      	ldr	r1, [pc, #228]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	e03a      	b.n	8000e26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d020      	beq.n	8000dfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db8:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <HAL_RCC_OscConfig+0x270>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fc53 	bl	8000668 <HAL_GetTick>
 8000dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fc4f 	bl	8000668 <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e19b      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f0      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de4:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4927      	ldr	r1, [pc, #156]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	600b      	str	r3, [r1, #0]
 8000df8:	e015      	b.n	8000e26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dfa:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <HAL_RCC_OscConfig+0x270>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fc32 	bl	8000668 <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e08:	f7ff fc2e 	bl	8000668 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e17a      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d03a      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d019      	beq.n	8000e6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_RCC_OscConfig+0x274>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e40:	f7ff fc12 	bl	8000668 <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e48:	f7ff fc0e 	bl	8000668 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e15a      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f0      	beq.n	8000e48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f000 faa6 	bl	80013b8 <RCC_Delay>
 8000e6c:	e01c      	b.n	8000ea8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_RCC_OscConfig+0x274>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e74:	f7ff fbf8 	bl	8000668 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e7a:	e00f      	b.n	8000e9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fbf4 	bl	8000668 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d908      	bls.n	8000e9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e140      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	42420000 	.word	0x42420000
 8000e98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9c:	4b9e      	ldr	r3, [pc, #632]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1e9      	bne.n	8000e7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80a6 	beq.w	8001002 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eba:	4b97      	ldr	r3, [pc, #604]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10d      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b94      	ldr	r3, [pc, #592]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a93      	ldr	r2, [pc, #588]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	61d3      	str	r3, [r2, #28]
 8000ed2:	4b91      	ldr	r3, [pc, #580]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee2:	4b8e      	ldr	r3, [pc, #568]	; (800111c <HAL_RCC_OscConfig+0x4f8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d118      	bne.n	8000f20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eee:	4b8b      	ldr	r3, [pc, #556]	; (800111c <HAL_RCC_OscConfig+0x4f8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a8a      	ldr	r2, [pc, #552]	; (800111c <HAL_RCC_OscConfig+0x4f8>)
 8000ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fbb5 	bl	8000668 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f02:	f7ff fbb1 	bl	8000668 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b64      	cmp	r3, #100	; 0x64
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e0fd      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	4b81      	ldr	r3, [pc, #516]	; (800111c <HAL_RCC_OscConfig+0x4f8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d106      	bne.n	8000f36 <HAL_RCC_OscConfig+0x312>
 8000f28:	4b7b      	ldr	r3, [pc, #492]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4a7a      	ldr	r2, [pc, #488]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6213      	str	r3, [r2, #32]
 8000f34:	e02d      	b.n	8000f92 <HAL_RCC_OscConfig+0x36e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x334>
 8000f3e:	4b76      	ldr	r3, [pc, #472]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	4a75      	ldr	r2, [pc, #468]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	6213      	str	r3, [r2, #32]
 8000f4a:	4b73      	ldr	r3, [pc, #460]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4a72      	ldr	r2, [pc, #456]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	f023 0304 	bic.w	r3, r3, #4
 8000f54:	6213      	str	r3, [r2, #32]
 8000f56:	e01c      	b.n	8000f92 <HAL_RCC_OscConfig+0x36e>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	2b05      	cmp	r3, #5
 8000f5e:	d10c      	bne.n	8000f7a <HAL_RCC_OscConfig+0x356>
 8000f60:	4b6d      	ldr	r3, [pc, #436]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	4a6c      	ldr	r2, [pc, #432]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6213      	str	r3, [r2, #32]
 8000f6c:	4b6a      	ldr	r3, [pc, #424]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a69      	ldr	r2, [pc, #420]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6213      	str	r3, [r2, #32]
 8000f78:	e00b      	b.n	8000f92 <HAL_RCC_OscConfig+0x36e>
 8000f7a:	4b67      	ldr	r3, [pc, #412]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4a66      	ldr	r2, [pc, #408]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	6213      	str	r3, [r2, #32]
 8000f86:	4b64      	ldr	r3, [pc, #400]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a63      	ldr	r2, [pc, #396]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	f023 0304 	bic.w	r3, r3, #4
 8000f90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d015      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fb65 	bl	8000668 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa0:	e00a      	b.n	8000fb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa2:	f7ff fb61 	bl	8000668 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e0ab      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb8:	4b57      	ldr	r3, [pc, #348]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0ee      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x37e>
 8000fc4:	e014      	b.n	8000ff0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fb4f 	bl	8000668 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fcc:	e00a      	b.n	8000fe4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fce:	f7ff fb4b 	bl	8000668 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e095      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe4:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1ee      	bne.n	8000fce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d105      	bne.n	8001002 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ff6:	4b48      	ldr	r3, [pc, #288]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a47      	ldr	r2, [pc, #284]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8081 	beq.w	800110e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800100c:	4b42      	ldr	r3, [pc, #264]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d061      	beq.n	80010dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d146      	bne.n	80010ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001020:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <HAL_RCC_OscConfig+0x4fc>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fb1f 	bl	8000668 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fb1b 	bl	8000668 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e067      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001054:	d108      	bne.n	8001068 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	492d      	ldr	r1, [pc, #180]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a19      	ldr	r1, [r3, #32]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	430b      	orrs	r3, r1
 800107a:	4927      	ldr	r1, [pc, #156]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <HAL_RCC_OscConfig+0x4fc>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff faef 	bl	8000668 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108e:	f7ff faeb 	bl	8000668 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e037      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x46a>
 80010ac:	e02f      	b.n	800110e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_RCC_OscConfig+0x4fc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fad8 	bl	8000668 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010bc:	f7ff fad4 	bl	8000668 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e020      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x498>
 80010da:	e018      	b.n	800110e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e013      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_RCC_OscConfig+0x4f4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d106      	bne.n	800110a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001106:	429a      	cmp	r2, r3
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000
 800111c:	40007000 	.word	0x40007000
 8001120:	42420060 	.word	0x42420060

08001124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0d0      	b.n	80012da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001138:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <HAL_RCC_ClockConfig+0x1c0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d910      	bls.n	8001168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001146:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 0207 	bic.w	r2, r3, #7
 800114e:	4965      	ldr	r1, [pc, #404]	; (80012e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	4313      	orrs	r3, r2
 8001154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001156:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d001      	beq.n	8001168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0b8      	b.n	80012da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001180:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4a58      	ldr	r2, [pc, #352]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800118a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001198:	4b53      	ldr	r3, [pc, #332]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a4:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	494d      	ldr	r1, [pc, #308]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d040      	beq.n	8001244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d107      	bne.n	80011da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d115      	bne.n	8001202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e07f      	b.n	80012da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d107      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e073      	b.n	80012da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f2:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e06b      	b.n	80012da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001202:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f023 0203 	bic.w	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4936      	ldr	r1, [pc, #216]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001214:	f7ff fa28 	bl	8000668 <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121a:	e00a      	b.n	8001232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800121c:	f7ff fa24 	bl	8000668 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f241 3288 	movw	r2, #5000	; 0x1388
 800122a:	4293      	cmp	r3, r2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e053      	b.n	80012da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 020c 	and.w	r2, r3, #12
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	429a      	cmp	r2, r3
 8001242:	d1eb      	bne.n	800121c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d210      	bcs.n	8001274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 0207 	bic.w	r2, r3, #7
 800125a:	4922      	ldr	r1, [pc, #136]	; (80012e4 <HAL_RCC_ClockConfig+0x1c0>)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d001      	beq.n	8001274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e032      	b.n	80012da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	4916      	ldr	r1, [pc, #88]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	4313      	orrs	r3, r2
 8001290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d009      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	490e      	ldr	r1, [pc, #56]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012b2:	f000 f821 	bl	80012f8 <HAL_RCC_GetSysClockFreq>
 80012b6:	4602      	mov	r2, r0
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	490a      	ldr	r1, [pc, #40]	; (80012ec <HAL_RCC_ClockConfig+0x1c8>)
 80012c4:	5ccb      	ldrb	r3, [r1, r3]
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <HAL_RCC_ClockConfig+0x1cc>)
 80012cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_RCC_ClockConfig+0x1d0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f986 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40022000 	.word	0x40022000
 80012e8:	40021000 	.word	0x40021000
 80012ec:	08001a1c 	.word	0x08001a1c
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012f8:	b490      	push	{r4, r7}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001300:	1d3c      	adds	r4, r7, #4
 8001302:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001308:	f240 2301 	movw	r3, #513	; 0x201
 800130c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b04      	cmp	r3, #4
 8001330:	d002      	beq.n	8001338 <HAL_RCC_GetSysClockFreq+0x40>
 8001332:	2b08      	cmp	r3, #8
 8001334:	d003      	beq.n	800133e <HAL_RCC_GetSysClockFreq+0x46>
 8001336:	e02d      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800133a:	623b      	str	r3, [r7, #32]
      break;
 800133c:	e02d      	b.n	800139a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	0c9b      	lsrs	r3, r3, #18
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800134a:	4413      	add	r3, r2
 800134c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001350:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	0c5b      	lsrs	r3, r3, #17
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800136a:	4413      	add	r3, r2
 800136c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001370:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001376:	fb02 f203 	mul.w	r2, r2, r3
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
 8001382:	e004      	b.n	800138e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	623b      	str	r3, [r7, #32]
      break;
 8001392:	e002      	b.n	800139a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001396:	623b      	str	r3, [r7, #32]
      break;
 8001398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800139a:	6a3b      	ldr	r3, [r7, #32]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc90      	pop	{r4, r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	08001a0c 	.word	0x08001a0c
 80013ac:	40021000 	.word	0x40021000
 80013b0:	007a1200 	.word	0x007a1200
 80013b4:	003d0900 	.word	0x003d0900

080013b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <RCC_Delay+0x34>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <RCC_Delay+0x38>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0a5b      	lsrs	r3, r3, #9
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013d4:	bf00      	nop
  }
  while (Delay --);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	60fa      	str	r2, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f9      	bne.n	80013d4 <RCC_Delay+0x1c>
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000000 	.word	0x20000000
 80013f0:	10624dd3 	.word	0x10624dd3

080013f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e041      	b.n	800148a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff f880 	bl	8000520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3304      	adds	r3, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f000 f9ba 	bl	80017ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d001      	beq.n	80014ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e044      	b.n	8001536 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0201 	orr.w	r2, r2, #1
 80014c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_TIM_Base_Start_IT+0xac>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d018      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x6c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <HAL_TIM_Base_Start_IT+0xb0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d013      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x6c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d00e      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x6c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_TIM_Base_Start_IT+0xb4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d009      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x6c>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <HAL_TIM_Base_Start_IT+0xb8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d004      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x6c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_TIM_Base_Start_IT+0xbc>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d111      	bne.n	8001524 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b06      	cmp	r3, #6
 8001510:	d010      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001522:	e007      	b.n	8001534 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40012c00 	.word	0x40012c00
 8001544:	40013400 	.word	0x40013400
 8001548:	40000400 	.word	0x40000400
 800154c:	40000800 	.word	0x40000800
 8001550:	40000c00 	.word	0x40000c00

08001554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b02      	cmp	r3, #2
 8001568:	d122      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b02      	cmp	r3, #2
 8001576:	d11b      	bne.n	80015b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0202 	mvn.w	r2, #2
 8001580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f8ed 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 800159c:	e005      	b.n	80015aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8e0 	bl	8001764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f8ef 	bl	8001788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d122      	bne.n	8001604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d11b      	bne.n	8001604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0204 	mvn.w	r2, #4
 80015d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2202      	movs	r2, #2
 80015da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f8c3 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 80015f0:	e005      	b.n	80015fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f8b6 	bl	8001764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f8c5 	bl	8001788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b08      	cmp	r3, #8
 8001610:	d122      	bne.n	8001658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b08      	cmp	r3, #8
 800161e:	d11b      	bne.n	8001658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0208 	mvn.w	r2, #8
 8001628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2204      	movs	r2, #4
 800162e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f899 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 8001644:	e005      	b.n	8001652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f88c 	bl	8001764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f89b 	bl	8001788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b10      	cmp	r3, #16
 8001664:	d122      	bne.n	80016ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b10      	cmp	r3, #16
 8001672:	d11b      	bne.n	80016ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0210 	mvn.w	r2, #16
 800167c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2208      	movs	r2, #8
 8001682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f86f 	bl	8001776 <HAL_TIM_IC_CaptureCallback>
 8001698:	e005      	b.n	80016a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f862 	bl	8001764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f871 	bl	8001788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d10e      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d107      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f06f 0201 	mvn.w	r2, #1
 80016d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7fe fe12 	bl	80002fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e2:	2b80      	cmp	r3, #128	; 0x80
 80016e4:	d10e      	bne.n	8001704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f0:	2b80      	cmp	r3, #128	; 0x80
 80016f2:	d107      	bne.n	8001704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f943 	bl	800198a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d10e      	bne.n	8001730 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171c:	2b40      	cmp	r3, #64	; 0x40
 800171e:	d107      	bne.n	8001730 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f835 	bl	800179a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	2b20      	cmp	r3, #32
 800173c:	d10e      	bne.n	800175c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	2b20      	cmp	r3, #32
 800174a:	d107      	bne.n	800175c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0220 	mvn.w	r2, #32
 8001754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f90e 	bl	8001978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a33      	ldr	r2, [pc, #204]	; (800188c <TIM_Base_SetConfig+0xe0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d013      	beq.n	80017ec <TIM_Base_SetConfig+0x40>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a32      	ldr	r2, [pc, #200]	; (8001890 <TIM_Base_SetConfig+0xe4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00f      	beq.n	80017ec <TIM_Base_SetConfig+0x40>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d2:	d00b      	beq.n	80017ec <TIM_Base_SetConfig+0x40>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a2f      	ldr	r2, [pc, #188]	; (8001894 <TIM_Base_SetConfig+0xe8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d007      	beq.n	80017ec <TIM_Base_SetConfig+0x40>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a2e      	ldr	r2, [pc, #184]	; (8001898 <TIM_Base_SetConfig+0xec>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d003      	beq.n	80017ec <TIM_Base_SetConfig+0x40>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a2d      	ldr	r2, [pc, #180]	; (800189c <TIM_Base_SetConfig+0xf0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d108      	bne.n	80017fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a22      	ldr	r2, [pc, #136]	; (800188c <TIM_Base_SetConfig+0xe0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <TIM_Base_SetConfig+0x82>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a21      	ldr	r2, [pc, #132]	; (8001890 <TIM_Base_SetConfig+0xe4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00f      	beq.n	800182e <TIM_Base_SetConfig+0x82>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d00b      	beq.n	800182e <TIM_Base_SetConfig+0x82>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <TIM_Base_SetConfig+0xe8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <TIM_Base_SetConfig+0x82>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <TIM_Base_SetConfig+0xec>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d003      	beq.n	800182e <TIM_Base_SetConfig+0x82>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a1c      	ldr	r2, [pc, #112]	; (800189c <TIM_Base_SetConfig+0xf0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d108      	bne.n	8001840 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <TIM_Base_SetConfig+0xe0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d003      	beq.n	8001874 <TIM_Base_SetConfig+0xc8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <TIM_Base_SetConfig+0xe4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d103      	bne.n	800187c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	615a      	str	r2, [r3, #20]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40012c00 	.word	0x40012c00
 8001890:	40013400 	.word	0x40013400
 8001894:	40000400 	.word	0x40000400
 8001898:	40000800 	.word	0x40000800
 800189c:	40000c00 	.word	0x40000c00

080018a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e050      	b.n	800195a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d018      	beq.n	800192e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a19      	ldr	r2, [pc, #100]	; (8001968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190e:	d00e      	beq.n	800192e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a15      	ldr	r2, [pc, #84]	; (800196c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d009      	beq.n	800192e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d004      	beq.n	800192e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10c      	bne.n	8001948 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	4313      	orrs	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	40012c00 	.word	0x40012c00
 8001968:	40013400 	.word	0x40013400
 800196c:	40000400 	.word	0x40000400
 8001970:	40000800 	.word	0x40000800
 8001974:	40000c00 	.word	0x40000c00

08001978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <__libc_init_array>:
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	2600      	movs	r6, #0
 80019a0:	4d0c      	ldr	r5, [pc, #48]	; (80019d4 <__libc_init_array+0x38>)
 80019a2:	4c0d      	ldr	r4, [pc, #52]	; (80019d8 <__libc_init_array+0x3c>)
 80019a4:	1b64      	subs	r4, r4, r5
 80019a6:	10a4      	asrs	r4, r4, #2
 80019a8:	42a6      	cmp	r6, r4
 80019aa:	d109      	bne.n	80019c0 <__libc_init_array+0x24>
 80019ac:	f000 f822 	bl	80019f4 <_init>
 80019b0:	2600      	movs	r6, #0
 80019b2:	4d0a      	ldr	r5, [pc, #40]	; (80019dc <__libc_init_array+0x40>)
 80019b4:	4c0a      	ldr	r4, [pc, #40]	; (80019e0 <__libc_init_array+0x44>)
 80019b6:	1b64      	subs	r4, r4, r5
 80019b8:	10a4      	asrs	r4, r4, #2
 80019ba:	42a6      	cmp	r6, r4
 80019bc:	d105      	bne.n	80019ca <__libc_init_array+0x2e>
 80019be:	bd70      	pop	{r4, r5, r6, pc}
 80019c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c4:	4798      	blx	r3
 80019c6:	3601      	adds	r6, #1
 80019c8:	e7ee      	b.n	80019a8 <__libc_init_array+0xc>
 80019ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ce:	4798      	blx	r3
 80019d0:	3601      	adds	r6, #1
 80019d2:	e7f2      	b.n	80019ba <__libc_init_array+0x1e>
 80019d4:	08001a2c 	.word	0x08001a2c
 80019d8:	08001a2c 	.word	0x08001a2c
 80019dc:	08001a2c 	.word	0x08001a2c
 80019e0:	08001a30 	.word	0x08001a30

080019e4 <memset>:
 80019e4:	4603      	mov	r3, r0
 80019e6:	4402      	add	r2, r0
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d100      	bne.n	80019ee <memset+0xa>
 80019ec:	4770      	bx	lr
 80019ee:	f803 1b01 	strb.w	r1, [r3], #1
 80019f2:	e7f9      	b.n	80019e8 <memset+0x4>

080019f4 <_init>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	bf00      	nop
 80019f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fa:	bc08      	pop	{r3}
 80019fc:	469e      	mov	lr, r3
 80019fe:	4770      	bx	lr

08001a00 <_fini>:
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	bf00      	nop
 8001a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a06:	bc08      	pop	{r3}
 8001a08:	469e      	mov	lr, r3
 8001a0a:	4770      	bx	lr
