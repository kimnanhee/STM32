
UART_print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052cc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080054b8  080054b8  000154b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ec  080058ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080058ec  080058ec  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058ec  080058ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080058f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001dc  08005ad0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08005ad0  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008258  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b45  00000000  00000000  0002845d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00029fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002a6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e5a  00000000  00000000  0002ad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b79  00000000  00000000  00044baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917dc  00000000  00000000  0004d723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000deeff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c1c  00000000  00000000  000def54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	0800549c 	.word	0x0800549c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	0800549c 	.word	0x0800549c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_GPIO_Init+0x28>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <MX_GPIO_Init+0x28>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <MX_GPIO_Init+0x28>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40021000 	.word	0x40021000

08000b8c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)  //for printf
#endif
PUTCHAR_PROTOTYPE
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000b94:	1d39      	adds	r1, r7, #4
 8000b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <__io_putchar+0x20>)
 8000b9e:	f001 faf8 	bl	8002192 <HAL_UART_Transmit>
  return ch;
 8000ba2:	687b      	ldr	r3, [r7, #4]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000204 	.word	0x20000204

08000bb0 <main>:
int main(void)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	unsigned char Tx_Buffer[5] = {'H', 'e', 'l', 'l', 'o'};
 8000bb6:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <main+0x6c>)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bbe:	6018      	str	r0, [r3, #0]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	7019      	strb	r1, [r3, #0]
	unsigned char value_int = 200;
 8000bc4:	23c8      	movs	r3, #200	; 0xc8
 8000bc6:	73fb      	strb	r3, [r7, #15]
	float value_float = 12.3456;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <main+0x70>)
 8000bca:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 fa4a 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f830 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f7ff ffc4 	bl	8000b60 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bd8:	f000 f9a0 	bl	8000f1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <main+0x74>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6898      	ldr	r0, [r3, #8]
 8000be2:	2300      	movs	r3, #0
 8000be4:	2202      	movs	r2, #2
 8000be6:	2100      	movs	r1, #0
 8000be8:	f002 fb1c 	bl	8003224 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Start Send data : ");
 8000bec:	480e      	ldr	r0, [pc, #56]	; (8000c28 <main+0x78>)
 8000bee:	f002 fb01 	bl	80031f4 <iprintf>
	  HAL_UART_Transmit(&huart1, Tx_Buffer, 5, 2);
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <main+0x7c>)
 8000bfa:	f001 faca 	bl	8002192 <HAL_UART_Transmit>
	  printf(" %d, %f     ", value_int, value_float);
 8000bfe:	7bfc      	ldrb	r4, [r7, #15]
 8000c00:	68b8      	ldr	r0, [r7, #8]
 8000c02:	f7ff fc7d 	bl	8000500 <__aeabi_f2d>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4621      	mov	r1, r4
 8000c0c:	4808      	ldr	r0, [pc, #32]	; (8000c30 <main+0x80>)
 8000c0e:	f002 faf1 	bl	80031f4 <iprintf>
	  HAL_Delay(1000);
 8000c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c16:	f000 fa87 	bl	8001128 <HAL_Delay>
	  printf("Start Send data : ");
 8000c1a:	e7e7      	b.n	8000bec <main+0x3c>
 8000c1c:	080054dc 	.word	0x080054dc
 8000c20:	41458794 	.word	0x41458794
 8000c24:	2000000c 	.word	0x2000000c
 8000c28:	080054b8 	.word	0x080054b8
 8000c2c:	20000204 	.word	0x20000204
 8000c30:	080054cc 	.word	0x080054cc

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b090      	sub	sp, #64	; 0x40
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	2228      	movs	r2, #40	; 0x28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fe6e 	bl	8002924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c72:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fe21 	bl	80018c4 <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c88:	f000 f819 	bl	8000cbe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 f88c 	bl	8001dc4 <HAL_RCC_ClockConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cb2:	f000 f804 	bl	8000cbe <Error_Handler>
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	3740      	adds	r7, #64	; 0x40
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc2:	b672      	cpsid	i
}
 8000cc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <Error_Handler+0x8>

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x5c>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_MspInit+0x60>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_MspInit+0x60>)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010000 	.word	0x40010000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d72:	f000 f9bd 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <USART1_IRQHandler+0x10>)
 8000d82:	f001 fa99 	bl	80022b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000204 	.word	0x20000204

08000d90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	return 1;
 8000d94:	2301      	movs	r3, #1
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <_kill>:

int _kill(int pid, int sig)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000da8:	f001 fd92 	bl	80028d0 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2216      	movs	r2, #22
 8000db0:	601a      	str	r2, [r3, #0]
	return -1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_exit>:

void _exit (int status)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffe7 	bl	8000d9e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dd0:	e7fe      	b.n	8000dd0 <_exit+0x12>

08000dd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e00a      	b.n	8000dfa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000de4:	f3af 8000 	nop.w
 8000de8:	4601      	mov	r1, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1c5a      	adds	r2, r3, #1
 8000dee:	60ba      	str	r2, [r7, #8]
 8000df0:	b2ca      	uxtb	r2, r1
 8000df2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dbf0      	blt.n	8000de4 <_read+0x12>
	}

return len;
 8000e02:	687b      	ldr	r3, [r7, #4]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e009      	b.n	8000e32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff feb0 	bl	8000b8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dbf1      	blt.n	8000e1e <_write+0x12>
	}
	return len;
 8000e3a:	687b      	ldr	r3, [r7, #4]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_close>:

int _close(int file)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	return -1;
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <_isatty>:

int _isatty(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return 1;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
	return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f001 fcfc 	bl	80028d0 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000c000 	.word	0x2000c000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	200001f8 	.word	0x200001f8
 8000f0c:	20000258 	.word	0x20000258

08000f10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_USART1_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_USART1_UART_Init+0x4c>)
 8000f54:	f001 f8d0 	bl	80020f8 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f7ff feae 	bl	8000cbe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000204 	.word	0x20000204
 8000f6c:	40013800 	.word	0x40013800

08000f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a20      	ldr	r2, [pc, #128]	; (800100c <HAL_UART_MspInit+0x9c>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d139      	bne.n	8001004 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <HAL_UART_MspInit+0xa0>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <HAL_UART_MspInit+0xa0>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <HAL_UART_MspInit+0xa0>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_UART_MspInit+0xa0>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a18      	ldr	r2, [pc, #96]	; (8001010 <HAL_UART_MspInit+0xa0>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <HAL_UART_MspInit+0xa0>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480f      	ldr	r0, [pc, #60]	; (8001014 <HAL_UART_MspInit+0xa4>)
 8000fd6:	f000 fae1 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4619      	mov	r1, r3
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <HAL_UART_MspInit+0xa4>)
 8000ff0:	f000 fad4 	bl	800159c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2025      	movs	r0, #37	; 0x25
 8000ffa:	f000 f990 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ffe:	2025      	movs	r0, #37	; 0x25
 8001000:	f000 f9a9 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40013800 	.word	0x40013800
 8001010:	40021000 	.word	0x40021000
 8001014:	40010800 	.word	0x40010800

08001018 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001018:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800101a:	e003      	b.n	8001024 <LoopCopyDataInit>

0800101c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800101e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001020:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001022:	3104      	adds	r1, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001028:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800102a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800102c:	d3f6      	bcc.n	800101c <CopyDataInit>
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001030:	e002      	b.n	8001038 <LoopFillZerobss>

08001032 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001034:	f842 3b04 	str.w	r3, [r2], #4

08001038 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800103a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800103c:	d3f9      	bcc.n	8001032 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800103e:	f7ff ff67 	bl	8000f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f001 fc4b 	bl	80028dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001046:	f7ff fdb3 	bl	8000bb0 <main>
  bx lr
 800104a:	4770      	bx	lr
  ldr r3, =_sidata
 800104c:	080058f4 	.word	0x080058f4
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001054:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001058:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800105c:	20000258 	.word	0x20000258

08001060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC1_2_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_Init+0x28>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_Init+0x28>)
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 f947 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f808 	bl	8001090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001080:	f7ff fe22 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40022000 	.word	0x40022000

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x54>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x58>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f95f 	bl	8001372 <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f927 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <HAL_InitTick+0x5c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x1c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_IncTick+0x20>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a03      	ldr	r2, [pc, #12]	; (8001110 <HAL_IncTick+0x20>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	20000008 	.word	0x20000008
 8001110:	20000244 	.word	0x20000244

08001114 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b02      	ldr	r3, [pc, #8]	; (8001124 <HAL_GetTick+0x10>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	20000244 	.word	0x20000244

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff fff0 	bl	8001114 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffe0 	bl	8001114 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4906      	ldr	r1, [pc, #24]	; (8001208 <__NVIC_EnableIRQ+0x34>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff90 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff2d 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff42 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff90 	bl	8001260 <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5f 	bl	800120c <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff35 	bl	80011d4 <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d005      	beq.n	80013ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2204      	movs	r2, #4
 80013a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e0d6      	b.n	800155c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020e 	bic.w	r2, r2, #14
 80013bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b64      	ldr	r3, [pc, #400]	; (8001568 <HAL_DMA_Abort_IT+0x1dc>)
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d958      	bls.n	800148c <HAL_DMA_Abort_IT+0x100>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_DMA_Abort_IT+0x1e0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d04f      	beq.n	8001484 <HAL_DMA_Abort_IT+0xf8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a61      	ldr	r2, [pc, #388]	; (8001570 <HAL_DMA_Abort_IT+0x1e4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d048      	beq.n	8001480 <HAL_DMA_Abort_IT+0xf4>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_DMA_Abort_IT+0x1e8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d040      	beq.n	800147a <HAL_DMA_Abort_IT+0xee>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a5e      	ldr	r2, [pc, #376]	; (8001578 <HAL_DMA_Abort_IT+0x1ec>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d038      	beq.n	8001474 <HAL_DMA_Abort_IT+0xe8>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a5d      	ldr	r2, [pc, #372]	; (800157c <HAL_DMA_Abort_IT+0x1f0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d030      	beq.n	800146e <HAL_DMA_Abort_IT+0xe2>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a5b      	ldr	r2, [pc, #364]	; (8001580 <HAL_DMA_Abort_IT+0x1f4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d028      	beq.n	8001468 <HAL_DMA_Abort_IT+0xdc>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a53      	ldr	r2, [pc, #332]	; (8001568 <HAL_DMA_Abort_IT+0x1dc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d020      	beq.n	8001462 <HAL_DMA_Abort_IT+0xd6>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a57      	ldr	r2, [pc, #348]	; (8001584 <HAL_DMA_Abort_IT+0x1f8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_DMA_Abort_IT+0xd2>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a56      	ldr	r2, [pc, #344]	; (8001588 <HAL_DMA_Abort_IT+0x1fc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d012      	beq.n	800145a <HAL_DMA_Abort_IT+0xce>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a54      	ldr	r2, [pc, #336]	; (800158c <HAL_DMA_Abort_IT+0x200>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00a      	beq.n	8001454 <HAL_DMA_Abort_IT+0xc8>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a53      	ldr	r2, [pc, #332]	; (8001590 <HAL_DMA_Abort_IT+0x204>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d102      	bne.n	800144e <HAL_DMA_Abort_IT+0xc2>
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	e01b      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 800144e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001452:	e018      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 8001454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001458:	e015      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 800145a:	2310      	movs	r3, #16
 800145c:	e013      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 800145e:	2301      	movs	r3, #1
 8001460:	e011      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 8001462:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001466:	e00e      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 8001468:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800146c:	e00b      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 800146e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001472:	e008      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	e005      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 800147a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147e:	e002      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 8001480:	2310      	movs	r3, #16
 8001482:	e000      	b.n	8001486 <HAL_DMA_Abort_IT+0xfa>
 8001484:	2301      	movs	r3, #1
 8001486:	4a43      	ldr	r2, [pc, #268]	; (8001594 <HAL_DMA_Abort_IT+0x208>)
 8001488:	6053      	str	r3, [r2, #4]
 800148a:	e057      	b.n	800153c <HAL_DMA_Abort_IT+0x1b0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a36      	ldr	r2, [pc, #216]	; (800156c <HAL_DMA_Abort_IT+0x1e0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d04f      	beq.n	8001536 <HAL_DMA_Abort_IT+0x1aa>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a35      	ldr	r2, [pc, #212]	; (8001570 <HAL_DMA_Abort_IT+0x1e4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d048      	beq.n	8001532 <HAL_DMA_Abort_IT+0x1a6>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a33      	ldr	r2, [pc, #204]	; (8001574 <HAL_DMA_Abort_IT+0x1e8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d040      	beq.n	800152c <HAL_DMA_Abort_IT+0x1a0>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a32      	ldr	r2, [pc, #200]	; (8001578 <HAL_DMA_Abort_IT+0x1ec>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d038      	beq.n	8001526 <HAL_DMA_Abort_IT+0x19a>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_DMA_Abort_IT+0x1f0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d030      	beq.n	8001520 <HAL_DMA_Abort_IT+0x194>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a2f      	ldr	r2, [pc, #188]	; (8001580 <HAL_DMA_Abort_IT+0x1f4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d028      	beq.n	800151a <HAL_DMA_Abort_IT+0x18e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a26      	ldr	r2, [pc, #152]	; (8001568 <HAL_DMA_Abort_IT+0x1dc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d020      	beq.n	8001514 <HAL_DMA_Abort_IT+0x188>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <HAL_DMA_Abort_IT+0x1f8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d019      	beq.n	8001510 <HAL_DMA_Abort_IT+0x184>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a29      	ldr	r2, [pc, #164]	; (8001588 <HAL_DMA_Abort_IT+0x1fc>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d012      	beq.n	800150c <HAL_DMA_Abort_IT+0x180>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_DMA_Abort_IT+0x200>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00a      	beq.n	8001506 <HAL_DMA_Abort_IT+0x17a>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_DMA_Abort_IT+0x204>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d102      	bne.n	8001500 <HAL_DMA_Abort_IT+0x174>
 80014fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fe:	e01b      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	e018      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 8001506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150a:	e015      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 800150c:	2310      	movs	r3, #16
 800150e:	e013      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 8001510:	2301      	movs	r3, #1
 8001512:	e011      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 8001514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001518:	e00e      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 800151a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800151e:	e00b      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 8001520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001524:	e008      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	e005      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 800152c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001530:	e002      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 8001532:	2310      	movs	r3, #16
 8001534:	e000      	b.n	8001538 <HAL_DMA_Abort_IT+0x1ac>
 8001536:	2301      	movs	r3, #1
 8001538:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_DMA_Abort_IT+0x20c>)
 800153a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
    } 
  }
  return status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020080 	.word	0x40020080
 800156c:	40020008 	.word	0x40020008
 8001570:	4002001c 	.word	0x4002001c
 8001574:	40020030 	.word	0x40020030
 8001578:	40020044 	.word	0x40020044
 800157c:	40020058 	.word	0x40020058
 8001580:	4002006c 	.word	0x4002006c
 8001584:	40020408 	.word	0x40020408
 8001588:	4002041c 	.word	0x4002041c
 800158c:	40020430 	.word	0x40020430
 8001590:	40020444 	.word	0x40020444
 8001594:	40020400 	.word	0x40020400
 8001598:	40020000 	.word	0x40020000

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b08b      	sub	sp, #44	; 0x2c
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ae:	e179      	b.n	80018a4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015b0:	2201      	movs	r2, #1
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	f040 8168 	bne.w	800189e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4aa0      	ldr	r2, [pc, #640]	; (8001854 <HAL_GPIO_Init+0x2b8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d05e      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 80015d8:	4a9e      	ldr	r2, [pc, #632]	; (8001854 <HAL_GPIO_Init+0x2b8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d875      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 80015de:	4a9e      	ldr	r2, [pc, #632]	; (8001858 <HAL_GPIO_Init+0x2bc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d058      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 80015e4:	4a9c      	ldr	r2, [pc, #624]	; (8001858 <HAL_GPIO_Init+0x2bc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d86f      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 80015ea:	4a9c      	ldr	r2, [pc, #624]	; (800185c <HAL_GPIO_Init+0x2c0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d052      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 80015f0:	4a9a      	ldr	r2, [pc, #616]	; (800185c <HAL_GPIO_Init+0x2c0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d869      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 80015f6:	4a9a      	ldr	r2, [pc, #616]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d04c      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 80015fc:	4a98      	ldr	r2, [pc, #608]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d863      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 8001602:	4a98      	ldr	r2, [pc, #608]	; (8001864 <HAL_GPIO_Init+0x2c8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d046      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 8001608:	4a96      	ldr	r2, [pc, #600]	; (8001864 <HAL_GPIO_Init+0x2c8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d85d      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 800160e:	2b12      	cmp	r3, #18
 8001610:	d82a      	bhi.n	8001668 <HAL_GPIO_Init+0xcc>
 8001612:	2b12      	cmp	r3, #18
 8001614:	d859      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 8001616:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_GPIO_Init+0x80>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	08001697 	.word	0x08001697
 8001620:	08001671 	.word	0x08001671
 8001624:	08001683 	.word	0x08001683
 8001628:	080016c5 	.word	0x080016c5
 800162c:	080016cb 	.word	0x080016cb
 8001630:	080016cb 	.word	0x080016cb
 8001634:	080016cb 	.word	0x080016cb
 8001638:	080016cb 	.word	0x080016cb
 800163c:	080016cb 	.word	0x080016cb
 8001640:	080016cb 	.word	0x080016cb
 8001644:	080016cb 	.word	0x080016cb
 8001648:	080016cb 	.word	0x080016cb
 800164c:	080016cb 	.word	0x080016cb
 8001650:	080016cb 	.word	0x080016cb
 8001654:	080016cb 	.word	0x080016cb
 8001658:	080016cb 	.word	0x080016cb
 800165c:	080016cb 	.word	0x080016cb
 8001660:	08001679 	.word	0x08001679
 8001664:	0800168d 	.word	0x0800168d
 8001668:	4a7f      	ldr	r2, [pc, #508]	; (8001868 <HAL_GPIO_Init+0x2cc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800166e:	e02c      	b.n	80016ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	623b      	str	r3, [r7, #32]
          break;
 8001676:	e029      	b.n	80016cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	3304      	adds	r3, #4
 800167e:	623b      	str	r3, [r7, #32]
          break;
 8001680:	e024      	b.n	80016cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	3308      	adds	r3, #8
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e01f      	b.n	80016cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	330c      	adds	r3, #12
 8001692:	623b      	str	r3, [r7, #32]
          break;
 8001694:	e01a      	b.n	80016cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800169e:	2304      	movs	r3, #4
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e013      	b.n	80016cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d105      	bne.n	80016b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ac:	2308      	movs	r3, #8
 80016ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	611a      	str	r2, [r3, #16]
          break;
 80016b6:	e009      	b.n	80016cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b8:	2308      	movs	r3, #8
 80016ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	615a      	str	r2, [r3, #20]
          break;
 80016c2:	e003      	b.n	80016cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x130>
          break;
 80016ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2bff      	cmp	r3, #255	; 0xff
 80016d0:	d801      	bhi.n	80016d6 <HAL_GPIO_Init+0x13a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	e001      	b.n	80016da <HAL_GPIO_Init+0x13e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3304      	adds	r3, #4
 80016da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	d802      	bhi.n	80016e8 <HAL_GPIO_Init+0x14c>
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	e002      	b.n	80016ee <HAL_GPIO_Init+0x152>
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3b08      	subs	r3, #8
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	210f      	movs	r1, #15
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	401a      	ands	r2, r3
 8001700:	6a39      	ldr	r1, [r7, #32]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	431a      	orrs	r2, r3
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80c1 	beq.w	800189e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_GPIO_Init+0x2d0>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_GPIO_Init+0x2d0>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_GPIO_Init+0x2d0>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001734:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <HAL_GPIO_Init+0x2d4>)
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a46      	ldr	r2, [pc, #280]	; (8001874 <HAL_GPIO_Init+0x2d8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d01f      	beq.n	80017a0 <HAL_GPIO_Init+0x204>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a45      	ldr	r2, [pc, #276]	; (8001878 <HAL_GPIO_Init+0x2dc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d019      	beq.n	800179c <HAL_GPIO_Init+0x200>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a44      	ldr	r2, [pc, #272]	; (800187c <HAL_GPIO_Init+0x2e0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d013      	beq.n	8001798 <HAL_GPIO_Init+0x1fc>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a43      	ldr	r2, [pc, #268]	; (8001880 <HAL_GPIO_Init+0x2e4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00d      	beq.n	8001794 <HAL_GPIO_Init+0x1f8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a42      	ldr	r2, [pc, #264]	; (8001884 <HAL_GPIO_Init+0x2e8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x1f4>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a41      	ldr	r2, [pc, #260]	; (8001888 <HAL_GPIO_Init+0x2ec>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d101      	bne.n	800178c <HAL_GPIO_Init+0x1f0>
 8001788:	2305      	movs	r3, #5
 800178a:	e00a      	b.n	80017a2 <HAL_GPIO_Init+0x206>
 800178c:	2306      	movs	r3, #6
 800178e:	e008      	b.n	80017a2 <HAL_GPIO_Init+0x206>
 8001790:	2304      	movs	r3, #4
 8001792:	e006      	b.n	80017a2 <HAL_GPIO_Init+0x206>
 8001794:	2303      	movs	r3, #3
 8001796:	e004      	b.n	80017a2 <HAL_GPIO_Init+0x206>
 8001798:	2302      	movs	r3, #2
 800179a:	e002      	b.n	80017a2 <HAL_GPIO_Init+0x206>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <HAL_GPIO_Init+0x206>
 80017a0:	2300      	movs	r3, #0
 80017a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a4:	f002 0203 	and.w	r2, r2, #3
 80017a8:	0092      	lsls	r2, r2, #2
 80017aa:	4093      	lsls	r3, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b2:	492f      	ldr	r1, [pc, #188]	; (8001870 <HAL_GPIO_Init+0x2d4>)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_GPIO_Init+0x2f0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	492e      	ldr	r1, [pc, #184]	; (800188c <HAL_GPIO_Init+0x2f0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <HAL_GPIO_Init+0x2f0>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	492a      	ldr	r1, [pc, #168]	; (800188c <HAL_GPIO_Init+0x2f0>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <HAL_GPIO_Init+0x2f0>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4924      	ldr	r1, [pc, #144]	; (800188c <HAL_GPIO_Init+0x2f0>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_GPIO_Init+0x2f0>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4920      	ldr	r1, [pc, #128]	; (800188c <HAL_GPIO_Init+0x2f0>)
 800180c:	4013      	ands	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_GPIO_Init+0x2f0>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	491a      	ldr	r1, [pc, #104]	; (800188c <HAL_GPIO_Init+0x2f0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_GPIO_Init+0x2f0>)
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4916      	ldr	r1, [pc, #88]	; (800188c <HAL_GPIO_Init+0x2f0>)
 8001834:	4013      	ands	r3, r2
 8001836:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d025      	beq.n	8001890 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_GPIO_Init+0x2f0>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4910      	ldr	r1, [pc, #64]	; (800188c <HAL_GPIO_Init+0x2f0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
 8001850:	e025      	b.n	800189e <HAL_GPIO_Init+0x302>
 8001852:	bf00      	nop
 8001854:	10320000 	.word	0x10320000
 8001858:	10310000 	.word	0x10310000
 800185c:	10220000 	.word	0x10220000
 8001860:	10210000 	.word	0x10210000
 8001864:	10120000 	.word	0x10120000
 8001868:	10110000 	.word	0x10110000
 800186c:	40021000 	.word	0x40021000
 8001870:	40010000 	.word	0x40010000
 8001874:	40010800 	.word	0x40010800
 8001878:	40010c00 	.word	0x40010c00
 800187c:	40011000 	.word	0x40011000
 8001880:	40011400 	.word	0x40011400
 8001884:	40011800 	.word	0x40011800
 8001888:	40011c00 	.word	0x40011c00
 800188c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_GPIO_Init+0x324>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	43db      	mvns	r3, r3
 8001898:	4909      	ldr	r1, [pc, #36]	; (80018c0 <HAL_GPIO_Init+0x324>)
 800189a:	4013      	ands	r3, r2
 800189c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	3301      	adds	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f47f ae7e 	bne.w	80015b0 <HAL_GPIO_Init+0x14>
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	372c      	adds	r7, #44	; 0x2c
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e26c      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8087 	beq.w	80019f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e4:	4b92      	ldr	r3, [pc, #584]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d00c      	beq.n	800190a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f0:	4b8f      	ldr	r3, [pc, #572]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d112      	bne.n	8001922 <HAL_RCC_OscConfig+0x5e>
 80018fc:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001908:	d10b      	bne.n	8001922 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190a:	4b89      	ldr	r3, [pc, #548]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d06c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x12c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d168      	bne.n	80019f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e246      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x76>
 800192c:	4b80      	ldr	r3, [pc, #512]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a7f      	ldr	r2, [pc, #508]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	e02e      	b.n	8001998 <HAL_RCC_OscConfig+0xd4>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x98>
 8001942:	4b7b      	ldr	r3, [pc, #492]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a7a      	ldr	r2, [pc, #488]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b78      	ldr	r3, [pc, #480]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a77      	ldr	r2, [pc, #476]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e01d      	b.n	8001998 <HAL_RCC_OscConfig+0xd4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0xbc>
 8001966:	4b72      	ldr	r3, [pc, #456]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a71      	ldr	r2, [pc, #452]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4b6f      	ldr	r3, [pc, #444]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a6e      	ldr	r2, [pc, #440]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e00b      	b.n	8001998 <HAL_RCC_OscConfig+0xd4>
 8001980:	4b6b      	ldr	r3, [pc, #428]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a6a      	ldr	r2, [pc, #424]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a67      	ldr	r2, [pc, #412]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001996:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff fbb8 	bl	8001114 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff fbb4 	bl	8001114 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1fa      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0xe4>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fba4 	bl	8001114 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fba0 	bl	8001114 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1e6      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x10c>
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d063      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00b      	beq.n	8001a22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a0a:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d11c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x18c>
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d116      	bne.n	8001a50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x176>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e1ba      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4939      	ldr	r1, [pc, #228]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4e:	e03a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fb59 	bl	8001114 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a66:	f7ff fb55 	bl	8001114 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e19b      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4927      	ldr	r1, [pc, #156]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fb38 	bl	8001114 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fb34 	bl	8001114 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e17a      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d03a      	beq.n	8001b48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d019      	beq.n	8001b0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_RCC_OscConfig+0x274>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fb18 	bl	8001114 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fb14 	bl	8001114 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e15a      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f000 fad8 	bl	80020bc <RCC_Delay>
 8001b0c:	e01c      	b.n	8001b48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_RCC_OscConfig+0x274>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7ff fafe 	bl	8001114 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1a:	e00f      	b.n	8001b3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fafa 	bl	8001114 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d908      	bls.n	8001b3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e140      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	42420000 	.word	0x42420000
 8001b38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	4b9e      	ldr	r3, [pc, #632]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e9      	bne.n	8001b1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80a6 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5a:	4b97      	ldr	r3, [pc, #604]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10d      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b94      	ldr	r3, [pc, #592]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a93      	ldr	r2, [pc, #588]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b91      	ldr	r3, [pc, #580]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4b8e      	ldr	r3, [pc, #568]	; (8001dbc <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a8a      	ldr	r2, [pc, #552]	; (8001dbc <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fabb 	bl	8001114 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7ff fab7 	bl	8001114 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b64      	cmp	r3, #100	; 0x64
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0fd      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <HAL_RCC_OscConfig+0x4f8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x312>
 8001bc8:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	e02d      	b.n	8001c32 <HAL_RCC_OscConfig+0x36e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x334>
 8001bde:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a75      	ldr	r2, [pc, #468]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a72      	ldr	r2, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	e01c      	b.n	8001c32 <HAL_RCC_OscConfig+0x36e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d10c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x356>
 8001c00:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a6c      	ldr	r2, [pc, #432]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a69      	ldr	r2, [pc, #420]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	e00b      	b.n	8001c32 <HAL_RCC_OscConfig+0x36e>
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	4b64      	ldr	r3, [pc, #400]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a63      	ldr	r2, [pc, #396]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d015      	beq.n	8001c66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fa6b 	bl	8001114 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7ff fa67 	bl	8001114 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0ab      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ee      	beq.n	8001c42 <HAL_RCC_OscConfig+0x37e>
 8001c64:	e014      	b.n	8001c90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fa55 	bl	8001114 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7ff fa51 	bl	8001114 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e095      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ee      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d105      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c96:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8081 	beq.w	8001dae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d061      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d146      	bne.n	8001d4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_OscConfig+0x4fc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fa25 	bl	8001114 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff fa21 	bl	8001114 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e067      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce0:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d108      	bne.n	8001d08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cf6:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	492d      	ldr	r1, [pc, #180]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a19      	ldr	r1, [r3, #32]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	4927      	ldr	r1, [pc, #156]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_OscConfig+0x4fc>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff f9f5 	bl	8001114 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7ff f9f1 	bl	8001114 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e037      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x46a>
 8001d4c:	e02f      	b.n	8001dae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_RCC_OscConfig+0x4fc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f9de 	bl	8001114 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f9da 	bl	8001114 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e020      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x498>
 8001d7a:	e018      	b.n	8001dae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e013      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	42420060 	.word	0x42420060

08001dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0d0      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d910      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b67      	ldr	r3, [pc, #412]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4965      	ldr	r1, [pc, #404]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b8      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e20:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	494d      	ldr	r1, [pc, #308]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d040      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d115      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e07f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e82:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e073      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e92:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06b      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f023 0203 	bic.w	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4936      	ldr	r1, [pc, #216]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb4:	f7ff f92e 	bl	8001114 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebc:	f7ff f92a 	bl	8001114 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e053      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 020c 	and.w	r2, r3, #12
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d1eb      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d210      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 0207 	bic.w	r2, r3, #7
 8001efa:	4922      	ldr	r1, [pc, #136]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e032      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4916      	ldr	r1, [pc, #88]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f52:	f000 f821 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f56:	4602      	mov	r2, r0
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	490a      	ldr	r1, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	5ccb      	ldrb	r3, [r1, r3]
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1cc>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1d0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f88c 	bl	8001090 <HAL_InitTick>

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	080054f4 	.word	0x080054f4
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	b490      	push	{r4, r7}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fa0:	1d3c      	adds	r4, r7, #4
 8001fa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fa8:	f240 2301 	movw	r3, #513	; 0x201
 8001fac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d002      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x46>
 8001fd6:	e02d      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fda:	623b      	str	r3, [r7, #32]
      break;
 8001fdc:	e02d      	b.n	800203a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fea:	4413      	add	r3, r2
 8001fec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ff0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	0c5b      	lsrs	r3, r3, #17
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800200a:	4413      	add	r3, r2
 800200c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002010:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002016:	fb02 f203 	mul.w	r2, r2, r3
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
 8002022:	e004      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	623b      	str	r3, [r7, #32]
      break;
 8002032:	e002      	b.n	800203a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002036:	623b      	str	r3, [r7, #32]
      break;
 8002038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800203a:	6a3b      	ldr	r3, [r7, #32]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bc90      	pop	{r4, r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	080054e4 	.word	0x080054e4
 800204c:	40021000 	.word	0x40021000
 8002050:	007a1200 	.word	0x007a1200
 8002054:	003d0900 	.word	0x003d0900

08002058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_RCC_GetHCLKFreq+0x10>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	20000000 	.word	0x20000000

0800206c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002070:	f7ff fff2 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4903      	ldr	r1, [pc, #12]	; (8002090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	08005504 	.word	0x08005504

08002094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002098:	f7ff ffde 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	0adb      	lsrs	r3, r3, #11
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4903      	ldr	r1, [pc, #12]	; (80020b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08005504 	.word	0x08005504

080020bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <RCC_Delay+0x34>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <RCC_Delay+0x38>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0a5b      	lsrs	r3, r3, #9
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020d8:	bf00      	nop
  }
  while (Delay --);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	60fa      	str	r2, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f9      	bne.n	80020d8 <RCC_Delay+0x1c>
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	20000000 	.word	0x20000000
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e03f      	b.n	800218a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe ff26 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2224      	movs	r2, #36	; 0x24
 8002128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800213a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fb39 	bl	80027b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b08a      	sub	sp, #40	; 0x28
 8002196:	af02      	add	r7, sp, #8
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d17c      	bne.n	80022ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_UART_Transmit+0x2c>
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e075      	b.n	80022ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_UART_Transmit+0x3e>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e06e      	b.n	80022ae <HAL_UART_Transmit+0x11c>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2221      	movs	r2, #33	; 0x21
 80021e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80021e6:	f7fe ff95 	bl	8001114 <HAL_GetTick>
 80021ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	88fa      	ldrh	r2, [r7, #6]
 80021f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002200:	d108      	bne.n	8002214 <HAL_UART_Transmit+0x82>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d104      	bne.n	8002214 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	e003      	b.n	800221c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002224:	e02a      	b.n	800227c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f95c 	bl	80024ee <UART_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e036      	b.n	80022ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10b      	bne.n	800225e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002254:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	3302      	adds	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	e007      	b.n	800226e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	3301      	adds	r3, #1
 800226c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1cf      	bne.n	8002226 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2200      	movs	r2, #0
 800228e:	2140      	movs	r1, #64	; 0x40
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f92c 	bl	80024ee <UART_WaitOnFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e006      	b.n	80022ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	e000      	b.n	80022ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_UART_IRQHandler+0x52>
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9d5 	bl	80026b2 <UART_Receive_IT>
      return;
 8002308:	e0d0      	b.n	80024ac <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80b0 	beq.w	8002472 <HAL_UART_IRQHandler+0x1ba>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_UART_IRQHandler+0x70>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80a5 	beq.w	8002472 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_UART_IRQHandler+0x90>
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_UART_IRQHandler+0xb0>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	f043 0202 	orr.w	r2, r3, #2
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_UART_IRQHandler+0xd0>
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00f      	beq.n	80023b2 <HAL_UART_IRQHandler+0xfa>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d104      	bne.n	80023a6 <HAL_UART_IRQHandler+0xee>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	f043 0208 	orr.w	r2, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d077      	beq.n	80024aa <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_UART_IRQHandler+0x11c>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f96f 	bl	80026b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <HAL_UART_IRQHandler+0x144>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d031      	beq.n	8002460 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f8c0 	bl	8002582 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242c:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <HAL_UART_IRQHandler+0x1fc>)
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe ffa9 	bl	800138c <HAL_DMA_Abort_IT>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d016      	beq.n	800246e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800244a:	4610      	mov	r0, r2
 800244c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244e:	e00e      	b.n	800246e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f843 	bl	80024dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002456:	e00a      	b.n	800246e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f83f 	bl	80024dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800245e:	e006      	b.n	800246e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f83b 	bl	80024dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800246c:	e01d      	b.n	80024aa <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246e:	bf00      	nop
    return;
 8002470:	e01b      	b.n	80024aa <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x1d6>
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8ac 	bl	80025e4 <UART_Transmit_IT>
    return;
 800248c:	e00e      	b.n	80024ac <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <HAL_UART_IRQHandler+0x1f4>
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8ed 	bl	8002682 <UART_EndTransmit_IT>
    return;
 80024a8:	e000      	b.n	80024ac <HAL_UART_IRQHandler+0x1f4>
    return;
 80024aa:	bf00      	nop
  }
}
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	080025bd 	.word	0x080025bd

080024b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	4613      	mov	r3, r2
 80024fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024fe:	e02c      	b.n	800255a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002506:	d028      	beq.n	800255a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <UART_WaitOnFlagUntilTimeout+0x30>
 800250e:	f7fe fe01 	bl	8001114 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	429a      	cmp	r2, r3
 800251c:	d21d      	bcs.n	800255a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800252c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e00f      	b.n	800257a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	429a      	cmp	r2, r3
 8002576:	d0c3      	beq.n	8002500 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002598:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7ff ff80 	bl	80024dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b21      	cmp	r3, #33	; 0x21
 80025f6:	d13e      	bne.n	8002676 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002600:	d114      	bne.n	800262c <UART_Transmit_IT+0x48>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d110      	bne.n	800262c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800261e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	1c9a      	adds	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	621a      	str	r2, [r3, #32]
 800262a:	e008      	b.n	800263e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	1c59      	adds	r1, r3, #1
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6211      	str	r1, [r2, #32]
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29b      	uxth	r3, r3
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4619      	mov	r1, r3
 800264c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002660:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002670:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002698:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff08 	bl	80024b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b22      	cmp	r3, #34	; 0x22
 80026c4:	d170      	bne.n	80027a8 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ce:	d117      	bne.n	8002700 <UART_Receive_IT+0x4e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d113      	bne.n	8002700 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	1c9a      	adds	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
 80026fe:	e026      	b.n	800274e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002712:	d007      	beq.n	8002724 <UART_Receive_IT+0x72>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <UART_Receive_IT+0x80>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e008      	b.n	8002744 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29b      	uxth	r3, r3
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4619      	mov	r1, r3
 800275c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800275e:	2b00      	cmp	r3, #0
 8002760:	d120      	bne.n	80027a4 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0220 	bic.w	r2, r2, #32
 8002770:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fe95 	bl	80024ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e002      	b.n	80027aa <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
  }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027ee:	f023 030c 	bic.w	r3, r3, #12
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <UART_SetConfig+0x114>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d103      	bne.n	8002824 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800281c:	f7ff fc3a 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	e002      	b.n	800282a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002824:	f7ff fc22 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8002828:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009a      	lsls	r2, r3, #2
 8002834:	441a      	add	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	4a22      	ldr	r2, [pc, #136]	; (80028cc <UART_SetConfig+0x118>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	0119      	lsls	r1, r3, #4
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	009a      	lsls	r2, r3, #2
 8002854:	441a      	add	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <UART_SetConfig+0x118>)
 8002862:	fba3 0302 	umull	r0, r3, r3, r2
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2064      	movs	r0, #100	; 0x64
 800286a:	fb00 f303 	mul.w	r3, r0, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	3332      	adds	r3, #50	; 0x32
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <UART_SetConfig+0x118>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002880:	4419      	add	r1, r3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009a      	lsls	r2, r3, #2
 800288c:	441a      	add	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fbb2 f2f3 	udiv	r2, r2, r3
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <UART_SetConfig+0x118>)
 800289a:	fba3 0302 	umull	r0, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2064      	movs	r0, #100	; 0x64
 80028a2:	fb00 f303 	mul.w	r3, r0, r3
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	3332      	adds	r3, #50	; 0x32
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <UART_SetConfig+0x118>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	f003 020f 	and.w	r2, r3, #15
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	440a      	add	r2, r1
 80028be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40013800 	.word	0x40013800
 80028cc:	51eb851f 	.word	0x51eb851f

080028d0 <__errno>:
 80028d0:	4b01      	ldr	r3, [pc, #4]	; (80028d8 <__errno+0x8>)
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	2000000c 	.word	0x2000000c

080028dc <__libc_init_array>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	2600      	movs	r6, #0
 80028e0:	4d0c      	ldr	r5, [pc, #48]	; (8002914 <__libc_init_array+0x38>)
 80028e2:	4c0d      	ldr	r4, [pc, #52]	; (8002918 <__libc_init_array+0x3c>)
 80028e4:	1b64      	subs	r4, r4, r5
 80028e6:	10a4      	asrs	r4, r4, #2
 80028e8:	42a6      	cmp	r6, r4
 80028ea:	d109      	bne.n	8002900 <__libc_init_array+0x24>
 80028ec:	f002 fdd6 	bl	800549c <_init>
 80028f0:	2600      	movs	r6, #0
 80028f2:	4d0a      	ldr	r5, [pc, #40]	; (800291c <__libc_init_array+0x40>)
 80028f4:	4c0a      	ldr	r4, [pc, #40]	; (8002920 <__libc_init_array+0x44>)
 80028f6:	1b64      	subs	r4, r4, r5
 80028f8:	10a4      	asrs	r4, r4, #2
 80028fa:	42a6      	cmp	r6, r4
 80028fc:	d105      	bne.n	800290a <__libc_init_array+0x2e>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
 8002900:	f855 3b04 	ldr.w	r3, [r5], #4
 8002904:	4798      	blx	r3
 8002906:	3601      	adds	r6, #1
 8002908:	e7ee      	b.n	80028e8 <__libc_init_array+0xc>
 800290a:	f855 3b04 	ldr.w	r3, [r5], #4
 800290e:	4798      	blx	r3
 8002910:	3601      	adds	r6, #1
 8002912:	e7f2      	b.n	80028fa <__libc_init_array+0x1e>
 8002914:	080058ec 	.word	0x080058ec
 8002918:	080058ec 	.word	0x080058ec
 800291c:	080058ec 	.word	0x080058ec
 8002920:	080058f0 	.word	0x080058f0

08002924 <memset>:
 8002924:	4603      	mov	r3, r0
 8002926:	4402      	add	r2, r0
 8002928:	4293      	cmp	r3, r2
 800292a:	d100      	bne.n	800292e <memset+0xa>
 800292c:	4770      	bx	lr
 800292e:	f803 1b01 	strb.w	r1, [r3], #1
 8002932:	e7f9      	b.n	8002928 <memset+0x4>

08002934 <__cvt>:
 8002934:	2b00      	cmp	r3, #0
 8002936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800293a:	461f      	mov	r7, r3
 800293c:	bfbb      	ittet	lt
 800293e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002942:	461f      	movlt	r7, r3
 8002944:	2300      	movge	r3, #0
 8002946:	232d      	movlt	r3, #45	; 0x2d
 8002948:	b088      	sub	sp, #32
 800294a:	4614      	mov	r4, r2
 800294c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800294e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002950:	7013      	strb	r3, [r2, #0]
 8002952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002954:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002958:	f023 0820 	bic.w	r8, r3, #32
 800295c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002960:	d005      	beq.n	800296e <__cvt+0x3a>
 8002962:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002966:	d100      	bne.n	800296a <__cvt+0x36>
 8002968:	3501      	adds	r5, #1
 800296a:	2302      	movs	r3, #2
 800296c:	e000      	b.n	8002970 <__cvt+0x3c>
 800296e:	2303      	movs	r3, #3
 8002970:	aa07      	add	r2, sp, #28
 8002972:	9204      	str	r2, [sp, #16]
 8002974:	aa06      	add	r2, sp, #24
 8002976:	e9cd a202 	strd	sl, r2, [sp, #8]
 800297a:	e9cd 3500 	strd	r3, r5, [sp]
 800297e:	4622      	mov	r2, r4
 8002980:	463b      	mov	r3, r7
 8002982:	f000 fda5 	bl	80034d0 <_dtoa_r>
 8002986:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800298a:	4606      	mov	r6, r0
 800298c:	d102      	bne.n	8002994 <__cvt+0x60>
 800298e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002990:	07db      	lsls	r3, r3, #31
 8002992:	d522      	bpl.n	80029da <__cvt+0xa6>
 8002994:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002998:	eb06 0905 	add.w	r9, r6, r5
 800299c:	d110      	bne.n	80029c0 <__cvt+0x8c>
 800299e:	7833      	ldrb	r3, [r6, #0]
 80029a0:	2b30      	cmp	r3, #48	; 0x30
 80029a2:	d10a      	bne.n	80029ba <__cvt+0x86>
 80029a4:	2200      	movs	r2, #0
 80029a6:	2300      	movs	r3, #0
 80029a8:	4620      	mov	r0, r4
 80029aa:	4639      	mov	r1, r7
 80029ac:	f7fe f868 	bl	8000a80 <__aeabi_dcmpeq>
 80029b0:	b918      	cbnz	r0, 80029ba <__cvt+0x86>
 80029b2:	f1c5 0501 	rsb	r5, r5, #1
 80029b6:	f8ca 5000 	str.w	r5, [sl]
 80029ba:	f8da 3000 	ldr.w	r3, [sl]
 80029be:	4499      	add	r9, r3
 80029c0:	2200      	movs	r2, #0
 80029c2:	2300      	movs	r3, #0
 80029c4:	4620      	mov	r0, r4
 80029c6:	4639      	mov	r1, r7
 80029c8:	f7fe f85a 	bl	8000a80 <__aeabi_dcmpeq>
 80029cc:	b108      	cbz	r0, 80029d2 <__cvt+0x9e>
 80029ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80029d2:	2230      	movs	r2, #48	; 0x30
 80029d4:	9b07      	ldr	r3, [sp, #28]
 80029d6:	454b      	cmp	r3, r9
 80029d8:	d307      	bcc.n	80029ea <__cvt+0xb6>
 80029da:	4630      	mov	r0, r6
 80029dc:	9b07      	ldr	r3, [sp, #28]
 80029de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80029e0:	1b9b      	subs	r3, r3, r6
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	b008      	add	sp, #32
 80029e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	9107      	str	r1, [sp, #28]
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e7f0      	b.n	80029d4 <__cvt+0xa0>

080029f2 <__exponent>:
 80029f2:	4603      	mov	r3, r0
 80029f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029f6:	2900      	cmp	r1, #0
 80029f8:	f803 2b02 	strb.w	r2, [r3], #2
 80029fc:	bfb6      	itet	lt
 80029fe:	222d      	movlt	r2, #45	; 0x2d
 8002a00:	222b      	movge	r2, #43	; 0x2b
 8002a02:	4249      	neglt	r1, r1
 8002a04:	2909      	cmp	r1, #9
 8002a06:	7042      	strb	r2, [r0, #1]
 8002a08:	dd2b      	ble.n	8002a62 <__exponent+0x70>
 8002a0a:	f10d 0407 	add.w	r4, sp, #7
 8002a0e:	46a4      	mov	ip, r4
 8002a10:	270a      	movs	r7, #10
 8002a12:	fb91 f6f7 	sdiv	r6, r1, r7
 8002a16:	460a      	mov	r2, r1
 8002a18:	46a6      	mov	lr, r4
 8002a1a:	fb07 1516 	mls	r5, r7, r6, r1
 8002a1e:	2a63      	cmp	r2, #99	; 0x63
 8002a20:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002a24:	4631      	mov	r1, r6
 8002a26:	f104 34ff 	add.w	r4, r4, #4294967295
 8002a2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002a2e:	dcf0      	bgt.n	8002a12 <__exponent+0x20>
 8002a30:	3130      	adds	r1, #48	; 0x30
 8002a32:	f1ae 0502 	sub.w	r5, lr, #2
 8002a36:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	1c44      	adds	r4, r0, #1
 8002a3e:	4561      	cmp	r1, ip
 8002a40:	d30a      	bcc.n	8002a58 <__exponent+0x66>
 8002a42:	f10d 0209 	add.w	r2, sp, #9
 8002a46:	eba2 020e 	sub.w	r2, r2, lr
 8002a4a:	4565      	cmp	r5, ip
 8002a4c:	bf88      	it	hi
 8002a4e:	2200      	movhi	r2, #0
 8002a50:	4413      	add	r3, r2
 8002a52:	1a18      	subs	r0, r3, r0
 8002a54:	b003      	add	sp, #12
 8002a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a5c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002a60:	e7ed      	b.n	8002a3e <__exponent+0x4c>
 8002a62:	2330      	movs	r3, #48	; 0x30
 8002a64:	3130      	adds	r1, #48	; 0x30
 8002a66:	7083      	strb	r3, [r0, #2]
 8002a68:	70c1      	strb	r1, [r0, #3]
 8002a6a:	1d03      	adds	r3, r0, #4
 8002a6c:	e7f1      	b.n	8002a52 <__exponent+0x60>
	...

08002a70 <_printf_float>:
 8002a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a74:	b091      	sub	sp, #68	; 0x44
 8002a76:	460c      	mov	r4, r1
 8002a78:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002a7c:	4616      	mov	r6, r2
 8002a7e:	461f      	mov	r7, r3
 8002a80:	4605      	mov	r5, r0
 8002a82:	f001 fccb 	bl	800441c <_localeconv_r>
 8002a86:	6803      	ldr	r3, [r0, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a8c:	f7fd fbcc 	bl	8000228 <strlen>
 8002a90:	2300      	movs	r3, #0
 8002a92:	930e      	str	r3, [sp, #56]	; 0x38
 8002a94:	f8d8 3000 	ldr.w	r3, [r8]
 8002a98:	900a      	str	r0, [sp, #40]	; 0x28
 8002a9a:	3307      	adds	r3, #7
 8002a9c:	f023 0307 	bic.w	r3, r3, #7
 8002aa0:	f103 0208 	add.w	r2, r3, #8
 8002aa4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002aa8:	f8d4 b000 	ldr.w	fp, [r4]
 8002aac:	f8c8 2000 	str.w	r2, [r8]
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002ab8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002abc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac6:	4640      	mov	r0, r8
 8002ac8:	4b9c      	ldr	r3, [pc, #624]	; (8002d3c <_printf_float+0x2cc>)
 8002aca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002acc:	f7fe f80a 	bl	8000ae4 <__aeabi_dcmpun>
 8002ad0:	bb70      	cbnz	r0, 8002b30 <_printf_float+0xc0>
 8002ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	4b98      	ldr	r3, [pc, #608]	; (8002d3c <_printf_float+0x2cc>)
 8002ada:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002adc:	f7fd ffe4 	bl	8000aa8 <__aeabi_dcmple>
 8002ae0:	bb30      	cbnz	r0, 8002b30 <_printf_float+0xc0>
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	4640      	mov	r0, r8
 8002ae8:	4651      	mov	r1, sl
 8002aea:	f7fd ffd3 	bl	8000a94 <__aeabi_dcmplt>
 8002aee:	b110      	cbz	r0, 8002af6 <_printf_float+0x86>
 8002af0:	232d      	movs	r3, #45	; 0x2d
 8002af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002af6:	4b92      	ldr	r3, [pc, #584]	; (8002d40 <_printf_float+0x2d0>)
 8002af8:	4892      	ldr	r0, [pc, #584]	; (8002d44 <_printf_float+0x2d4>)
 8002afa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002afe:	bf94      	ite	ls
 8002b00:	4698      	movls	r8, r3
 8002b02:	4680      	movhi	r8, r0
 8002b04:	2303      	movs	r3, #3
 8002b06:	f04f 0a00 	mov.w	sl, #0
 8002b0a:	6123      	str	r3, [r4, #16]
 8002b0c:	f02b 0304 	bic.w	r3, fp, #4
 8002b10:	6023      	str	r3, [r4, #0]
 8002b12:	4633      	mov	r3, r6
 8002b14:	4621      	mov	r1, r4
 8002b16:	4628      	mov	r0, r5
 8002b18:	9700      	str	r7, [sp, #0]
 8002b1a:	aa0f      	add	r2, sp, #60	; 0x3c
 8002b1c:	f000 f9d4 	bl	8002ec8 <_printf_common>
 8002b20:	3001      	adds	r0, #1
 8002b22:	f040 8090 	bne.w	8002c46 <_printf_float+0x1d6>
 8002b26:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2a:	b011      	add	sp, #68	; 0x44
 8002b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b30:	4642      	mov	r2, r8
 8002b32:	4653      	mov	r3, sl
 8002b34:	4640      	mov	r0, r8
 8002b36:	4651      	mov	r1, sl
 8002b38:	f7fd ffd4 	bl	8000ae4 <__aeabi_dcmpun>
 8002b3c:	b148      	cbz	r0, 8002b52 <_printf_float+0xe2>
 8002b3e:	f1ba 0f00 	cmp.w	sl, #0
 8002b42:	bfb8      	it	lt
 8002b44:	232d      	movlt	r3, #45	; 0x2d
 8002b46:	4880      	ldr	r0, [pc, #512]	; (8002d48 <_printf_float+0x2d8>)
 8002b48:	bfb8      	it	lt
 8002b4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	; (8002d4c <_printf_float+0x2dc>)
 8002b50:	e7d3      	b.n	8002afa <_printf_float+0x8a>
 8002b52:	6863      	ldr	r3, [r4, #4]
 8002b54:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	d142      	bne.n	8002be2 <_printf_float+0x172>
 8002b5c:	2306      	movs	r3, #6
 8002b5e:	6063      	str	r3, [r4, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	9206      	str	r2, [sp, #24]
 8002b64:	aa0e      	add	r2, sp, #56	; 0x38
 8002b66:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002b6a:	aa0d      	add	r2, sp, #52	; 0x34
 8002b6c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002b70:	9203      	str	r2, [sp, #12]
 8002b72:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002b76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002b7a:	6023      	str	r3, [r4, #0]
 8002b7c:	6863      	ldr	r3, [r4, #4]
 8002b7e:	4642      	mov	r2, r8
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4628      	mov	r0, r5
 8002b84:	4653      	mov	r3, sl
 8002b86:	910b      	str	r1, [sp, #44]	; 0x2c
 8002b88:	f7ff fed4 	bl	8002934 <__cvt>
 8002b8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b8e:	4680      	mov	r8, r0
 8002b90:	2947      	cmp	r1, #71	; 0x47
 8002b92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002b94:	d108      	bne.n	8002ba8 <_printf_float+0x138>
 8002b96:	1cc8      	adds	r0, r1, #3
 8002b98:	db02      	blt.n	8002ba0 <_printf_float+0x130>
 8002b9a:	6863      	ldr	r3, [r4, #4]
 8002b9c:	4299      	cmp	r1, r3
 8002b9e:	dd40      	ble.n	8002c22 <_printf_float+0x1b2>
 8002ba0:	f1a9 0902 	sub.w	r9, r9, #2
 8002ba4:	fa5f f989 	uxtb.w	r9, r9
 8002ba8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002bac:	d81f      	bhi.n	8002bee <_printf_float+0x17e>
 8002bae:	464a      	mov	r2, r9
 8002bb0:	3901      	subs	r1, #1
 8002bb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002bb6:	910d      	str	r1, [sp, #52]	; 0x34
 8002bb8:	f7ff ff1b 	bl	80029f2 <__exponent>
 8002bbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002bbe:	4682      	mov	sl, r0
 8002bc0:	1813      	adds	r3, r2, r0
 8002bc2:	2a01      	cmp	r2, #1
 8002bc4:	6123      	str	r3, [r4, #16]
 8002bc6:	dc02      	bgt.n	8002bce <_printf_float+0x15e>
 8002bc8:	6822      	ldr	r2, [r4, #0]
 8002bca:	07d2      	lsls	r2, r2, #31
 8002bcc:	d501      	bpl.n	8002bd2 <_printf_float+0x162>
 8002bce:	3301      	adds	r3, #1
 8002bd0:	6123      	str	r3, [r4, #16]
 8002bd2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d09b      	beq.n	8002b12 <_printf_float+0xa2>
 8002bda:	232d      	movs	r3, #45	; 0x2d
 8002bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002be0:	e797      	b.n	8002b12 <_printf_float+0xa2>
 8002be2:	2947      	cmp	r1, #71	; 0x47
 8002be4:	d1bc      	bne.n	8002b60 <_printf_float+0xf0>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ba      	bne.n	8002b60 <_printf_float+0xf0>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e7b7      	b.n	8002b5e <_printf_float+0xee>
 8002bee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002bf2:	d118      	bne.n	8002c26 <_printf_float+0x1b6>
 8002bf4:	2900      	cmp	r1, #0
 8002bf6:	6863      	ldr	r3, [r4, #4]
 8002bf8:	dd0b      	ble.n	8002c12 <_printf_float+0x1a2>
 8002bfa:	6121      	str	r1, [r4, #16]
 8002bfc:	b913      	cbnz	r3, 8002c04 <_printf_float+0x194>
 8002bfe:	6822      	ldr	r2, [r4, #0]
 8002c00:	07d0      	lsls	r0, r2, #31
 8002c02:	d502      	bpl.n	8002c0a <_printf_float+0x19a>
 8002c04:	3301      	adds	r3, #1
 8002c06:	440b      	add	r3, r1
 8002c08:	6123      	str	r3, [r4, #16]
 8002c0a:	f04f 0a00 	mov.w	sl, #0
 8002c0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002c10:	e7df      	b.n	8002bd2 <_printf_float+0x162>
 8002c12:	b913      	cbnz	r3, 8002c1a <_printf_float+0x1aa>
 8002c14:	6822      	ldr	r2, [r4, #0]
 8002c16:	07d2      	lsls	r2, r2, #31
 8002c18:	d501      	bpl.n	8002c1e <_printf_float+0x1ae>
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	e7f4      	b.n	8002c08 <_printf_float+0x198>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e7f2      	b.n	8002c08 <_printf_float+0x198>
 8002c22:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c28:	4299      	cmp	r1, r3
 8002c2a:	db05      	blt.n	8002c38 <_printf_float+0x1c8>
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	6121      	str	r1, [r4, #16]
 8002c30:	07d8      	lsls	r0, r3, #31
 8002c32:	d5ea      	bpl.n	8002c0a <_printf_float+0x19a>
 8002c34:	1c4b      	adds	r3, r1, #1
 8002c36:	e7e7      	b.n	8002c08 <_printf_float+0x198>
 8002c38:	2900      	cmp	r1, #0
 8002c3a:	bfcc      	ite	gt
 8002c3c:	2201      	movgt	r2, #1
 8002c3e:	f1c1 0202 	rsble	r2, r1, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	e7e0      	b.n	8002c08 <_printf_float+0x198>
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	055a      	lsls	r2, r3, #21
 8002c4a:	d407      	bmi.n	8002c5c <_printf_float+0x1ec>
 8002c4c:	6923      	ldr	r3, [r4, #16]
 8002c4e:	4642      	mov	r2, r8
 8002c50:	4631      	mov	r1, r6
 8002c52:	4628      	mov	r0, r5
 8002c54:	47b8      	blx	r7
 8002c56:	3001      	adds	r0, #1
 8002c58:	d12b      	bne.n	8002cb2 <_printf_float+0x242>
 8002c5a:	e764      	b.n	8002b26 <_printf_float+0xb6>
 8002c5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002c60:	f240 80dd 	bls.w	8002e1e <_printf_float+0x3ae>
 8002c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f7fd ff08 	bl	8000a80 <__aeabi_dcmpeq>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d033      	beq.n	8002cdc <_printf_float+0x26c>
 8002c74:	2301      	movs	r3, #1
 8002c76:	4631      	mov	r1, r6
 8002c78:	4628      	mov	r0, r5
 8002c7a:	4a35      	ldr	r2, [pc, #212]	; (8002d50 <_printf_float+0x2e0>)
 8002c7c:	47b8      	blx	r7
 8002c7e:	3001      	adds	r0, #1
 8002c80:	f43f af51 	beq.w	8002b26 <_printf_float+0xb6>
 8002c84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	db02      	blt.n	8002c92 <_printf_float+0x222>
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	07d8      	lsls	r0, r3, #31
 8002c90:	d50f      	bpl.n	8002cb2 <_printf_float+0x242>
 8002c92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c96:	4631      	mov	r1, r6
 8002c98:	4628      	mov	r0, r5
 8002c9a:	47b8      	blx	r7
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	f43f af42 	beq.w	8002b26 <_printf_float+0xb6>
 8002ca2:	f04f 0800 	mov.w	r8, #0
 8002ca6:	f104 091a 	add.w	r9, r4, #26
 8002caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cac:	3b01      	subs	r3, #1
 8002cae:	4543      	cmp	r3, r8
 8002cb0:	dc09      	bgt.n	8002cc6 <_printf_float+0x256>
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	079b      	lsls	r3, r3, #30
 8002cb6:	f100 8102 	bmi.w	8002ebe <_printf_float+0x44e>
 8002cba:	68e0      	ldr	r0, [r4, #12]
 8002cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002cbe:	4298      	cmp	r0, r3
 8002cc0:	bfb8      	it	lt
 8002cc2:	4618      	movlt	r0, r3
 8002cc4:	e731      	b.n	8002b2a <_printf_float+0xba>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	464a      	mov	r2, r9
 8002cca:	4631      	mov	r1, r6
 8002ccc:	4628      	mov	r0, r5
 8002cce:	47b8      	blx	r7
 8002cd0:	3001      	adds	r0, #1
 8002cd2:	f43f af28 	beq.w	8002b26 <_printf_float+0xb6>
 8002cd6:	f108 0801 	add.w	r8, r8, #1
 8002cda:	e7e6      	b.n	8002caa <_printf_float+0x23a>
 8002cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	dc38      	bgt.n	8002d54 <_printf_float+0x2e4>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	4631      	mov	r1, r6
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <_printf_float+0x2e0>)
 8002cea:	47b8      	blx	r7
 8002cec:	3001      	adds	r0, #1
 8002cee:	f43f af1a 	beq.w	8002b26 <_printf_float+0xb6>
 8002cf2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	d102      	bne.n	8002d00 <_printf_float+0x290>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	07d9      	lsls	r1, r3, #31
 8002cfe:	d5d8      	bpl.n	8002cb2 <_printf_float+0x242>
 8002d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d04:	4631      	mov	r1, r6
 8002d06:	4628      	mov	r0, r5
 8002d08:	47b8      	blx	r7
 8002d0a:	3001      	adds	r0, #1
 8002d0c:	f43f af0b 	beq.w	8002b26 <_printf_float+0xb6>
 8002d10:	f04f 0900 	mov.w	r9, #0
 8002d14:	f104 0a1a 	add.w	sl, r4, #26
 8002d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d1a:	425b      	negs	r3, r3
 8002d1c:	454b      	cmp	r3, r9
 8002d1e:	dc01      	bgt.n	8002d24 <_printf_float+0x2b4>
 8002d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d22:	e794      	b.n	8002c4e <_printf_float+0x1de>
 8002d24:	2301      	movs	r3, #1
 8002d26:	4652      	mov	r2, sl
 8002d28:	4631      	mov	r1, r6
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	47b8      	blx	r7
 8002d2e:	3001      	adds	r0, #1
 8002d30:	f43f aef9 	beq.w	8002b26 <_printf_float+0xb6>
 8002d34:	f109 0901 	add.w	r9, r9, #1
 8002d38:	e7ee      	b.n	8002d18 <_printf_float+0x2a8>
 8002d3a:	bf00      	nop
 8002d3c:	7fefffff 	.word	0x7fefffff
 8002d40:	08005510 	.word	0x08005510
 8002d44:	08005514 	.word	0x08005514
 8002d48:	0800551c 	.word	0x0800551c
 8002d4c:	08005518 	.word	0x08005518
 8002d50:	08005520 	.word	0x08005520
 8002d54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	bfa8      	it	ge
 8002d5c:	461a      	movge	r2, r3
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	4691      	mov	r9, r2
 8002d62:	dc37      	bgt.n	8002dd4 <_printf_float+0x364>
 8002d64:	f04f 0b00 	mov.w	fp, #0
 8002d68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d6c:	f104 021a 	add.w	r2, r4, #26
 8002d70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002d74:	ebaa 0309 	sub.w	r3, sl, r9
 8002d78:	455b      	cmp	r3, fp
 8002d7a:	dc33      	bgt.n	8002de4 <_printf_float+0x374>
 8002d7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d80:	429a      	cmp	r2, r3
 8002d82:	db3b      	blt.n	8002dfc <_printf_float+0x38c>
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	07da      	lsls	r2, r3, #31
 8002d88:	d438      	bmi.n	8002dfc <_printf_float+0x38c>
 8002d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d8e:	eba2 030a 	sub.w	r3, r2, sl
 8002d92:	eba2 0901 	sub.w	r9, r2, r1
 8002d96:	4599      	cmp	r9, r3
 8002d98:	bfa8      	it	ge
 8002d9a:	4699      	movge	r9, r3
 8002d9c:	f1b9 0f00 	cmp.w	r9, #0
 8002da0:	dc34      	bgt.n	8002e0c <_printf_float+0x39c>
 8002da2:	f04f 0800 	mov.w	r8, #0
 8002da6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002daa:	f104 0a1a 	add.w	sl, r4, #26
 8002dae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	eba3 0309 	sub.w	r3, r3, r9
 8002db8:	4543      	cmp	r3, r8
 8002dba:	f77f af7a 	ble.w	8002cb2 <_printf_float+0x242>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	4652      	mov	r2, sl
 8002dc2:	4631      	mov	r1, r6
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	47b8      	blx	r7
 8002dc8:	3001      	adds	r0, #1
 8002dca:	f43f aeac 	beq.w	8002b26 <_printf_float+0xb6>
 8002dce:	f108 0801 	add.w	r8, r8, #1
 8002dd2:	e7ec      	b.n	8002dae <_printf_float+0x33e>
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	4631      	mov	r1, r6
 8002dd8:	4642      	mov	r2, r8
 8002dda:	4628      	mov	r0, r5
 8002ddc:	47b8      	blx	r7
 8002dde:	3001      	adds	r0, #1
 8002de0:	d1c0      	bne.n	8002d64 <_printf_float+0x2f4>
 8002de2:	e6a0      	b.n	8002b26 <_printf_float+0xb6>
 8002de4:	2301      	movs	r3, #1
 8002de6:	4631      	mov	r1, r6
 8002de8:	4628      	mov	r0, r5
 8002dea:	920b      	str	r2, [sp, #44]	; 0x2c
 8002dec:	47b8      	blx	r7
 8002dee:	3001      	adds	r0, #1
 8002df0:	f43f ae99 	beq.w	8002b26 <_printf_float+0xb6>
 8002df4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002df6:	f10b 0b01 	add.w	fp, fp, #1
 8002dfa:	e7b9      	b.n	8002d70 <_printf_float+0x300>
 8002dfc:	4631      	mov	r1, r6
 8002dfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e02:	4628      	mov	r0, r5
 8002e04:	47b8      	blx	r7
 8002e06:	3001      	adds	r0, #1
 8002e08:	d1bf      	bne.n	8002d8a <_printf_float+0x31a>
 8002e0a:	e68c      	b.n	8002b26 <_printf_float+0xb6>
 8002e0c:	464b      	mov	r3, r9
 8002e0e:	4631      	mov	r1, r6
 8002e10:	4628      	mov	r0, r5
 8002e12:	eb08 020a 	add.w	r2, r8, sl
 8002e16:	47b8      	blx	r7
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d1c2      	bne.n	8002da2 <_printf_float+0x332>
 8002e1c:	e683      	b.n	8002b26 <_printf_float+0xb6>
 8002e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e20:	2a01      	cmp	r2, #1
 8002e22:	dc01      	bgt.n	8002e28 <_printf_float+0x3b8>
 8002e24:	07db      	lsls	r3, r3, #31
 8002e26:	d537      	bpl.n	8002e98 <_printf_float+0x428>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	4642      	mov	r2, r8
 8002e2c:	4631      	mov	r1, r6
 8002e2e:	4628      	mov	r0, r5
 8002e30:	47b8      	blx	r7
 8002e32:	3001      	adds	r0, #1
 8002e34:	f43f ae77 	beq.w	8002b26 <_printf_float+0xb6>
 8002e38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e3c:	4631      	mov	r1, r6
 8002e3e:	4628      	mov	r0, r5
 8002e40:	47b8      	blx	r7
 8002e42:	3001      	adds	r0, #1
 8002e44:	f43f ae6f 	beq.w	8002b26 <_printf_float+0xb6>
 8002e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f7fd fe16 	bl	8000a80 <__aeabi_dcmpeq>
 8002e54:	b9d8      	cbnz	r0, 8002e8e <_printf_float+0x41e>
 8002e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e58:	f108 0201 	add.w	r2, r8, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	4631      	mov	r1, r6
 8002e60:	4628      	mov	r0, r5
 8002e62:	47b8      	blx	r7
 8002e64:	3001      	adds	r0, #1
 8002e66:	d10e      	bne.n	8002e86 <_printf_float+0x416>
 8002e68:	e65d      	b.n	8002b26 <_printf_float+0xb6>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	464a      	mov	r2, r9
 8002e6e:	4631      	mov	r1, r6
 8002e70:	4628      	mov	r0, r5
 8002e72:	47b8      	blx	r7
 8002e74:	3001      	adds	r0, #1
 8002e76:	f43f ae56 	beq.w	8002b26 <_printf_float+0xb6>
 8002e7a:	f108 0801 	add.w	r8, r8, #1
 8002e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e80:	3b01      	subs	r3, #1
 8002e82:	4543      	cmp	r3, r8
 8002e84:	dcf1      	bgt.n	8002e6a <_printf_float+0x3fa>
 8002e86:	4653      	mov	r3, sl
 8002e88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002e8c:	e6e0      	b.n	8002c50 <_printf_float+0x1e0>
 8002e8e:	f04f 0800 	mov.w	r8, #0
 8002e92:	f104 091a 	add.w	r9, r4, #26
 8002e96:	e7f2      	b.n	8002e7e <_printf_float+0x40e>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	4642      	mov	r2, r8
 8002e9c:	e7df      	b.n	8002e5e <_printf_float+0x3ee>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	464a      	mov	r2, r9
 8002ea2:	4631      	mov	r1, r6
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	47b8      	blx	r7
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	f43f ae3c 	beq.w	8002b26 <_printf_float+0xb6>
 8002eae:	f108 0801 	add.w	r8, r8, #1
 8002eb2:	68e3      	ldr	r3, [r4, #12]
 8002eb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002eb6:	1a5b      	subs	r3, r3, r1
 8002eb8:	4543      	cmp	r3, r8
 8002eba:	dcf0      	bgt.n	8002e9e <_printf_float+0x42e>
 8002ebc:	e6fd      	b.n	8002cba <_printf_float+0x24a>
 8002ebe:	f04f 0800 	mov.w	r8, #0
 8002ec2:	f104 0919 	add.w	r9, r4, #25
 8002ec6:	e7f4      	b.n	8002eb2 <_printf_float+0x442>

08002ec8 <_printf_common>:
 8002ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ecc:	4616      	mov	r6, r2
 8002ece:	4699      	mov	r9, r3
 8002ed0:	688a      	ldr	r2, [r1, #8]
 8002ed2:	690b      	ldr	r3, [r1, #16]
 8002ed4:	4607      	mov	r7, r0
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	bfb8      	it	lt
 8002eda:	4613      	movlt	r3, r2
 8002edc:	6033      	str	r3, [r6, #0]
 8002ede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ee8:	b10a      	cbz	r2, 8002eee <_printf_common+0x26>
 8002eea:	3301      	adds	r3, #1
 8002eec:	6033      	str	r3, [r6, #0]
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	0699      	lsls	r1, r3, #26
 8002ef2:	bf42      	ittt	mi
 8002ef4:	6833      	ldrmi	r3, [r6, #0]
 8002ef6:	3302      	addmi	r3, #2
 8002ef8:	6033      	strmi	r3, [r6, #0]
 8002efa:	6825      	ldr	r5, [r4, #0]
 8002efc:	f015 0506 	ands.w	r5, r5, #6
 8002f00:	d106      	bne.n	8002f10 <_printf_common+0x48>
 8002f02:	f104 0a19 	add.w	sl, r4, #25
 8002f06:	68e3      	ldr	r3, [r4, #12]
 8002f08:	6832      	ldr	r2, [r6, #0]
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	42ab      	cmp	r3, r5
 8002f0e:	dc28      	bgt.n	8002f62 <_printf_common+0x9a>
 8002f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f14:	1e13      	subs	r3, r2, #0
 8002f16:	6822      	ldr	r2, [r4, #0]
 8002f18:	bf18      	it	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	0692      	lsls	r2, r2, #26
 8002f1e:	d42d      	bmi.n	8002f7c <_printf_common+0xb4>
 8002f20:	4649      	mov	r1, r9
 8002f22:	4638      	mov	r0, r7
 8002f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f28:	47c0      	blx	r8
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d020      	beq.n	8002f70 <_printf_common+0xa8>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	68e5      	ldr	r5, [r4, #12]
 8002f32:	f003 0306 	and.w	r3, r3, #6
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf18      	it	ne
 8002f3a:	2500      	movne	r5, #0
 8002f3c:	6832      	ldr	r2, [r6, #0]
 8002f3e:	f04f 0600 	mov.w	r6, #0
 8002f42:	68a3      	ldr	r3, [r4, #8]
 8002f44:	bf08      	it	eq
 8002f46:	1aad      	subeq	r5, r5, r2
 8002f48:	6922      	ldr	r2, [r4, #16]
 8002f4a:	bf08      	it	eq
 8002f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bfc4      	itt	gt
 8002f54:	1a9b      	subgt	r3, r3, r2
 8002f56:	18ed      	addgt	r5, r5, r3
 8002f58:	341a      	adds	r4, #26
 8002f5a:	42b5      	cmp	r5, r6
 8002f5c:	d11a      	bne.n	8002f94 <_printf_common+0xcc>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e008      	b.n	8002f74 <_printf_common+0xac>
 8002f62:	2301      	movs	r3, #1
 8002f64:	4652      	mov	r2, sl
 8002f66:	4649      	mov	r1, r9
 8002f68:	4638      	mov	r0, r7
 8002f6a:	47c0      	blx	r8
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	d103      	bne.n	8002f78 <_printf_common+0xb0>
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f78:	3501      	adds	r5, #1
 8002f7a:	e7c4      	b.n	8002f06 <_printf_common+0x3e>
 8002f7c:	2030      	movs	r0, #48	; 0x30
 8002f7e:	18e1      	adds	r1, r4, r3
 8002f80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f8a:	4422      	add	r2, r4
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f92:	e7c5      	b.n	8002f20 <_printf_common+0x58>
 8002f94:	2301      	movs	r3, #1
 8002f96:	4622      	mov	r2, r4
 8002f98:	4649      	mov	r1, r9
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	47c0      	blx	r8
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d0e6      	beq.n	8002f70 <_printf_common+0xa8>
 8002fa2:	3601      	adds	r6, #1
 8002fa4:	e7d9      	b.n	8002f5a <_printf_common+0x92>
	...

08002fa8 <_printf_i>:
 8002fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fac:	460c      	mov	r4, r1
 8002fae:	7e27      	ldrb	r7, [r4, #24]
 8002fb0:	4691      	mov	r9, r2
 8002fb2:	2f78      	cmp	r7, #120	; 0x78
 8002fb4:	4680      	mov	r8, r0
 8002fb6:	469a      	mov	sl, r3
 8002fb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002fba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fbe:	d807      	bhi.n	8002fd0 <_printf_i+0x28>
 8002fc0:	2f62      	cmp	r7, #98	; 0x62
 8002fc2:	d80a      	bhi.n	8002fda <_printf_i+0x32>
 8002fc4:	2f00      	cmp	r7, #0
 8002fc6:	f000 80d9 	beq.w	800317c <_printf_i+0x1d4>
 8002fca:	2f58      	cmp	r7, #88	; 0x58
 8002fcc:	f000 80a4 	beq.w	8003118 <_printf_i+0x170>
 8002fd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fd8:	e03a      	b.n	8003050 <_printf_i+0xa8>
 8002fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fde:	2b15      	cmp	r3, #21
 8002fe0:	d8f6      	bhi.n	8002fd0 <_printf_i+0x28>
 8002fe2:	a001      	add	r0, pc, #4	; (adr r0, 8002fe8 <_printf_i+0x40>)
 8002fe4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fe8:	08003041 	.word	0x08003041
 8002fec:	08003055 	.word	0x08003055
 8002ff0:	08002fd1 	.word	0x08002fd1
 8002ff4:	08002fd1 	.word	0x08002fd1
 8002ff8:	08002fd1 	.word	0x08002fd1
 8002ffc:	08002fd1 	.word	0x08002fd1
 8003000:	08003055 	.word	0x08003055
 8003004:	08002fd1 	.word	0x08002fd1
 8003008:	08002fd1 	.word	0x08002fd1
 800300c:	08002fd1 	.word	0x08002fd1
 8003010:	08002fd1 	.word	0x08002fd1
 8003014:	08003163 	.word	0x08003163
 8003018:	08003085 	.word	0x08003085
 800301c:	08003145 	.word	0x08003145
 8003020:	08002fd1 	.word	0x08002fd1
 8003024:	08002fd1 	.word	0x08002fd1
 8003028:	08003185 	.word	0x08003185
 800302c:	08002fd1 	.word	0x08002fd1
 8003030:	08003085 	.word	0x08003085
 8003034:	08002fd1 	.word	0x08002fd1
 8003038:	08002fd1 	.word	0x08002fd1
 800303c:	0800314d 	.word	0x0800314d
 8003040:	680b      	ldr	r3, [r1, #0]
 8003042:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	600a      	str	r2, [r1, #0]
 800304c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003050:	2301      	movs	r3, #1
 8003052:	e0a4      	b.n	800319e <_printf_i+0x1f6>
 8003054:	6825      	ldr	r5, [r4, #0]
 8003056:	6808      	ldr	r0, [r1, #0]
 8003058:	062e      	lsls	r6, r5, #24
 800305a:	f100 0304 	add.w	r3, r0, #4
 800305e:	d50a      	bpl.n	8003076 <_printf_i+0xce>
 8003060:	6805      	ldr	r5, [r0, #0]
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	2d00      	cmp	r5, #0
 8003066:	da03      	bge.n	8003070 <_printf_i+0xc8>
 8003068:	232d      	movs	r3, #45	; 0x2d
 800306a:	426d      	negs	r5, r5
 800306c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003070:	230a      	movs	r3, #10
 8003072:	485e      	ldr	r0, [pc, #376]	; (80031ec <_printf_i+0x244>)
 8003074:	e019      	b.n	80030aa <_printf_i+0x102>
 8003076:	f015 0f40 	tst.w	r5, #64	; 0x40
 800307a:	6805      	ldr	r5, [r0, #0]
 800307c:	600b      	str	r3, [r1, #0]
 800307e:	bf18      	it	ne
 8003080:	b22d      	sxthne	r5, r5
 8003082:	e7ef      	b.n	8003064 <_printf_i+0xbc>
 8003084:	680b      	ldr	r3, [r1, #0]
 8003086:	6825      	ldr	r5, [r4, #0]
 8003088:	1d18      	adds	r0, r3, #4
 800308a:	6008      	str	r0, [r1, #0]
 800308c:	0628      	lsls	r0, r5, #24
 800308e:	d501      	bpl.n	8003094 <_printf_i+0xec>
 8003090:	681d      	ldr	r5, [r3, #0]
 8003092:	e002      	b.n	800309a <_printf_i+0xf2>
 8003094:	0669      	lsls	r1, r5, #25
 8003096:	d5fb      	bpl.n	8003090 <_printf_i+0xe8>
 8003098:	881d      	ldrh	r5, [r3, #0]
 800309a:	2f6f      	cmp	r7, #111	; 0x6f
 800309c:	bf0c      	ite	eq
 800309e:	2308      	moveq	r3, #8
 80030a0:	230a      	movne	r3, #10
 80030a2:	4852      	ldr	r0, [pc, #328]	; (80031ec <_printf_i+0x244>)
 80030a4:	2100      	movs	r1, #0
 80030a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030aa:	6866      	ldr	r6, [r4, #4]
 80030ac:	2e00      	cmp	r6, #0
 80030ae:	bfa8      	it	ge
 80030b0:	6821      	ldrge	r1, [r4, #0]
 80030b2:	60a6      	str	r6, [r4, #8]
 80030b4:	bfa4      	itt	ge
 80030b6:	f021 0104 	bicge.w	r1, r1, #4
 80030ba:	6021      	strge	r1, [r4, #0]
 80030bc:	b90d      	cbnz	r5, 80030c2 <_printf_i+0x11a>
 80030be:	2e00      	cmp	r6, #0
 80030c0:	d04d      	beq.n	800315e <_printf_i+0x1b6>
 80030c2:	4616      	mov	r6, r2
 80030c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80030c8:	fb03 5711 	mls	r7, r3, r1, r5
 80030cc:	5dc7      	ldrb	r7, [r0, r7]
 80030ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030d2:	462f      	mov	r7, r5
 80030d4:	42bb      	cmp	r3, r7
 80030d6:	460d      	mov	r5, r1
 80030d8:	d9f4      	bls.n	80030c4 <_printf_i+0x11c>
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d10b      	bne.n	80030f6 <_printf_i+0x14e>
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	07df      	lsls	r7, r3, #31
 80030e2:	d508      	bpl.n	80030f6 <_printf_i+0x14e>
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	6861      	ldr	r1, [r4, #4]
 80030e8:	4299      	cmp	r1, r3
 80030ea:	bfde      	ittt	le
 80030ec:	2330      	movle	r3, #48	; 0x30
 80030ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030f6:	1b92      	subs	r2, r2, r6
 80030f8:	6122      	str	r2, [r4, #16]
 80030fa:	464b      	mov	r3, r9
 80030fc:	4621      	mov	r1, r4
 80030fe:	4640      	mov	r0, r8
 8003100:	f8cd a000 	str.w	sl, [sp]
 8003104:	aa03      	add	r2, sp, #12
 8003106:	f7ff fedf 	bl	8002ec8 <_printf_common>
 800310a:	3001      	adds	r0, #1
 800310c:	d14c      	bne.n	80031a8 <_printf_i+0x200>
 800310e:	f04f 30ff 	mov.w	r0, #4294967295
 8003112:	b004      	add	sp, #16
 8003114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003118:	4834      	ldr	r0, [pc, #208]	; (80031ec <_printf_i+0x244>)
 800311a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800311e:	680e      	ldr	r6, [r1, #0]
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	f856 5b04 	ldr.w	r5, [r6], #4
 8003126:	061f      	lsls	r7, r3, #24
 8003128:	600e      	str	r6, [r1, #0]
 800312a:	d514      	bpl.n	8003156 <_printf_i+0x1ae>
 800312c:	07d9      	lsls	r1, r3, #31
 800312e:	bf44      	itt	mi
 8003130:	f043 0320 	orrmi.w	r3, r3, #32
 8003134:	6023      	strmi	r3, [r4, #0]
 8003136:	b91d      	cbnz	r5, 8003140 <_printf_i+0x198>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	f023 0320 	bic.w	r3, r3, #32
 800313e:	6023      	str	r3, [r4, #0]
 8003140:	2310      	movs	r3, #16
 8003142:	e7af      	b.n	80030a4 <_printf_i+0xfc>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	f043 0320 	orr.w	r3, r3, #32
 800314a:	6023      	str	r3, [r4, #0]
 800314c:	2378      	movs	r3, #120	; 0x78
 800314e:	4828      	ldr	r0, [pc, #160]	; (80031f0 <_printf_i+0x248>)
 8003150:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003154:	e7e3      	b.n	800311e <_printf_i+0x176>
 8003156:	065e      	lsls	r6, r3, #25
 8003158:	bf48      	it	mi
 800315a:	b2ad      	uxthmi	r5, r5
 800315c:	e7e6      	b.n	800312c <_printf_i+0x184>
 800315e:	4616      	mov	r6, r2
 8003160:	e7bb      	b.n	80030da <_printf_i+0x132>
 8003162:	680b      	ldr	r3, [r1, #0]
 8003164:	6826      	ldr	r6, [r4, #0]
 8003166:	1d1d      	adds	r5, r3, #4
 8003168:	6960      	ldr	r0, [r4, #20]
 800316a:	600d      	str	r5, [r1, #0]
 800316c:	0635      	lsls	r5, r6, #24
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	d501      	bpl.n	8003176 <_printf_i+0x1ce>
 8003172:	6018      	str	r0, [r3, #0]
 8003174:	e002      	b.n	800317c <_printf_i+0x1d4>
 8003176:	0671      	lsls	r1, r6, #25
 8003178:	d5fb      	bpl.n	8003172 <_printf_i+0x1ca>
 800317a:	8018      	strh	r0, [r3, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	4616      	mov	r6, r2
 8003180:	6123      	str	r3, [r4, #16]
 8003182:	e7ba      	b.n	80030fa <_printf_i+0x152>
 8003184:	680b      	ldr	r3, [r1, #0]
 8003186:	1d1a      	adds	r2, r3, #4
 8003188:	600a      	str	r2, [r1, #0]
 800318a:	681e      	ldr	r6, [r3, #0]
 800318c:	2100      	movs	r1, #0
 800318e:	4630      	mov	r0, r6
 8003190:	6862      	ldr	r2, [r4, #4]
 8003192:	f001 f9b7 	bl	8004504 <memchr>
 8003196:	b108      	cbz	r0, 800319c <_printf_i+0x1f4>
 8003198:	1b80      	subs	r0, r0, r6
 800319a:	6060      	str	r0, [r4, #4]
 800319c:	6863      	ldr	r3, [r4, #4]
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	2300      	movs	r3, #0
 80031a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a6:	e7a8      	b.n	80030fa <_printf_i+0x152>
 80031a8:	4632      	mov	r2, r6
 80031aa:	4649      	mov	r1, r9
 80031ac:	4640      	mov	r0, r8
 80031ae:	6923      	ldr	r3, [r4, #16]
 80031b0:	47d0      	blx	sl
 80031b2:	3001      	adds	r0, #1
 80031b4:	d0ab      	beq.n	800310e <_printf_i+0x166>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	079b      	lsls	r3, r3, #30
 80031ba:	d413      	bmi.n	80031e4 <_printf_i+0x23c>
 80031bc:	68e0      	ldr	r0, [r4, #12]
 80031be:	9b03      	ldr	r3, [sp, #12]
 80031c0:	4298      	cmp	r0, r3
 80031c2:	bfb8      	it	lt
 80031c4:	4618      	movlt	r0, r3
 80031c6:	e7a4      	b.n	8003112 <_printf_i+0x16a>
 80031c8:	2301      	movs	r3, #1
 80031ca:	4632      	mov	r2, r6
 80031cc:	4649      	mov	r1, r9
 80031ce:	4640      	mov	r0, r8
 80031d0:	47d0      	blx	sl
 80031d2:	3001      	adds	r0, #1
 80031d4:	d09b      	beq.n	800310e <_printf_i+0x166>
 80031d6:	3501      	adds	r5, #1
 80031d8:	68e3      	ldr	r3, [r4, #12]
 80031da:	9903      	ldr	r1, [sp, #12]
 80031dc:	1a5b      	subs	r3, r3, r1
 80031de:	42ab      	cmp	r3, r5
 80031e0:	dcf2      	bgt.n	80031c8 <_printf_i+0x220>
 80031e2:	e7eb      	b.n	80031bc <_printf_i+0x214>
 80031e4:	2500      	movs	r5, #0
 80031e6:	f104 0619 	add.w	r6, r4, #25
 80031ea:	e7f5      	b.n	80031d8 <_printf_i+0x230>
 80031ec:	08005522 	.word	0x08005522
 80031f0:	08005533 	.word	0x08005533

080031f4 <iprintf>:
 80031f4:	b40f      	push	{r0, r1, r2, r3}
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <iprintf+0x2c>)
 80031f8:	b513      	push	{r0, r1, r4, lr}
 80031fa:	681c      	ldr	r4, [r3, #0]
 80031fc:	b124      	cbz	r4, 8003208 <iprintf+0x14>
 80031fe:	69a3      	ldr	r3, [r4, #24]
 8003200:	b913      	cbnz	r3, 8003208 <iprintf+0x14>
 8003202:	4620      	mov	r0, r4
 8003204:	f001 f86c 	bl	80042e0 <__sinit>
 8003208:	ab05      	add	r3, sp, #20
 800320a:	4620      	mov	r0, r4
 800320c:	9a04      	ldr	r2, [sp, #16]
 800320e:	68a1      	ldr	r1, [r4, #8]
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	f001 fdf1 	bl	8004df8 <_vfiprintf_r>
 8003216:	b002      	add	sp, #8
 8003218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800321c:	b004      	add	sp, #16
 800321e:	4770      	bx	lr
 8003220:	2000000c 	.word	0x2000000c

08003224 <setvbuf>:
 8003224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003228:	461d      	mov	r5, r3
 800322a:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <setvbuf+0x17c>)
 800322c:	4604      	mov	r4, r0
 800322e:	681f      	ldr	r7, [r3, #0]
 8003230:	460e      	mov	r6, r1
 8003232:	4690      	mov	r8, r2
 8003234:	b127      	cbz	r7, 8003240 <setvbuf+0x1c>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	b913      	cbnz	r3, 8003240 <setvbuf+0x1c>
 800323a:	4638      	mov	r0, r7
 800323c:	f001 f850 	bl	80042e0 <__sinit>
 8003240:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <setvbuf+0x180>)
 8003242:	429c      	cmp	r4, r3
 8003244:	d167      	bne.n	8003316 <setvbuf+0xf2>
 8003246:	687c      	ldr	r4, [r7, #4]
 8003248:	f1b8 0f02 	cmp.w	r8, #2
 800324c:	d006      	beq.n	800325c <setvbuf+0x38>
 800324e:	f1b8 0f01 	cmp.w	r8, #1
 8003252:	f200 809f 	bhi.w	8003394 <setvbuf+0x170>
 8003256:	2d00      	cmp	r5, #0
 8003258:	f2c0 809c 	blt.w	8003394 <setvbuf+0x170>
 800325c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800325e:	07db      	lsls	r3, r3, #31
 8003260:	d405      	bmi.n	800326e <setvbuf+0x4a>
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	0598      	lsls	r0, r3, #22
 8003266:	d402      	bmi.n	800326e <setvbuf+0x4a>
 8003268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800326a:	f001 f8dc 	bl	8004426 <__retarget_lock_acquire_recursive>
 800326e:	4621      	mov	r1, r4
 8003270:	4638      	mov	r0, r7
 8003272:	f000 ffa1 	bl	80041b8 <_fflush_r>
 8003276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003278:	b141      	cbz	r1, 800328c <setvbuf+0x68>
 800327a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800327e:	4299      	cmp	r1, r3
 8003280:	d002      	beq.n	8003288 <setvbuf+0x64>
 8003282:	4638      	mov	r0, r7
 8003284:	f001 fcea 	bl	8004c5c <_free_r>
 8003288:	2300      	movs	r3, #0
 800328a:	6363      	str	r3, [r4, #52]	; 0x34
 800328c:	2300      	movs	r3, #0
 800328e:	61a3      	str	r3, [r4, #24]
 8003290:	6063      	str	r3, [r4, #4]
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	0619      	lsls	r1, r3, #24
 8003296:	d503      	bpl.n	80032a0 <setvbuf+0x7c>
 8003298:	4638      	mov	r0, r7
 800329a:	6921      	ldr	r1, [r4, #16]
 800329c:	f001 fcde 	bl	8004c5c <_free_r>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f1b8 0f02 	cmp.w	r8, #2
 80032a6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80032aa:	f023 0303 	bic.w	r3, r3, #3
 80032ae:	81a3      	strh	r3, [r4, #12]
 80032b0:	d06c      	beq.n	800338c <setvbuf+0x168>
 80032b2:	ab01      	add	r3, sp, #4
 80032b4:	466a      	mov	r2, sp
 80032b6:	4621      	mov	r1, r4
 80032b8:	4638      	mov	r0, r7
 80032ba:	f001 f8b6 	bl	800442a <__swhatbuf_r>
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	4318      	orrs	r0, r3
 80032c2:	81a0      	strh	r0, [r4, #12]
 80032c4:	2d00      	cmp	r5, #0
 80032c6:	d130      	bne.n	800332a <setvbuf+0x106>
 80032c8:	9d00      	ldr	r5, [sp, #0]
 80032ca:	4628      	mov	r0, r5
 80032cc:	f001 f912 	bl	80044f4 <malloc>
 80032d0:	4606      	mov	r6, r0
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d155      	bne.n	8003382 <setvbuf+0x15e>
 80032d6:	f8dd 9000 	ldr.w	r9, [sp]
 80032da:	45a9      	cmp	r9, r5
 80032dc:	d14a      	bne.n	8003374 <setvbuf+0x150>
 80032de:	f04f 35ff 	mov.w	r5, #4294967295
 80032e2:	2200      	movs	r2, #0
 80032e4:	60a2      	str	r2, [r4, #8]
 80032e6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80032ea:	6022      	str	r2, [r4, #0]
 80032ec:	6122      	str	r2, [r4, #16]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032f4:	6162      	str	r2, [r4, #20]
 80032f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	07d2      	lsls	r2, r2, #31
 80032fe:	81a3      	strh	r3, [r4, #12]
 8003300:	d405      	bmi.n	800330e <setvbuf+0xea>
 8003302:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003306:	d102      	bne.n	800330e <setvbuf+0xea>
 8003308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800330a:	f001 f88d 	bl	8004428 <__retarget_lock_release_recursive>
 800330e:	4628      	mov	r0, r5
 8003310:	b003      	add	sp, #12
 8003312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <setvbuf+0x184>)
 8003318:	429c      	cmp	r4, r3
 800331a:	d101      	bne.n	8003320 <setvbuf+0xfc>
 800331c:	68bc      	ldr	r4, [r7, #8]
 800331e:	e793      	b.n	8003248 <setvbuf+0x24>
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <setvbuf+0x188>)
 8003322:	429c      	cmp	r4, r3
 8003324:	bf08      	it	eq
 8003326:	68fc      	ldreq	r4, [r7, #12]
 8003328:	e78e      	b.n	8003248 <setvbuf+0x24>
 800332a:	2e00      	cmp	r6, #0
 800332c:	d0cd      	beq.n	80032ca <setvbuf+0xa6>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	b913      	cbnz	r3, 8003338 <setvbuf+0x114>
 8003332:	4638      	mov	r0, r7
 8003334:	f000 ffd4 	bl	80042e0 <__sinit>
 8003338:	f1b8 0f01 	cmp.w	r8, #1
 800333c:	bf08      	it	eq
 800333e:	89a3      	ldrheq	r3, [r4, #12]
 8003340:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003344:	bf04      	itt	eq
 8003346:	f043 0301 	orreq.w	r3, r3, #1
 800334a:	81a3      	strheq	r3, [r4, #12]
 800334c:	89a2      	ldrh	r2, [r4, #12]
 800334e:	6026      	str	r6, [r4, #0]
 8003350:	f012 0308 	ands.w	r3, r2, #8
 8003354:	d01c      	beq.n	8003390 <setvbuf+0x16c>
 8003356:	07d3      	lsls	r3, r2, #31
 8003358:	bf41      	itttt	mi
 800335a:	2300      	movmi	r3, #0
 800335c:	426d      	negmi	r5, r5
 800335e:	60a3      	strmi	r3, [r4, #8]
 8003360:	61a5      	strmi	r5, [r4, #24]
 8003362:	bf58      	it	pl
 8003364:	60a5      	strpl	r5, [r4, #8]
 8003366:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003368:	f015 0501 	ands.w	r5, r5, #1
 800336c:	d115      	bne.n	800339a <setvbuf+0x176>
 800336e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003372:	e7c8      	b.n	8003306 <setvbuf+0xe2>
 8003374:	4648      	mov	r0, r9
 8003376:	f001 f8bd 	bl	80044f4 <malloc>
 800337a:	4606      	mov	r6, r0
 800337c:	2800      	cmp	r0, #0
 800337e:	d0ae      	beq.n	80032de <setvbuf+0xba>
 8003380:	464d      	mov	r5, r9
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003388:	81a3      	strh	r3, [r4, #12]
 800338a:	e7d0      	b.n	800332e <setvbuf+0x10a>
 800338c:	2500      	movs	r5, #0
 800338e:	e7a8      	b.n	80032e2 <setvbuf+0xbe>
 8003390:	60a3      	str	r3, [r4, #8]
 8003392:	e7e8      	b.n	8003366 <setvbuf+0x142>
 8003394:	f04f 35ff 	mov.w	r5, #4294967295
 8003398:	e7b9      	b.n	800330e <setvbuf+0xea>
 800339a:	2500      	movs	r5, #0
 800339c:	e7b7      	b.n	800330e <setvbuf+0xea>
 800339e:	bf00      	nop
 80033a0:	2000000c 	.word	0x2000000c
 80033a4:	080055f8 	.word	0x080055f8
 80033a8:	08005618 	.word	0x08005618
 80033ac:	080055d8 	.word	0x080055d8

080033b0 <quorem>:
 80033b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b4:	6903      	ldr	r3, [r0, #16]
 80033b6:	690c      	ldr	r4, [r1, #16]
 80033b8:	4607      	mov	r7, r0
 80033ba:	42a3      	cmp	r3, r4
 80033bc:	f2c0 8083 	blt.w	80034c6 <quorem+0x116>
 80033c0:	3c01      	subs	r4, #1
 80033c2:	f100 0514 	add.w	r5, r0, #20
 80033c6:	f101 0814 	add.w	r8, r1, #20
 80033ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80033d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80033d8:	3301      	adds	r3, #1
 80033da:	429a      	cmp	r2, r3
 80033dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80033e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80033e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80033e8:	d332      	bcc.n	8003450 <quorem+0xa0>
 80033ea:	f04f 0e00 	mov.w	lr, #0
 80033ee:	4640      	mov	r0, r8
 80033f0:	46ac      	mov	ip, r5
 80033f2:	46f2      	mov	sl, lr
 80033f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80033f8:	b293      	uxth	r3, r2
 80033fa:	fb06 e303 	mla	r3, r6, r3, lr
 80033fe:	0c12      	lsrs	r2, r2, #16
 8003400:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003404:	fb06 e202 	mla	r2, r6, r2, lr
 8003408:	b29b      	uxth	r3, r3
 800340a:	ebaa 0303 	sub.w	r3, sl, r3
 800340e:	f8dc a000 	ldr.w	sl, [ip]
 8003412:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003416:	fa1f fa8a 	uxth.w	sl, sl
 800341a:	4453      	add	r3, sl
 800341c:	fa1f fa82 	uxth.w	sl, r2
 8003420:	f8dc 2000 	ldr.w	r2, [ip]
 8003424:	4581      	cmp	r9, r0
 8003426:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800342a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800342e:	b29b      	uxth	r3, r3
 8003430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003434:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003438:	f84c 3b04 	str.w	r3, [ip], #4
 800343c:	d2da      	bcs.n	80033f4 <quorem+0x44>
 800343e:	f855 300b 	ldr.w	r3, [r5, fp]
 8003442:	b92b      	cbnz	r3, 8003450 <quorem+0xa0>
 8003444:	9b01      	ldr	r3, [sp, #4]
 8003446:	3b04      	subs	r3, #4
 8003448:	429d      	cmp	r5, r3
 800344a:	461a      	mov	r2, r3
 800344c:	d32f      	bcc.n	80034ae <quorem+0xfe>
 800344e:	613c      	str	r4, [r7, #16]
 8003450:	4638      	mov	r0, r7
 8003452:	f001 faed 	bl	8004a30 <__mcmp>
 8003456:	2800      	cmp	r0, #0
 8003458:	db25      	blt.n	80034a6 <quorem+0xf6>
 800345a:	4628      	mov	r0, r5
 800345c:	f04f 0c00 	mov.w	ip, #0
 8003460:	3601      	adds	r6, #1
 8003462:	f858 1b04 	ldr.w	r1, [r8], #4
 8003466:	f8d0 e000 	ldr.w	lr, [r0]
 800346a:	b28b      	uxth	r3, r1
 800346c:	ebac 0303 	sub.w	r3, ip, r3
 8003470:	fa1f f28e 	uxth.w	r2, lr
 8003474:	4413      	add	r3, r2
 8003476:	0c0a      	lsrs	r2, r1, #16
 8003478:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800347c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003480:	b29b      	uxth	r3, r3
 8003482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003486:	45c1      	cmp	r9, r8
 8003488:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800348c:	f840 3b04 	str.w	r3, [r0], #4
 8003490:	d2e7      	bcs.n	8003462 <quorem+0xb2>
 8003492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800349a:	b922      	cbnz	r2, 80034a6 <quorem+0xf6>
 800349c:	3b04      	subs	r3, #4
 800349e:	429d      	cmp	r5, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	d30a      	bcc.n	80034ba <quorem+0x10a>
 80034a4:	613c      	str	r4, [r7, #16]
 80034a6:	4630      	mov	r0, r6
 80034a8:	b003      	add	sp, #12
 80034aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	3b04      	subs	r3, #4
 80034b2:	2a00      	cmp	r2, #0
 80034b4:	d1cb      	bne.n	800344e <quorem+0x9e>
 80034b6:	3c01      	subs	r4, #1
 80034b8:	e7c6      	b.n	8003448 <quorem+0x98>
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	3b04      	subs	r3, #4
 80034be:	2a00      	cmp	r2, #0
 80034c0:	d1f0      	bne.n	80034a4 <quorem+0xf4>
 80034c2:	3c01      	subs	r4, #1
 80034c4:	e7eb      	b.n	800349e <quorem+0xee>
 80034c6:	2000      	movs	r0, #0
 80034c8:	e7ee      	b.n	80034a8 <quorem+0xf8>
 80034ca:	0000      	movs	r0, r0
 80034cc:	0000      	movs	r0, r0
	...

080034d0 <_dtoa_r>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	4616      	mov	r6, r2
 80034d6:	461f      	mov	r7, r3
 80034d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80034da:	b099      	sub	sp, #100	; 0x64
 80034dc:	4605      	mov	r5, r0
 80034de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80034e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80034e6:	b974      	cbnz	r4, 8003506 <_dtoa_r+0x36>
 80034e8:	2010      	movs	r0, #16
 80034ea:	f001 f803 	bl	80044f4 <malloc>
 80034ee:	4602      	mov	r2, r0
 80034f0:	6268      	str	r0, [r5, #36]	; 0x24
 80034f2:	b920      	cbnz	r0, 80034fe <_dtoa_r+0x2e>
 80034f4:	21ea      	movs	r1, #234	; 0xea
 80034f6:	4bae      	ldr	r3, [pc, #696]	; (80037b0 <_dtoa_r+0x2e0>)
 80034f8:	48ae      	ldr	r0, [pc, #696]	; (80037b4 <_dtoa_r+0x2e4>)
 80034fa:	f001 fed3 	bl	80052a4 <__assert_func>
 80034fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003502:	6004      	str	r4, [r0, #0]
 8003504:	60c4      	str	r4, [r0, #12]
 8003506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	b151      	cbz	r1, 8003522 <_dtoa_r+0x52>
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	2301      	movs	r3, #1
 8003510:	4093      	lsls	r3, r2
 8003512:	604a      	str	r2, [r1, #4]
 8003514:	608b      	str	r3, [r1, #8]
 8003516:	4628      	mov	r0, r5
 8003518:	f001 f850 	bl	80045bc <_Bfree>
 800351c:	2200      	movs	r2, #0
 800351e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	1e3b      	subs	r3, r7, #0
 8003524:	bfaf      	iteee	ge
 8003526:	2300      	movge	r3, #0
 8003528:	2201      	movlt	r2, #1
 800352a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800352e:	9305      	strlt	r3, [sp, #20]
 8003530:	bfa8      	it	ge
 8003532:	f8c8 3000 	strge.w	r3, [r8]
 8003536:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800353a:	4b9f      	ldr	r3, [pc, #636]	; (80037b8 <_dtoa_r+0x2e8>)
 800353c:	bfb8      	it	lt
 800353e:	f8c8 2000 	strlt.w	r2, [r8]
 8003542:	ea33 0309 	bics.w	r3, r3, r9
 8003546:	d119      	bne.n	800357c <_dtoa_r+0xac>
 8003548:	f242 730f 	movw	r3, #9999	; 0x270f
 800354c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003554:	4333      	orrs	r3, r6
 8003556:	f000 8580 	beq.w	800405a <_dtoa_r+0xb8a>
 800355a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800355c:	b953      	cbnz	r3, 8003574 <_dtoa_r+0xa4>
 800355e:	4b97      	ldr	r3, [pc, #604]	; (80037bc <_dtoa_r+0x2ec>)
 8003560:	e022      	b.n	80035a8 <_dtoa_r+0xd8>
 8003562:	4b97      	ldr	r3, [pc, #604]	; (80037c0 <_dtoa_r+0x2f0>)
 8003564:	9308      	str	r3, [sp, #32]
 8003566:	3308      	adds	r3, #8
 8003568:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	9808      	ldr	r0, [sp, #32]
 800356e:	b019      	add	sp, #100	; 0x64
 8003570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003574:	4b91      	ldr	r3, [pc, #580]	; (80037bc <_dtoa_r+0x2ec>)
 8003576:	9308      	str	r3, [sp, #32]
 8003578:	3303      	adds	r3, #3
 800357a:	e7f5      	b.n	8003568 <_dtoa_r+0x98>
 800357c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003580:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003588:	2200      	movs	r2, #0
 800358a:	2300      	movs	r3, #0
 800358c:	f7fd fa78 	bl	8000a80 <__aeabi_dcmpeq>
 8003590:	4680      	mov	r8, r0
 8003592:	b158      	cbz	r0, 80035ac <_dtoa_r+0xdc>
 8003594:	2301      	movs	r3, #1
 8003596:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8559 	beq.w	8004054 <_dtoa_r+0xb84>
 80035a2:	4888      	ldr	r0, [pc, #544]	; (80037c4 <_dtoa_r+0x2f4>)
 80035a4:	6018      	str	r0, [r3, #0]
 80035a6:	1e43      	subs	r3, r0, #1
 80035a8:	9308      	str	r3, [sp, #32]
 80035aa:	e7df      	b.n	800356c <_dtoa_r+0x9c>
 80035ac:	ab16      	add	r3, sp, #88	; 0x58
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	ab17      	add	r3, sp, #92	; 0x5c
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4628      	mov	r0, r5
 80035b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80035ba:	f001 fae5 	bl	8004b88 <__d2b>
 80035be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80035c2:	4682      	mov	sl, r0
 80035c4:	2c00      	cmp	r4, #0
 80035c6:	d07e      	beq.n	80036c6 <_dtoa_r+0x1f6>
 80035c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80035cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80035d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80035da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80035de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80035e2:	2200      	movs	r2, #0
 80035e4:	4b78      	ldr	r3, [pc, #480]	; (80037c8 <_dtoa_r+0x2f8>)
 80035e6:	f7fc fe2b 	bl	8000240 <__aeabi_dsub>
 80035ea:	a36b      	add	r3, pc, #428	; (adr r3, 8003798 <_dtoa_r+0x2c8>)
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	f7fc ffde 	bl	80005b0 <__aeabi_dmul>
 80035f4:	a36a      	add	r3, pc, #424	; (adr r3, 80037a0 <_dtoa_r+0x2d0>)
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f7fc fe23 	bl	8000244 <__adddf3>
 80035fe:	4606      	mov	r6, r0
 8003600:	4620      	mov	r0, r4
 8003602:	460f      	mov	r7, r1
 8003604:	f7fc ff6a 	bl	80004dc <__aeabi_i2d>
 8003608:	a367      	add	r3, pc, #412	; (adr r3, 80037a8 <_dtoa_r+0x2d8>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f7fc ffcf 	bl	80005b0 <__aeabi_dmul>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4630      	mov	r0, r6
 8003618:	4639      	mov	r1, r7
 800361a:	f7fc fe13 	bl	8000244 <__adddf3>
 800361e:	4606      	mov	r6, r0
 8003620:	460f      	mov	r7, r1
 8003622:	f7fd fa75 	bl	8000b10 <__aeabi_d2iz>
 8003626:	2200      	movs	r2, #0
 8003628:	4681      	mov	r9, r0
 800362a:	2300      	movs	r3, #0
 800362c:	4630      	mov	r0, r6
 800362e:	4639      	mov	r1, r7
 8003630:	f7fd fa30 	bl	8000a94 <__aeabi_dcmplt>
 8003634:	b148      	cbz	r0, 800364a <_dtoa_r+0x17a>
 8003636:	4648      	mov	r0, r9
 8003638:	f7fc ff50 	bl	80004dc <__aeabi_i2d>
 800363c:	4632      	mov	r2, r6
 800363e:	463b      	mov	r3, r7
 8003640:	f7fd fa1e 	bl	8000a80 <__aeabi_dcmpeq>
 8003644:	b908      	cbnz	r0, 800364a <_dtoa_r+0x17a>
 8003646:	f109 39ff 	add.w	r9, r9, #4294967295
 800364a:	f1b9 0f16 	cmp.w	r9, #22
 800364e:	d857      	bhi.n	8003700 <_dtoa_r+0x230>
 8003650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003654:	4b5d      	ldr	r3, [pc, #372]	; (80037cc <_dtoa_r+0x2fc>)
 8003656:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f7fd fa19 	bl	8000a94 <__aeabi_dcmplt>
 8003662:	2800      	cmp	r0, #0
 8003664:	d04e      	beq.n	8003704 <_dtoa_r+0x234>
 8003666:	2300      	movs	r3, #0
 8003668:	f109 39ff 	add.w	r9, r9, #4294967295
 800366c:	930f      	str	r3, [sp, #60]	; 0x3c
 800366e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003670:	1b1c      	subs	r4, r3, r4
 8003672:	1e63      	subs	r3, r4, #1
 8003674:	9309      	str	r3, [sp, #36]	; 0x24
 8003676:	bf49      	itett	mi
 8003678:	f1c4 0301 	rsbmi	r3, r4, #1
 800367c:	2300      	movpl	r3, #0
 800367e:	9306      	strmi	r3, [sp, #24]
 8003680:	2300      	movmi	r3, #0
 8003682:	bf54      	ite	pl
 8003684:	9306      	strpl	r3, [sp, #24]
 8003686:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003688:	f1b9 0f00 	cmp.w	r9, #0
 800368c:	db3c      	blt.n	8003708 <_dtoa_r+0x238>
 800368e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003690:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003694:	444b      	add	r3, r9
 8003696:	9309      	str	r3, [sp, #36]	; 0x24
 8003698:	2300      	movs	r3, #0
 800369a:	930a      	str	r3, [sp, #40]	; 0x28
 800369c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800369e:	2b09      	cmp	r3, #9
 80036a0:	d86c      	bhi.n	800377c <_dtoa_r+0x2ac>
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	bfc4      	itt	gt
 80036a6:	3b04      	subgt	r3, #4
 80036a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80036aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036ac:	bfc8      	it	gt
 80036ae:	2400      	movgt	r4, #0
 80036b0:	f1a3 0302 	sub.w	r3, r3, #2
 80036b4:	bfd8      	it	le
 80036b6:	2401      	movle	r4, #1
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	f200 808b 	bhi.w	80037d4 <_dtoa_r+0x304>
 80036be:	e8df f003 	tbb	[pc, r3]
 80036c2:	4f2d      	.short	0x4f2d
 80036c4:	5b4d      	.short	0x5b4d
 80036c6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80036ca:	441c      	add	r4, r3
 80036cc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	bfc3      	ittte	gt
 80036d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80036d8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80036dc:	fa09 f303 	lslgt.w	r3, r9, r3
 80036e0:	f1c3 0320 	rsble	r3, r3, #32
 80036e4:	bfc6      	itte	gt
 80036e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80036ea:	4318      	orrgt	r0, r3
 80036ec:	fa06 f003 	lslle.w	r0, r6, r3
 80036f0:	f7fc fee4 	bl	80004bc <__aeabi_ui2d>
 80036f4:	2301      	movs	r3, #1
 80036f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80036fa:	3c01      	subs	r4, #1
 80036fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80036fe:	e770      	b.n	80035e2 <_dtoa_r+0x112>
 8003700:	2301      	movs	r3, #1
 8003702:	e7b3      	b.n	800366c <_dtoa_r+0x19c>
 8003704:	900f      	str	r0, [sp, #60]	; 0x3c
 8003706:	e7b2      	b.n	800366e <_dtoa_r+0x19e>
 8003708:	9b06      	ldr	r3, [sp, #24]
 800370a:	eba3 0309 	sub.w	r3, r3, r9
 800370e:	9306      	str	r3, [sp, #24]
 8003710:	f1c9 0300 	rsb	r3, r9, #0
 8003714:	930a      	str	r3, [sp, #40]	; 0x28
 8003716:	2300      	movs	r3, #0
 8003718:	930e      	str	r3, [sp, #56]	; 0x38
 800371a:	e7bf      	b.n	800369c <_dtoa_r+0x1cc>
 800371c:	2300      	movs	r3, #0
 800371e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003720:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003722:	2b00      	cmp	r3, #0
 8003724:	dc59      	bgt.n	80037da <_dtoa_r+0x30a>
 8003726:	f04f 0b01 	mov.w	fp, #1
 800372a:	465b      	mov	r3, fp
 800372c:	f8cd b008 	str.w	fp, [sp, #8]
 8003730:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003734:	2200      	movs	r2, #0
 8003736:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003738:	6042      	str	r2, [r0, #4]
 800373a:	2204      	movs	r2, #4
 800373c:	f102 0614 	add.w	r6, r2, #20
 8003740:	429e      	cmp	r6, r3
 8003742:	6841      	ldr	r1, [r0, #4]
 8003744:	d94f      	bls.n	80037e6 <_dtoa_r+0x316>
 8003746:	4628      	mov	r0, r5
 8003748:	f000 fef8 	bl	800453c <_Balloc>
 800374c:	9008      	str	r0, [sp, #32]
 800374e:	2800      	cmp	r0, #0
 8003750:	d14d      	bne.n	80037ee <_dtoa_r+0x31e>
 8003752:	4602      	mov	r2, r0
 8003754:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <_dtoa_r+0x300>)
 800375a:	e6cd      	b.n	80034f8 <_dtoa_r+0x28>
 800375c:	2301      	movs	r3, #1
 800375e:	e7de      	b.n	800371e <_dtoa_r+0x24e>
 8003760:	2300      	movs	r3, #0
 8003762:	930b      	str	r3, [sp, #44]	; 0x2c
 8003764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003766:	eb09 0b03 	add.w	fp, r9, r3
 800376a:	f10b 0301 	add.w	r3, fp, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	9302      	str	r3, [sp, #8]
 8003772:	bfb8      	it	lt
 8003774:	2301      	movlt	r3, #1
 8003776:	e7dd      	b.n	8003734 <_dtoa_r+0x264>
 8003778:	2301      	movs	r3, #1
 800377a:	e7f2      	b.n	8003762 <_dtoa_r+0x292>
 800377c:	2401      	movs	r4, #1
 800377e:	2300      	movs	r3, #0
 8003780:	940b      	str	r4, [sp, #44]	; 0x2c
 8003782:	9322      	str	r3, [sp, #136]	; 0x88
 8003784:	f04f 3bff 	mov.w	fp, #4294967295
 8003788:	2200      	movs	r2, #0
 800378a:	2312      	movs	r3, #18
 800378c:	f8cd b008 	str.w	fp, [sp, #8]
 8003790:	9223      	str	r2, [sp, #140]	; 0x8c
 8003792:	e7cf      	b.n	8003734 <_dtoa_r+0x264>
 8003794:	f3af 8000 	nop.w
 8003798:	636f4361 	.word	0x636f4361
 800379c:	3fd287a7 	.word	0x3fd287a7
 80037a0:	8b60c8b3 	.word	0x8b60c8b3
 80037a4:	3fc68a28 	.word	0x3fc68a28
 80037a8:	509f79fb 	.word	0x509f79fb
 80037ac:	3fd34413 	.word	0x3fd34413
 80037b0:	08005551 	.word	0x08005551
 80037b4:	08005568 	.word	0x08005568
 80037b8:	7ff00000 	.word	0x7ff00000
 80037bc:	0800554d 	.word	0x0800554d
 80037c0:	08005544 	.word	0x08005544
 80037c4:	08005521 	.word	0x08005521
 80037c8:	3ff80000 	.word	0x3ff80000
 80037cc:	080056c0 	.word	0x080056c0
 80037d0:	080055c7 	.word	0x080055c7
 80037d4:	2301      	movs	r3, #1
 80037d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80037d8:	e7d4      	b.n	8003784 <_dtoa_r+0x2b4>
 80037da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80037de:	465b      	mov	r3, fp
 80037e0:	f8cd b008 	str.w	fp, [sp, #8]
 80037e4:	e7a6      	b.n	8003734 <_dtoa_r+0x264>
 80037e6:	3101      	adds	r1, #1
 80037e8:	6041      	str	r1, [r0, #4]
 80037ea:	0052      	lsls	r2, r2, #1
 80037ec:	e7a6      	b.n	800373c <_dtoa_r+0x26c>
 80037ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80037f0:	9a08      	ldr	r2, [sp, #32]
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	9b02      	ldr	r3, [sp, #8]
 80037f6:	2b0e      	cmp	r3, #14
 80037f8:	f200 80a8 	bhi.w	800394c <_dtoa_r+0x47c>
 80037fc:	2c00      	cmp	r4, #0
 80037fe:	f000 80a5 	beq.w	800394c <_dtoa_r+0x47c>
 8003802:	f1b9 0f00 	cmp.w	r9, #0
 8003806:	dd34      	ble.n	8003872 <_dtoa_r+0x3a2>
 8003808:	4a9a      	ldr	r2, [pc, #616]	; (8003a74 <_dtoa_r+0x5a4>)
 800380a:	f009 030f 	and.w	r3, r9, #15
 800380e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003812:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003816:	e9d3 3400 	ldrd	r3, r4, [r3]
 800381a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800381e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003822:	d016      	beq.n	8003852 <_dtoa_r+0x382>
 8003824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003828:	4b93      	ldr	r3, [pc, #588]	; (8003a78 <_dtoa_r+0x5a8>)
 800382a:	2703      	movs	r7, #3
 800382c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003830:	f7fc ffe8 	bl	8000804 <__aeabi_ddiv>
 8003834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003838:	f004 040f 	and.w	r4, r4, #15
 800383c:	4e8e      	ldr	r6, [pc, #568]	; (8003a78 <_dtoa_r+0x5a8>)
 800383e:	b954      	cbnz	r4, 8003856 <_dtoa_r+0x386>
 8003840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003848:	f7fc ffdc 	bl	8000804 <__aeabi_ddiv>
 800384c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003850:	e029      	b.n	80038a6 <_dtoa_r+0x3d6>
 8003852:	2702      	movs	r7, #2
 8003854:	e7f2      	b.n	800383c <_dtoa_r+0x36c>
 8003856:	07e1      	lsls	r1, r4, #31
 8003858:	d508      	bpl.n	800386c <_dtoa_r+0x39c>
 800385a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800385e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003862:	f7fc fea5 	bl	80005b0 <__aeabi_dmul>
 8003866:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800386a:	3701      	adds	r7, #1
 800386c:	1064      	asrs	r4, r4, #1
 800386e:	3608      	adds	r6, #8
 8003870:	e7e5      	b.n	800383e <_dtoa_r+0x36e>
 8003872:	f000 80a5 	beq.w	80039c0 <_dtoa_r+0x4f0>
 8003876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800387a:	f1c9 0400 	rsb	r4, r9, #0
 800387e:	4b7d      	ldr	r3, [pc, #500]	; (8003a74 <_dtoa_r+0x5a4>)
 8003880:	f004 020f 	and.w	r2, r4, #15
 8003884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f7fc fe90 	bl	80005b0 <__aeabi_dmul>
 8003890:	2702      	movs	r7, #2
 8003892:	2300      	movs	r3, #0
 8003894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003898:	4e77      	ldr	r6, [pc, #476]	; (8003a78 <_dtoa_r+0x5a8>)
 800389a:	1124      	asrs	r4, r4, #4
 800389c:	2c00      	cmp	r4, #0
 800389e:	f040 8084 	bne.w	80039aa <_dtoa_r+0x4da>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1d2      	bne.n	800384c <_dtoa_r+0x37c>
 80038a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 808b 	beq.w	80039c4 <_dtoa_r+0x4f4>
 80038ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80038b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80038b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80038ba:	2200      	movs	r2, #0
 80038bc:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <_dtoa_r+0x5ac>)
 80038be:	f7fd f8e9 	bl	8000a94 <__aeabi_dcmplt>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	d07e      	beq.n	80039c4 <_dtoa_r+0x4f4>
 80038c6:	9b02      	ldr	r3, [sp, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d07b      	beq.n	80039c4 <_dtoa_r+0x4f4>
 80038cc:	f1bb 0f00 	cmp.w	fp, #0
 80038d0:	dd38      	ble.n	8003944 <_dtoa_r+0x474>
 80038d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80038d6:	2200      	movs	r2, #0
 80038d8:	4b69      	ldr	r3, [pc, #420]	; (8003a80 <_dtoa_r+0x5b0>)
 80038da:	f7fc fe69 	bl	80005b0 <__aeabi_dmul>
 80038de:	465c      	mov	r4, fp
 80038e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80038e4:	f109 38ff 	add.w	r8, r9, #4294967295
 80038e8:	3701      	adds	r7, #1
 80038ea:	4638      	mov	r0, r7
 80038ec:	f7fc fdf6 	bl	80004dc <__aeabi_i2d>
 80038f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038f4:	f7fc fe5c 	bl	80005b0 <__aeabi_dmul>
 80038f8:	2200      	movs	r2, #0
 80038fa:	4b62      	ldr	r3, [pc, #392]	; (8003a84 <_dtoa_r+0x5b4>)
 80038fc:	f7fc fca2 	bl	8000244 <__adddf3>
 8003900:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003904:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003908:	9611      	str	r6, [sp, #68]	; 0x44
 800390a:	2c00      	cmp	r4, #0
 800390c:	d15d      	bne.n	80039ca <_dtoa_r+0x4fa>
 800390e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003912:	2200      	movs	r2, #0
 8003914:	4b5c      	ldr	r3, [pc, #368]	; (8003a88 <_dtoa_r+0x5b8>)
 8003916:	f7fc fc93 	bl	8000240 <__aeabi_dsub>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003922:	4633      	mov	r3, r6
 8003924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003926:	f7fd f8d3 	bl	8000ad0 <__aeabi_dcmpgt>
 800392a:	2800      	cmp	r0, #0
 800392c:	f040 829e 	bne.w	8003e6c <_dtoa_r+0x99c>
 8003930:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003936:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800393a:	f7fd f8ab 	bl	8000a94 <__aeabi_dcmplt>
 800393e:	2800      	cmp	r0, #0
 8003940:	f040 8292 	bne.w	8003e68 <_dtoa_r+0x998>
 8003944:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003948:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800394c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800394e:	2b00      	cmp	r3, #0
 8003950:	f2c0 8153 	blt.w	8003bfa <_dtoa_r+0x72a>
 8003954:	f1b9 0f0e 	cmp.w	r9, #14
 8003958:	f300 814f 	bgt.w	8003bfa <_dtoa_r+0x72a>
 800395c:	4b45      	ldr	r3, [pc, #276]	; (8003a74 <_dtoa_r+0x5a4>)
 800395e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003962:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003966:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800396a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800396c:	2b00      	cmp	r3, #0
 800396e:	f280 80db 	bge.w	8003b28 <_dtoa_r+0x658>
 8003972:	9b02      	ldr	r3, [sp, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f300 80d7 	bgt.w	8003b28 <_dtoa_r+0x658>
 800397a:	f040 8274 	bne.w	8003e66 <_dtoa_r+0x996>
 800397e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003982:	2200      	movs	r2, #0
 8003984:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <_dtoa_r+0x5b8>)
 8003986:	f7fc fe13 	bl	80005b0 <__aeabi_dmul>
 800398a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800398e:	f7fd f895 	bl	8000abc <__aeabi_dcmpge>
 8003992:	9c02      	ldr	r4, [sp, #8]
 8003994:	4626      	mov	r6, r4
 8003996:	2800      	cmp	r0, #0
 8003998:	f040 824a 	bne.w	8003e30 <_dtoa_r+0x960>
 800399c:	2331      	movs	r3, #49	; 0x31
 800399e:	9f08      	ldr	r7, [sp, #32]
 80039a0:	f109 0901 	add.w	r9, r9, #1
 80039a4:	f807 3b01 	strb.w	r3, [r7], #1
 80039a8:	e246      	b.n	8003e38 <_dtoa_r+0x968>
 80039aa:	07e2      	lsls	r2, r4, #31
 80039ac:	d505      	bpl.n	80039ba <_dtoa_r+0x4ea>
 80039ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80039b2:	f7fc fdfd 	bl	80005b0 <__aeabi_dmul>
 80039b6:	2301      	movs	r3, #1
 80039b8:	3701      	adds	r7, #1
 80039ba:	1064      	asrs	r4, r4, #1
 80039bc:	3608      	adds	r6, #8
 80039be:	e76d      	b.n	800389c <_dtoa_r+0x3cc>
 80039c0:	2702      	movs	r7, #2
 80039c2:	e770      	b.n	80038a6 <_dtoa_r+0x3d6>
 80039c4:	46c8      	mov	r8, r9
 80039c6:	9c02      	ldr	r4, [sp, #8]
 80039c8:	e78f      	b.n	80038ea <_dtoa_r+0x41a>
 80039ca:	9908      	ldr	r1, [sp, #32]
 80039cc:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <_dtoa_r+0x5a4>)
 80039ce:	4421      	add	r1, r4
 80039d0:	9112      	str	r1, [sp, #72]	; 0x48
 80039d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80039d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80039dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80039e0:	2900      	cmp	r1, #0
 80039e2:	d055      	beq.n	8003a90 <_dtoa_r+0x5c0>
 80039e4:	2000      	movs	r0, #0
 80039e6:	4929      	ldr	r1, [pc, #164]	; (8003a8c <_dtoa_r+0x5bc>)
 80039e8:	f7fc ff0c 	bl	8000804 <__aeabi_ddiv>
 80039ec:	463b      	mov	r3, r7
 80039ee:	4632      	mov	r2, r6
 80039f0:	f7fc fc26 	bl	8000240 <__aeabi_dsub>
 80039f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80039f8:	9f08      	ldr	r7, [sp, #32]
 80039fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039fe:	f7fd f887 	bl	8000b10 <__aeabi_d2iz>
 8003a02:	4604      	mov	r4, r0
 8003a04:	f7fc fd6a 	bl	80004dc <__aeabi_i2d>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a10:	f7fc fc16 	bl	8000240 <__aeabi_dsub>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	3430      	adds	r4, #48	; 0x30
 8003a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a22:	f807 4b01 	strb.w	r4, [r7], #1
 8003a26:	f7fd f835 	bl	8000a94 <__aeabi_dcmplt>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d174      	bne.n	8003b18 <_dtoa_r+0x648>
 8003a2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a32:	2000      	movs	r0, #0
 8003a34:	4911      	ldr	r1, [pc, #68]	; (8003a7c <_dtoa_r+0x5ac>)
 8003a36:	f7fc fc03 	bl	8000240 <__aeabi_dsub>
 8003a3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a3e:	f7fd f829 	bl	8000a94 <__aeabi_dcmplt>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	f040 80b6 	bne.w	8003bb4 <_dtoa_r+0x6e4>
 8003a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a4a:	429f      	cmp	r7, r3
 8003a4c:	f43f af7a 	beq.w	8003944 <_dtoa_r+0x474>
 8003a50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003a54:	2200      	movs	r2, #0
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <_dtoa_r+0x5b0>)
 8003a58:	f7fc fdaa 	bl	80005b0 <__aeabi_dmul>
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <_dtoa_r+0x5b0>)
 8003a68:	f7fc fda2 	bl	80005b0 <__aeabi_dmul>
 8003a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a70:	e7c3      	b.n	80039fa <_dtoa_r+0x52a>
 8003a72:	bf00      	nop
 8003a74:	080056c0 	.word	0x080056c0
 8003a78:	08005698 	.word	0x08005698
 8003a7c:	3ff00000 	.word	0x3ff00000
 8003a80:	40240000 	.word	0x40240000
 8003a84:	401c0000 	.word	0x401c0000
 8003a88:	40140000 	.word	0x40140000
 8003a8c:	3fe00000 	.word	0x3fe00000
 8003a90:	4630      	mov	r0, r6
 8003a92:	4639      	mov	r1, r7
 8003a94:	f7fc fd8c 	bl	80005b0 <__aeabi_dmul>
 8003a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a9e:	9c08      	ldr	r4, [sp, #32]
 8003aa0:	9314      	str	r3, [sp, #80]	; 0x50
 8003aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003aa6:	f7fd f833 	bl	8000b10 <__aeabi_d2iz>
 8003aaa:	9015      	str	r0, [sp, #84]	; 0x54
 8003aac:	f7fc fd16 	bl	80004dc <__aeabi_i2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ab8:	f7fc fbc2 	bl	8000240 <__aeabi_dsub>
 8003abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003abe:	4606      	mov	r6, r0
 8003ac0:	3330      	adds	r3, #48	; 0x30
 8003ac2:	f804 3b01 	strb.w	r3, [r4], #1
 8003ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ac8:	460f      	mov	r7, r1
 8003aca:	429c      	cmp	r4, r3
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	d124      	bne.n	8003b1c <_dtoa_r+0x64c>
 8003ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ad6:	4bb3      	ldr	r3, [pc, #716]	; (8003da4 <_dtoa_r+0x8d4>)
 8003ad8:	f7fc fbb4 	bl	8000244 <__adddf3>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	4639      	mov	r1, r7
 8003ae4:	f7fc fff4 	bl	8000ad0 <__aeabi_dcmpgt>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d162      	bne.n	8003bb2 <_dtoa_r+0x6e2>
 8003aec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003af0:	2000      	movs	r0, #0
 8003af2:	49ac      	ldr	r1, [pc, #688]	; (8003da4 <_dtoa_r+0x8d4>)
 8003af4:	f7fc fba4 	bl	8000240 <__aeabi_dsub>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4630      	mov	r0, r6
 8003afe:	4639      	mov	r1, r7
 8003b00:	f7fc ffc8 	bl	8000a94 <__aeabi_dcmplt>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	f43f af1d 	beq.w	8003944 <_dtoa_r+0x474>
 8003b0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003b0c:	1e7b      	subs	r3, r7, #1
 8003b0e:	9314      	str	r3, [sp, #80]	; 0x50
 8003b10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d0f8      	beq.n	8003b0a <_dtoa_r+0x63a>
 8003b18:	46c1      	mov	r9, r8
 8003b1a:	e03a      	b.n	8003b92 <_dtoa_r+0x6c2>
 8003b1c:	4ba2      	ldr	r3, [pc, #648]	; (8003da8 <_dtoa_r+0x8d8>)
 8003b1e:	f7fc fd47 	bl	80005b0 <__aeabi_dmul>
 8003b22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b26:	e7bc      	b.n	8003aa2 <_dtoa_r+0x5d2>
 8003b28:	9f08      	ldr	r7, [sp, #32]
 8003b2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b32:	f7fc fe67 	bl	8000804 <__aeabi_ddiv>
 8003b36:	f7fc ffeb 	bl	8000b10 <__aeabi_d2iz>
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	f7fc fcce 	bl	80004dc <__aeabi_i2d>
 8003b40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b44:	f7fc fd34 	bl	80005b0 <__aeabi_dmul>
 8003b48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4602      	mov	r2, r0
 8003b50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b54:	f7fc fb74 	bl	8000240 <__aeabi_dsub>
 8003b58:	f807 6b01 	strb.w	r6, [r7], #1
 8003b5c:	9e08      	ldr	r6, [sp, #32]
 8003b5e:	9b02      	ldr	r3, [sp, #8]
 8003b60:	1bbe      	subs	r6, r7, r6
 8003b62:	42b3      	cmp	r3, r6
 8003b64:	d13a      	bne.n	8003bdc <_dtoa_r+0x70c>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	f7fc fb6b 	bl	8000244 <__adddf3>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b7a:	f7fc ffa9 	bl	8000ad0 <__aeabi_dcmpgt>
 8003b7e:	bb58      	cbnz	r0, 8003bd8 <_dtoa_r+0x708>
 8003b80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b88:	f7fc ff7a 	bl	8000a80 <__aeabi_dcmpeq>
 8003b8c:	b108      	cbz	r0, 8003b92 <_dtoa_r+0x6c2>
 8003b8e:	07e1      	lsls	r1, r4, #31
 8003b90:	d422      	bmi.n	8003bd8 <_dtoa_r+0x708>
 8003b92:	4628      	mov	r0, r5
 8003b94:	4651      	mov	r1, sl
 8003b96:	f000 fd11 	bl	80045bc <_Bfree>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	703b      	strb	r3, [r7, #0]
 8003b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003ba0:	f109 0001 	add.w	r0, r9, #1
 8003ba4:	6018      	str	r0, [r3, #0]
 8003ba6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f43f acdf 	beq.w	800356c <_dtoa_r+0x9c>
 8003bae:	601f      	str	r7, [r3, #0]
 8003bb0:	e4dc      	b.n	800356c <_dtoa_r+0x9c>
 8003bb2:	4627      	mov	r7, r4
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	461f      	mov	r7, r3
 8003bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003bbc:	2a39      	cmp	r2, #57	; 0x39
 8003bbe:	d107      	bne.n	8003bd0 <_dtoa_r+0x700>
 8003bc0:	9a08      	ldr	r2, [sp, #32]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d1f7      	bne.n	8003bb6 <_dtoa_r+0x6e6>
 8003bc6:	2230      	movs	r2, #48	; 0x30
 8003bc8:	9908      	ldr	r1, [sp, #32]
 8003bca:	f108 0801 	add.w	r8, r8, #1
 8003bce:	700a      	strb	r2, [r1, #0]
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	3201      	adds	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
 8003bd6:	e79f      	b.n	8003b18 <_dtoa_r+0x648>
 8003bd8:	46c8      	mov	r8, r9
 8003bda:	e7eb      	b.n	8003bb4 <_dtoa_r+0x6e4>
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4b72      	ldr	r3, [pc, #456]	; (8003da8 <_dtoa_r+0x8d8>)
 8003be0:	f7fc fce6 	bl	80005b0 <__aeabi_dmul>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f7fc ff46 	bl	8000a80 <__aeabi_dcmpeq>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d098      	beq.n	8003b2a <_dtoa_r+0x65a>
 8003bf8:	e7cb      	b.n	8003b92 <_dtoa_r+0x6c2>
 8003bfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bfc:	2a00      	cmp	r2, #0
 8003bfe:	f000 80cd 	beq.w	8003d9c <_dtoa_r+0x8cc>
 8003c02:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c04:	2a01      	cmp	r2, #1
 8003c06:	f300 80af 	bgt.w	8003d68 <_dtoa_r+0x898>
 8003c0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003c0c:	2a00      	cmp	r2, #0
 8003c0e:	f000 80a7 	beq.w	8003d60 <_dtoa_r+0x890>
 8003c12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003c16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003c18:	9f06      	ldr	r7, [sp, #24]
 8003c1a:	9a06      	ldr	r2, [sp, #24]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	441a      	add	r2, r3
 8003c20:	9206      	str	r2, [sp, #24]
 8003c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c24:	4628      	mov	r0, r5
 8003c26:	441a      	add	r2, r3
 8003c28:	9209      	str	r2, [sp, #36]	; 0x24
 8003c2a:	f000 fd81 	bl	8004730 <__i2b>
 8003c2e:	4606      	mov	r6, r0
 8003c30:	2f00      	cmp	r7, #0
 8003c32:	dd0c      	ble.n	8003c4e <_dtoa_r+0x77e>
 8003c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	dd09      	ble.n	8003c4e <_dtoa_r+0x77e>
 8003c3a:	42bb      	cmp	r3, r7
 8003c3c:	bfa8      	it	ge
 8003c3e:	463b      	movge	r3, r7
 8003c40:	9a06      	ldr	r2, [sp, #24]
 8003c42:	1aff      	subs	r7, r7, r3
 8003c44:	1ad2      	subs	r2, r2, r3
 8003c46:	9206      	str	r2, [sp, #24]
 8003c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c50:	b1f3      	cbz	r3, 8003c90 <_dtoa_r+0x7c0>
 8003c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80a9 	beq.w	8003dac <_dtoa_r+0x8dc>
 8003c5a:	2c00      	cmp	r4, #0
 8003c5c:	dd10      	ble.n	8003c80 <_dtoa_r+0x7b0>
 8003c5e:	4631      	mov	r1, r6
 8003c60:	4622      	mov	r2, r4
 8003c62:	4628      	mov	r0, r5
 8003c64:	f000 fe1e 	bl	80048a4 <__pow5mult>
 8003c68:	4652      	mov	r2, sl
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f000 fd74 	bl	800475c <__multiply>
 8003c74:	4680      	mov	r8, r0
 8003c76:	4651      	mov	r1, sl
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f000 fc9f 	bl	80045bc <_Bfree>
 8003c7e:	46c2      	mov	sl, r8
 8003c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c82:	1b1a      	subs	r2, r3, r4
 8003c84:	d004      	beq.n	8003c90 <_dtoa_r+0x7c0>
 8003c86:	4651      	mov	r1, sl
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f000 fe0b 	bl	80048a4 <__pow5mult>
 8003c8e:	4682      	mov	sl, r0
 8003c90:	2101      	movs	r1, #1
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 fd4c 	bl	8004730 <__i2b>
 8003c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f340 8087 	ble.w	8003db0 <_dtoa_r+0x8e0>
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4601      	mov	r1, r0
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f000 fdfc 	bl	80048a4 <__pow5mult>
 8003cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cae:	4604      	mov	r4, r0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f340 8080 	ble.w	8003db6 <_dtoa_r+0x8e6>
 8003cb6:	f04f 0800 	mov.w	r8, #0
 8003cba:	6923      	ldr	r3, [r4, #16]
 8003cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003cc0:	6918      	ldr	r0, [r3, #16]
 8003cc2:	f000 fce7 	bl	8004694 <__hi0bits>
 8003cc6:	f1c0 0020 	rsb	r0, r0, #32
 8003cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ccc:	4418      	add	r0, r3
 8003cce:	f010 001f 	ands.w	r0, r0, #31
 8003cd2:	f000 8092 	beq.w	8003dfa <_dtoa_r+0x92a>
 8003cd6:	f1c0 0320 	rsb	r3, r0, #32
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	f340 808a 	ble.w	8003df4 <_dtoa_r+0x924>
 8003ce0:	f1c0 001c 	rsb	r0, r0, #28
 8003ce4:	9b06      	ldr	r3, [sp, #24]
 8003ce6:	4407      	add	r7, r0
 8003ce8:	4403      	add	r3, r0
 8003cea:	9306      	str	r3, [sp, #24]
 8003cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cee:	4403      	add	r3, r0
 8003cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf2:	9b06      	ldr	r3, [sp, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	dd05      	ble.n	8003d04 <_dtoa_r+0x834>
 8003cf8:	4651      	mov	r1, sl
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f000 fe2b 	bl	8004958 <__lshift>
 8003d02:	4682      	mov	sl, r0
 8003d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	dd05      	ble.n	8003d16 <_dtoa_r+0x846>
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f000 fe22 	bl	8004958 <__lshift>
 8003d14:	4604      	mov	r4, r0
 8003d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d070      	beq.n	8003dfe <_dtoa_r+0x92e>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4650      	mov	r0, sl
 8003d20:	f000 fe86 	bl	8004a30 <__mcmp>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	da6a      	bge.n	8003dfe <_dtoa_r+0x92e>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	220a      	movs	r2, #10
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f000 fc66 	bl	8004600 <__multadd>
 8003d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d36:	4682      	mov	sl, r0
 8003d38:	f109 39ff 	add.w	r9, r9, #4294967295
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8193 	beq.w	8004068 <_dtoa_r+0xb98>
 8003d42:	4631      	mov	r1, r6
 8003d44:	2300      	movs	r3, #0
 8003d46:	220a      	movs	r2, #10
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 fc59 	bl	8004600 <__multadd>
 8003d4e:	f1bb 0f00 	cmp.w	fp, #0
 8003d52:	4606      	mov	r6, r0
 8003d54:	f300 8093 	bgt.w	8003e7e <_dtoa_r+0x9ae>
 8003d58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	dc57      	bgt.n	8003e0e <_dtoa_r+0x93e>
 8003d5e:	e08e      	b.n	8003e7e <_dtoa_r+0x9ae>
 8003d60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003d62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003d66:	e756      	b.n	8003c16 <_dtoa_r+0x746>
 8003d68:	9b02      	ldr	r3, [sp, #8]
 8003d6a:	1e5c      	subs	r4, r3, #1
 8003d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d6e:	42a3      	cmp	r3, r4
 8003d70:	bfb7      	itett	lt
 8003d72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003d74:	1b1c      	subge	r4, r3, r4
 8003d76:	1ae2      	sublt	r2, r4, r3
 8003d78:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003d7a:	bfbe      	ittt	lt
 8003d7c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003d7e:	189b      	addlt	r3, r3, r2
 8003d80:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003d82:	9b02      	ldr	r3, [sp, #8]
 8003d84:	bfb8      	it	lt
 8003d86:	2400      	movlt	r4, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bfbb      	ittet	lt
 8003d8c:	9b06      	ldrlt	r3, [sp, #24]
 8003d8e:	9a02      	ldrlt	r2, [sp, #8]
 8003d90:	9f06      	ldrge	r7, [sp, #24]
 8003d92:	1a9f      	sublt	r7, r3, r2
 8003d94:	bfac      	ite	ge
 8003d96:	9b02      	ldrge	r3, [sp, #8]
 8003d98:	2300      	movlt	r3, #0
 8003d9a:	e73e      	b.n	8003c1a <_dtoa_r+0x74a>
 8003d9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003d9e:	9f06      	ldr	r7, [sp, #24]
 8003da0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003da2:	e745      	b.n	8003c30 <_dtoa_r+0x760>
 8003da4:	3fe00000 	.word	0x3fe00000
 8003da8:	40240000 	.word	0x40240000
 8003dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dae:	e76a      	b.n	8003c86 <_dtoa_r+0x7b6>
 8003db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	dc19      	bgt.n	8003dea <_dtoa_r+0x91a>
 8003db6:	9b04      	ldr	r3, [sp, #16]
 8003db8:	b9bb      	cbnz	r3, 8003dea <_dtoa_r+0x91a>
 8003dba:	9b05      	ldr	r3, [sp, #20]
 8003dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc0:	b99b      	cbnz	r3, 8003dea <_dtoa_r+0x91a>
 8003dc2:	9b05      	ldr	r3, [sp, #20]
 8003dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dc8:	0d1b      	lsrs	r3, r3, #20
 8003dca:	051b      	lsls	r3, r3, #20
 8003dcc:	b183      	cbz	r3, 8003df0 <_dtoa_r+0x920>
 8003dce:	f04f 0801 	mov.w	r8, #1
 8003dd2:	9b06      	ldr	r3, [sp, #24]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	9306      	str	r3, [sp, #24]
 8003dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dda:	3301      	adds	r3, #1
 8003ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f47f af6a 	bne.w	8003cba <_dtoa_r+0x7ea>
 8003de6:	2001      	movs	r0, #1
 8003de8:	e76f      	b.n	8003cca <_dtoa_r+0x7fa>
 8003dea:	f04f 0800 	mov.w	r8, #0
 8003dee:	e7f6      	b.n	8003dde <_dtoa_r+0x90e>
 8003df0:	4698      	mov	r8, r3
 8003df2:	e7f4      	b.n	8003dde <_dtoa_r+0x90e>
 8003df4:	f43f af7d 	beq.w	8003cf2 <_dtoa_r+0x822>
 8003df8:	4618      	mov	r0, r3
 8003dfa:	301c      	adds	r0, #28
 8003dfc:	e772      	b.n	8003ce4 <_dtoa_r+0x814>
 8003dfe:	9b02      	ldr	r3, [sp, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	dc36      	bgt.n	8003e72 <_dtoa_r+0x9a2>
 8003e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	dd33      	ble.n	8003e72 <_dtoa_r+0x9a2>
 8003e0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003e0e:	f1bb 0f00 	cmp.w	fp, #0
 8003e12:	d10d      	bne.n	8003e30 <_dtoa_r+0x960>
 8003e14:	4621      	mov	r1, r4
 8003e16:	465b      	mov	r3, fp
 8003e18:	2205      	movs	r2, #5
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 fbf0 	bl	8004600 <__multadd>
 8003e20:	4601      	mov	r1, r0
 8003e22:	4604      	mov	r4, r0
 8003e24:	4650      	mov	r0, sl
 8003e26:	f000 fe03 	bl	8004a30 <__mcmp>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	f73f adb6 	bgt.w	800399c <_dtoa_r+0x4cc>
 8003e30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e32:	9f08      	ldr	r7, [sp, #32]
 8003e34:	ea6f 0903 	mvn.w	r9, r3
 8003e38:	f04f 0800 	mov.w	r8, #0
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 fbbc 	bl	80045bc <_Bfree>
 8003e44:	2e00      	cmp	r6, #0
 8003e46:	f43f aea4 	beq.w	8003b92 <_dtoa_r+0x6c2>
 8003e4a:	f1b8 0f00 	cmp.w	r8, #0
 8003e4e:	d005      	beq.n	8003e5c <_dtoa_r+0x98c>
 8003e50:	45b0      	cmp	r8, r6
 8003e52:	d003      	beq.n	8003e5c <_dtoa_r+0x98c>
 8003e54:	4641      	mov	r1, r8
 8003e56:	4628      	mov	r0, r5
 8003e58:	f000 fbb0 	bl	80045bc <_Bfree>
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 fbac 	bl	80045bc <_Bfree>
 8003e64:	e695      	b.n	8003b92 <_dtoa_r+0x6c2>
 8003e66:	2400      	movs	r4, #0
 8003e68:	4626      	mov	r6, r4
 8003e6a:	e7e1      	b.n	8003e30 <_dtoa_r+0x960>
 8003e6c:	46c1      	mov	r9, r8
 8003e6e:	4626      	mov	r6, r4
 8003e70:	e594      	b.n	800399c <_dtoa_r+0x4cc>
 8003e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e74:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80fc 	beq.w	8004076 <_dtoa_r+0xba6>
 8003e7e:	2f00      	cmp	r7, #0
 8003e80:	dd05      	ble.n	8003e8e <_dtoa_r+0x9be>
 8003e82:	4631      	mov	r1, r6
 8003e84:	463a      	mov	r2, r7
 8003e86:	4628      	mov	r0, r5
 8003e88:	f000 fd66 	bl	8004958 <__lshift>
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	f1b8 0f00 	cmp.w	r8, #0
 8003e92:	d05c      	beq.n	8003f4e <_dtoa_r+0xa7e>
 8003e94:	4628      	mov	r0, r5
 8003e96:	6871      	ldr	r1, [r6, #4]
 8003e98:	f000 fb50 	bl	800453c <_Balloc>
 8003e9c:	4607      	mov	r7, r0
 8003e9e:	b928      	cbnz	r0, 8003eac <_dtoa_r+0x9dc>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003ea6:	4b7e      	ldr	r3, [pc, #504]	; (80040a0 <_dtoa_r+0xbd0>)
 8003ea8:	f7ff bb26 	b.w	80034f8 <_dtoa_r+0x28>
 8003eac:	6932      	ldr	r2, [r6, #16]
 8003eae:	f106 010c 	add.w	r1, r6, #12
 8003eb2:	3202      	adds	r2, #2
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	300c      	adds	r0, #12
 8003eb8:	f000 fb32 	bl	8004520 <memcpy>
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f000 fd49 	bl	8004958 <__lshift>
 8003ec6:	46b0      	mov	r8, r6
 8003ec8:	4606      	mov	r6, r0
 8003eca:	9b08      	ldr	r3, [sp, #32]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	9302      	str	r3, [sp, #8]
 8003ed0:	9b08      	ldr	r3, [sp, #32]
 8003ed2:	445b      	add	r3, fp
 8003ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8003ed6:	9b04      	ldr	r3, [sp, #16]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ede:	9b02      	ldr	r3, [sp, #8]
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4650      	mov	r0, sl
 8003ee4:	f103 3bff 	add.w	fp, r3, #4294967295
 8003ee8:	f7ff fa62 	bl	80033b0 <quorem>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4641      	mov	r1, r8
 8003ef0:	3330      	adds	r3, #48	; 0x30
 8003ef2:	9004      	str	r0, [sp, #16]
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ef8:	f000 fd9a 	bl	8004a30 <__mcmp>
 8003efc:	4632      	mov	r2, r6
 8003efe:	9006      	str	r0, [sp, #24]
 8003f00:	4621      	mov	r1, r4
 8003f02:	4628      	mov	r0, r5
 8003f04:	f000 fdb0 	bl	8004a68 <__mdiff>
 8003f08:	68c2      	ldr	r2, [r0, #12]
 8003f0a:	4607      	mov	r7, r0
 8003f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f0e:	bb02      	cbnz	r2, 8003f52 <_dtoa_r+0xa82>
 8003f10:	4601      	mov	r1, r0
 8003f12:	4650      	mov	r0, sl
 8003f14:	f000 fd8c 	bl	8004a30 <__mcmp>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f1c:	4639      	mov	r1, r7
 8003f1e:	4628      	mov	r0, r5
 8003f20:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003f24:	f000 fb4a 	bl	80045bc <_Bfree>
 8003f28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f2c:	9f02      	ldr	r7, [sp, #8]
 8003f2e:	ea43 0102 	orr.w	r1, r3, r2
 8003f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f34:	430b      	orrs	r3, r1
 8003f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f38:	d10d      	bne.n	8003f56 <_dtoa_r+0xa86>
 8003f3a:	2b39      	cmp	r3, #57	; 0x39
 8003f3c:	d027      	beq.n	8003f8e <_dtoa_r+0xabe>
 8003f3e:	9a06      	ldr	r2, [sp, #24]
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	dd01      	ble.n	8003f48 <_dtoa_r+0xa78>
 8003f44:	9b04      	ldr	r3, [sp, #16]
 8003f46:	3331      	adds	r3, #49	; 0x31
 8003f48:	f88b 3000 	strb.w	r3, [fp]
 8003f4c:	e776      	b.n	8003e3c <_dtoa_r+0x96c>
 8003f4e:	4630      	mov	r0, r6
 8003f50:	e7b9      	b.n	8003ec6 <_dtoa_r+0x9f6>
 8003f52:	2201      	movs	r2, #1
 8003f54:	e7e2      	b.n	8003f1c <_dtoa_r+0xa4c>
 8003f56:	9906      	ldr	r1, [sp, #24]
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	db04      	blt.n	8003f66 <_dtoa_r+0xa96>
 8003f5c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8003f5e:	4301      	orrs	r1, r0
 8003f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f62:	4301      	orrs	r1, r0
 8003f64:	d120      	bne.n	8003fa8 <_dtoa_r+0xad8>
 8003f66:	2a00      	cmp	r2, #0
 8003f68:	ddee      	ble.n	8003f48 <_dtoa_r+0xa78>
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4628      	mov	r0, r5
 8003f70:	9302      	str	r3, [sp, #8]
 8003f72:	f000 fcf1 	bl	8004958 <__lshift>
 8003f76:	4621      	mov	r1, r4
 8003f78:	4682      	mov	sl, r0
 8003f7a:	f000 fd59 	bl	8004a30 <__mcmp>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	9b02      	ldr	r3, [sp, #8]
 8003f82:	dc02      	bgt.n	8003f8a <_dtoa_r+0xaba>
 8003f84:	d1e0      	bne.n	8003f48 <_dtoa_r+0xa78>
 8003f86:	07da      	lsls	r2, r3, #31
 8003f88:	d5de      	bpl.n	8003f48 <_dtoa_r+0xa78>
 8003f8a:	2b39      	cmp	r3, #57	; 0x39
 8003f8c:	d1da      	bne.n	8003f44 <_dtoa_r+0xa74>
 8003f8e:	2339      	movs	r3, #57	; 0x39
 8003f90:	f88b 3000 	strb.w	r3, [fp]
 8003f94:	463b      	mov	r3, r7
 8003f96:	461f      	mov	r7, r3
 8003f98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	2a39      	cmp	r2, #57	; 0x39
 8003fa0:	d050      	beq.n	8004044 <_dtoa_r+0xb74>
 8003fa2:	3201      	adds	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e749      	b.n	8003e3c <_dtoa_r+0x96c>
 8003fa8:	2a00      	cmp	r2, #0
 8003faa:	dd03      	ble.n	8003fb4 <_dtoa_r+0xae4>
 8003fac:	2b39      	cmp	r3, #57	; 0x39
 8003fae:	d0ee      	beq.n	8003f8e <_dtoa_r+0xabe>
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	e7c9      	b.n	8003f48 <_dtoa_r+0xa78>
 8003fb4:	9a02      	ldr	r2, [sp, #8]
 8003fb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003fb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003fbc:	428a      	cmp	r2, r1
 8003fbe:	d02a      	beq.n	8004016 <_dtoa_r+0xb46>
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	220a      	movs	r2, #10
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f000 fb1a 	bl	8004600 <__multadd>
 8003fcc:	45b0      	cmp	r8, r6
 8003fce:	4682      	mov	sl, r0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	f04f 020a 	mov.w	r2, #10
 8003fd8:	4641      	mov	r1, r8
 8003fda:	4628      	mov	r0, r5
 8003fdc:	d107      	bne.n	8003fee <_dtoa_r+0xb1e>
 8003fde:	f000 fb0f 	bl	8004600 <__multadd>
 8003fe2:	4680      	mov	r8, r0
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	9b02      	ldr	r3, [sp, #8]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	9302      	str	r3, [sp, #8]
 8003fec:	e777      	b.n	8003ede <_dtoa_r+0xa0e>
 8003fee:	f000 fb07 	bl	8004600 <__multadd>
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	220a      	movs	r2, #10
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f000 fb00 	bl	8004600 <__multadd>
 8004000:	4606      	mov	r6, r0
 8004002:	e7f0      	b.n	8003fe6 <_dtoa_r+0xb16>
 8004004:	f1bb 0f00 	cmp.w	fp, #0
 8004008:	bfcc      	ite	gt
 800400a:	465f      	movgt	r7, fp
 800400c:	2701      	movle	r7, #1
 800400e:	f04f 0800 	mov.w	r8, #0
 8004012:	9a08      	ldr	r2, [sp, #32]
 8004014:	4417      	add	r7, r2
 8004016:	4651      	mov	r1, sl
 8004018:	2201      	movs	r2, #1
 800401a:	4628      	mov	r0, r5
 800401c:	9302      	str	r3, [sp, #8]
 800401e:	f000 fc9b 	bl	8004958 <__lshift>
 8004022:	4621      	mov	r1, r4
 8004024:	4682      	mov	sl, r0
 8004026:	f000 fd03 	bl	8004a30 <__mcmp>
 800402a:	2800      	cmp	r0, #0
 800402c:	dcb2      	bgt.n	8003f94 <_dtoa_r+0xac4>
 800402e:	d102      	bne.n	8004036 <_dtoa_r+0xb66>
 8004030:	9b02      	ldr	r3, [sp, #8]
 8004032:	07db      	lsls	r3, r3, #31
 8004034:	d4ae      	bmi.n	8003f94 <_dtoa_r+0xac4>
 8004036:	463b      	mov	r3, r7
 8004038:	461f      	mov	r7, r3
 800403a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800403e:	2a30      	cmp	r2, #48	; 0x30
 8004040:	d0fa      	beq.n	8004038 <_dtoa_r+0xb68>
 8004042:	e6fb      	b.n	8003e3c <_dtoa_r+0x96c>
 8004044:	9a08      	ldr	r2, [sp, #32]
 8004046:	429a      	cmp	r2, r3
 8004048:	d1a5      	bne.n	8003f96 <_dtoa_r+0xac6>
 800404a:	2331      	movs	r3, #49	; 0x31
 800404c:	f109 0901 	add.w	r9, r9, #1
 8004050:	7013      	strb	r3, [r2, #0]
 8004052:	e6f3      	b.n	8003e3c <_dtoa_r+0x96c>
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <_dtoa_r+0xbd4>)
 8004056:	f7ff baa7 	b.w	80035a8 <_dtoa_r+0xd8>
 800405a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800405c:	2b00      	cmp	r3, #0
 800405e:	f47f aa80 	bne.w	8003562 <_dtoa_r+0x92>
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <_dtoa_r+0xbd8>)
 8004064:	f7ff baa0 	b.w	80035a8 <_dtoa_r+0xd8>
 8004068:	f1bb 0f00 	cmp.w	fp, #0
 800406c:	dc03      	bgt.n	8004076 <_dtoa_r+0xba6>
 800406e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004070:	2b02      	cmp	r3, #2
 8004072:	f73f aecc 	bgt.w	8003e0e <_dtoa_r+0x93e>
 8004076:	9f08      	ldr	r7, [sp, #32]
 8004078:	4621      	mov	r1, r4
 800407a:	4650      	mov	r0, sl
 800407c:	f7ff f998 	bl	80033b0 <quorem>
 8004080:	9a08      	ldr	r2, [sp, #32]
 8004082:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004086:	f807 3b01 	strb.w	r3, [r7], #1
 800408a:	1aba      	subs	r2, r7, r2
 800408c:	4593      	cmp	fp, r2
 800408e:	ddb9      	ble.n	8004004 <_dtoa_r+0xb34>
 8004090:	4651      	mov	r1, sl
 8004092:	2300      	movs	r3, #0
 8004094:	220a      	movs	r2, #10
 8004096:	4628      	mov	r0, r5
 8004098:	f000 fab2 	bl	8004600 <__multadd>
 800409c:	4682      	mov	sl, r0
 800409e:	e7eb      	b.n	8004078 <_dtoa_r+0xba8>
 80040a0:	080055c7 	.word	0x080055c7
 80040a4:	08005520 	.word	0x08005520
 80040a8:	08005544 	.word	0x08005544

080040ac <__sflush_r>:
 80040ac:	898a      	ldrh	r2, [r1, #12]
 80040ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b2:	4605      	mov	r5, r0
 80040b4:	0710      	lsls	r0, r2, #28
 80040b6:	460c      	mov	r4, r1
 80040b8:	d458      	bmi.n	800416c <__sflush_r+0xc0>
 80040ba:	684b      	ldr	r3, [r1, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dc05      	bgt.n	80040cc <__sflush_r+0x20>
 80040c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dc02      	bgt.n	80040cc <__sflush_r+0x20>
 80040c6:	2000      	movs	r0, #0
 80040c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ce:	2e00      	cmp	r6, #0
 80040d0:	d0f9      	beq.n	80040c6 <__sflush_r+0x1a>
 80040d2:	2300      	movs	r3, #0
 80040d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040d8:	682f      	ldr	r7, [r5, #0]
 80040da:	602b      	str	r3, [r5, #0]
 80040dc:	d032      	beq.n	8004144 <__sflush_r+0x98>
 80040de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	075a      	lsls	r2, r3, #29
 80040e4:	d505      	bpl.n	80040f2 <__sflush_r+0x46>
 80040e6:	6863      	ldr	r3, [r4, #4]
 80040e8:	1ac0      	subs	r0, r0, r3
 80040ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040ec:	b10b      	cbz	r3, 80040f2 <__sflush_r+0x46>
 80040ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040f0:	1ac0      	subs	r0, r0, r3
 80040f2:	2300      	movs	r3, #0
 80040f4:	4602      	mov	r2, r0
 80040f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040f8:	4628      	mov	r0, r5
 80040fa:	6a21      	ldr	r1, [r4, #32]
 80040fc:	47b0      	blx	r6
 80040fe:	1c43      	adds	r3, r0, #1
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	d106      	bne.n	8004112 <__sflush_r+0x66>
 8004104:	6829      	ldr	r1, [r5, #0]
 8004106:	291d      	cmp	r1, #29
 8004108:	d82c      	bhi.n	8004164 <__sflush_r+0xb8>
 800410a:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <__sflush_r+0x108>)
 800410c:	40ca      	lsrs	r2, r1
 800410e:	07d6      	lsls	r6, r2, #31
 8004110:	d528      	bpl.n	8004164 <__sflush_r+0xb8>
 8004112:	2200      	movs	r2, #0
 8004114:	6062      	str	r2, [r4, #4]
 8004116:	6922      	ldr	r2, [r4, #16]
 8004118:	04d9      	lsls	r1, r3, #19
 800411a:	6022      	str	r2, [r4, #0]
 800411c:	d504      	bpl.n	8004128 <__sflush_r+0x7c>
 800411e:	1c42      	adds	r2, r0, #1
 8004120:	d101      	bne.n	8004126 <__sflush_r+0x7a>
 8004122:	682b      	ldr	r3, [r5, #0]
 8004124:	b903      	cbnz	r3, 8004128 <__sflush_r+0x7c>
 8004126:	6560      	str	r0, [r4, #84]	; 0x54
 8004128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800412a:	602f      	str	r7, [r5, #0]
 800412c:	2900      	cmp	r1, #0
 800412e:	d0ca      	beq.n	80040c6 <__sflush_r+0x1a>
 8004130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004134:	4299      	cmp	r1, r3
 8004136:	d002      	beq.n	800413e <__sflush_r+0x92>
 8004138:	4628      	mov	r0, r5
 800413a:	f000 fd8f 	bl	8004c5c <_free_r>
 800413e:	2000      	movs	r0, #0
 8004140:	6360      	str	r0, [r4, #52]	; 0x34
 8004142:	e7c1      	b.n	80040c8 <__sflush_r+0x1c>
 8004144:	6a21      	ldr	r1, [r4, #32]
 8004146:	2301      	movs	r3, #1
 8004148:	4628      	mov	r0, r5
 800414a:	47b0      	blx	r6
 800414c:	1c41      	adds	r1, r0, #1
 800414e:	d1c7      	bne.n	80040e0 <__sflush_r+0x34>
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0c4      	beq.n	80040e0 <__sflush_r+0x34>
 8004156:	2b1d      	cmp	r3, #29
 8004158:	d001      	beq.n	800415e <__sflush_r+0xb2>
 800415a:	2b16      	cmp	r3, #22
 800415c:	d101      	bne.n	8004162 <__sflush_r+0xb6>
 800415e:	602f      	str	r7, [r5, #0]
 8004160:	e7b1      	b.n	80040c6 <__sflush_r+0x1a>
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	e7ad      	b.n	80040c8 <__sflush_r+0x1c>
 800416c:	690f      	ldr	r7, [r1, #16]
 800416e:	2f00      	cmp	r7, #0
 8004170:	d0a9      	beq.n	80040c6 <__sflush_r+0x1a>
 8004172:	0793      	lsls	r3, r2, #30
 8004174:	bf18      	it	ne
 8004176:	2300      	movne	r3, #0
 8004178:	680e      	ldr	r6, [r1, #0]
 800417a:	bf08      	it	eq
 800417c:	694b      	ldreq	r3, [r1, #20]
 800417e:	eba6 0807 	sub.w	r8, r6, r7
 8004182:	600f      	str	r7, [r1, #0]
 8004184:	608b      	str	r3, [r1, #8]
 8004186:	f1b8 0f00 	cmp.w	r8, #0
 800418a:	dd9c      	ble.n	80040c6 <__sflush_r+0x1a>
 800418c:	4643      	mov	r3, r8
 800418e:	463a      	mov	r2, r7
 8004190:	4628      	mov	r0, r5
 8004192:	6a21      	ldr	r1, [r4, #32]
 8004194:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004196:	47b0      	blx	r6
 8004198:	2800      	cmp	r0, #0
 800419a:	dc06      	bgt.n	80041aa <__sflush_r+0xfe>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f04f 30ff 	mov.w	r0, #4294967295
 80041a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	e78e      	b.n	80040c8 <__sflush_r+0x1c>
 80041aa:	4407      	add	r7, r0
 80041ac:	eba8 0800 	sub.w	r8, r8, r0
 80041b0:	e7e9      	b.n	8004186 <__sflush_r+0xda>
 80041b2:	bf00      	nop
 80041b4:	20400001 	.word	0x20400001

080041b8 <_fflush_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	690b      	ldr	r3, [r1, #16]
 80041bc:	4605      	mov	r5, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	b913      	cbnz	r3, 80041c8 <_fflush_r+0x10>
 80041c2:	2500      	movs	r5, #0
 80041c4:	4628      	mov	r0, r5
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	b118      	cbz	r0, 80041d2 <_fflush_r+0x1a>
 80041ca:	6983      	ldr	r3, [r0, #24]
 80041cc:	b90b      	cbnz	r3, 80041d2 <_fflush_r+0x1a>
 80041ce:	f000 f887 	bl	80042e0 <__sinit>
 80041d2:	4b14      	ldr	r3, [pc, #80]	; (8004224 <_fflush_r+0x6c>)
 80041d4:	429c      	cmp	r4, r3
 80041d6:	d11b      	bne.n	8004210 <_fflush_r+0x58>
 80041d8:	686c      	ldr	r4, [r5, #4]
 80041da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ef      	beq.n	80041c2 <_fflush_r+0xa>
 80041e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041e4:	07d0      	lsls	r0, r2, #31
 80041e6:	d404      	bmi.n	80041f2 <_fflush_r+0x3a>
 80041e8:	0599      	lsls	r1, r3, #22
 80041ea:	d402      	bmi.n	80041f2 <_fflush_r+0x3a>
 80041ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ee:	f000 f91a 	bl	8004426 <__retarget_lock_acquire_recursive>
 80041f2:	4628      	mov	r0, r5
 80041f4:	4621      	mov	r1, r4
 80041f6:	f7ff ff59 	bl	80040ac <__sflush_r>
 80041fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041fc:	4605      	mov	r5, r0
 80041fe:	07da      	lsls	r2, r3, #31
 8004200:	d4e0      	bmi.n	80041c4 <_fflush_r+0xc>
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	059b      	lsls	r3, r3, #22
 8004206:	d4dd      	bmi.n	80041c4 <_fflush_r+0xc>
 8004208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800420a:	f000 f90d 	bl	8004428 <__retarget_lock_release_recursive>
 800420e:	e7d9      	b.n	80041c4 <_fflush_r+0xc>
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <_fflush_r+0x70>)
 8004212:	429c      	cmp	r4, r3
 8004214:	d101      	bne.n	800421a <_fflush_r+0x62>
 8004216:	68ac      	ldr	r4, [r5, #8]
 8004218:	e7df      	b.n	80041da <_fflush_r+0x22>
 800421a:	4b04      	ldr	r3, [pc, #16]	; (800422c <_fflush_r+0x74>)
 800421c:	429c      	cmp	r4, r3
 800421e:	bf08      	it	eq
 8004220:	68ec      	ldreq	r4, [r5, #12]
 8004222:	e7da      	b.n	80041da <_fflush_r+0x22>
 8004224:	080055f8 	.word	0x080055f8
 8004228:	08005618 	.word	0x08005618
 800422c:	080055d8 	.word	0x080055d8

08004230 <std>:
 8004230:	2300      	movs	r3, #0
 8004232:	b510      	push	{r4, lr}
 8004234:	4604      	mov	r4, r0
 8004236:	e9c0 3300 	strd	r3, r3, [r0]
 800423a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800423e:	6083      	str	r3, [r0, #8]
 8004240:	8181      	strh	r1, [r0, #12]
 8004242:	6643      	str	r3, [r0, #100]	; 0x64
 8004244:	81c2      	strh	r2, [r0, #14]
 8004246:	6183      	str	r3, [r0, #24]
 8004248:	4619      	mov	r1, r3
 800424a:	2208      	movs	r2, #8
 800424c:	305c      	adds	r0, #92	; 0x5c
 800424e:	f7fe fb69 	bl	8002924 <memset>
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <std+0x38>)
 8004254:	6224      	str	r4, [r4, #32]
 8004256:	6263      	str	r3, [r4, #36]	; 0x24
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <std+0x3c>)
 800425a:	62a3      	str	r3, [r4, #40]	; 0x28
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <std+0x40>)
 800425e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <std+0x44>)
 8004262:	6323      	str	r3, [r4, #48]	; 0x30
 8004264:	bd10      	pop	{r4, pc}
 8004266:	bf00      	nop
 8004268:	08005079 	.word	0x08005079
 800426c:	0800509b 	.word	0x0800509b
 8004270:	080050d3 	.word	0x080050d3
 8004274:	080050f7 	.word	0x080050f7

08004278 <_cleanup_r>:
 8004278:	4901      	ldr	r1, [pc, #4]	; (8004280 <_cleanup_r+0x8>)
 800427a:	f000 b8af 	b.w	80043dc <_fwalk_reent>
 800427e:	bf00      	nop
 8004280:	080041b9 	.word	0x080041b9

08004284 <__sfmoreglue>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	2568      	movs	r5, #104	; 0x68
 8004288:	1e4a      	subs	r2, r1, #1
 800428a:	4355      	muls	r5, r2
 800428c:	460e      	mov	r6, r1
 800428e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004292:	f000 fd2f 	bl	8004cf4 <_malloc_r>
 8004296:	4604      	mov	r4, r0
 8004298:	b140      	cbz	r0, 80042ac <__sfmoreglue+0x28>
 800429a:	2100      	movs	r1, #0
 800429c:	e9c0 1600 	strd	r1, r6, [r0]
 80042a0:	300c      	adds	r0, #12
 80042a2:	60a0      	str	r0, [r4, #8]
 80042a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042a8:	f7fe fb3c 	bl	8002924 <memset>
 80042ac:	4620      	mov	r0, r4
 80042ae:	bd70      	pop	{r4, r5, r6, pc}

080042b0 <__sfp_lock_acquire>:
 80042b0:	4801      	ldr	r0, [pc, #4]	; (80042b8 <__sfp_lock_acquire+0x8>)
 80042b2:	f000 b8b8 	b.w	8004426 <__retarget_lock_acquire_recursive>
 80042b6:	bf00      	nop
 80042b8:	20000250 	.word	0x20000250

080042bc <__sfp_lock_release>:
 80042bc:	4801      	ldr	r0, [pc, #4]	; (80042c4 <__sfp_lock_release+0x8>)
 80042be:	f000 b8b3 	b.w	8004428 <__retarget_lock_release_recursive>
 80042c2:	bf00      	nop
 80042c4:	20000250 	.word	0x20000250

080042c8 <__sinit_lock_acquire>:
 80042c8:	4801      	ldr	r0, [pc, #4]	; (80042d0 <__sinit_lock_acquire+0x8>)
 80042ca:	f000 b8ac 	b.w	8004426 <__retarget_lock_acquire_recursive>
 80042ce:	bf00      	nop
 80042d0:	2000024b 	.word	0x2000024b

080042d4 <__sinit_lock_release>:
 80042d4:	4801      	ldr	r0, [pc, #4]	; (80042dc <__sinit_lock_release+0x8>)
 80042d6:	f000 b8a7 	b.w	8004428 <__retarget_lock_release_recursive>
 80042da:	bf00      	nop
 80042dc:	2000024b 	.word	0x2000024b

080042e0 <__sinit>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4604      	mov	r4, r0
 80042e4:	f7ff fff0 	bl	80042c8 <__sinit_lock_acquire>
 80042e8:	69a3      	ldr	r3, [r4, #24]
 80042ea:	b11b      	cbz	r3, 80042f4 <__sinit+0x14>
 80042ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f0:	f7ff bff0 	b.w	80042d4 <__sinit_lock_release>
 80042f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80042f8:	6523      	str	r3, [r4, #80]	; 0x50
 80042fa:	4b13      	ldr	r3, [pc, #76]	; (8004348 <__sinit+0x68>)
 80042fc:	4a13      	ldr	r2, [pc, #76]	; (800434c <__sinit+0x6c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	62a2      	str	r2, [r4, #40]	; 0x28
 8004302:	42a3      	cmp	r3, r4
 8004304:	bf08      	it	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	4620      	mov	r0, r4
 800430a:	bf08      	it	eq
 800430c:	61a3      	streq	r3, [r4, #24]
 800430e:	f000 f81f 	bl	8004350 <__sfp>
 8004312:	6060      	str	r0, [r4, #4]
 8004314:	4620      	mov	r0, r4
 8004316:	f000 f81b 	bl	8004350 <__sfp>
 800431a:	60a0      	str	r0, [r4, #8]
 800431c:	4620      	mov	r0, r4
 800431e:	f000 f817 	bl	8004350 <__sfp>
 8004322:	2200      	movs	r2, #0
 8004324:	2104      	movs	r1, #4
 8004326:	60e0      	str	r0, [r4, #12]
 8004328:	6860      	ldr	r0, [r4, #4]
 800432a:	f7ff ff81 	bl	8004230 <std>
 800432e:	2201      	movs	r2, #1
 8004330:	2109      	movs	r1, #9
 8004332:	68a0      	ldr	r0, [r4, #8]
 8004334:	f7ff ff7c 	bl	8004230 <std>
 8004338:	2202      	movs	r2, #2
 800433a:	2112      	movs	r1, #18
 800433c:	68e0      	ldr	r0, [r4, #12]
 800433e:	f7ff ff77 	bl	8004230 <std>
 8004342:	2301      	movs	r3, #1
 8004344:	61a3      	str	r3, [r4, #24]
 8004346:	e7d1      	b.n	80042ec <__sinit+0xc>
 8004348:	0800550c 	.word	0x0800550c
 800434c:	08004279 	.word	0x08004279

08004350 <__sfp>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	4607      	mov	r7, r0
 8004354:	f7ff ffac 	bl	80042b0 <__sfp_lock_acquire>
 8004358:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <__sfp+0x84>)
 800435a:	681e      	ldr	r6, [r3, #0]
 800435c:	69b3      	ldr	r3, [r6, #24]
 800435e:	b913      	cbnz	r3, 8004366 <__sfp+0x16>
 8004360:	4630      	mov	r0, r6
 8004362:	f7ff ffbd 	bl	80042e0 <__sinit>
 8004366:	3648      	adds	r6, #72	; 0x48
 8004368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800436c:	3b01      	subs	r3, #1
 800436e:	d503      	bpl.n	8004378 <__sfp+0x28>
 8004370:	6833      	ldr	r3, [r6, #0]
 8004372:	b30b      	cbz	r3, 80043b8 <__sfp+0x68>
 8004374:	6836      	ldr	r6, [r6, #0]
 8004376:	e7f7      	b.n	8004368 <__sfp+0x18>
 8004378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800437c:	b9d5      	cbnz	r5, 80043b4 <__sfp+0x64>
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <__sfp+0x88>)
 8004380:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004384:	60e3      	str	r3, [r4, #12]
 8004386:	6665      	str	r5, [r4, #100]	; 0x64
 8004388:	f000 f84c 	bl	8004424 <__retarget_lock_init_recursive>
 800438c:	f7ff ff96 	bl	80042bc <__sfp_lock_release>
 8004390:	2208      	movs	r2, #8
 8004392:	4629      	mov	r1, r5
 8004394:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004398:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800439c:	6025      	str	r5, [r4, #0]
 800439e:	61a5      	str	r5, [r4, #24]
 80043a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043a4:	f7fe fabe 	bl	8002924 <memset>
 80043a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043b0:	4620      	mov	r0, r4
 80043b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b4:	3468      	adds	r4, #104	; 0x68
 80043b6:	e7d9      	b.n	800436c <__sfp+0x1c>
 80043b8:	2104      	movs	r1, #4
 80043ba:	4638      	mov	r0, r7
 80043bc:	f7ff ff62 	bl	8004284 <__sfmoreglue>
 80043c0:	4604      	mov	r4, r0
 80043c2:	6030      	str	r0, [r6, #0]
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d1d5      	bne.n	8004374 <__sfp+0x24>
 80043c8:	f7ff ff78 	bl	80042bc <__sfp_lock_release>
 80043cc:	230c      	movs	r3, #12
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	e7ee      	b.n	80043b0 <__sfp+0x60>
 80043d2:	bf00      	nop
 80043d4:	0800550c 	.word	0x0800550c
 80043d8:	ffff0001 	.word	0xffff0001

080043dc <_fwalk_reent>:
 80043dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e0:	4606      	mov	r6, r0
 80043e2:	4688      	mov	r8, r1
 80043e4:	2700      	movs	r7, #0
 80043e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043ee:	f1b9 0901 	subs.w	r9, r9, #1
 80043f2:	d505      	bpl.n	8004400 <_fwalk_reent+0x24>
 80043f4:	6824      	ldr	r4, [r4, #0]
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	d1f7      	bne.n	80043ea <_fwalk_reent+0xe>
 80043fa:	4638      	mov	r0, r7
 80043fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004400:	89ab      	ldrh	r3, [r5, #12]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d907      	bls.n	8004416 <_fwalk_reent+0x3a>
 8004406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800440a:	3301      	adds	r3, #1
 800440c:	d003      	beq.n	8004416 <_fwalk_reent+0x3a>
 800440e:	4629      	mov	r1, r5
 8004410:	4630      	mov	r0, r6
 8004412:	47c0      	blx	r8
 8004414:	4307      	orrs	r7, r0
 8004416:	3568      	adds	r5, #104	; 0x68
 8004418:	e7e9      	b.n	80043ee <_fwalk_reent+0x12>
	...

0800441c <_localeconv_r>:
 800441c:	4800      	ldr	r0, [pc, #0]	; (8004420 <_localeconv_r+0x4>)
 800441e:	4770      	bx	lr
 8004420:	20000160 	.word	0x20000160

08004424 <__retarget_lock_init_recursive>:
 8004424:	4770      	bx	lr

08004426 <__retarget_lock_acquire_recursive>:
 8004426:	4770      	bx	lr

08004428 <__retarget_lock_release_recursive>:
 8004428:	4770      	bx	lr

0800442a <__swhatbuf_r>:
 800442a:	b570      	push	{r4, r5, r6, lr}
 800442c:	460e      	mov	r6, r1
 800442e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004432:	4614      	mov	r4, r2
 8004434:	2900      	cmp	r1, #0
 8004436:	461d      	mov	r5, r3
 8004438:	b096      	sub	sp, #88	; 0x58
 800443a:	da07      	bge.n	800444c <__swhatbuf_r+0x22>
 800443c:	2300      	movs	r3, #0
 800443e:	602b      	str	r3, [r5, #0]
 8004440:	89b3      	ldrh	r3, [r6, #12]
 8004442:	061a      	lsls	r2, r3, #24
 8004444:	d410      	bmi.n	8004468 <__swhatbuf_r+0x3e>
 8004446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800444a:	e00e      	b.n	800446a <__swhatbuf_r+0x40>
 800444c:	466a      	mov	r2, sp
 800444e:	f000 ff69 	bl	8005324 <_fstat_r>
 8004452:	2800      	cmp	r0, #0
 8004454:	dbf2      	blt.n	800443c <__swhatbuf_r+0x12>
 8004456:	9a01      	ldr	r2, [sp, #4]
 8004458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800445c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004460:	425a      	negs	r2, r3
 8004462:	415a      	adcs	r2, r3
 8004464:	602a      	str	r2, [r5, #0]
 8004466:	e7ee      	b.n	8004446 <__swhatbuf_r+0x1c>
 8004468:	2340      	movs	r3, #64	; 0x40
 800446a:	2000      	movs	r0, #0
 800446c:	6023      	str	r3, [r4, #0]
 800446e:	b016      	add	sp, #88	; 0x58
 8004470:	bd70      	pop	{r4, r5, r6, pc}
	...

08004474 <__smakebuf_r>:
 8004474:	898b      	ldrh	r3, [r1, #12]
 8004476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004478:	079d      	lsls	r5, r3, #30
 800447a:	4606      	mov	r6, r0
 800447c:	460c      	mov	r4, r1
 800447e:	d507      	bpl.n	8004490 <__smakebuf_r+0x1c>
 8004480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	6123      	str	r3, [r4, #16]
 8004488:	2301      	movs	r3, #1
 800448a:	6163      	str	r3, [r4, #20]
 800448c:	b002      	add	sp, #8
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	466a      	mov	r2, sp
 8004492:	ab01      	add	r3, sp, #4
 8004494:	f7ff ffc9 	bl	800442a <__swhatbuf_r>
 8004498:	9900      	ldr	r1, [sp, #0]
 800449a:	4605      	mov	r5, r0
 800449c:	4630      	mov	r0, r6
 800449e:	f000 fc29 	bl	8004cf4 <_malloc_r>
 80044a2:	b948      	cbnz	r0, 80044b8 <__smakebuf_r+0x44>
 80044a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a8:	059a      	lsls	r2, r3, #22
 80044aa:	d4ef      	bmi.n	800448c <__smakebuf_r+0x18>
 80044ac:	f023 0303 	bic.w	r3, r3, #3
 80044b0:	f043 0302 	orr.w	r3, r3, #2
 80044b4:	81a3      	strh	r3, [r4, #12]
 80044b6:	e7e3      	b.n	8004480 <__smakebuf_r+0xc>
 80044b8:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <__smakebuf_r+0x7c>)
 80044ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	6020      	str	r0, [r4, #0]
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	81a3      	strh	r3, [r4, #12]
 80044c6:	9b00      	ldr	r3, [sp, #0]
 80044c8:	6120      	str	r0, [r4, #16]
 80044ca:	6163      	str	r3, [r4, #20]
 80044cc:	9b01      	ldr	r3, [sp, #4]
 80044ce:	b15b      	cbz	r3, 80044e8 <__smakebuf_r+0x74>
 80044d0:	4630      	mov	r0, r6
 80044d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044d6:	f000 ff37 	bl	8005348 <_isatty_r>
 80044da:	b128      	cbz	r0, 80044e8 <__smakebuf_r+0x74>
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	89a0      	ldrh	r0, [r4, #12]
 80044ea:	4305      	orrs	r5, r0
 80044ec:	81a5      	strh	r5, [r4, #12]
 80044ee:	e7cd      	b.n	800448c <__smakebuf_r+0x18>
 80044f0:	08004279 	.word	0x08004279

080044f4 <malloc>:
 80044f4:	4b02      	ldr	r3, [pc, #8]	; (8004500 <malloc+0xc>)
 80044f6:	4601      	mov	r1, r0
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f000 bbfb 	b.w	8004cf4 <_malloc_r>
 80044fe:	bf00      	nop
 8004500:	2000000c 	.word	0x2000000c

08004504 <memchr>:
 8004504:	4603      	mov	r3, r0
 8004506:	b510      	push	{r4, lr}
 8004508:	b2c9      	uxtb	r1, r1
 800450a:	4402      	add	r2, r0
 800450c:	4293      	cmp	r3, r2
 800450e:	4618      	mov	r0, r3
 8004510:	d101      	bne.n	8004516 <memchr+0x12>
 8004512:	2000      	movs	r0, #0
 8004514:	e003      	b.n	800451e <memchr+0x1a>
 8004516:	7804      	ldrb	r4, [r0, #0]
 8004518:	3301      	adds	r3, #1
 800451a:	428c      	cmp	r4, r1
 800451c:	d1f6      	bne.n	800450c <memchr+0x8>
 800451e:	bd10      	pop	{r4, pc}

08004520 <memcpy>:
 8004520:	440a      	add	r2, r1
 8004522:	4291      	cmp	r1, r2
 8004524:	f100 33ff 	add.w	r3, r0, #4294967295
 8004528:	d100      	bne.n	800452c <memcpy+0xc>
 800452a:	4770      	bx	lr
 800452c:	b510      	push	{r4, lr}
 800452e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004532:	4291      	cmp	r1, r2
 8004534:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004538:	d1f9      	bne.n	800452e <memcpy+0xe>
 800453a:	bd10      	pop	{r4, pc}

0800453c <_Balloc>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004540:	4604      	mov	r4, r0
 8004542:	460d      	mov	r5, r1
 8004544:	b976      	cbnz	r6, 8004564 <_Balloc+0x28>
 8004546:	2010      	movs	r0, #16
 8004548:	f7ff ffd4 	bl	80044f4 <malloc>
 800454c:	4602      	mov	r2, r0
 800454e:	6260      	str	r0, [r4, #36]	; 0x24
 8004550:	b920      	cbnz	r0, 800455c <_Balloc+0x20>
 8004552:	2166      	movs	r1, #102	; 0x66
 8004554:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <_Balloc+0x78>)
 8004556:	4818      	ldr	r0, [pc, #96]	; (80045b8 <_Balloc+0x7c>)
 8004558:	f000 fea4 	bl	80052a4 <__assert_func>
 800455c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004560:	6006      	str	r6, [r0, #0]
 8004562:	60c6      	str	r6, [r0, #12]
 8004564:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004566:	68f3      	ldr	r3, [r6, #12]
 8004568:	b183      	cbz	r3, 800458c <_Balloc+0x50>
 800456a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004572:	b9b8      	cbnz	r0, 80045a4 <_Balloc+0x68>
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f605 	lsl.w	r6, r1, r5
 800457a:	1d72      	adds	r2, r6, #5
 800457c:	4620      	mov	r0, r4
 800457e:	0092      	lsls	r2, r2, #2
 8004580:	f000 fb5e 	bl	8004c40 <_calloc_r>
 8004584:	b160      	cbz	r0, 80045a0 <_Balloc+0x64>
 8004586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800458a:	e00e      	b.n	80045aa <_Balloc+0x6e>
 800458c:	2221      	movs	r2, #33	; 0x21
 800458e:	2104      	movs	r1, #4
 8004590:	4620      	mov	r0, r4
 8004592:	f000 fb55 	bl	8004c40 <_calloc_r>
 8004596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004598:	60f0      	str	r0, [r6, #12]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e4      	bne.n	800456a <_Balloc+0x2e>
 80045a0:	2000      	movs	r0, #0
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	6802      	ldr	r2, [r0, #0]
 80045a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80045aa:	2300      	movs	r3, #0
 80045ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80045b0:	e7f7      	b.n	80045a2 <_Balloc+0x66>
 80045b2:	bf00      	nop
 80045b4:	08005551 	.word	0x08005551
 80045b8:	08005638 	.word	0x08005638

080045bc <_Bfree>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80045c0:	4605      	mov	r5, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	b976      	cbnz	r6, 80045e4 <_Bfree+0x28>
 80045c6:	2010      	movs	r0, #16
 80045c8:	f7ff ff94 	bl	80044f4 <malloc>
 80045cc:	4602      	mov	r2, r0
 80045ce:	6268      	str	r0, [r5, #36]	; 0x24
 80045d0:	b920      	cbnz	r0, 80045dc <_Bfree+0x20>
 80045d2:	218a      	movs	r1, #138	; 0x8a
 80045d4:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <_Bfree+0x3c>)
 80045d6:	4809      	ldr	r0, [pc, #36]	; (80045fc <_Bfree+0x40>)
 80045d8:	f000 fe64 	bl	80052a4 <__assert_func>
 80045dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045e0:	6006      	str	r6, [r0, #0]
 80045e2:	60c6      	str	r6, [r0, #12]
 80045e4:	b13c      	cbz	r4, 80045f6 <_Bfree+0x3a>
 80045e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045e8:	6862      	ldr	r2, [r4, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045f0:	6021      	str	r1, [r4, #0]
 80045f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	08005551 	.word	0x08005551
 80045fc:	08005638 	.word	0x08005638

08004600 <__multadd>:
 8004600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004604:	4698      	mov	r8, r3
 8004606:	460c      	mov	r4, r1
 8004608:	2300      	movs	r3, #0
 800460a:	690e      	ldr	r6, [r1, #16]
 800460c:	4607      	mov	r7, r0
 800460e:	f101 0014 	add.w	r0, r1, #20
 8004612:	6805      	ldr	r5, [r0, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	b2a9      	uxth	r1, r5
 8004618:	fb02 8101 	mla	r1, r2, r1, r8
 800461c:	0c2d      	lsrs	r5, r5, #16
 800461e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004622:	fb02 c505 	mla	r5, r2, r5, ip
 8004626:	b289      	uxth	r1, r1
 8004628:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800462c:	429e      	cmp	r6, r3
 800462e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004632:	f840 1b04 	str.w	r1, [r0], #4
 8004636:	dcec      	bgt.n	8004612 <__multadd+0x12>
 8004638:	f1b8 0f00 	cmp.w	r8, #0
 800463c:	d022      	beq.n	8004684 <__multadd+0x84>
 800463e:	68a3      	ldr	r3, [r4, #8]
 8004640:	42b3      	cmp	r3, r6
 8004642:	dc19      	bgt.n	8004678 <__multadd+0x78>
 8004644:	6861      	ldr	r1, [r4, #4]
 8004646:	4638      	mov	r0, r7
 8004648:	3101      	adds	r1, #1
 800464a:	f7ff ff77 	bl	800453c <_Balloc>
 800464e:	4605      	mov	r5, r0
 8004650:	b928      	cbnz	r0, 800465e <__multadd+0x5e>
 8004652:	4602      	mov	r2, r0
 8004654:	21b5      	movs	r1, #181	; 0xb5
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <__multadd+0x8c>)
 8004658:	480d      	ldr	r0, [pc, #52]	; (8004690 <__multadd+0x90>)
 800465a:	f000 fe23 	bl	80052a4 <__assert_func>
 800465e:	6922      	ldr	r2, [r4, #16]
 8004660:	f104 010c 	add.w	r1, r4, #12
 8004664:	3202      	adds	r2, #2
 8004666:	0092      	lsls	r2, r2, #2
 8004668:	300c      	adds	r0, #12
 800466a:	f7ff ff59 	bl	8004520 <memcpy>
 800466e:	4621      	mov	r1, r4
 8004670:	4638      	mov	r0, r7
 8004672:	f7ff ffa3 	bl	80045bc <_Bfree>
 8004676:	462c      	mov	r4, r5
 8004678:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800467c:	3601      	adds	r6, #1
 800467e:	f8c3 8014 	str.w	r8, [r3, #20]
 8004682:	6126      	str	r6, [r4, #16]
 8004684:	4620      	mov	r0, r4
 8004686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800468a:	bf00      	nop
 800468c:	080055c7 	.word	0x080055c7
 8004690:	08005638 	.word	0x08005638

08004694 <__hi0bits>:
 8004694:	0c02      	lsrs	r2, r0, #16
 8004696:	0412      	lsls	r2, r2, #16
 8004698:	4603      	mov	r3, r0
 800469a:	b9ca      	cbnz	r2, 80046d0 <__hi0bits+0x3c>
 800469c:	0403      	lsls	r3, r0, #16
 800469e:	2010      	movs	r0, #16
 80046a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80046a4:	bf04      	itt	eq
 80046a6:	021b      	lsleq	r3, r3, #8
 80046a8:	3008      	addeq	r0, #8
 80046aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80046ae:	bf04      	itt	eq
 80046b0:	011b      	lsleq	r3, r3, #4
 80046b2:	3004      	addeq	r0, #4
 80046b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80046b8:	bf04      	itt	eq
 80046ba:	009b      	lsleq	r3, r3, #2
 80046bc:	3002      	addeq	r0, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	db05      	blt.n	80046ce <__hi0bits+0x3a>
 80046c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80046c6:	f100 0001 	add.w	r0, r0, #1
 80046ca:	bf08      	it	eq
 80046cc:	2020      	moveq	r0, #32
 80046ce:	4770      	bx	lr
 80046d0:	2000      	movs	r0, #0
 80046d2:	e7e5      	b.n	80046a0 <__hi0bits+0xc>

080046d4 <__lo0bits>:
 80046d4:	6803      	ldr	r3, [r0, #0]
 80046d6:	4602      	mov	r2, r0
 80046d8:	f013 0007 	ands.w	r0, r3, #7
 80046dc:	d00b      	beq.n	80046f6 <__lo0bits+0x22>
 80046de:	07d9      	lsls	r1, r3, #31
 80046e0:	d422      	bmi.n	8004728 <__lo0bits+0x54>
 80046e2:	0798      	lsls	r0, r3, #30
 80046e4:	bf49      	itett	mi
 80046e6:	085b      	lsrmi	r3, r3, #1
 80046e8:	089b      	lsrpl	r3, r3, #2
 80046ea:	2001      	movmi	r0, #1
 80046ec:	6013      	strmi	r3, [r2, #0]
 80046ee:	bf5c      	itt	pl
 80046f0:	2002      	movpl	r0, #2
 80046f2:	6013      	strpl	r3, [r2, #0]
 80046f4:	4770      	bx	lr
 80046f6:	b299      	uxth	r1, r3
 80046f8:	b909      	cbnz	r1, 80046fe <__lo0bits+0x2a>
 80046fa:	2010      	movs	r0, #16
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004702:	bf04      	itt	eq
 8004704:	0a1b      	lsreq	r3, r3, #8
 8004706:	3008      	addeq	r0, #8
 8004708:	0719      	lsls	r1, r3, #28
 800470a:	bf04      	itt	eq
 800470c:	091b      	lsreq	r3, r3, #4
 800470e:	3004      	addeq	r0, #4
 8004710:	0799      	lsls	r1, r3, #30
 8004712:	bf04      	itt	eq
 8004714:	089b      	lsreq	r3, r3, #2
 8004716:	3002      	addeq	r0, #2
 8004718:	07d9      	lsls	r1, r3, #31
 800471a:	d403      	bmi.n	8004724 <__lo0bits+0x50>
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	f100 0001 	add.w	r0, r0, #1
 8004722:	d003      	beq.n	800472c <__lo0bits+0x58>
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4770      	bx	lr
 8004728:	2000      	movs	r0, #0
 800472a:	4770      	bx	lr
 800472c:	2020      	movs	r0, #32
 800472e:	4770      	bx	lr

08004730 <__i2b>:
 8004730:	b510      	push	{r4, lr}
 8004732:	460c      	mov	r4, r1
 8004734:	2101      	movs	r1, #1
 8004736:	f7ff ff01 	bl	800453c <_Balloc>
 800473a:	4602      	mov	r2, r0
 800473c:	b928      	cbnz	r0, 800474a <__i2b+0x1a>
 800473e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004742:	4b04      	ldr	r3, [pc, #16]	; (8004754 <__i2b+0x24>)
 8004744:	4804      	ldr	r0, [pc, #16]	; (8004758 <__i2b+0x28>)
 8004746:	f000 fdad 	bl	80052a4 <__assert_func>
 800474a:	2301      	movs	r3, #1
 800474c:	6144      	str	r4, [r0, #20]
 800474e:	6103      	str	r3, [r0, #16]
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	080055c7 	.word	0x080055c7
 8004758:	08005638 	.word	0x08005638

0800475c <__multiply>:
 800475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004760:	4614      	mov	r4, r2
 8004762:	690a      	ldr	r2, [r1, #16]
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	460d      	mov	r5, r1
 8004768:	429a      	cmp	r2, r3
 800476a:	bfbe      	ittt	lt
 800476c:	460b      	movlt	r3, r1
 800476e:	4625      	movlt	r5, r4
 8004770:	461c      	movlt	r4, r3
 8004772:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004776:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800477a:	68ab      	ldr	r3, [r5, #8]
 800477c:	6869      	ldr	r1, [r5, #4]
 800477e:	eb0a 0709 	add.w	r7, sl, r9
 8004782:	42bb      	cmp	r3, r7
 8004784:	b085      	sub	sp, #20
 8004786:	bfb8      	it	lt
 8004788:	3101      	addlt	r1, #1
 800478a:	f7ff fed7 	bl	800453c <_Balloc>
 800478e:	b930      	cbnz	r0, 800479e <__multiply+0x42>
 8004790:	4602      	mov	r2, r0
 8004792:	f240 115d 	movw	r1, #349	; 0x15d
 8004796:	4b41      	ldr	r3, [pc, #260]	; (800489c <__multiply+0x140>)
 8004798:	4841      	ldr	r0, [pc, #260]	; (80048a0 <__multiply+0x144>)
 800479a:	f000 fd83 	bl	80052a4 <__assert_func>
 800479e:	f100 0614 	add.w	r6, r0, #20
 80047a2:	4633      	mov	r3, r6
 80047a4:	2200      	movs	r2, #0
 80047a6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80047aa:	4543      	cmp	r3, r8
 80047ac:	d31e      	bcc.n	80047ec <__multiply+0x90>
 80047ae:	f105 0c14 	add.w	ip, r5, #20
 80047b2:	f104 0314 	add.w	r3, r4, #20
 80047b6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80047ba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80047be:	9202      	str	r2, [sp, #8]
 80047c0:	ebac 0205 	sub.w	r2, ip, r5
 80047c4:	3a15      	subs	r2, #21
 80047c6:	f022 0203 	bic.w	r2, r2, #3
 80047ca:	3204      	adds	r2, #4
 80047cc:	f105 0115 	add.w	r1, r5, #21
 80047d0:	458c      	cmp	ip, r1
 80047d2:	bf38      	it	cc
 80047d4:	2204      	movcc	r2, #4
 80047d6:	9201      	str	r2, [sp, #4]
 80047d8:	9a02      	ldr	r2, [sp, #8]
 80047da:	9303      	str	r3, [sp, #12]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d808      	bhi.n	80047f2 <__multiply+0x96>
 80047e0:	2f00      	cmp	r7, #0
 80047e2:	dc55      	bgt.n	8004890 <__multiply+0x134>
 80047e4:	6107      	str	r7, [r0, #16]
 80047e6:	b005      	add	sp, #20
 80047e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ec:	f843 2b04 	str.w	r2, [r3], #4
 80047f0:	e7db      	b.n	80047aa <__multiply+0x4e>
 80047f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80047f6:	f1ba 0f00 	cmp.w	sl, #0
 80047fa:	d020      	beq.n	800483e <__multiply+0xe2>
 80047fc:	46b1      	mov	r9, r6
 80047fe:	2200      	movs	r2, #0
 8004800:	f105 0e14 	add.w	lr, r5, #20
 8004804:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004808:	f8d9 b000 	ldr.w	fp, [r9]
 800480c:	b2a1      	uxth	r1, r4
 800480e:	fa1f fb8b 	uxth.w	fp, fp
 8004812:	fb0a b101 	mla	r1, sl, r1, fp
 8004816:	4411      	add	r1, r2
 8004818:	f8d9 2000 	ldr.w	r2, [r9]
 800481c:	0c24      	lsrs	r4, r4, #16
 800481e:	0c12      	lsrs	r2, r2, #16
 8004820:	fb0a 2404 	mla	r4, sl, r4, r2
 8004824:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004828:	b289      	uxth	r1, r1
 800482a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800482e:	45f4      	cmp	ip, lr
 8004830:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004834:	f849 1b04 	str.w	r1, [r9], #4
 8004838:	d8e4      	bhi.n	8004804 <__multiply+0xa8>
 800483a:	9901      	ldr	r1, [sp, #4]
 800483c:	5072      	str	r2, [r6, r1]
 800483e:	9a03      	ldr	r2, [sp, #12]
 8004840:	3304      	adds	r3, #4
 8004842:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004846:	f1b9 0f00 	cmp.w	r9, #0
 800484a:	d01f      	beq.n	800488c <__multiply+0x130>
 800484c:	46b6      	mov	lr, r6
 800484e:	f04f 0a00 	mov.w	sl, #0
 8004852:	6834      	ldr	r4, [r6, #0]
 8004854:	f105 0114 	add.w	r1, r5, #20
 8004858:	880a      	ldrh	r2, [r1, #0]
 800485a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800485e:	b2a4      	uxth	r4, r4
 8004860:	fb09 b202 	mla	r2, r9, r2, fp
 8004864:	4492      	add	sl, r2
 8004866:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800486a:	f84e 4b04 	str.w	r4, [lr], #4
 800486e:	f851 4b04 	ldr.w	r4, [r1], #4
 8004872:	f8be 2000 	ldrh.w	r2, [lr]
 8004876:	0c24      	lsrs	r4, r4, #16
 8004878:	fb09 2404 	mla	r4, r9, r4, r2
 800487c:	458c      	cmp	ip, r1
 800487e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004882:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004886:	d8e7      	bhi.n	8004858 <__multiply+0xfc>
 8004888:	9a01      	ldr	r2, [sp, #4]
 800488a:	50b4      	str	r4, [r6, r2]
 800488c:	3604      	adds	r6, #4
 800488e:	e7a3      	b.n	80047d8 <__multiply+0x7c>
 8004890:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1a5      	bne.n	80047e4 <__multiply+0x88>
 8004898:	3f01      	subs	r7, #1
 800489a:	e7a1      	b.n	80047e0 <__multiply+0x84>
 800489c:	080055c7 	.word	0x080055c7
 80048a0:	08005638 	.word	0x08005638

080048a4 <__pow5mult>:
 80048a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a8:	4615      	mov	r5, r2
 80048aa:	f012 0203 	ands.w	r2, r2, #3
 80048ae:	4606      	mov	r6, r0
 80048b0:	460f      	mov	r7, r1
 80048b2:	d007      	beq.n	80048c4 <__pow5mult+0x20>
 80048b4:	4c25      	ldr	r4, [pc, #148]	; (800494c <__pow5mult+0xa8>)
 80048b6:	3a01      	subs	r2, #1
 80048b8:	2300      	movs	r3, #0
 80048ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80048be:	f7ff fe9f 	bl	8004600 <__multadd>
 80048c2:	4607      	mov	r7, r0
 80048c4:	10ad      	asrs	r5, r5, #2
 80048c6:	d03d      	beq.n	8004944 <__pow5mult+0xa0>
 80048c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80048ca:	b97c      	cbnz	r4, 80048ec <__pow5mult+0x48>
 80048cc:	2010      	movs	r0, #16
 80048ce:	f7ff fe11 	bl	80044f4 <malloc>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6270      	str	r0, [r6, #36]	; 0x24
 80048d6:	b928      	cbnz	r0, 80048e4 <__pow5mult+0x40>
 80048d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80048dc:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <__pow5mult+0xac>)
 80048de:	481d      	ldr	r0, [pc, #116]	; (8004954 <__pow5mult+0xb0>)
 80048e0:	f000 fce0 	bl	80052a4 <__assert_func>
 80048e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048e8:	6004      	str	r4, [r0, #0]
 80048ea:	60c4      	str	r4, [r0, #12]
 80048ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80048f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048f4:	b94c      	cbnz	r4, 800490a <__pow5mult+0x66>
 80048f6:	f240 2171 	movw	r1, #625	; 0x271
 80048fa:	4630      	mov	r0, r6
 80048fc:	f7ff ff18 	bl	8004730 <__i2b>
 8004900:	2300      	movs	r3, #0
 8004902:	4604      	mov	r4, r0
 8004904:	f8c8 0008 	str.w	r0, [r8, #8]
 8004908:	6003      	str	r3, [r0, #0]
 800490a:	f04f 0900 	mov.w	r9, #0
 800490e:	07eb      	lsls	r3, r5, #31
 8004910:	d50a      	bpl.n	8004928 <__pow5mult+0x84>
 8004912:	4639      	mov	r1, r7
 8004914:	4622      	mov	r2, r4
 8004916:	4630      	mov	r0, r6
 8004918:	f7ff ff20 	bl	800475c <__multiply>
 800491c:	4680      	mov	r8, r0
 800491e:	4639      	mov	r1, r7
 8004920:	4630      	mov	r0, r6
 8004922:	f7ff fe4b 	bl	80045bc <_Bfree>
 8004926:	4647      	mov	r7, r8
 8004928:	106d      	asrs	r5, r5, #1
 800492a:	d00b      	beq.n	8004944 <__pow5mult+0xa0>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	b938      	cbnz	r0, 8004940 <__pow5mult+0x9c>
 8004930:	4622      	mov	r2, r4
 8004932:	4621      	mov	r1, r4
 8004934:	4630      	mov	r0, r6
 8004936:	f7ff ff11 	bl	800475c <__multiply>
 800493a:	6020      	str	r0, [r4, #0]
 800493c:	f8c0 9000 	str.w	r9, [r0]
 8004940:	4604      	mov	r4, r0
 8004942:	e7e4      	b.n	800490e <__pow5mult+0x6a>
 8004944:	4638      	mov	r0, r7
 8004946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800494a:	bf00      	nop
 800494c:	08005788 	.word	0x08005788
 8004950:	08005551 	.word	0x08005551
 8004954:	08005638 	.word	0x08005638

08004958 <__lshift>:
 8004958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	460c      	mov	r4, r1
 800495e:	4607      	mov	r7, r0
 8004960:	4691      	mov	r9, r2
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	6849      	ldr	r1, [r1, #4]
 8004966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800496a:	68a3      	ldr	r3, [r4, #8]
 800496c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004970:	f108 0601 	add.w	r6, r8, #1
 8004974:	42b3      	cmp	r3, r6
 8004976:	db0b      	blt.n	8004990 <__lshift+0x38>
 8004978:	4638      	mov	r0, r7
 800497a:	f7ff fddf 	bl	800453c <_Balloc>
 800497e:	4605      	mov	r5, r0
 8004980:	b948      	cbnz	r0, 8004996 <__lshift+0x3e>
 8004982:	4602      	mov	r2, r0
 8004984:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004988:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <__lshift+0xd0>)
 800498a:	4828      	ldr	r0, [pc, #160]	; (8004a2c <__lshift+0xd4>)
 800498c:	f000 fc8a 	bl	80052a4 <__assert_func>
 8004990:	3101      	adds	r1, #1
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	e7ee      	b.n	8004974 <__lshift+0x1c>
 8004996:	2300      	movs	r3, #0
 8004998:	f100 0114 	add.w	r1, r0, #20
 800499c:	f100 0210 	add.w	r2, r0, #16
 80049a0:	4618      	mov	r0, r3
 80049a2:	4553      	cmp	r3, sl
 80049a4:	db33      	blt.n	8004a0e <__lshift+0xb6>
 80049a6:	6920      	ldr	r0, [r4, #16]
 80049a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049ac:	f104 0314 	add.w	r3, r4, #20
 80049b0:	f019 091f 	ands.w	r9, r9, #31
 80049b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80049b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80049bc:	d02b      	beq.n	8004a16 <__lshift+0xbe>
 80049be:	468a      	mov	sl, r1
 80049c0:	2200      	movs	r2, #0
 80049c2:	f1c9 0e20 	rsb	lr, r9, #32
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	fa00 f009 	lsl.w	r0, r0, r9
 80049cc:	4302      	orrs	r2, r0
 80049ce:	f84a 2b04 	str.w	r2, [sl], #4
 80049d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049d6:	459c      	cmp	ip, r3
 80049d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80049dc:	d8f3      	bhi.n	80049c6 <__lshift+0x6e>
 80049de:	ebac 0304 	sub.w	r3, ip, r4
 80049e2:	3b15      	subs	r3, #21
 80049e4:	f023 0303 	bic.w	r3, r3, #3
 80049e8:	3304      	adds	r3, #4
 80049ea:	f104 0015 	add.w	r0, r4, #21
 80049ee:	4584      	cmp	ip, r0
 80049f0:	bf38      	it	cc
 80049f2:	2304      	movcc	r3, #4
 80049f4:	50ca      	str	r2, [r1, r3]
 80049f6:	b10a      	cbz	r2, 80049fc <__lshift+0xa4>
 80049f8:	f108 0602 	add.w	r6, r8, #2
 80049fc:	3e01      	subs	r6, #1
 80049fe:	4638      	mov	r0, r7
 8004a00:	4621      	mov	r1, r4
 8004a02:	612e      	str	r6, [r5, #16]
 8004a04:	f7ff fdda 	bl	80045bc <_Bfree>
 8004a08:	4628      	mov	r0, r5
 8004a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004a12:	3301      	adds	r3, #1
 8004a14:	e7c5      	b.n	80049a2 <__lshift+0x4a>
 8004a16:	3904      	subs	r1, #4
 8004a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a1c:	459c      	cmp	ip, r3
 8004a1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004a22:	d8f9      	bhi.n	8004a18 <__lshift+0xc0>
 8004a24:	e7ea      	b.n	80049fc <__lshift+0xa4>
 8004a26:	bf00      	nop
 8004a28:	080055c7 	.word	0x080055c7
 8004a2c:	08005638 	.word	0x08005638

08004a30 <__mcmp>:
 8004a30:	4603      	mov	r3, r0
 8004a32:	690a      	ldr	r2, [r1, #16]
 8004a34:	6900      	ldr	r0, [r0, #16]
 8004a36:	b530      	push	{r4, r5, lr}
 8004a38:	1a80      	subs	r0, r0, r2
 8004a3a:	d10d      	bne.n	8004a58 <__mcmp+0x28>
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	3114      	adds	r1, #20
 8004a40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004a44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004a48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a50:	4295      	cmp	r5, r2
 8004a52:	d002      	beq.n	8004a5a <__mcmp+0x2a>
 8004a54:	d304      	bcc.n	8004a60 <__mcmp+0x30>
 8004a56:	2001      	movs	r0, #1
 8004a58:	bd30      	pop	{r4, r5, pc}
 8004a5a:	42a3      	cmp	r3, r4
 8004a5c:	d3f4      	bcc.n	8004a48 <__mcmp+0x18>
 8004a5e:	e7fb      	b.n	8004a58 <__mcmp+0x28>
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	e7f8      	b.n	8004a58 <__mcmp+0x28>
	...

08004a68 <__mdiff>:
 8004a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	4606      	mov	r6, r0
 8004a70:	4611      	mov	r1, r2
 8004a72:	4620      	mov	r0, r4
 8004a74:	4692      	mov	sl, r2
 8004a76:	f7ff ffdb 	bl	8004a30 <__mcmp>
 8004a7a:	1e05      	subs	r5, r0, #0
 8004a7c:	d111      	bne.n	8004aa2 <__mdiff+0x3a>
 8004a7e:	4629      	mov	r1, r5
 8004a80:	4630      	mov	r0, r6
 8004a82:	f7ff fd5b 	bl	800453c <_Balloc>
 8004a86:	4602      	mov	r2, r0
 8004a88:	b928      	cbnz	r0, 8004a96 <__mdiff+0x2e>
 8004a8a:	f240 2132 	movw	r1, #562	; 0x232
 8004a8e:	4b3c      	ldr	r3, [pc, #240]	; (8004b80 <__mdiff+0x118>)
 8004a90:	483c      	ldr	r0, [pc, #240]	; (8004b84 <__mdiff+0x11c>)
 8004a92:	f000 fc07 	bl	80052a4 <__assert_func>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa2:	bfa4      	itt	ge
 8004aa4:	4653      	movge	r3, sl
 8004aa6:	46a2      	movge	sl, r4
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004aae:	bfa6      	itte	ge
 8004ab0:	461c      	movge	r4, r3
 8004ab2:	2500      	movge	r5, #0
 8004ab4:	2501      	movlt	r5, #1
 8004ab6:	f7ff fd41 	bl	800453c <_Balloc>
 8004aba:	4602      	mov	r2, r0
 8004abc:	b918      	cbnz	r0, 8004ac6 <__mdiff+0x5e>
 8004abe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004ac2:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <__mdiff+0x118>)
 8004ac4:	e7e4      	b.n	8004a90 <__mdiff+0x28>
 8004ac6:	f100 0814 	add.w	r8, r0, #20
 8004aca:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004ace:	60c5      	str	r5, [r0, #12]
 8004ad0:	f04f 0c00 	mov.w	ip, #0
 8004ad4:	f10a 0514 	add.w	r5, sl, #20
 8004ad8:	f10a 0010 	add.w	r0, sl, #16
 8004adc:	46c2      	mov	sl, r8
 8004ade:	6926      	ldr	r6, [r4, #16]
 8004ae0:	f104 0914 	add.w	r9, r4, #20
 8004ae4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004ae8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004aec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004af0:	f859 3b04 	ldr.w	r3, [r9], #4
 8004af4:	fa1f f18b 	uxth.w	r1, fp
 8004af8:	4461      	add	r1, ip
 8004afa:	fa1f fc83 	uxth.w	ip, r3
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	eba1 010c 	sub.w	r1, r1, ip
 8004b04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004b08:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004b0c:	b289      	uxth	r1, r1
 8004b0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004b12:	454e      	cmp	r6, r9
 8004b14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004b18:	f84a 3b04 	str.w	r3, [sl], #4
 8004b1c:	d8e6      	bhi.n	8004aec <__mdiff+0x84>
 8004b1e:	1b33      	subs	r3, r6, r4
 8004b20:	3b15      	subs	r3, #21
 8004b22:	f023 0303 	bic.w	r3, r3, #3
 8004b26:	3415      	adds	r4, #21
 8004b28:	3304      	adds	r3, #4
 8004b2a:	42a6      	cmp	r6, r4
 8004b2c:	bf38      	it	cc
 8004b2e:	2304      	movcc	r3, #4
 8004b30:	441d      	add	r5, r3
 8004b32:	4443      	add	r3, r8
 8004b34:	461e      	mov	r6, r3
 8004b36:	462c      	mov	r4, r5
 8004b38:	4574      	cmp	r4, lr
 8004b3a:	d30e      	bcc.n	8004b5a <__mdiff+0xf2>
 8004b3c:	f10e 0103 	add.w	r1, lr, #3
 8004b40:	1b49      	subs	r1, r1, r5
 8004b42:	f021 0103 	bic.w	r1, r1, #3
 8004b46:	3d03      	subs	r5, #3
 8004b48:	45ae      	cmp	lr, r5
 8004b4a:	bf38      	it	cc
 8004b4c:	2100      	movcc	r1, #0
 8004b4e:	4419      	add	r1, r3
 8004b50:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004b54:	b18b      	cbz	r3, 8004b7a <__mdiff+0x112>
 8004b56:	6117      	str	r7, [r2, #16]
 8004b58:	e7a0      	b.n	8004a9c <__mdiff+0x34>
 8004b5a:	f854 8b04 	ldr.w	r8, [r4], #4
 8004b5e:	fa1f f188 	uxth.w	r1, r8
 8004b62:	4461      	add	r1, ip
 8004b64:	1408      	asrs	r0, r1, #16
 8004b66:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004b6a:	b289      	uxth	r1, r1
 8004b6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004b70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b74:	f846 1b04 	str.w	r1, [r6], #4
 8004b78:	e7de      	b.n	8004b38 <__mdiff+0xd0>
 8004b7a:	3f01      	subs	r7, #1
 8004b7c:	e7e8      	b.n	8004b50 <__mdiff+0xe8>
 8004b7e:	bf00      	nop
 8004b80:	080055c7 	.word	0x080055c7
 8004b84:	08005638 	.word	0x08005638

08004b88 <__d2b>:
 8004b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004b92:	4690      	mov	r8, r2
 8004b94:	461d      	mov	r5, r3
 8004b96:	f7ff fcd1 	bl	800453c <_Balloc>
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	b930      	cbnz	r0, 8004bac <__d2b+0x24>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	f240 310a 	movw	r1, #778	; 0x30a
 8004ba4:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <__d2b+0xb0>)
 8004ba6:	4825      	ldr	r0, [pc, #148]	; (8004c3c <__d2b+0xb4>)
 8004ba8:	f000 fb7c 	bl	80052a4 <__assert_func>
 8004bac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004bb0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004bb4:	bb2d      	cbnz	r5, 8004c02 <__d2b+0x7a>
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	f1b8 0300 	subs.w	r3, r8, #0
 8004bbc:	d026      	beq.n	8004c0c <__d2b+0x84>
 8004bbe:	4668      	mov	r0, sp
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	f7ff fd87 	bl	80046d4 <__lo0bits>
 8004bc6:	9900      	ldr	r1, [sp, #0]
 8004bc8:	b1f0      	cbz	r0, 8004c08 <__d2b+0x80>
 8004bca:	9a01      	ldr	r2, [sp, #4]
 8004bcc:	f1c0 0320 	rsb	r3, r0, #32
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	40c2      	lsrs	r2, r0
 8004bd8:	6163      	str	r3, [r4, #20]
 8004bda:	9201      	str	r2, [sp, #4]
 8004bdc:	9b01      	ldr	r3, [sp, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf14      	ite	ne
 8004be2:	2102      	movne	r1, #2
 8004be4:	2101      	moveq	r1, #1
 8004be6:	61a3      	str	r3, [r4, #24]
 8004be8:	6121      	str	r1, [r4, #16]
 8004bea:	b1c5      	cbz	r5, 8004c1e <__d2b+0x96>
 8004bec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004bf0:	4405      	add	r5, r0
 8004bf2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004bf6:	603d      	str	r5, [r7, #0]
 8004bf8:	6030      	str	r0, [r6, #0]
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	b002      	add	sp, #8
 8004bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c06:	e7d6      	b.n	8004bb6 <__d2b+0x2e>
 8004c08:	6161      	str	r1, [r4, #20]
 8004c0a:	e7e7      	b.n	8004bdc <__d2b+0x54>
 8004c0c:	a801      	add	r0, sp, #4
 8004c0e:	f7ff fd61 	bl	80046d4 <__lo0bits>
 8004c12:	2101      	movs	r1, #1
 8004c14:	9b01      	ldr	r3, [sp, #4]
 8004c16:	6121      	str	r1, [r4, #16]
 8004c18:	6163      	str	r3, [r4, #20]
 8004c1a:	3020      	adds	r0, #32
 8004c1c:	e7e5      	b.n	8004bea <__d2b+0x62>
 8004c1e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004c22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004c26:	6038      	str	r0, [r7, #0]
 8004c28:	6918      	ldr	r0, [r3, #16]
 8004c2a:	f7ff fd33 	bl	8004694 <__hi0bits>
 8004c2e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004c32:	6031      	str	r1, [r6, #0]
 8004c34:	e7e1      	b.n	8004bfa <__d2b+0x72>
 8004c36:	bf00      	nop
 8004c38:	080055c7 	.word	0x080055c7
 8004c3c:	08005638 	.word	0x08005638

08004c40 <_calloc_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	fb02 f501 	mul.w	r5, r2, r1
 8004c46:	4629      	mov	r1, r5
 8004c48:	f000 f854 	bl	8004cf4 <_malloc_r>
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	b118      	cbz	r0, 8004c58 <_calloc_r+0x18>
 8004c50:	462a      	mov	r2, r5
 8004c52:	2100      	movs	r1, #0
 8004c54:	f7fd fe66 	bl	8002924 <memset>
 8004c58:	4620      	mov	r0, r4
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}

08004c5c <_free_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4605      	mov	r5, r0
 8004c60:	2900      	cmp	r1, #0
 8004c62:	d043      	beq.n	8004cec <_free_r+0x90>
 8004c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c68:	1f0c      	subs	r4, r1, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bfb8      	it	lt
 8004c6e:	18e4      	addlt	r4, r4, r3
 8004c70:	f000 fb9e 	bl	80053b0 <__malloc_lock>
 8004c74:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <_free_r+0x94>)
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	4610      	mov	r0, r2
 8004c7a:	b933      	cbnz	r3, 8004c8a <_free_r+0x2e>
 8004c7c:	6063      	str	r3, [r4, #4]
 8004c7e:	6014      	str	r4, [r2, #0]
 8004c80:	4628      	mov	r0, r5
 8004c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c86:	f000 bb99 	b.w	80053bc <__malloc_unlock>
 8004c8a:	42a3      	cmp	r3, r4
 8004c8c:	d90a      	bls.n	8004ca4 <_free_r+0x48>
 8004c8e:	6821      	ldr	r1, [r4, #0]
 8004c90:	1862      	adds	r2, r4, r1
 8004c92:	4293      	cmp	r3, r2
 8004c94:	bf01      	itttt	eq
 8004c96:	681a      	ldreq	r2, [r3, #0]
 8004c98:	685b      	ldreq	r3, [r3, #4]
 8004c9a:	1852      	addeq	r2, r2, r1
 8004c9c:	6022      	streq	r2, [r4, #0]
 8004c9e:	6063      	str	r3, [r4, #4]
 8004ca0:	6004      	str	r4, [r0, #0]
 8004ca2:	e7ed      	b.n	8004c80 <_free_r+0x24>
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	b10b      	cbz	r3, 8004cae <_free_r+0x52>
 8004caa:	42a3      	cmp	r3, r4
 8004cac:	d9fa      	bls.n	8004ca4 <_free_r+0x48>
 8004cae:	6811      	ldr	r1, [r2, #0]
 8004cb0:	1850      	adds	r0, r2, r1
 8004cb2:	42a0      	cmp	r0, r4
 8004cb4:	d10b      	bne.n	8004cce <_free_r+0x72>
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	4401      	add	r1, r0
 8004cba:	1850      	adds	r0, r2, r1
 8004cbc:	4283      	cmp	r3, r0
 8004cbe:	6011      	str	r1, [r2, #0]
 8004cc0:	d1de      	bne.n	8004c80 <_free_r+0x24>
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4401      	add	r1, r0
 8004cc8:	6011      	str	r1, [r2, #0]
 8004cca:	6053      	str	r3, [r2, #4]
 8004ccc:	e7d8      	b.n	8004c80 <_free_r+0x24>
 8004cce:	d902      	bls.n	8004cd6 <_free_r+0x7a>
 8004cd0:	230c      	movs	r3, #12
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	e7d4      	b.n	8004c80 <_free_r+0x24>
 8004cd6:	6820      	ldr	r0, [r4, #0]
 8004cd8:	1821      	adds	r1, r4, r0
 8004cda:	428b      	cmp	r3, r1
 8004cdc:	bf01      	itttt	eq
 8004cde:	6819      	ldreq	r1, [r3, #0]
 8004ce0:	685b      	ldreq	r3, [r3, #4]
 8004ce2:	1809      	addeq	r1, r1, r0
 8004ce4:	6021      	streq	r1, [r4, #0]
 8004ce6:	6063      	str	r3, [r4, #4]
 8004ce8:	6054      	str	r4, [r2, #4]
 8004cea:	e7c9      	b.n	8004c80 <_free_r+0x24>
 8004cec:	bd38      	pop	{r3, r4, r5, pc}
 8004cee:	bf00      	nop
 8004cf0:	200001fc 	.word	0x200001fc

08004cf4 <_malloc_r>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	1ccd      	adds	r5, r1, #3
 8004cf8:	f025 0503 	bic.w	r5, r5, #3
 8004cfc:	3508      	adds	r5, #8
 8004cfe:	2d0c      	cmp	r5, #12
 8004d00:	bf38      	it	cc
 8004d02:	250c      	movcc	r5, #12
 8004d04:	2d00      	cmp	r5, #0
 8004d06:	4606      	mov	r6, r0
 8004d08:	db01      	blt.n	8004d0e <_malloc_r+0x1a>
 8004d0a:	42a9      	cmp	r1, r5
 8004d0c:	d903      	bls.n	8004d16 <_malloc_r+0x22>
 8004d0e:	230c      	movs	r3, #12
 8004d10:	6033      	str	r3, [r6, #0]
 8004d12:	2000      	movs	r0, #0
 8004d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d16:	f000 fb4b 	bl	80053b0 <__malloc_lock>
 8004d1a:	4921      	ldr	r1, [pc, #132]	; (8004da0 <_malloc_r+0xac>)
 8004d1c:	680a      	ldr	r2, [r1, #0]
 8004d1e:	4614      	mov	r4, r2
 8004d20:	b99c      	cbnz	r4, 8004d4a <_malloc_r+0x56>
 8004d22:	4f20      	ldr	r7, [pc, #128]	; (8004da4 <_malloc_r+0xb0>)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	b923      	cbnz	r3, 8004d32 <_malloc_r+0x3e>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f000 f994 	bl	8005058 <_sbrk_r>
 8004d30:	6038      	str	r0, [r7, #0]
 8004d32:	4629      	mov	r1, r5
 8004d34:	4630      	mov	r0, r6
 8004d36:	f000 f98f 	bl	8005058 <_sbrk_r>
 8004d3a:	1c43      	adds	r3, r0, #1
 8004d3c:	d123      	bne.n	8004d86 <_malloc_r+0x92>
 8004d3e:	230c      	movs	r3, #12
 8004d40:	4630      	mov	r0, r6
 8004d42:	6033      	str	r3, [r6, #0]
 8004d44:	f000 fb3a 	bl	80053bc <__malloc_unlock>
 8004d48:	e7e3      	b.n	8004d12 <_malloc_r+0x1e>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	1b5b      	subs	r3, r3, r5
 8004d4e:	d417      	bmi.n	8004d80 <_malloc_r+0x8c>
 8004d50:	2b0b      	cmp	r3, #11
 8004d52:	d903      	bls.n	8004d5c <_malloc_r+0x68>
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	441c      	add	r4, r3
 8004d58:	6025      	str	r5, [r4, #0]
 8004d5a:	e004      	b.n	8004d66 <_malloc_r+0x72>
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	42a2      	cmp	r2, r4
 8004d60:	bf0c      	ite	eq
 8004d62:	600b      	streq	r3, [r1, #0]
 8004d64:	6053      	strne	r3, [r2, #4]
 8004d66:	4630      	mov	r0, r6
 8004d68:	f000 fb28 	bl	80053bc <__malloc_unlock>
 8004d6c:	f104 000b 	add.w	r0, r4, #11
 8004d70:	1d23      	adds	r3, r4, #4
 8004d72:	f020 0007 	bic.w	r0, r0, #7
 8004d76:	1ac2      	subs	r2, r0, r3
 8004d78:	d0cc      	beq.n	8004d14 <_malloc_r+0x20>
 8004d7a:	1a1b      	subs	r3, r3, r0
 8004d7c:	50a3      	str	r3, [r4, r2]
 8004d7e:	e7c9      	b.n	8004d14 <_malloc_r+0x20>
 8004d80:	4622      	mov	r2, r4
 8004d82:	6864      	ldr	r4, [r4, #4]
 8004d84:	e7cc      	b.n	8004d20 <_malloc_r+0x2c>
 8004d86:	1cc4      	adds	r4, r0, #3
 8004d88:	f024 0403 	bic.w	r4, r4, #3
 8004d8c:	42a0      	cmp	r0, r4
 8004d8e:	d0e3      	beq.n	8004d58 <_malloc_r+0x64>
 8004d90:	1a21      	subs	r1, r4, r0
 8004d92:	4630      	mov	r0, r6
 8004d94:	f000 f960 	bl	8005058 <_sbrk_r>
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d1dd      	bne.n	8004d58 <_malloc_r+0x64>
 8004d9c:	e7cf      	b.n	8004d3e <_malloc_r+0x4a>
 8004d9e:	bf00      	nop
 8004da0:	200001fc 	.word	0x200001fc
 8004da4:	20000200 	.word	0x20000200

08004da8 <__sfputc_r>:
 8004da8:	6893      	ldr	r3, [r2, #8]
 8004daa:	b410      	push	{r4}
 8004dac:	3b01      	subs	r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	6093      	str	r3, [r2, #8]
 8004db2:	da07      	bge.n	8004dc4 <__sfputc_r+0x1c>
 8004db4:	6994      	ldr	r4, [r2, #24]
 8004db6:	42a3      	cmp	r3, r4
 8004db8:	db01      	blt.n	8004dbe <__sfputc_r+0x16>
 8004dba:	290a      	cmp	r1, #10
 8004dbc:	d102      	bne.n	8004dc4 <__sfputc_r+0x1c>
 8004dbe:	bc10      	pop	{r4}
 8004dc0:	f000 b99e 	b.w	8005100 <__swbuf_r>
 8004dc4:	6813      	ldr	r3, [r2, #0]
 8004dc6:	1c58      	adds	r0, r3, #1
 8004dc8:	6010      	str	r0, [r2, #0]
 8004dca:	7019      	strb	r1, [r3, #0]
 8004dcc:	4608      	mov	r0, r1
 8004dce:	bc10      	pop	{r4}
 8004dd0:	4770      	bx	lr

08004dd2 <__sfputs_r>:
 8004dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	460f      	mov	r7, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	18d5      	adds	r5, r2, r3
 8004ddc:	42ac      	cmp	r4, r5
 8004dde:	d101      	bne.n	8004de4 <__sfputs_r+0x12>
 8004de0:	2000      	movs	r0, #0
 8004de2:	e007      	b.n	8004df4 <__sfputs_r+0x22>
 8004de4:	463a      	mov	r2, r7
 8004de6:	4630      	mov	r0, r6
 8004de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dec:	f7ff ffdc 	bl	8004da8 <__sfputc_r>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d1f3      	bne.n	8004ddc <__sfputs_r+0xa>
 8004df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004df8 <_vfiprintf_r>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	460d      	mov	r5, r1
 8004dfe:	4614      	mov	r4, r2
 8004e00:	4698      	mov	r8, r3
 8004e02:	4606      	mov	r6, r0
 8004e04:	b09d      	sub	sp, #116	; 0x74
 8004e06:	b118      	cbz	r0, 8004e10 <_vfiprintf_r+0x18>
 8004e08:	6983      	ldr	r3, [r0, #24]
 8004e0a:	b90b      	cbnz	r3, 8004e10 <_vfiprintf_r+0x18>
 8004e0c:	f7ff fa68 	bl	80042e0 <__sinit>
 8004e10:	4b89      	ldr	r3, [pc, #548]	; (8005038 <_vfiprintf_r+0x240>)
 8004e12:	429d      	cmp	r5, r3
 8004e14:	d11b      	bne.n	8004e4e <_vfiprintf_r+0x56>
 8004e16:	6875      	ldr	r5, [r6, #4]
 8004e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e1a:	07d9      	lsls	r1, r3, #31
 8004e1c:	d405      	bmi.n	8004e2a <_vfiprintf_r+0x32>
 8004e1e:	89ab      	ldrh	r3, [r5, #12]
 8004e20:	059a      	lsls	r2, r3, #22
 8004e22:	d402      	bmi.n	8004e2a <_vfiprintf_r+0x32>
 8004e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e26:	f7ff fafe 	bl	8004426 <__retarget_lock_acquire_recursive>
 8004e2a:	89ab      	ldrh	r3, [r5, #12]
 8004e2c:	071b      	lsls	r3, r3, #28
 8004e2e:	d501      	bpl.n	8004e34 <_vfiprintf_r+0x3c>
 8004e30:	692b      	ldr	r3, [r5, #16]
 8004e32:	b9eb      	cbnz	r3, 8004e70 <_vfiprintf_r+0x78>
 8004e34:	4629      	mov	r1, r5
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 f9c6 	bl	80051c8 <__swsetup_r>
 8004e3c:	b1c0      	cbz	r0, 8004e70 <_vfiprintf_r+0x78>
 8004e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e40:	07dc      	lsls	r4, r3, #31
 8004e42:	d50e      	bpl.n	8004e62 <_vfiprintf_r+0x6a>
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	b01d      	add	sp, #116	; 0x74
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	4b7b      	ldr	r3, [pc, #492]	; (800503c <_vfiprintf_r+0x244>)
 8004e50:	429d      	cmp	r5, r3
 8004e52:	d101      	bne.n	8004e58 <_vfiprintf_r+0x60>
 8004e54:	68b5      	ldr	r5, [r6, #8]
 8004e56:	e7df      	b.n	8004e18 <_vfiprintf_r+0x20>
 8004e58:	4b79      	ldr	r3, [pc, #484]	; (8005040 <_vfiprintf_r+0x248>)
 8004e5a:	429d      	cmp	r5, r3
 8004e5c:	bf08      	it	eq
 8004e5e:	68f5      	ldreq	r5, [r6, #12]
 8004e60:	e7da      	b.n	8004e18 <_vfiprintf_r+0x20>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	0598      	lsls	r0, r3, #22
 8004e66:	d4ed      	bmi.n	8004e44 <_vfiprintf_r+0x4c>
 8004e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e6a:	f7ff fadd 	bl	8004428 <__retarget_lock_release_recursive>
 8004e6e:	e7e9      	b.n	8004e44 <_vfiprintf_r+0x4c>
 8004e70:	2300      	movs	r3, #0
 8004e72:	9309      	str	r3, [sp, #36]	; 0x24
 8004e74:	2320      	movs	r3, #32
 8004e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e7a:	2330      	movs	r3, #48	; 0x30
 8004e7c:	f04f 0901 	mov.w	r9, #1
 8004e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e84:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005044 <_vfiprintf_r+0x24c>
 8004e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	469a      	mov	sl, r3
 8004e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e94:	b10a      	cbz	r2, 8004e9a <_vfiprintf_r+0xa2>
 8004e96:	2a25      	cmp	r2, #37	; 0x25
 8004e98:	d1f9      	bne.n	8004e8e <_vfiprintf_r+0x96>
 8004e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8004e9e:	d00b      	beq.n	8004eb8 <_vfiprintf_r+0xc0>
 8004ea0:	465b      	mov	r3, fp
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f7ff ff93 	bl	8004dd2 <__sfputs_r>
 8004eac:	3001      	adds	r0, #1
 8004eae:	f000 80aa 	beq.w	8005006 <_vfiprintf_r+0x20e>
 8004eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eb4:	445a      	add	r2, fp
 8004eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8004eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80a2 	beq.w	8005006 <_vfiprintf_r+0x20e>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ecc:	f10a 0a01 	add.w	sl, sl, #1
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	9307      	str	r3, [sp, #28]
 8004ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8004eda:	4654      	mov	r4, sl
 8004edc:	2205      	movs	r2, #5
 8004ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee2:	4858      	ldr	r0, [pc, #352]	; (8005044 <_vfiprintf_r+0x24c>)
 8004ee4:	f7ff fb0e 	bl	8004504 <memchr>
 8004ee8:	9a04      	ldr	r2, [sp, #16]
 8004eea:	b9d8      	cbnz	r0, 8004f24 <_vfiprintf_r+0x12c>
 8004eec:	06d1      	lsls	r1, r2, #27
 8004eee:	bf44      	itt	mi
 8004ef0:	2320      	movmi	r3, #32
 8004ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef6:	0713      	lsls	r3, r2, #28
 8004ef8:	bf44      	itt	mi
 8004efa:	232b      	movmi	r3, #43	; 0x2b
 8004efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f00:	f89a 3000 	ldrb.w	r3, [sl]
 8004f04:	2b2a      	cmp	r3, #42	; 0x2a
 8004f06:	d015      	beq.n	8004f34 <_vfiprintf_r+0x13c>
 8004f08:	4654      	mov	r4, sl
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f04f 0c0a 	mov.w	ip, #10
 8004f10:	9a07      	ldr	r2, [sp, #28]
 8004f12:	4621      	mov	r1, r4
 8004f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f18:	3b30      	subs	r3, #48	; 0x30
 8004f1a:	2b09      	cmp	r3, #9
 8004f1c:	d94e      	bls.n	8004fbc <_vfiprintf_r+0x1c4>
 8004f1e:	b1b0      	cbz	r0, 8004f4e <_vfiprintf_r+0x156>
 8004f20:	9207      	str	r2, [sp, #28]
 8004f22:	e014      	b.n	8004f4e <_vfiprintf_r+0x156>
 8004f24:	eba0 0308 	sub.w	r3, r0, r8
 8004f28:	fa09 f303 	lsl.w	r3, r9, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	46a2      	mov	sl, r4
 8004f30:	9304      	str	r3, [sp, #16]
 8004f32:	e7d2      	b.n	8004eda <_vfiprintf_r+0xe2>
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	1d19      	adds	r1, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	9103      	str	r1, [sp, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bfbb      	ittet	lt
 8004f40:	425b      	neglt	r3, r3
 8004f42:	f042 0202 	orrlt.w	r2, r2, #2
 8004f46:	9307      	strge	r3, [sp, #28]
 8004f48:	9307      	strlt	r3, [sp, #28]
 8004f4a:	bfb8      	it	lt
 8004f4c:	9204      	strlt	r2, [sp, #16]
 8004f4e:	7823      	ldrb	r3, [r4, #0]
 8004f50:	2b2e      	cmp	r3, #46	; 0x2e
 8004f52:	d10c      	bne.n	8004f6e <_vfiprintf_r+0x176>
 8004f54:	7863      	ldrb	r3, [r4, #1]
 8004f56:	2b2a      	cmp	r3, #42	; 0x2a
 8004f58:	d135      	bne.n	8004fc6 <_vfiprintf_r+0x1ce>
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	3402      	adds	r4, #2
 8004f5e:	1d1a      	adds	r2, r3, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	9203      	str	r2, [sp, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bfb8      	it	lt
 8004f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f6c:	9305      	str	r3, [sp, #20]
 8004f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005054 <_vfiprintf_r+0x25c>
 8004f72:	2203      	movs	r2, #3
 8004f74:	4650      	mov	r0, sl
 8004f76:	7821      	ldrb	r1, [r4, #0]
 8004f78:	f7ff fac4 	bl	8004504 <memchr>
 8004f7c:	b140      	cbz	r0, 8004f90 <_vfiprintf_r+0x198>
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	eba0 000a 	sub.w	r0, r0, sl
 8004f84:	fa03 f000 	lsl.w	r0, r3, r0
 8004f88:	9b04      	ldr	r3, [sp, #16]
 8004f8a:	3401      	adds	r4, #1
 8004f8c:	4303      	orrs	r3, r0
 8004f8e:	9304      	str	r3, [sp, #16]
 8004f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f94:	2206      	movs	r2, #6
 8004f96:	482c      	ldr	r0, [pc, #176]	; (8005048 <_vfiprintf_r+0x250>)
 8004f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f9c:	f7ff fab2 	bl	8004504 <memchr>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d03f      	beq.n	8005024 <_vfiprintf_r+0x22c>
 8004fa4:	4b29      	ldr	r3, [pc, #164]	; (800504c <_vfiprintf_r+0x254>)
 8004fa6:	bb1b      	cbnz	r3, 8004ff0 <_vfiprintf_r+0x1f8>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	3307      	adds	r3, #7
 8004fac:	f023 0307 	bic.w	r3, r3, #7
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	9303      	str	r3, [sp, #12]
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	443b      	add	r3, r7
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fba:	e767      	b.n	8004e8c <_vfiprintf_r+0x94>
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fc4:	e7a5      	b.n	8004f12 <_vfiprintf_r+0x11a>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f04f 0c0a 	mov.w	ip, #10
 8004fcc:	4619      	mov	r1, r3
 8004fce:	3401      	adds	r4, #1
 8004fd0:	9305      	str	r3, [sp, #20]
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fd8:	3a30      	subs	r2, #48	; 0x30
 8004fda:	2a09      	cmp	r2, #9
 8004fdc:	d903      	bls.n	8004fe6 <_vfiprintf_r+0x1ee>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0c5      	beq.n	8004f6e <_vfiprintf_r+0x176>
 8004fe2:	9105      	str	r1, [sp, #20]
 8004fe4:	e7c3      	b.n	8004f6e <_vfiprintf_r+0x176>
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	2301      	movs	r3, #1
 8004fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fee:	e7f0      	b.n	8004fd2 <_vfiprintf_r+0x1da>
 8004ff0:	ab03      	add	r3, sp, #12
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	462a      	mov	r2, r5
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4b15      	ldr	r3, [pc, #84]	; (8005050 <_vfiprintf_r+0x258>)
 8004ffa:	a904      	add	r1, sp, #16
 8004ffc:	f7fd fd38 	bl	8002a70 <_printf_float>
 8005000:	4607      	mov	r7, r0
 8005002:	1c78      	adds	r0, r7, #1
 8005004:	d1d6      	bne.n	8004fb4 <_vfiprintf_r+0x1bc>
 8005006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005008:	07d9      	lsls	r1, r3, #31
 800500a:	d405      	bmi.n	8005018 <_vfiprintf_r+0x220>
 800500c:	89ab      	ldrh	r3, [r5, #12]
 800500e:	059a      	lsls	r2, r3, #22
 8005010:	d402      	bmi.n	8005018 <_vfiprintf_r+0x220>
 8005012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005014:	f7ff fa08 	bl	8004428 <__retarget_lock_release_recursive>
 8005018:	89ab      	ldrh	r3, [r5, #12]
 800501a:	065b      	lsls	r3, r3, #25
 800501c:	f53f af12 	bmi.w	8004e44 <_vfiprintf_r+0x4c>
 8005020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005022:	e711      	b.n	8004e48 <_vfiprintf_r+0x50>
 8005024:	ab03      	add	r3, sp, #12
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	462a      	mov	r2, r5
 800502a:	4630      	mov	r0, r6
 800502c:	4b08      	ldr	r3, [pc, #32]	; (8005050 <_vfiprintf_r+0x258>)
 800502e:	a904      	add	r1, sp, #16
 8005030:	f7fd ffba 	bl	8002fa8 <_printf_i>
 8005034:	e7e4      	b.n	8005000 <_vfiprintf_r+0x208>
 8005036:	bf00      	nop
 8005038:	080055f8 	.word	0x080055f8
 800503c:	08005618 	.word	0x08005618
 8005040:	080055d8 	.word	0x080055d8
 8005044:	08005794 	.word	0x08005794
 8005048:	0800579e 	.word	0x0800579e
 800504c:	08002a71 	.word	0x08002a71
 8005050:	08004dd3 	.word	0x08004dd3
 8005054:	0800579a 	.word	0x0800579a

08005058 <_sbrk_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	2300      	movs	r3, #0
 800505c:	4d05      	ldr	r5, [pc, #20]	; (8005074 <_sbrk_r+0x1c>)
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	f7fb ff1e 	bl	8000ea4 <_sbrk>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_sbrk_r+0x1a>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_sbrk_r+0x1a>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	20000254 	.word	0x20000254

08005078 <__sread>:
 8005078:	b510      	push	{r4, lr}
 800507a:	460c      	mov	r4, r1
 800507c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005080:	f000 f9a2 	bl	80053c8 <_read_r>
 8005084:	2800      	cmp	r0, #0
 8005086:	bfab      	itete	ge
 8005088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800508a:	89a3      	ldrhlt	r3, [r4, #12]
 800508c:	181b      	addge	r3, r3, r0
 800508e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005092:	bfac      	ite	ge
 8005094:	6563      	strge	r3, [r4, #84]	; 0x54
 8005096:	81a3      	strhlt	r3, [r4, #12]
 8005098:	bd10      	pop	{r4, pc}

0800509a <__swrite>:
 800509a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509e:	461f      	mov	r7, r3
 80050a0:	898b      	ldrh	r3, [r1, #12]
 80050a2:	4605      	mov	r5, r0
 80050a4:	05db      	lsls	r3, r3, #23
 80050a6:	460c      	mov	r4, r1
 80050a8:	4616      	mov	r6, r2
 80050aa:	d505      	bpl.n	80050b8 <__swrite+0x1e>
 80050ac:	2302      	movs	r3, #2
 80050ae:	2200      	movs	r2, #0
 80050b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b4:	f000 f958 	bl	8005368 <_lseek_r>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	4632      	mov	r2, r6
 80050bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c0:	81a3      	strh	r3, [r4, #12]
 80050c2:	4628      	mov	r0, r5
 80050c4:	463b      	mov	r3, r7
 80050c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ce:	f000 b869 	b.w	80051a4 <_write_r>

080050d2 <__sseek>:
 80050d2:	b510      	push	{r4, lr}
 80050d4:	460c      	mov	r4, r1
 80050d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050da:	f000 f945 	bl	8005368 <_lseek_r>
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	bf15      	itete	ne
 80050e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80050e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ee:	81a3      	strheq	r3, [r4, #12]
 80050f0:	bf18      	it	ne
 80050f2:	81a3      	strhne	r3, [r4, #12]
 80050f4:	bd10      	pop	{r4, pc}

080050f6 <__sclose>:
 80050f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fa:	f000 b8f1 	b.w	80052e0 <_close_r>
	...

08005100 <__swbuf_r>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	460e      	mov	r6, r1
 8005104:	4614      	mov	r4, r2
 8005106:	4605      	mov	r5, r0
 8005108:	b118      	cbz	r0, 8005112 <__swbuf_r+0x12>
 800510a:	6983      	ldr	r3, [r0, #24]
 800510c:	b90b      	cbnz	r3, 8005112 <__swbuf_r+0x12>
 800510e:	f7ff f8e7 	bl	80042e0 <__sinit>
 8005112:	4b21      	ldr	r3, [pc, #132]	; (8005198 <__swbuf_r+0x98>)
 8005114:	429c      	cmp	r4, r3
 8005116:	d12b      	bne.n	8005170 <__swbuf_r+0x70>
 8005118:	686c      	ldr	r4, [r5, #4]
 800511a:	69a3      	ldr	r3, [r4, #24]
 800511c:	60a3      	str	r3, [r4, #8]
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	071a      	lsls	r2, r3, #28
 8005122:	d52f      	bpl.n	8005184 <__swbuf_r+0x84>
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	b36b      	cbz	r3, 8005184 <__swbuf_r+0x84>
 8005128:	6923      	ldr	r3, [r4, #16]
 800512a:	6820      	ldr	r0, [r4, #0]
 800512c:	b2f6      	uxtb	r6, r6
 800512e:	1ac0      	subs	r0, r0, r3
 8005130:	6963      	ldr	r3, [r4, #20]
 8005132:	4637      	mov	r7, r6
 8005134:	4283      	cmp	r3, r0
 8005136:	dc04      	bgt.n	8005142 <__swbuf_r+0x42>
 8005138:	4621      	mov	r1, r4
 800513a:	4628      	mov	r0, r5
 800513c:	f7ff f83c 	bl	80041b8 <_fflush_r>
 8005140:	bb30      	cbnz	r0, 8005190 <__swbuf_r+0x90>
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	3001      	adds	r0, #1
 8005146:	3b01      	subs	r3, #1
 8005148:	60a3      	str	r3, [r4, #8]
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	6022      	str	r2, [r4, #0]
 8005150:	701e      	strb	r6, [r3, #0]
 8005152:	6963      	ldr	r3, [r4, #20]
 8005154:	4283      	cmp	r3, r0
 8005156:	d004      	beq.n	8005162 <__swbuf_r+0x62>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	07db      	lsls	r3, r3, #31
 800515c:	d506      	bpl.n	800516c <__swbuf_r+0x6c>
 800515e:	2e0a      	cmp	r6, #10
 8005160:	d104      	bne.n	800516c <__swbuf_r+0x6c>
 8005162:	4621      	mov	r1, r4
 8005164:	4628      	mov	r0, r5
 8005166:	f7ff f827 	bl	80041b8 <_fflush_r>
 800516a:	b988      	cbnz	r0, 8005190 <__swbuf_r+0x90>
 800516c:	4638      	mov	r0, r7
 800516e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005170:	4b0a      	ldr	r3, [pc, #40]	; (800519c <__swbuf_r+0x9c>)
 8005172:	429c      	cmp	r4, r3
 8005174:	d101      	bne.n	800517a <__swbuf_r+0x7a>
 8005176:	68ac      	ldr	r4, [r5, #8]
 8005178:	e7cf      	b.n	800511a <__swbuf_r+0x1a>
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <__swbuf_r+0xa0>)
 800517c:	429c      	cmp	r4, r3
 800517e:	bf08      	it	eq
 8005180:	68ec      	ldreq	r4, [r5, #12]
 8005182:	e7ca      	b.n	800511a <__swbuf_r+0x1a>
 8005184:	4621      	mov	r1, r4
 8005186:	4628      	mov	r0, r5
 8005188:	f000 f81e 	bl	80051c8 <__swsetup_r>
 800518c:	2800      	cmp	r0, #0
 800518e:	d0cb      	beq.n	8005128 <__swbuf_r+0x28>
 8005190:	f04f 37ff 	mov.w	r7, #4294967295
 8005194:	e7ea      	b.n	800516c <__swbuf_r+0x6c>
 8005196:	bf00      	nop
 8005198:	080055f8 	.word	0x080055f8
 800519c:	08005618 	.word	0x08005618
 80051a0:	080055d8 	.word	0x080055d8

080051a4 <_write_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	4604      	mov	r4, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	2200      	movs	r2, #0
 80051ae:	4d05      	ldr	r5, [pc, #20]	; (80051c4 <_write_r+0x20>)
 80051b0:	602a      	str	r2, [r5, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f7fb fe2a 	bl	8000e0c <_write>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d102      	bne.n	80051c2 <_write_r+0x1e>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	b103      	cbz	r3, 80051c2 <_write_r+0x1e>
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	20000254 	.word	0x20000254

080051c8 <__swsetup_r>:
 80051c8:	4b32      	ldr	r3, [pc, #200]	; (8005294 <__swsetup_r+0xcc>)
 80051ca:	b570      	push	{r4, r5, r6, lr}
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	4606      	mov	r6, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	b125      	cbz	r5, 80051de <__swsetup_r+0x16>
 80051d4:	69ab      	ldr	r3, [r5, #24]
 80051d6:	b913      	cbnz	r3, 80051de <__swsetup_r+0x16>
 80051d8:	4628      	mov	r0, r5
 80051da:	f7ff f881 	bl	80042e0 <__sinit>
 80051de:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <__swsetup_r+0xd0>)
 80051e0:	429c      	cmp	r4, r3
 80051e2:	d10f      	bne.n	8005204 <__swsetup_r+0x3c>
 80051e4:	686c      	ldr	r4, [r5, #4]
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051ec:	0719      	lsls	r1, r3, #28
 80051ee:	d42c      	bmi.n	800524a <__swsetup_r+0x82>
 80051f0:	06dd      	lsls	r5, r3, #27
 80051f2:	d411      	bmi.n	8005218 <__swsetup_r+0x50>
 80051f4:	2309      	movs	r3, #9
 80051f6:	6033      	str	r3, [r6, #0]
 80051f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005200:	81a3      	strh	r3, [r4, #12]
 8005202:	e03e      	b.n	8005282 <__swsetup_r+0xba>
 8005204:	4b25      	ldr	r3, [pc, #148]	; (800529c <__swsetup_r+0xd4>)
 8005206:	429c      	cmp	r4, r3
 8005208:	d101      	bne.n	800520e <__swsetup_r+0x46>
 800520a:	68ac      	ldr	r4, [r5, #8]
 800520c:	e7eb      	b.n	80051e6 <__swsetup_r+0x1e>
 800520e:	4b24      	ldr	r3, [pc, #144]	; (80052a0 <__swsetup_r+0xd8>)
 8005210:	429c      	cmp	r4, r3
 8005212:	bf08      	it	eq
 8005214:	68ec      	ldreq	r4, [r5, #12]
 8005216:	e7e6      	b.n	80051e6 <__swsetup_r+0x1e>
 8005218:	0758      	lsls	r0, r3, #29
 800521a:	d512      	bpl.n	8005242 <__swsetup_r+0x7a>
 800521c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800521e:	b141      	cbz	r1, 8005232 <__swsetup_r+0x6a>
 8005220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005224:	4299      	cmp	r1, r3
 8005226:	d002      	beq.n	800522e <__swsetup_r+0x66>
 8005228:	4630      	mov	r0, r6
 800522a:	f7ff fd17 	bl	8004c5c <_free_r>
 800522e:	2300      	movs	r3, #0
 8005230:	6363      	str	r3, [r4, #52]	; 0x34
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	2300      	movs	r3, #0
 800523c:	6063      	str	r3, [r4, #4]
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f043 0308 	orr.w	r3, r3, #8
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	b94b      	cbnz	r3, 8005262 <__swsetup_r+0x9a>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005258:	d003      	beq.n	8005262 <__swsetup_r+0x9a>
 800525a:	4621      	mov	r1, r4
 800525c:	4630      	mov	r0, r6
 800525e:	f7ff f909 	bl	8004474 <__smakebuf_r>
 8005262:	89a0      	ldrh	r0, [r4, #12]
 8005264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005268:	f010 0301 	ands.w	r3, r0, #1
 800526c:	d00a      	beq.n	8005284 <__swsetup_r+0xbc>
 800526e:	2300      	movs	r3, #0
 8005270:	60a3      	str	r3, [r4, #8]
 8005272:	6963      	ldr	r3, [r4, #20]
 8005274:	425b      	negs	r3, r3
 8005276:	61a3      	str	r3, [r4, #24]
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	b943      	cbnz	r3, 800528e <__swsetup_r+0xc6>
 800527c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005280:	d1ba      	bne.n	80051f8 <__swsetup_r+0x30>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	0781      	lsls	r1, r0, #30
 8005286:	bf58      	it	pl
 8005288:	6963      	ldrpl	r3, [r4, #20]
 800528a:	60a3      	str	r3, [r4, #8]
 800528c:	e7f4      	b.n	8005278 <__swsetup_r+0xb0>
 800528e:	2000      	movs	r0, #0
 8005290:	e7f7      	b.n	8005282 <__swsetup_r+0xba>
 8005292:	bf00      	nop
 8005294:	2000000c 	.word	0x2000000c
 8005298:	080055f8 	.word	0x080055f8
 800529c:	08005618 	.word	0x08005618
 80052a0:	080055d8 	.word	0x080055d8

080052a4 <__assert_func>:
 80052a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052a6:	4614      	mov	r4, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <__assert_func+0x2c>)
 80052ac:	4605      	mov	r5, r0
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68d8      	ldr	r0, [r3, #12]
 80052b2:	b14c      	cbz	r4, 80052c8 <__assert_func+0x24>
 80052b4:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <__assert_func+0x30>)
 80052b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052ba:	9100      	str	r1, [sp, #0]
 80052bc:	462b      	mov	r3, r5
 80052be:	4906      	ldr	r1, [pc, #24]	; (80052d8 <__assert_func+0x34>)
 80052c0:	f000 f81e 	bl	8005300 <fiprintf>
 80052c4:	f000 f89f 	bl	8005406 <abort>
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <__assert_func+0x38>)
 80052ca:	461c      	mov	r4, r3
 80052cc:	e7f3      	b.n	80052b6 <__assert_func+0x12>
 80052ce:	bf00      	nop
 80052d0:	2000000c 	.word	0x2000000c
 80052d4:	080057a5 	.word	0x080057a5
 80052d8:	080057b2 	.word	0x080057b2
 80052dc:	080057e0 	.word	0x080057e0

080052e0 <_close_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	2300      	movs	r3, #0
 80052e4:	4d05      	ldr	r5, [pc, #20]	; (80052fc <_close_r+0x1c>)
 80052e6:	4604      	mov	r4, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	602b      	str	r3, [r5, #0]
 80052ec:	f7fb fdaa 	bl	8000e44 <_close>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_close_r+0x1a>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_close_r+0x1a>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	20000254 	.word	0x20000254

08005300 <fiprintf>:
 8005300:	b40e      	push	{r1, r2, r3}
 8005302:	b503      	push	{r0, r1, lr}
 8005304:	4601      	mov	r1, r0
 8005306:	ab03      	add	r3, sp, #12
 8005308:	4805      	ldr	r0, [pc, #20]	; (8005320 <fiprintf+0x20>)
 800530a:	f853 2b04 	ldr.w	r2, [r3], #4
 800530e:	6800      	ldr	r0, [r0, #0]
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	f7ff fd71 	bl	8004df8 <_vfiprintf_r>
 8005316:	b002      	add	sp, #8
 8005318:	f85d eb04 	ldr.w	lr, [sp], #4
 800531c:	b003      	add	sp, #12
 800531e:	4770      	bx	lr
 8005320:	2000000c 	.word	0x2000000c

08005324 <_fstat_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	2300      	movs	r3, #0
 8005328:	4d06      	ldr	r5, [pc, #24]	; (8005344 <_fstat_r+0x20>)
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	602b      	str	r3, [r5, #0]
 8005332:	f7fb fd92 	bl	8000e5a <_fstat>
 8005336:	1c43      	adds	r3, r0, #1
 8005338:	d102      	bne.n	8005340 <_fstat_r+0x1c>
 800533a:	682b      	ldr	r3, [r5, #0]
 800533c:	b103      	cbz	r3, 8005340 <_fstat_r+0x1c>
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	bd38      	pop	{r3, r4, r5, pc}
 8005342:	bf00      	nop
 8005344:	20000254 	.word	0x20000254

08005348 <_isatty_r>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	2300      	movs	r3, #0
 800534c:	4d05      	ldr	r5, [pc, #20]	; (8005364 <_isatty_r+0x1c>)
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	f7fb fd90 	bl	8000e78 <_isatty>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d102      	bne.n	8005362 <_isatty_r+0x1a>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	b103      	cbz	r3, 8005362 <_isatty_r+0x1a>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	20000254 	.word	0x20000254

08005368 <_lseek_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	4611      	mov	r1, r2
 8005370:	2200      	movs	r2, #0
 8005372:	4d05      	ldr	r5, [pc, #20]	; (8005388 <_lseek_r+0x20>)
 8005374:	602a      	str	r2, [r5, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	f7fb fd88 	bl	8000e8c <_lseek>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d102      	bne.n	8005386 <_lseek_r+0x1e>
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	b103      	cbz	r3, 8005386 <_lseek_r+0x1e>
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	bd38      	pop	{r3, r4, r5, pc}
 8005388:	20000254 	.word	0x20000254

0800538c <__ascii_mbtowc>:
 800538c:	b082      	sub	sp, #8
 800538e:	b901      	cbnz	r1, 8005392 <__ascii_mbtowc+0x6>
 8005390:	a901      	add	r1, sp, #4
 8005392:	b142      	cbz	r2, 80053a6 <__ascii_mbtowc+0x1a>
 8005394:	b14b      	cbz	r3, 80053aa <__ascii_mbtowc+0x1e>
 8005396:	7813      	ldrb	r3, [r2, #0]
 8005398:	600b      	str	r3, [r1, #0]
 800539a:	7812      	ldrb	r2, [r2, #0]
 800539c:	1e10      	subs	r0, r2, #0
 800539e:	bf18      	it	ne
 80053a0:	2001      	movne	r0, #1
 80053a2:	b002      	add	sp, #8
 80053a4:	4770      	bx	lr
 80053a6:	4610      	mov	r0, r2
 80053a8:	e7fb      	b.n	80053a2 <__ascii_mbtowc+0x16>
 80053aa:	f06f 0001 	mvn.w	r0, #1
 80053ae:	e7f8      	b.n	80053a2 <__ascii_mbtowc+0x16>

080053b0 <__malloc_lock>:
 80053b0:	4801      	ldr	r0, [pc, #4]	; (80053b8 <__malloc_lock+0x8>)
 80053b2:	f7ff b838 	b.w	8004426 <__retarget_lock_acquire_recursive>
 80053b6:	bf00      	nop
 80053b8:	2000024c 	.word	0x2000024c

080053bc <__malloc_unlock>:
 80053bc:	4801      	ldr	r0, [pc, #4]	; (80053c4 <__malloc_unlock+0x8>)
 80053be:	f7ff b833 	b.w	8004428 <__retarget_lock_release_recursive>
 80053c2:	bf00      	nop
 80053c4:	2000024c 	.word	0x2000024c

080053c8 <_read_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	2200      	movs	r2, #0
 80053d2:	4d05      	ldr	r5, [pc, #20]	; (80053e8 <_read_r+0x20>)
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f7fb fcfb 	bl	8000dd2 <_read>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_read_r+0x1e>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_read_r+0x1e>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20000254 	.word	0x20000254

080053ec <__ascii_wctomb>:
 80053ec:	4603      	mov	r3, r0
 80053ee:	4608      	mov	r0, r1
 80053f0:	b141      	cbz	r1, 8005404 <__ascii_wctomb+0x18>
 80053f2:	2aff      	cmp	r2, #255	; 0xff
 80053f4:	d904      	bls.n	8005400 <__ascii_wctomb+0x14>
 80053f6:	228a      	movs	r2, #138	; 0x8a
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	4770      	bx	lr
 8005400:	2001      	movs	r0, #1
 8005402:	700a      	strb	r2, [r1, #0]
 8005404:	4770      	bx	lr

08005406 <abort>:
 8005406:	2006      	movs	r0, #6
 8005408:	b508      	push	{r3, lr}
 800540a:	f000 f82b 	bl	8005464 <raise>
 800540e:	2001      	movs	r0, #1
 8005410:	f7fb fcd5 	bl	8000dbe <_exit>

08005414 <_raise_r>:
 8005414:	291f      	cmp	r1, #31
 8005416:	b538      	push	{r3, r4, r5, lr}
 8005418:	4604      	mov	r4, r0
 800541a:	460d      	mov	r5, r1
 800541c:	d904      	bls.n	8005428 <_raise_r+0x14>
 800541e:	2316      	movs	r3, #22
 8005420:	6003      	str	r3, [r0, #0]
 8005422:	f04f 30ff 	mov.w	r0, #4294967295
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800542a:	b112      	cbz	r2, 8005432 <_raise_r+0x1e>
 800542c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005430:	b94b      	cbnz	r3, 8005446 <_raise_r+0x32>
 8005432:	4620      	mov	r0, r4
 8005434:	f000 f830 	bl	8005498 <_getpid_r>
 8005438:	462a      	mov	r2, r5
 800543a:	4601      	mov	r1, r0
 800543c:	4620      	mov	r0, r4
 800543e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005442:	f000 b817 	b.w	8005474 <_kill_r>
 8005446:	2b01      	cmp	r3, #1
 8005448:	d00a      	beq.n	8005460 <_raise_r+0x4c>
 800544a:	1c59      	adds	r1, r3, #1
 800544c:	d103      	bne.n	8005456 <_raise_r+0x42>
 800544e:	2316      	movs	r3, #22
 8005450:	6003      	str	r3, [r0, #0]
 8005452:	2001      	movs	r0, #1
 8005454:	e7e7      	b.n	8005426 <_raise_r+0x12>
 8005456:	2400      	movs	r4, #0
 8005458:	4628      	mov	r0, r5
 800545a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800545e:	4798      	blx	r3
 8005460:	2000      	movs	r0, #0
 8005462:	e7e0      	b.n	8005426 <_raise_r+0x12>

08005464 <raise>:
 8005464:	4b02      	ldr	r3, [pc, #8]	; (8005470 <raise+0xc>)
 8005466:	4601      	mov	r1, r0
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	f7ff bfd3 	b.w	8005414 <_raise_r>
 800546e:	bf00      	nop
 8005470:	2000000c 	.word	0x2000000c

08005474 <_kill_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	2300      	movs	r3, #0
 8005478:	4d06      	ldr	r5, [pc, #24]	; (8005494 <_kill_r+0x20>)
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	4611      	mov	r1, r2
 8005480:	602b      	str	r3, [r5, #0]
 8005482:	f7fb fc8c 	bl	8000d9e <_kill>
 8005486:	1c43      	adds	r3, r0, #1
 8005488:	d102      	bne.n	8005490 <_kill_r+0x1c>
 800548a:	682b      	ldr	r3, [r5, #0]
 800548c:	b103      	cbz	r3, 8005490 <_kill_r+0x1c>
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	bd38      	pop	{r3, r4, r5, pc}
 8005492:	bf00      	nop
 8005494:	20000254 	.word	0x20000254

08005498 <_getpid_r>:
 8005498:	f7fb bc7a 	b.w	8000d90 <_getpid>

0800549c <_init>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	bf00      	nop
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr

080054a8 <_fini>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	bf00      	nop
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr
