
UART_print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e24  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e4  080030e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030e4  080030e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030e4  080030e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  0800315c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800315c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008233  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b45  00000000  00000000  000282cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00029e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e5a  00000000  00000000  0002abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b70  00000000  00000000  00044a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917c6  00000000  00000000  0004d58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ded50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  000deda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002ff0 	.word	0x08002ff0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002ff0 	.word	0x08002ff0

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_GPIO_Init+0x28>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a07      	ldr	r2, [pc, #28]	; (800024c <MX_GPIO_Init+0x28>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <MX_GPIO_Init+0x28>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40021000 	.word	0x40021000

08000250 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)  //for printf
#endif
PUTCHAR_PROTOTYPE
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000258:	1d39      	adds	r1, r7, #4
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	2201      	movs	r2, #1
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <__io_putchar+0x20>)
 8000262:	f001 fac6 	bl	80017f2 <HAL_UART_Transmit>
  return ch;
 8000266:	687b      	ldr	r3, [r7, #4]
}
 8000268:	4618      	mov	r0, r3
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000098 	.word	0x20000098

08000274 <main>:
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	unsigned char Tx_Buffer[5] = {'H', 'e', 'l', 'l', 'o'};
 800027a:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <main+0x50>)
 800027c:	463b      	mov	r3, r7
 800027e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000282:	6018      	str	r0, [r3, #0]
 8000284:	3304      	adds	r3, #4
 8000286:	7019      	strb	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 fa1c 	bl	80006c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f822 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f7ff ffc8 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000294:	f000 f972 	bl	800057c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <main+0x54>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	6898      	ldr	r0, [r3, #8]
 800029e:	2300      	movs	r3, #0
 80002a0:	2202      	movs	r2, #2
 80002a2:	2100      	movs	r1, #0
 80002a4:	f001 fe8e 	bl	8001fc4 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Start Send data : ");
 80002a8:	4808      	ldr	r0, [pc, #32]	; (80002cc <main+0x58>)
 80002aa:	f001 fe73 	bl	8001f94 <iprintf>
	  HAL_UART_Transmit(&huart1, Tx_Buffer, 5, 2);
 80002ae:	4639      	mov	r1, r7
 80002b0:	2302      	movs	r3, #2
 80002b2:	2205      	movs	r2, #5
 80002b4:	4806      	ldr	r0, [pc, #24]	; (80002d0 <main+0x5c>)
 80002b6:	f001 fa9c 	bl	80017f2 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	f000 fa63 	bl	8000788 <HAL_Delay>
	  printf("Start Send data : ");
 80002c2:	e7f1      	b.n	80002a8 <main+0x34>
 80002c4:	0800301c 	.word	0x0800301c
 80002c8:	2000000c 	.word	0x2000000c
 80002cc:	08003008 	.word	0x08003008
 80002d0:	20000098 	.word	0x20000098

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fe4e 	bl	8001f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000316:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fe01 	bl	8000f24 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000328:	f000 f819 	bl	800035e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f001 f86c 	bl	8001424 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000352:	f000 f804 	bl	800035e <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	; 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000362:	b672      	cpsid	i
}
 8000364:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000366:	e7fe      	b.n	8000366 <Error_Handler+0x8>

08000368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <HAL_MspInit+0x5c>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a14      	ldr	r2, [pc, #80]	; (80003c4 <HAL_MspInit+0x5c>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <HAL_MspInit+0x5c>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <HAL_MspInit+0x5c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <HAL_MspInit+0x5c>)
 800038c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000390:	61d3      	str	r3, [r2, #28]
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <HAL_MspInit+0x5c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <HAL_MspInit+0x60>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <HAL_MspInit+0x60>)
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010000 	.word	0x40010000

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <NMI_Handler+0x4>

080003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <MemManage_Handler+0x4>

080003de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <BusFault_Handler+0x4>

080003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <UsageFault_Handler+0x4>

080003ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr

0800040e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000412:	f000 f99d 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <USART1_IRQHandler+0x10>)
 8000422:	f001 fa79 	bl	8001918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000098 	.word	0x20000098

08000430 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	e00a      	b.n	8000458 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000442:	f3af 8000 	nop.w
 8000446:	4601      	mov	r1, r0
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	60ba      	str	r2, [r7, #8]
 800044e:	b2ca      	uxtb	r2, r1
 8000450:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	3301      	adds	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbf0      	blt.n	8000442 <_read+0x12>
	}

return len;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3718      	adds	r7, #24
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b086      	sub	sp, #24
 800046e:	af00      	add	r7, sp, #0
 8000470:	60f8      	str	r0, [r7, #12]
 8000472:	60b9      	str	r1, [r7, #8]
 8000474:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	e009      	b.n	8000490 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	60ba      	str	r2, [r7, #8]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fee3 	bl	8000250 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3301      	adds	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	dbf1      	blt.n	800047c <_write+0x12>
	}
	return len;
 8000498:	687b      	ldr	r3, [r7, #4]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <_close>:

int _close(int file)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	return -1;
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004c8:	605a      	str	r2, [r3, #4]
	return 0;
 80004ca:	2300      	movs	r3, #0
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <_isatty>:

int _isatty(int file)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
	return 1;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b085      	sub	sp, #20
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
	return 0;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
	...

08000504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <_sbrk+0x5c>)
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <_sbrk+0x60>)
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d102      	bne.n	8000526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <_sbrk+0x64>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <_sbrk+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	429a      	cmp	r2, r3
 8000532:	d207      	bcs.n	8000544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000534:	f001 fcfc 	bl	8001f30 <__errno>
 8000538:	4603      	mov	r3, r0
 800053a:	220c      	movs	r2, #12
 800053c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e009      	b.n	8000558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <_sbrk+0x64>)
 8000554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000c000 	.word	0x2000c000
 8000564:	00000400 	.word	0x00000400
 8000568:	2000008c 	.word	0x2000008c
 800056c:	200000f0 	.word	0x200000f0

08000570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <MX_USART1_UART_Init+0x50>)
 8000584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800058c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005a2:	220c      	movs	r2, #12
 80005a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005b4:	f001 f8d0 	bl	8001758 <HAL_UART_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005be:	f7ff fece 	bl	800035e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000098 	.word	0x20000098
 80005cc:	40013800 	.word	0x40013800

080005d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a20      	ldr	r2, [pc, #128]	; (800066c <HAL_UART_MspInit+0x9c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d139      	bne.n	8000664 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <HAL_UART_MspInit+0xa0>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <HAL_UART_MspInit+0xa0>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <HAL_UART_MspInit+0xa0>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <HAL_UART_MspInit+0xa0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <HAL_UART_MspInit+0xa0>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <HAL_UART_MspInit+0xa0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	480f      	ldr	r0, [pc, #60]	; (8000674 <HAL_UART_MspInit+0xa4>)
 8000636:	f000 fae1 	bl	8000bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800063a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <HAL_UART_MspInit+0xa4>)
 8000650:	f000 fad4 	bl	8000bfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2025      	movs	r0, #37	; 0x25
 800065a:	f000 f990 	bl	800097e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800065e:	2025      	movs	r0, #37	; 0x25
 8000660:	f000 f9a9 	bl	80009b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40013800 	.word	0x40013800
 8000670:	40021000 	.word	0x40021000
 8000674:	40010800 	.word	0x40010800

08000678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000678:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800067a:	e003      	b.n	8000684 <LoopCopyDataInit>

0800067c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800067e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000680:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000682:	3104      	adds	r1, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000688:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800068a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800068c:	d3f6      	bcc.n	800067c <CopyDataInit>
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000690:	e002      	b.n	8000698 <LoopFillZerobss>

08000692 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000694:	f842 3b04 	str.w	r3, [r2], #4

08000698 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800069a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800069c:	d3f9      	bcc.n	8000692 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800069e:	f7ff ff67 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006a2:	f001 fc4b 	bl	8001f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fde5 	bl	8000274 <main>
  bx lr
 80006aa:	4770      	bx	lr
  ldr r3, =_sidata
 80006ac:	080030ec 	.word	0x080030ec
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006b4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80006b8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80006bc:	200000ec 	.word	0x200000ec

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>
	...

080006c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_Init+0x28>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_Init+0x28>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 f947 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f808 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e0:	f7ff fe42 	bl	8000368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40022000 	.word	0x40022000

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x54>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x58>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	fbb3 f3f1 	udiv	r3, r3, r1
 800070a:	fbb2 f3f3 	udiv	r3, r2, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f95f 	bl	80009d2 <HAL_SYSTICK_Config>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e00e      	b.n	800073c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d80a      	bhi.n	800073a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f000 f927 	bl	800097e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_InitTick+0x5c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000008 	.word	0x20000008
 8000770:	200000d8 	.word	0x200000d8

08000774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	200000d8 	.word	0x200000d8

08000788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000790:	f7ff fff0 	bl	8000774 <HAL_GetTick>
 8000794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a0:	d005      	beq.n	80007ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_Delay+0x44>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4413      	add	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ae:	bf00      	nop
 80007b0:	f7ff ffe0 	bl	8000774 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8f7      	bhi.n	80007b0 <HAL_Delay+0x28>
  {
  }
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000008 	.word	0x20000008

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <__NVIC_EnableIRQ+0x34>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	; (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	; 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000934:	d301      	bcc.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e00f      	b.n	800095a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <SysTick_Config+0x40>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	210f      	movs	r1, #15
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f7ff ff90 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <SysTick_Config+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <SysTick_Config+0x40>)
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff2d 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff42 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff90 	bl	80008c0 <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5f 	bl	800086c <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff35 	bl	8000834 <__NVIC_EnableIRQ>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffa2 	bl	8000924 <SysTick_Config>
 80009e0:	4603      	mov	r3, r0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d005      	beq.n	8000a0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2204      	movs	r2, #4
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e0d6      	b.n	8000bbc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 020e 	bic.w	r2, r2, #14
 8000a1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0201 	bic.w	r2, r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b64      	ldr	r3, [pc, #400]	; (8000bc8 <HAL_DMA_Abort_IT+0x1dc>)
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d958      	bls.n	8000aec <HAL_DMA_Abort_IT+0x100>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a63      	ldr	r2, [pc, #396]	; (8000bcc <HAL_DMA_Abort_IT+0x1e0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d04f      	beq.n	8000ae4 <HAL_DMA_Abort_IT+0xf8>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a61      	ldr	r2, [pc, #388]	; (8000bd0 <HAL_DMA_Abort_IT+0x1e4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d048      	beq.n	8000ae0 <HAL_DMA_Abort_IT+0xf4>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a60      	ldr	r2, [pc, #384]	; (8000bd4 <HAL_DMA_Abort_IT+0x1e8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d040      	beq.n	8000ada <HAL_DMA_Abort_IT+0xee>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a5e      	ldr	r2, [pc, #376]	; (8000bd8 <HAL_DMA_Abort_IT+0x1ec>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d038      	beq.n	8000ad4 <HAL_DMA_Abort_IT+0xe8>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a5d      	ldr	r2, [pc, #372]	; (8000bdc <HAL_DMA_Abort_IT+0x1f0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d030      	beq.n	8000ace <HAL_DMA_Abort_IT+0xe2>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a5b      	ldr	r2, [pc, #364]	; (8000be0 <HAL_DMA_Abort_IT+0x1f4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d028      	beq.n	8000ac8 <HAL_DMA_Abort_IT+0xdc>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <HAL_DMA_Abort_IT+0x1dc>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d020      	beq.n	8000ac2 <HAL_DMA_Abort_IT+0xd6>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a57      	ldr	r2, [pc, #348]	; (8000be4 <HAL_DMA_Abort_IT+0x1f8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d019      	beq.n	8000abe <HAL_DMA_Abort_IT+0xd2>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a56      	ldr	r2, [pc, #344]	; (8000be8 <HAL_DMA_Abort_IT+0x1fc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d012      	beq.n	8000aba <HAL_DMA_Abort_IT+0xce>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a54      	ldr	r2, [pc, #336]	; (8000bec <HAL_DMA_Abort_IT+0x200>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d00a      	beq.n	8000ab4 <HAL_DMA_Abort_IT+0xc8>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a53      	ldr	r2, [pc, #332]	; (8000bf0 <HAL_DMA_Abort_IT+0x204>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d102      	bne.n	8000aae <HAL_DMA_Abort_IT+0xc2>
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	e01b      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab2:	e018      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab8:	e015      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000aba:	2310      	movs	r3, #16
 8000abc:	e013      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e011      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac6:	e00e      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000ac8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000acc:	e00b      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad2:	e008      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad8:	e005      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ade:	e002      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	e000      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xfa>
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	4a43      	ldr	r2, [pc, #268]	; (8000bf4 <HAL_DMA_Abort_IT+0x208>)
 8000ae8:	6053      	str	r3, [r2, #4]
 8000aea:	e057      	b.n	8000b9c <HAL_DMA_Abort_IT+0x1b0>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a36      	ldr	r2, [pc, #216]	; (8000bcc <HAL_DMA_Abort_IT+0x1e0>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d04f      	beq.n	8000b96 <HAL_DMA_Abort_IT+0x1aa>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a35      	ldr	r2, [pc, #212]	; (8000bd0 <HAL_DMA_Abort_IT+0x1e4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d048      	beq.n	8000b92 <HAL_DMA_Abort_IT+0x1a6>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a33      	ldr	r2, [pc, #204]	; (8000bd4 <HAL_DMA_Abort_IT+0x1e8>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d040      	beq.n	8000b8c <HAL_DMA_Abort_IT+0x1a0>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <HAL_DMA_Abort_IT+0x1ec>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d038      	beq.n	8000b86 <HAL_DMA_Abort_IT+0x19a>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <HAL_DMA_Abort_IT+0x1f0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d030      	beq.n	8000b80 <HAL_DMA_Abort_IT+0x194>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <HAL_DMA_Abort_IT+0x1f4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d028      	beq.n	8000b7a <HAL_DMA_Abort_IT+0x18e>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <HAL_DMA_Abort_IT+0x1dc>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d020      	beq.n	8000b74 <HAL_DMA_Abort_IT+0x188>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a2b      	ldr	r2, [pc, #172]	; (8000be4 <HAL_DMA_Abort_IT+0x1f8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d019      	beq.n	8000b70 <HAL_DMA_Abort_IT+0x184>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <HAL_DMA_Abort_IT+0x1fc>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d012      	beq.n	8000b6c <HAL_DMA_Abort_IT+0x180>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a28      	ldr	r2, [pc, #160]	; (8000bec <HAL_DMA_Abort_IT+0x200>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d00a      	beq.n	8000b66 <HAL_DMA_Abort_IT+0x17a>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a26      	ldr	r2, [pc, #152]	; (8000bf0 <HAL_DMA_Abort_IT+0x204>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d102      	bne.n	8000b60 <HAL_DMA_Abort_IT+0x174>
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	e01b      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b64:	e018      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6a:	e015      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	e013      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e011      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b78:	e00e      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b7e:	e00b      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b84:	e008      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8a:	e005      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b90:	e002      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b92:	2310      	movs	r3, #16
 8000b94:	e000      	b.n	8000b98 <HAL_DMA_Abort_IT+0x1ac>
 8000b96:	2301      	movs	r3, #1
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_DMA_Abort_IT+0x20c>)
 8000b9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	4798      	blx	r3
    } 
  }
  return status;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020080 	.word	0x40020080
 8000bcc:	40020008 	.word	0x40020008
 8000bd0:	4002001c 	.word	0x4002001c
 8000bd4:	40020030 	.word	0x40020030
 8000bd8:	40020044 	.word	0x40020044
 8000bdc:	40020058 	.word	0x40020058
 8000be0:	4002006c 	.word	0x4002006c
 8000be4:	40020408 	.word	0x40020408
 8000be8:	4002041c 	.word	0x4002041c
 8000bec:	40020430 	.word	0x40020430
 8000bf0:	40020444 	.word	0x40020444
 8000bf4:	40020400 	.word	0x40020400
 8000bf8:	40020000 	.word	0x40020000

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b08b      	sub	sp, #44	; 0x2c
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e179      	b.n	8000f04 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c10:	2201      	movs	r2, #1
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 8168 	bne.w	8000efe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	4aa0      	ldr	r2, [pc, #640]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d05e      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c38:	4a9e      	ldr	r2, [pc, #632]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d875      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c3e:	4a9e      	ldr	r2, [pc, #632]	; (8000eb8 <HAL_GPIO_Init+0x2bc>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d058      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c44:	4a9c      	ldr	r2, [pc, #624]	; (8000eb8 <HAL_GPIO_Init+0x2bc>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d86f      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c4a:	4a9c      	ldr	r2, [pc, #624]	; (8000ebc <HAL_GPIO_Init+0x2c0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d052      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c50:	4a9a      	ldr	r2, [pc, #616]	; (8000ebc <HAL_GPIO_Init+0x2c0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d869      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c56:	4a9a      	ldr	r2, [pc, #616]	; (8000ec0 <HAL_GPIO_Init+0x2c4>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d04c      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c5c:	4a98      	ldr	r2, [pc, #608]	; (8000ec0 <HAL_GPIO_Init+0x2c4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d863      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c62:	4a98      	ldr	r2, [pc, #608]	; (8000ec4 <HAL_GPIO_Init+0x2c8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d046      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
 8000c68:	4a96      	ldr	r2, [pc, #600]	; (8000ec4 <HAL_GPIO_Init+0x2c8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d85d      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c6e:	2b12      	cmp	r3, #18
 8000c70:	d82a      	bhi.n	8000cc8 <HAL_GPIO_Init+0xcc>
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d859      	bhi.n	8000d2a <HAL_GPIO_Init+0x12e>
 8000c76:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <HAL_GPIO_Init+0x80>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000cf7 	.word	0x08000cf7
 8000c80:	08000cd1 	.word	0x08000cd1
 8000c84:	08000ce3 	.word	0x08000ce3
 8000c88:	08000d25 	.word	0x08000d25
 8000c8c:	08000d2b 	.word	0x08000d2b
 8000c90:	08000d2b 	.word	0x08000d2b
 8000c94:	08000d2b 	.word	0x08000d2b
 8000c98:	08000d2b 	.word	0x08000d2b
 8000c9c:	08000d2b 	.word	0x08000d2b
 8000ca0:	08000d2b 	.word	0x08000d2b
 8000ca4:	08000d2b 	.word	0x08000d2b
 8000ca8:	08000d2b 	.word	0x08000d2b
 8000cac:	08000d2b 	.word	0x08000d2b
 8000cb0:	08000d2b 	.word	0x08000d2b
 8000cb4:	08000d2b 	.word	0x08000d2b
 8000cb8:	08000d2b 	.word	0x08000d2b
 8000cbc:	08000d2b 	.word	0x08000d2b
 8000cc0:	08000cd9 	.word	0x08000cd9
 8000cc4:	08000ced 	.word	0x08000ced
 8000cc8:	4a7f      	ldr	r2, [pc, #508]	; (8000ec8 <HAL_GPIO_Init+0x2cc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d013      	beq.n	8000cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cce:	e02c      	b.n	8000d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e029      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	623b      	str	r3, [r7, #32]
          break;
 8000ce0:	e024      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	623b      	str	r3, [r7, #32]
          break;
 8000cea:	e01f      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	623b      	str	r3, [r7, #32]
          break;
 8000cf4:	e01a      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	623b      	str	r3, [r7, #32]
          break;
 8000d02:	e013      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d105      	bne.n	8000d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	611a      	str	r2, [r3, #16]
          break;
 8000d16:	e009      	b.n	8000d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	615a      	str	r2, [r3, #20]
          break;
 8000d22:	e003      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
          break;
 8000d28:	e000      	b.n	8000d2c <HAL_GPIO_Init+0x130>
          break;
 8000d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	2bff      	cmp	r3, #255	; 0xff
 8000d30:	d801      	bhi.n	8000d36 <HAL_GPIO_Init+0x13a>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	e001      	b.n	8000d3a <HAL_GPIO_Init+0x13e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	2bff      	cmp	r3, #255	; 0xff
 8000d40:	d802      	bhi.n	8000d48 <HAL_GPIO_Init+0x14c>
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	e002      	b.n	8000d4e <HAL_GPIO_Init+0x152>
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	3b08      	subs	r3, #8
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	210f      	movs	r1, #15
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	401a      	ands	r2, r3
 8000d60:	6a39      	ldr	r1, [r7, #32]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 80c1 	beq.w	8000efe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7c:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b50      	ldr	r3, [pc, #320]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d94:	4a4e      	ldr	r2, [pc, #312]	; (8000ed0 <HAL_GPIO_Init+0x2d4>)
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	089b      	lsrs	r3, r3, #2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a46      	ldr	r2, [pc, #280]	; (8000ed4 <HAL_GPIO_Init+0x2d8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d01f      	beq.n	8000e00 <HAL_GPIO_Init+0x204>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a45      	ldr	r2, [pc, #276]	; (8000ed8 <HAL_GPIO_Init+0x2dc>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d019      	beq.n	8000dfc <HAL_GPIO_Init+0x200>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a44      	ldr	r2, [pc, #272]	; (8000edc <HAL_GPIO_Init+0x2e0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d013      	beq.n	8000df8 <HAL_GPIO_Init+0x1fc>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <HAL_GPIO_Init+0x2e4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00d      	beq.n	8000df4 <HAL_GPIO_Init+0x1f8>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a42      	ldr	r2, [pc, #264]	; (8000ee4 <HAL_GPIO_Init+0x2e8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x1f4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a41      	ldr	r2, [pc, #260]	; (8000ee8 <HAL_GPIO_Init+0x2ec>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d101      	bne.n	8000dec <HAL_GPIO_Init+0x1f0>
 8000de8:	2305      	movs	r3, #5
 8000dea:	e00a      	b.n	8000e02 <HAL_GPIO_Init+0x206>
 8000dec:	2306      	movs	r3, #6
 8000dee:	e008      	b.n	8000e02 <HAL_GPIO_Init+0x206>
 8000df0:	2304      	movs	r3, #4
 8000df2:	e006      	b.n	8000e02 <HAL_GPIO_Init+0x206>
 8000df4:	2303      	movs	r3, #3
 8000df6:	e004      	b.n	8000e02 <HAL_GPIO_Init+0x206>
 8000df8:	2302      	movs	r3, #2
 8000dfa:	e002      	b.n	8000e02 <HAL_GPIO_Init+0x206>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <HAL_GPIO_Init+0x206>
 8000e00:	2300      	movs	r3, #0
 8000e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e04:	f002 0203 	and.w	r2, r2, #3
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	4093      	lsls	r3, r2
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e12:	492f      	ldr	r1, [pc, #188]	; (8000ed0 <HAL_GPIO_Init+0x2d4>)
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d006      	beq.n	8000e3a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	492e      	ldr	r1, [pc, #184]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	600b      	str	r3, [r1, #0]
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	492a      	ldr	r1, [pc, #168]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	4924      	ldr	r1, [pc, #144]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	604b      	str	r3, [r1, #4]
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	4920      	ldr	r1, [pc, #128]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	491a      	ldr	r1, [pc, #104]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	4916      	ldr	r1, [pc, #88]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d025      	beq.n	8000ef0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	4910      	ldr	r1, [pc, #64]	; (8000eec <HAL_GPIO_Init+0x2f0>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60cb      	str	r3, [r1, #12]
 8000eb0:	e025      	b.n	8000efe <HAL_GPIO_Init+0x302>
 8000eb2:	bf00      	nop
 8000eb4:	10320000 	.word	0x10320000
 8000eb8:	10310000 	.word	0x10310000
 8000ebc:	10220000 	.word	0x10220000
 8000ec0:	10210000 	.word	0x10210000
 8000ec4:	10120000 	.word	0x10120000
 8000ec8:	10110000 	.word	0x10110000
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	40011400 	.word	0x40011400
 8000ee4:	40011800 	.word	0x40011800
 8000ee8:	40011c00 	.word	0x40011c00
 8000eec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_GPIO_Init+0x324>)
 8000ef2:	68da      	ldr	r2, [r3, #12]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	4909      	ldr	r1, [pc, #36]	; (8000f20 <HAL_GPIO_Init+0x324>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	3301      	adds	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f47f ae7e 	bne.w	8000c10 <HAL_GPIO_Init+0x14>
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	372c      	adds	r7, #44	; 0x2c
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e26c      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8087 	beq.w	8001052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f44:	4b92      	ldr	r3, [pc, #584]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d00c      	beq.n	8000f6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f50:	4b8f      	ldr	r3, [pc, #572]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d112      	bne.n	8000f82 <HAL_RCC_OscConfig+0x5e>
 8000f5c:	4b8c      	ldr	r3, [pc, #560]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f68:	d10b      	bne.n	8000f82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6a:	4b89      	ldr	r3, [pc, #548]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d06c      	beq.n	8001050 <HAL_RCC_OscConfig+0x12c>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d168      	bne.n	8001050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e246      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8a:	d106      	bne.n	8000f9a <HAL_RCC_OscConfig+0x76>
 8000f8c:	4b80      	ldr	r3, [pc, #512]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a7f      	ldr	r2, [pc, #508]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e02e      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x98>
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a7a      	ldr	r2, [pc, #488]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b78      	ldr	r3, [pc, #480]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a77      	ldr	r2, [pc, #476]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e01d      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0xbc>
 8000fc6:	4b72      	ldr	r3, [pc, #456]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a71      	ldr	r2, [pc, #452]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b6f      	ldr	r3, [pc, #444]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a6e      	ldr	r2, [pc, #440]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e00b      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000fe0:	4b6b      	ldr	r3, [pc, #428]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a6a      	ldr	r2, [pc, #424]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a67      	ldr	r2, [pc, #412]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d013      	beq.n	8001028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fbb8 	bl	8000774 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fbb4 	bl	8000774 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	; 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1fa      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	4b5d      	ldr	r3, [pc, #372]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0xe4>
 8001026:	e014      	b.n	8001052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fba4 	bl	8000774 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fba0 	bl	8000774 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	; 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e1e6      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001042:	4b53      	ldr	r3, [pc, #332]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x10c>
 800104e:	e000      	b.n	8001052 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d063      	beq.n	8001126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800105e:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00b      	beq.n	8001082 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b08      	cmp	r3, #8
 8001074:	d11c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x18c>
 8001076:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d116      	bne.n	80010b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	4b43      	ldr	r3, [pc, #268]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <HAL_RCC_OscConfig+0x176>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d001      	beq.n	800109a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e1ba      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4939      	ldr	r1, [pc, #228]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	e03a      	b.n	8001126 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d020      	beq.n	80010fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b8:	4b36      	ldr	r3, [pc, #216]	; (8001194 <HAL_RCC_OscConfig+0x270>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010be:	f7ff fb59 	bl	8000774 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c6:	f7ff fb55 	bl	8000774 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e19b      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4927      	ldr	r1, [pc, #156]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
 80010f8:	e015      	b.n	8001126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_RCC_OscConfig+0x270>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fb38 	bl	8000774 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001108:	f7ff fb34 	bl	8000774 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e17a      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d03a      	beq.n	80011a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d019      	beq.n	800116e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001140:	f7ff fb18 	bl	8000774 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff fb14 	bl	8000774 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e15a      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_RCC_OscConfig+0x26c>)
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 fad8 	bl	800171c <RCC_Delay>
 800116c:	e01c      	b.n	80011a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_RCC_OscConfig+0x274>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fafe 	bl	8000774 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117a:	e00f      	b.n	800119c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fafa 	bl	8000774 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d908      	bls.n	800119c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e140      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	42420000 	.word	0x42420000
 8001198:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	4b9e      	ldr	r3, [pc, #632]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e9      	bne.n	800117c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a6 	beq.w	8001302 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ba:	4b97      	ldr	r3, [pc, #604]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10d      	bne.n	80011e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b94      	ldr	r3, [pc, #592]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a93      	ldr	r2, [pc, #588]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b91      	ldr	r3, [pc, #580]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011de:	2301      	movs	r3, #1
 80011e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e2:	4b8e      	ldr	r3, [pc, #568]	; (800141c <HAL_RCC_OscConfig+0x4f8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d118      	bne.n	8001220 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ee:	4b8b      	ldr	r3, [pc, #556]	; (800141c <HAL_RCC_OscConfig+0x4f8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a8a      	ldr	r2, [pc, #552]	; (800141c <HAL_RCC_OscConfig+0x4f8>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fabb 	bl	8000774 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001202:	f7ff fab7 	bl	8000774 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b64      	cmp	r3, #100	; 0x64
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e0fd      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	4b81      	ldr	r3, [pc, #516]	; (800141c <HAL_RCC_OscConfig+0x4f8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x312>
 8001228:	4b7b      	ldr	r3, [pc, #492]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4a7a      	ldr	r2, [pc, #488]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6213      	str	r3, [r2, #32]
 8001234:	e02d      	b.n	8001292 <HAL_RCC_OscConfig+0x36e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x334>
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a75      	ldr	r2, [pc, #468]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6213      	str	r3, [r2, #32]
 800124a:	4b73      	ldr	r3, [pc, #460]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a72      	ldr	r2, [pc, #456]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001250:	f023 0304 	bic.w	r3, r3, #4
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	e01c      	b.n	8001292 <HAL_RCC_OscConfig+0x36e>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d10c      	bne.n	800127a <HAL_RCC_OscConfig+0x356>
 8001260:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4a6c      	ldr	r2, [pc, #432]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6213      	str	r3, [r2, #32]
 800126c:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a69      	ldr	r2, [pc, #420]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6213      	str	r3, [r2, #32]
 8001278:	e00b      	b.n	8001292 <HAL_RCC_OscConfig+0x36e>
 800127a:	4b67      	ldr	r3, [pc, #412]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a66      	ldr	r2, [pc, #408]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	6213      	str	r3, [r2, #32]
 8001286:	4b64      	ldr	r3, [pc, #400]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a63      	ldr	r2, [pc, #396]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	f023 0304 	bic.w	r3, r3, #4
 8001290:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d015      	beq.n	80012c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fa6b 	bl	8000774 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fa67 	bl	8000774 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0ab      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	4b57      	ldr	r3, [pc, #348]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0ee      	beq.n	80012a2 <HAL_RCC_OscConfig+0x37e>
 80012c4:	e014      	b.n	80012f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fa55 	bl	8000774 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012cc:	e00a      	b.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff fa51 	bl	8000774 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e095      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ee      	bne.n	80012ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d105      	bne.n	8001302 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f6:	4b48      	ldr	r3, [pc, #288]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a47      	ldr	r2, [pc, #284]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8081 	beq.w	800140e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800130c:	4b42      	ldr	r3, [pc, #264]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d061      	beq.n	80013dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d146      	bne.n	80013ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001320:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <HAL_RCC_OscConfig+0x4fc>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fa25 	bl	8000774 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132e:	f7ff fa21 	bl	8000774 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e067      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d108      	bne.n	8001368 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	492d      	ldr	r1, [pc, #180]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a19      	ldr	r1, [r3, #32]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	430b      	orrs	r3, r1
 800137a:	4927      	ldr	r1, [pc, #156]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <HAL_RCC_OscConfig+0x4fc>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff f9f5 	bl	8000774 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff f9f1 	bl	8000774 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e037      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x46a>
 80013ac:	e02f      	b.n	800140e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_RCC_OscConfig+0x4fc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff f9de 	bl	8000774 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff f9da 	bl	8000774 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e020      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x498>
 80013da:	e018      	b.n	800140e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e013      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d106      	bne.n	800140a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000
 800141c:	40007000 	.word	0x40007000
 8001420:	42420060 	.word	0x42420060

08001424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0d0      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d910      	bls.n	8001468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b67      	ldr	r3, [pc, #412]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 0207 	bic.w	r2, r3, #7
 800144e:	4965      	ldr	r1, [pc, #404]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0b8      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001480:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a58      	ldr	r2, [pc, #352]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800148a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001498:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a52      	ldr	r2, [pc, #328]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a4:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	494d      	ldr	r1, [pc, #308]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d040      	beq.n	8001544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d115      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e07f      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e073      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e06b      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001502:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f023 0203 	bic.w	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4936      	ldr	r1, [pc, #216]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff f92e 	bl	8000774 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	e00a      	b.n	8001532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151c:	f7ff f92a 	bl	8000774 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e053      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 020c 	and.w	r2, r3, #12
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	d1eb      	bne.n	800151c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d210      	bcs.n	8001574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 0207 	bic.w	r2, r3, #7
 800155a:	4922      	ldr	r1, [pc, #136]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e032      	b.n	80015da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4916      	ldr	r1, [pc, #88]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b2:	f000 f821 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	490a      	ldr	r1, [pc, #40]	; (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80015c4:	5ccb      	ldrb	r3, [r1, r3]
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_RCC_ClockConfig+0x1cc>)
 80015cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1d0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f88c 	bl	80006f0 <HAL_InitTick>

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40022000 	.word	0x40022000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	08003034 	.word	0x08003034
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	b490      	push	{r4, r7}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001600:	1d3c      	adds	r4, r7, #4
 8001602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001608:	f240 2301 	movw	r3, #513	; 0x201
 800160c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b04      	cmp	r3, #4
 8001630:	d002      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x40>
 8001632:	2b08      	cmp	r3, #8
 8001634:	d003      	beq.n	800163e <HAL_RCC_GetSysClockFreq+0x46>
 8001636:	e02d      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800163a:	623b      	str	r3, [r7, #32]
      break;
 800163c:	e02d      	b.n	800169a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	0c9b      	lsrs	r3, r3, #18
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800164a:	4413      	add	r3, r2
 800164c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001650:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	0c5b      	lsrs	r3, r3, #17
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800166a:	4413      	add	r3, r2
 800166c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001670:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001676:	fb02 f203 	mul.w	r2, r2, r3
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	e004      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	623b      	str	r3, [r7, #32]
      break;
 8001692:	e002      	b.n	800169a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001696:	623b      	str	r3, [r7, #32]
      break;
 8001698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800169a:	6a3b      	ldr	r3, [r7, #32]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc90      	pop	{r4, r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	08003024 	.word	0x08003024
 80016ac:	40021000 	.word	0x40021000
 80016b0:	007a1200 	.word	0x007a1200
 80016b4:	003d0900 	.word	0x003d0900

080016b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000000 	.word	0x20000000

080016cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016d0:	f7ff fff2 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	4903      	ldr	r1, [pc, #12]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08003044 	.word	0x08003044

080016f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016f8:	f7ff ffde 	bl	80016b8 <HAL_RCC_GetHCLKFreq>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	0adb      	lsrs	r3, r3, #11
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	4903      	ldr	r1, [pc, #12]	; (8001718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800170a:	5ccb      	ldrb	r3, [r1, r3]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	08003044 	.word	0x08003044

0800171c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <RCC_Delay+0x34>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <RCC_Delay+0x38>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0a5b      	lsrs	r3, r3, #9
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001738:	bf00      	nop
  }
  while (Delay --);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	60fa      	str	r2, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f9      	bne.n	8001738 <RCC_Delay+0x1c>
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	20000000 	.word	0x20000000
 8001754:	10624dd3 	.word	0x10624dd3

08001758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e03f      	b.n	80017ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7fe ff26 	bl	80005d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2224      	movs	r2, #36	; 0x24
 8001788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800179a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fb39 	bl	8001e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2220      	movs	r2, #32
 80017dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b08a      	sub	sp, #40	; 0x28
 80017f6:	af02      	add	r7, sp, #8
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4613      	mov	r3, r2
 8001800:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b20      	cmp	r3, #32
 8001810:	d17c      	bne.n	800190c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_UART_Transmit+0x2c>
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e075      	b.n	800190e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_UART_Transmit+0x3e>
 800182c:	2302      	movs	r3, #2
 800182e:	e06e      	b.n	800190e <HAL_UART_Transmit+0x11c>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2221      	movs	r2, #33	; 0x21
 8001842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001846:	f7fe ff95 	bl	8000774 <HAL_GetTick>
 800184a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	88fa      	ldrh	r2, [r7, #6]
 8001850:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	88fa      	ldrh	r2, [r7, #6]
 8001856:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001860:	d108      	bne.n	8001874 <HAL_UART_Transmit+0x82>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d104      	bne.n	8001874 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	e003      	b.n	800187c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001884:	e02a      	b.n	80018dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2200      	movs	r2, #0
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f95c 	bl	8001b4e <UART_WaitOnFlagUntilTimeout>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e036      	b.n	800190e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10b      	bne.n	80018be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	3302      	adds	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	e007      	b.n	80018ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	3301      	adds	r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1cf      	bne.n	8001886 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2200      	movs	r2, #0
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f000 f92c 	bl	8001b4e <UART_WaitOnFlagUntilTimeout>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e006      	b.n	800190e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800190c:	2302      	movs	r3, #2
  }
}
 800190e:	4618      	mov	r0, r3
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10d      	bne.n	800196a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0320 	and.w	r3, r3, #32
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_UART_IRQHandler+0x52>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f9d5 	bl	8001d12 <UART_Receive_IT>
      return;
 8001968:	e0d0      	b.n	8001b0c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80b0 	beq.w	8001ad2 <HAL_UART_IRQHandler+0x1ba>
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <HAL_UART_IRQHandler+0x70>
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80a5 	beq.w	8001ad2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00a      	beq.n	80019a8 <HAL_UART_IRQHandler+0x90>
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <HAL_UART_IRQHandler+0xb0>
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	f043 0202 	orr.w	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00a      	beq.n	80019e8 <HAL_UART_IRQHandler+0xd0>
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e0:	f043 0204 	orr.w	r2, r3, #4
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00f      	beq.n	8001a12 <HAL_UART_IRQHandler+0xfa>
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d104      	bne.n	8001a06 <HAL_UART_IRQHandler+0xee>
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	f043 0208 	orr.w	r2, r3, #8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d077      	beq.n	8001b0a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_UART_IRQHandler+0x11c>
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f96f 	bl	8001d12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <HAL_UART_IRQHandler+0x144>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d031      	beq.n	8001ac0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f8c0 	bl	8001be2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d023      	beq.n	8001ab8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8c:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <HAL_UART_IRQHandler+0x1fc>)
 8001a8e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe ffa9 	bl	80009ec <HAL_DMA_Abort_IT>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d016      	beq.n	8001ace <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aae:	e00e      	b.n	8001ace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f843 	bl	8001b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ab6:	e00a      	b.n	8001ace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f83f 	bl	8001b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001abe:	e006      	b.n	8001ace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f83b 	bl	8001b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001acc:	e01d      	b.n	8001b0a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ace:	bf00      	nop
    return;
 8001ad0:	e01b      	b.n	8001b0a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_UART_IRQHandler+0x1d6>
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8ac 	bl	8001c44 <UART_Transmit_IT>
    return;
 8001aec:	e00e      	b.n	8001b0c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <HAL_UART_IRQHandler+0x1f4>
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8ed 	bl	8001ce2 <UART_EndTransmit_IT>
    return;
 8001b08:	e000      	b.n	8001b0c <HAL_UART_IRQHandler+0x1f4>
    return;
 8001b0a:	bf00      	nop
  }
}
 8001b0c:	3720      	adds	r7, #32
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	08001c1d 	.word	0x08001c1d

08001b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b5e:	e02c      	b.n	8001bba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d028      	beq.n	8001bba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d007      	beq.n	8001b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8001b6e:	f7fe fe01 	bl	8000774 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d21d      	bcs.n	8001bba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e00f      	b.n	8001bda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	bf0c      	ite	eq
 8001bca:	2301      	moveq	r3, #1
 8001bcc:	2300      	movne	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d0c3      	beq.n	8001b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001bf8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff ff80 	bl	8001b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b21      	cmp	r3, #33	; 0x21
 8001c56:	d13e      	bne.n	8001cd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c60:	d114      	bne.n	8001c8c <UART_Transmit_IT+0x48>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d110      	bne.n	8001c8c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	1c9a      	adds	r2, r3, #2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	621a      	str	r2, [r3, #32]
 8001c8a:	e008      	b.n	8001c9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	1c59      	adds	r1, r3, #1
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6211      	str	r1, [r2, #32]
 8001c96:	781a      	ldrb	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4619      	mov	r1, r3
 8001cac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
  }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ff08 	bl	8001b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b22      	cmp	r3, #34	; 0x22
 8001d24:	d170      	bne.n	8001e08 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2e:	d117      	bne.n	8001d60 <UART_Receive_IT+0x4e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d113      	bne.n	8001d60 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	1c9a      	adds	r2, r3, #2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d5e:	e026      	b.n	8001dae <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d72:	d007      	beq.n	8001d84 <UART_Receive_IT+0x72>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10a      	bne.n	8001d92 <UART_Receive_IT+0x80>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d106      	bne.n	8001d92 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e008      	b.n	8001da4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d120      	bne.n	8001e04 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0220 	bic.w	r2, r2, #32
 8001dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0201 	bic.w	r2, r2, #1
 8001df0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fe95 	bl	8001b2a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e002      	b.n	8001e0a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e000      	b.n	8001e0a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001e08:	2302      	movs	r3, #2
  }
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e4e:	f023 030c 	bic.w	r3, r3, #12
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a2c      	ldr	r2, [pc, #176]	; (8001f28 <UART_SetConfig+0x114>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d103      	bne.n	8001e84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e7c:	f7ff fc3a 	bl	80016f4 <HAL_RCC_GetPCLK2Freq>
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	e002      	b.n	8001e8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e84:	f7ff fc22 	bl	80016cc <HAL_RCC_GetPCLK1Freq>
 8001e88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	009a      	lsls	r2, r3, #2
 8001e94:	441a      	add	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <UART_SetConfig+0x118>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	0119      	lsls	r1, r3, #4
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009a      	lsls	r2, r3, #2
 8001eb4:	441a      	add	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <UART_SetConfig+0x118>)
 8001ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2064      	movs	r0, #100	; 0x64
 8001eca:	fb00 f303 	mul.w	r3, r0, r3
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	3332      	adds	r3, #50	; 0x32
 8001ed4:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <UART_SetConfig+0x118>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee0:	4419      	add	r1, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	009a      	lsls	r2, r3, #2
 8001eec:	441a      	add	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <UART_SetConfig+0x118>)
 8001efa:	fba3 0302 	umull	r0, r3, r3, r2
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2064      	movs	r0, #100	; 0x64
 8001f02:	fb00 f303 	mul.w	r3, r0, r3
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	3332      	adds	r3, #50	; 0x32
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <UART_SetConfig+0x118>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	440a      	add	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40013800 	.word	0x40013800
 8001f2c:	51eb851f 	.word	0x51eb851f

08001f30 <__errno>:
 8001f30:	4b01      	ldr	r3, [pc, #4]	; (8001f38 <__errno+0x8>)
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	2000000c 	.word	0x2000000c

08001f3c <__libc_init_array>:
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	2600      	movs	r6, #0
 8001f40:	4d0c      	ldr	r5, [pc, #48]	; (8001f74 <__libc_init_array+0x38>)
 8001f42:	4c0d      	ldr	r4, [pc, #52]	; (8001f78 <__libc_init_array+0x3c>)
 8001f44:	1b64      	subs	r4, r4, r5
 8001f46:	10a4      	asrs	r4, r4, #2
 8001f48:	42a6      	cmp	r6, r4
 8001f4a:	d109      	bne.n	8001f60 <__libc_init_array+0x24>
 8001f4c:	f001 f850 	bl	8002ff0 <_init>
 8001f50:	2600      	movs	r6, #0
 8001f52:	4d0a      	ldr	r5, [pc, #40]	; (8001f7c <__libc_init_array+0x40>)
 8001f54:	4c0a      	ldr	r4, [pc, #40]	; (8001f80 <__libc_init_array+0x44>)
 8001f56:	1b64      	subs	r4, r4, r5
 8001f58:	10a4      	asrs	r4, r4, #2
 8001f5a:	42a6      	cmp	r6, r4
 8001f5c:	d105      	bne.n	8001f6a <__libc_init_array+0x2e>
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f64:	4798      	blx	r3
 8001f66:	3601      	adds	r6, #1
 8001f68:	e7ee      	b.n	8001f48 <__libc_init_array+0xc>
 8001f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f6e:	4798      	blx	r3
 8001f70:	3601      	adds	r6, #1
 8001f72:	e7f2      	b.n	8001f5a <__libc_init_array+0x1e>
 8001f74:	080030e4 	.word	0x080030e4
 8001f78:	080030e4 	.word	0x080030e4
 8001f7c:	080030e4 	.word	0x080030e4
 8001f80:	080030e8 	.word	0x080030e8

08001f84 <memset>:
 8001f84:	4603      	mov	r3, r0
 8001f86:	4402      	add	r2, r0
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d100      	bne.n	8001f8e <memset+0xa>
 8001f8c:	4770      	bx	lr
 8001f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f92:	e7f9      	b.n	8001f88 <memset+0x4>

08001f94 <iprintf>:
 8001f94:	b40f      	push	{r0, r1, r2, r3}
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <iprintf+0x2c>)
 8001f98:	b513      	push	{r0, r1, r4, lr}
 8001f9a:	681c      	ldr	r4, [r3, #0]
 8001f9c:	b124      	cbz	r4, 8001fa8 <iprintf+0x14>
 8001f9e:	69a3      	ldr	r3, [r4, #24]
 8001fa0:	b913      	cbnz	r3, 8001fa8 <iprintf+0x14>
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f000 f9ee 	bl	8002384 <__sinit>
 8001fa8:	ab05      	add	r3, sp, #20
 8001faa:	4620      	mov	r0, r4
 8001fac:	9a04      	ldr	r2, [sp, #16]
 8001fae:	68a1      	ldr	r1, [r4, #8]
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	f000 fbc1 	bl	8002738 <_vfiprintf_r>
 8001fb6:	b002      	add	sp, #8
 8001fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fbc:	b004      	add	sp, #16
 8001fbe:	4770      	bx	lr
 8001fc0:	2000000c 	.word	0x2000000c

08001fc4 <setvbuf>:
 8001fc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001fc8:	461d      	mov	r5, r3
 8001fca:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <setvbuf+0x17c>)
 8001fcc:	4604      	mov	r4, r0
 8001fce:	681f      	ldr	r7, [r3, #0]
 8001fd0:	460e      	mov	r6, r1
 8001fd2:	4690      	mov	r8, r2
 8001fd4:	b127      	cbz	r7, 8001fe0 <setvbuf+0x1c>
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	b913      	cbnz	r3, 8001fe0 <setvbuf+0x1c>
 8001fda:	4638      	mov	r0, r7
 8001fdc:	f000 f9d2 	bl	8002384 <__sinit>
 8001fe0:	4b58      	ldr	r3, [pc, #352]	; (8002144 <setvbuf+0x180>)
 8001fe2:	429c      	cmp	r4, r3
 8001fe4:	d167      	bne.n	80020b6 <setvbuf+0xf2>
 8001fe6:	687c      	ldr	r4, [r7, #4]
 8001fe8:	f1b8 0f02 	cmp.w	r8, #2
 8001fec:	d006      	beq.n	8001ffc <setvbuf+0x38>
 8001fee:	f1b8 0f01 	cmp.w	r8, #1
 8001ff2:	f200 809f 	bhi.w	8002134 <setvbuf+0x170>
 8001ff6:	2d00      	cmp	r5, #0
 8001ff8:	f2c0 809c 	blt.w	8002134 <setvbuf+0x170>
 8001ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ffe:	07db      	lsls	r3, r3, #31
 8002000:	d405      	bmi.n	800200e <setvbuf+0x4a>
 8002002:	89a3      	ldrh	r3, [r4, #12]
 8002004:	0598      	lsls	r0, r3, #22
 8002006:	d402      	bmi.n	800200e <setvbuf+0x4a>
 8002008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800200a:	f000 fa59 	bl	80024c0 <__retarget_lock_acquire_recursive>
 800200e:	4621      	mov	r1, r4
 8002010:	4638      	mov	r0, r7
 8002012:	f000 f923 	bl	800225c <_fflush_r>
 8002016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002018:	b141      	cbz	r1, 800202c <setvbuf+0x68>
 800201a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800201e:	4299      	cmp	r1, r3
 8002020:	d002      	beq.n	8002028 <setvbuf+0x64>
 8002022:	4638      	mov	r0, r7
 8002024:	f000 faba 	bl	800259c <_free_r>
 8002028:	2300      	movs	r3, #0
 800202a:	6363      	str	r3, [r4, #52]	; 0x34
 800202c:	2300      	movs	r3, #0
 800202e:	61a3      	str	r3, [r4, #24]
 8002030:	6063      	str	r3, [r4, #4]
 8002032:	89a3      	ldrh	r3, [r4, #12]
 8002034:	0619      	lsls	r1, r3, #24
 8002036:	d503      	bpl.n	8002040 <setvbuf+0x7c>
 8002038:	4638      	mov	r0, r7
 800203a:	6921      	ldr	r1, [r4, #16]
 800203c:	f000 faae 	bl	800259c <_free_r>
 8002040:	89a3      	ldrh	r3, [r4, #12]
 8002042:	f1b8 0f02 	cmp.w	r8, #2
 8002046:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	81a3      	strh	r3, [r4, #12]
 8002050:	d06c      	beq.n	800212c <setvbuf+0x168>
 8002052:	ab01      	add	r3, sp, #4
 8002054:	466a      	mov	r2, sp
 8002056:	4621      	mov	r1, r4
 8002058:	4638      	mov	r0, r7
 800205a:	f000 fa33 	bl	80024c4 <__swhatbuf_r>
 800205e:	89a3      	ldrh	r3, [r4, #12]
 8002060:	4318      	orrs	r0, r3
 8002062:	81a0      	strh	r0, [r4, #12]
 8002064:	2d00      	cmp	r5, #0
 8002066:	d130      	bne.n	80020ca <setvbuf+0x106>
 8002068:	9d00      	ldr	r5, [sp, #0]
 800206a:	4628      	mov	r0, r5
 800206c:	f000 fa8e 	bl	800258c <malloc>
 8002070:	4606      	mov	r6, r0
 8002072:	2800      	cmp	r0, #0
 8002074:	d155      	bne.n	8002122 <setvbuf+0x15e>
 8002076:	f8dd 9000 	ldr.w	r9, [sp]
 800207a:	45a9      	cmp	r9, r5
 800207c:	d14a      	bne.n	8002114 <setvbuf+0x150>
 800207e:	f04f 35ff 	mov.w	r5, #4294967295
 8002082:	2200      	movs	r2, #0
 8002084:	60a2      	str	r2, [r4, #8]
 8002086:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800208a:	6022      	str	r2, [r4, #0]
 800208c:	6122      	str	r2, [r4, #16]
 800208e:	2201      	movs	r2, #1
 8002090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002094:	6162      	str	r2, [r4, #20]
 8002096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	07d2      	lsls	r2, r2, #31
 800209e:	81a3      	strh	r3, [r4, #12]
 80020a0:	d405      	bmi.n	80020ae <setvbuf+0xea>
 80020a2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80020a6:	d102      	bne.n	80020ae <setvbuf+0xea>
 80020a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020aa:	f000 fa0a 	bl	80024c2 <__retarget_lock_release_recursive>
 80020ae:	4628      	mov	r0, r5
 80020b0:	b003      	add	sp, #12
 80020b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <setvbuf+0x184>)
 80020b8:	429c      	cmp	r4, r3
 80020ba:	d101      	bne.n	80020c0 <setvbuf+0xfc>
 80020bc:	68bc      	ldr	r4, [r7, #8]
 80020be:	e793      	b.n	8001fe8 <setvbuf+0x24>
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <setvbuf+0x188>)
 80020c2:	429c      	cmp	r4, r3
 80020c4:	bf08      	it	eq
 80020c6:	68fc      	ldreq	r4, [r7, #12]
 80020c8:	e78e      	b.n	8001fe8 <setvbuf+0x24>
 80020ca:	2e00      	cmp	r6, #0
 80020cc:	d0cd      	beq.n	800206a <setvbuf+0xa6>
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	b913      	cbnz	r3, 80020d8 <setvbuf+0x114>
 80020d2:	4638      	mov	r0, r7
 80020d4:	f000 f956 	bl	8002384 <__sinit>
 80020d8:	f1b8 0f01 	cmp.w	r8, #1
 80020dc:	bf08      	it	eq
 80020de:	89a3      	ldrheq	r3, [r4, #12]
 80020e0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80020e4:	bf04      	itt	eq
 80020e6:	f043 0301 	orreq.w	r3, r3, #1
 80020ea:	81a3      	strheq	r3, [r4, #12]
 80020ec:	89a2      	ldrh	r2, [r4, #12]
 80020ee:	6026      	str	r6, [r4, #0]
 80020f0:	f012 0308 	ands.w	r3, r2, #8
 80020f4:	d01c      	beq.n	8002130 <setvbuf+0x16c>
 80020f6:	07d3      	lsls	r3, r2, #31
 80020f8:	bf41      	itttt	mi
 80020fa:	2300      	movmi	r3, #0
 80020fc:	426d      	negmi	r5, r5
 80020fe:	60a3      	strmi	r3, [r4, #8]
 8002100:	61a5      	strmi	r5, [r4, #24]
 8002102:	bf58      	it	pl
 8002104:	60a5      	strpl	r5, [r4, #8]
 8002106:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002108:	f015 0501 	ands.w	r5, r5, #1
 800210c:	d115      	bne.n	800213a <setvbuf+0x176>
 800210e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002112:	e7c8      	b.n	80020a6 <setvbuf+0xe2>
 8002114:	4648      	mov	r0, r9
 8002116:	f000 fa39 	bl	800258c <malloc>
 800211a:	4606      	mov	r6, r0
 800211c:	2800      	cmp	r0, #0
 800211e:	d0ae      	beq.n	800207e <setvbuf+0xba>
 8002120:	464d      	mov	r5, r9
 8002122:	89a3      	ldrh	r3, [r4, #12]
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	81a3      	strh	r3, [r4, #12]
 800212a:	e7d0      	b.n	80020ce <setvbuf+0x10a>
 800212c:	2500      	movs	r5, #0
 800212e:	e7a8      	b.n	8002082 <setvbuf+0xbe>
 8002130:	60a3      	str	r3, [r4, #8]
 8002132:	e7e8      	b.n	8002106 <setvbuf+0x142>
 8002134:	f04f 35ff 	mov.w	r5, #4294967295
 8002138:	e7b9      	b.n	80020ae <setvbuf+0xea>
 800213a:	2500      	movs	r5, #0
 800213c:	e7b7      	b.n	80020ae <setvbuf+0xea>
 800213e:	bf00      	nop
 8002140:	2000000c 	.word	0x2000000c
 8002144:	08003070 	.word	0x08003070
 8002148:	08003090 	.word	0x08003090
 800214c:	08003050 	.word	0x08003050

08002150 <__sflush_r>:
 8002150:	898a      	ldrh	r2, [r1, #12]
 8002152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002156:	4605      	mov	r5, r0
 8002158:	0710      	lsls	r0, r2, #28
 800215a:	460c      	mov	r4, r1
 800215c:	d458      	bmi.n	8002210 <__sflush_r+0xc0>
 800215e:	684b      	ldr	r3, [r1, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	dc05      	bgt.n	8002170 <__sflush_r+0x20>
 8002164:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	dc02      	bgt.n	8002170 <__sflush_r+0x20>
 800216a:	2000      	movs	r0, #0
 800216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002172:	2e00      	cmp	r6, #0
 8002174:	d0f9      	beq.n	800216a <__sflush_r+0x1a>
 8002176:	2300      	movs	r3, #0
 8002178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800217c:	682f      	ldr	r7, [r5, #0]
 800217e:	602b      	str	r3, [r5, #0]
 8002180:	d032      	beq.n	80021e8 <__sflush_r+0x98>
 8002182:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002184:	89a3      	ldrh	r3, [r4, #12]
 8002186:	075a      	lsls	r2, r3, #29
 8002188:	d505      	bpl.n	8002196 <__sflush_r+0x46>
 800218a:	6863      	ldr	r3, [r4, #4]
 800218c:	1ac0      	subs	r0, r0, r3
 800218e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002190:	b10b      	cbz	r3, 8002196 <__sflush_r+0x46>
 8002192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002194:	1ac0      	subs	r0, r0, r3
 8002196:	2300      	movs	r3, #0
 8002198:	4602      	mov	r2, r0
 800219a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800219c:	4628      	mov	r0, r5
 800219e:	6a21      	ldr	r1, [r4, #32]
 80021a0:	47b0      	blx	r6
 80021a2:	1c43      	adds	r3, r0, #1
 80021a4:	89a3      	ldrh	r3, [r4, #12]
 80021a6:	d106      	bne.n	80021b6 <__sflush_r+0x66>
 80021a8:	6829      	ldr	r1, [r5, #0]
 80021aa:	291d      	cmp	r1, #29
 80021ac:	d82c      	bhi.n	8002208 <__sflush_r+0xb8>
 80021ae:	4a2a      	ldr	r2, [pc, #168]	; (8002258 <__sflush_r+0x108>)
 80021b0:	40ca      	lsrs	r2, r1
 80021b2:	07d6      	lsls	r6, r2, #31
 80021b4:	d528      	bpl.n	8002208 <__sflush_r+0xb8>
 80021b6:	2200      	movs	r2, #0
 80021b8:	6062      	str	r2, [r4, #4]
 80021ba:	6922      	ldr	r2, [r4, #16]
 80021bc:	04d9      	lsls	r1, r3, #19
 80021be:	6022      	str	r2, [r4, #0]
 80021c0:	d504      	bpl.n	80021cc <__sflush_r+0x7c>
 80021c2:	1c42      	adds	r2, r0, #1
 80021c4:	d101      	bne.n	80021ca <__sflush_r+0x7a>
 80021c6:	682b      	ldr	r3, [r5, #0]
 80021c8:	b903      	cbnz	r3, 80021cc <__sflush_r+0x7c>
 80021ca:	6560      	str	r0, [r4, #84]	; 0x54
 80021cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021ce:	602f      	str	r7, [r5, #0]
 80021d0:	2900      	cmp	r1, #0
 80021d2:	d0ca      	beq.n	800216a <__sflush_r+0x1a>
 80021d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021d8:	4299      	cmp	r1, r3
 80021da:	d002      	beq.n	80021e2 <__sflush_r+0x92>
 80021dc:	4628      	mov	r0, r5
 80021de:	f000 f9dd 	bl	800259c <_free_r>
 80021e2:	2000      	movs	r0, #0
 80021e4:	6360      	str	r0, [r4, #52]	; 0x34
 80021e6:	e7c1      	b.n	800216c <__sflush_r+0x1c>
 80021e8:	6a21      	ldr	r1, [r4, #32]
 80021ea:	2301      	movs	r3, #1
 80021ec:	4628      	mov	r0, r5
 80021ee:	47b0      	blx	r6
 80021f0:	1c41      	adds	r1, r0, #1
 80021f2:	d1c7      	bne.n	8002184 <__sflush_r+0x34>
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0c4      	beq.n	8002184 <__sflush_r+0x34>
 80021fa:	2b1d      	cmp	r3, #29
 80021fc:	d001      	beq.n	8002202 <__sflush_r+0xb2>
 80021fe:	2b16      	cmp	r3, #22
 8002200:	d101      	bne.n	8002206 <__sflush_r+0xb6>
 8002202:	602f      	str	r7, [r5, #0]
 8002204:	e7b1      	b.n	800216a <__sflush_r+0x1a>
 8002206:	89a3      	ldrh	r3, [r4, #12]
 8002208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800220c:	81a3      	strh	r3, [r4, #12]
 800220e:	e7ad      	b.n	800216c <__sflush_r+0x1c>
 8002210:	690f      	ldr	r7, [r1, #16]
 8002212:	2f00      	cmp	r7, #0
 8002214:	d0a9      	beq.n	800216a <__sflush_r+0x1a>
 8002216:	0793      	lsls	r3, r2, #30
 8002218:	bf18      	it	ne
 800221a:	2300      	movne	r3, #0
 800221c:	680e      	ldr	r6, [r1, #0]
 800221e:	bf08      	it	eq
 8002220:	694b      	ldreq	r3, [r1, #20]
 8002222:	eba6 0807 	sub.w	r8, r6, r7
 8002226:	600f      	str	r7, [r1, #0]
 8002228:	608b      	str	r3, [r1, #8]
 800222a:	f1b8 0f00 	cmp.w	r8, #0
 800222e:	dd9c      	ble.n	800216a <__sflush_r+0x1a>
 8002230:	4643      	mov	r3, r8
 8002232:	463a      	mov	r2, r7
 8002234:	4628      	mov	r0, r5
 8002236:	6a21      	ldr	r1, [r4, #32]
 8002238:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800223a:	47b0      	blx	r6
 800223c:	2800      	cmp	r0, #0
 800223e:	dc06      	bgt.n	800224e <__sflush_r+0xfe>
 8002240:	89a3      	ldrh	r3, [r4, #12]
 8002242:	f04f 30ff 	mov.w	r0, #4294967295
 8002246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800224a:	81a3      	strh	r3, [r4, #12]
 800224c:	e78e      	b.n	800216c <__sflush_r+0x1c>
 800224e:	4407      	add	r7, r0
 8002250:	eba8 0800 	sub.w	r8, r8, r0
 8002254:	e7e9      	b.n	800222a <__sflush_r+0xda>
 8002256:	bf00      	nop
 8002258:	20400001 	.word	0x20400001

0800225c <_fflush_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	690b      	ldr	r3, [r1, #16]
 8002260:	4605      	mov	r5, r0
 8002262:	460c      	mov	r4, r1
 8002264:	b913      	cbnz	r3, 800226c <_fflush_r+0x10>
 8002266:	2500      	movs	r5, #0
 8002268:	4628      	mov	r0, r5
 800226a:	bd38      	pop	{r3, r4, r5, pc}
 800226c:	b118      	cbz	r0, 8002276 <_fflush_r+0x1a>
 800226e:	6983      	ldr	r3, [r0, #24]
 8002270:	b90b      	cbnz	r3, 8002276 <_fflush_r+0x1a>
 8002272:	f000 f887 	bl	8002384 <__sinit>
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <_fflush_r+0x6c>)
 8002278:	429c      	cmp	r4, r3
 800227a:	d11b      	bne.n	80022b4 <_fflush_r+0x58>
 800227c:	686c      	ldr	r4, [r5, #4]
 800227e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0ef      	beq.n	8002266 <_fflush_r+0xa>
 8002286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002288:	07d0      	lsls	r0, r2, #31
 800228a:	d404      	bmi.n	8002296 <_fflush_r+0x3a>
 800228c:	0599      	lsls	r1, r3, #22
 800228e:	d402      	bmi.n	8002296 <_fflush_r+0x3a>
 8002290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002292:	f000 f915 	bl	80024c0 <__retarget_lock_acquire_recursive>
 8002296:	4628      	mov	r0, r5
 8002298:	4621      	mov	r1, r4
 800229a:	f7ff ff59 	bl	8002150 <__sflush_r>
 800229e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022a0:	4605      	mov	r5, r0
 80022a2:	07da      	lsls	r2, r3, #31
 80022a4:	d4e0      	bmi.n	8002268 <_fflush_r+0xc>
 80022a6:	89a3      	ldrh	r3, [r4, #12]
 80022a8:	059b      	lsls	r3, r3, #22
 80022aa:	d4dd      	bmi.n	8002268 <_fflush_r+0xc>
 80022ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022ae:	f000 f908 	bl	80024c2 <__retarget_lock_release_recursive>
 80022b2:	e7d9      	b.n	8002268 <_fflush_r+0xc>
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <_fflush_r+0x70>)
 80022b6:	429c      	cmp	r4, r3
 80022b8:	d101      	bne.n	80022be <_fflush_r+0x62>
 80022ba:	68ac      	ldr	r4, [r5, #8]
 80022bc:	e7df      	b.n	800227e <_fflush_r+0x22>
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <_fflush_r+0x74>)
 80022c0:	429c      	cmp	r4, r3
 80022c2:	bf08      	it	eq
 80022c4:	68ec      	ldreq	r4, [r5, #12]
 80022c6:	e7da      	b.n	800227e <_fflush_r+0x22>
 80022c8:	08003070 	.word	0x08003070
 80022cc:	08003090 	.word	0x08003090
 80022d0:	08003050 	.word	0x08003050

080022d4 <std>:
 80022d4:	2300      	movs	r3, #0
 80022d6:	b510      	push	{r4, lr}
 80022d8:	4604      	mov	r4, r0
 80022da:	e9c0 3300 	strd	r3, r3, [r0]
 80022de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022e2:	6083      	str	r3, [r0, #8]
 80022e4:	8181      	strh	r1, [r0, #12]
 80022e6:	6643      	str	r3, [r0, #100]	; 0x64
 80022e8:	81c2      	strh	r2, [r0, #14]
 80022ea:	6183      	str	r3, [r0, #24]
 80022ec:	4619      	mov	r1, r3
 80022ee:	2208      	movs	r2, #8
 80022f0:	305c      	adds	r0, #92	; 0x5c
 80022f2:	f7ff fe47 	bl	8001f84 <memset>
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <std+0x38>)
 80022f8:	6224      	str	r4, [r4, #32]
 80022fa:	6263      	str	r3, [r4, #36]	; 0x24
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <std+0x3c>)
 80022fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <std+0x40>)
 8002302:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <std+0x44>)
 8002306:	6323      	str	r3, [r4, #48]	; 0x30
 8002308:	bd10      	pop	{r4, pc}
 800230a:	bf00      	nop
 800230c:	08002ce5 	.word	0x08002ce5
 8002310:	08002d07 	.word	0x08002d07
 8002314:	08002d3f 	.word	0x08002d3f
 8002318:	08002d63 	.word	0x08002d63

0800231c <_cleanup_r>:
 800231c:	4901      	ldr	r1, [pc, #4]	; (8002324 <_cleanup_r+0x8>)
 800231e:	f000 b8af 	b.w	8002480 <_fwalk_reent>
 8002322:	bf00      	nop
 8002324:	0800225d 	.word	0x0800225d

08002328 <__sfmoreglue>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	2568      	movs	r5, #104	; 0x68
 800232c:	1e4a      	subs	r2, r1, #1
 800232e:	4355      	muls	r5, r2
 8002330:	460e      	mov	r6, r1
 8002332:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002336:	f000 f97d 	bl	8002634 <_malloc_r>
 800233a:	4604      	mov	r4, r0
 800233c:	b140      	cbz	r0, 8002350 <__sfmoreglue+0x28>
 800233e:	2100      	movs	r1, #0
 8002340:	e9c0 1600 	strd	r1, r6, [r0]
 8002344:	300c      	adds	r0, #12
 8002346:	60a0      	str	r0, [r4, #8]
 8002348:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800234c:	f7ff fe1a 	bl	8001f84 <memset>
 8002350:	4620      	mov	r0, r4
 8002352:	bd70      	pop	{r4, r5, r6, pc}

08002354 <__sfp_lock_acquire>:
 8002354:	4801      	ldr	r0, [pc, #4]	; (800235c <__sfp_lock_acquire+0x8>)
 8002356:	f000 b8b3 	b.w	80024c0 <__retarget_lock_acquire_recursive>
 800235a:	bf00      	nop
 800235c:	200000e4 	.word	0x200000e4

08002360 <__sfp_lock_release>:
 8002360:	4801      	ldr	r0, [pc, #4]	; (8002368 <__sfp_lock_release+0x8>)
 8002362:	f000 b8ae 	b.w	80024c2 <__retarget_lock_release_recursive>
 8002366:	bf00      	nop
 8002368:	200000e4 	.word	0x200000e4

0800236c <__sinit_lock_acquire>:
 800236c:	4801      	ldr	r0, [pc, #4]	; (8002374 <__sinit_lock_acquire+0x8>)
 800236e:	f000 b8a7 	b.w	80024c0 <__retarget_lock_acquire_recursive>
 8002372:	bf00      	nop
 8002374:	200000df 	.word	0x200000df

08002378 <__sinit_lock_release>:
 8002378:	4801      	ldr	r0, [pc, #4]	; (8002380 <__sinit_lock_release+0x8>)
 800237a:	f000 b8a2 	b.w	80024c2 <__retarget_lock_release_recursive>
 800237e:	bf00      	nop
 8002380:	200000df 	.word	0x200000df

08002384 <__sinit>:
 8002384:	b510      	push	{r4, lr}
 8002386:	4604      	mov	r4, r0
 8002388:	f7ff fff0 	bl	800236c <__sinit_lock_acquire>
 800238c:	69a3      	ldr	r3, [r4, #24]
 800238e:	b11b      	cbz	r3, 8002398 <__sinit+0x14>
 8002390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002394:	f7ff bff0 	b.w	8002378 <__sinit_lock_release>
 8002398:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800239c:	6523      	str	r3, [r4, #80]	; 0x50
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <__sinit+0x68>)
 80023a0:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <__sinit+0x6c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80023a6:	42a3      	cmp	r3, r4
 80023a8:	bf08      	it	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	4620      	mov	r0, r4
 80023ae:	bf08      	it	eq
 80023b0:	61a3      	streq	r3, [r4, #24]
 80023b2:	f000 f81f 	bl	80023f4 <__sfp>
 80023b6:	6060      	str	r0, [r4, #4]
 80023b8:	4620      	mov	r0, r4
 80023ba:	f000 f81b 	bl	80023f4 <__sfp>
 80023be:	60a0      	str	r0, [r4, #8]
 80023c0:	4620      	mov	r0, r4
 80023c2:	f000 f817 	bl	80023f4 <__sfp>
 80023c6:	2200      	movs	r2, #0
 80023c8:	2104      	movs	r1, #4
 80023ca:	60e0      	str	r0, [r4, #12]
 80023cc:	6860      	ldr	r0, [r4, #4]
 80023ce:	f7ff ff81 	bl	80022d4 <std>
 80023d2:	2201      	movs	r2, #1
 80023d4:	2109      	movs	r1, #9
 80023d6:	68a0      	ldr	r0, [r4, #8]
 80023d8:	f7ff ff7c 	bl	80022d4 <std>
 80023dc:	2202      	movs	r2, #2
 80023de:	2112      	movs	r1, #18
 80023e0:	68e0      	ldr	r0, [r4, #12]
 80023e2:	f7ff ff77 	bl	80022d4 <std>
 80023e6:	2301      	movs	r3, #1
 80023e8:	61a3      	str	r3, [r4, #24]
 80023ea:	e7d1      	b.n	8002390 <__sinit+0xc>
 80023ec:	0800304c 	.word	0x0800304c
 80023f0:	0800231d 	.word	0x0800231d

080023f4 <__sfp>:
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f6:	4607      	mov	r7, r0
 80023f8:	f7ff ffac 	bl	8002354 <__sfp_lock_acquire>
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <__sfp+0x84>)
 80023fe:	681e      	ldr	r6, [r3, #0]
 8002400:	69b3      	ldr	r3, [r6, #24]
 8002402:	b913      	cbnz	r3, 800240a <__sfp+0x16>
 8002404:	4630      	mov	r0, r6
 8002406:	f7ff ffbd 	bl	8002384 <__sinit>
 800240a:	3648      	adds	r6, #72	; 0x48
 800240c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002410:	3b01      	subs	r3, #1
 8002412:	d503      	bpl.n	800241c <__sfp+0x28>
 8002414:	6833      	ldr	r3, [r6, #0]
 8002416:	b30b      	cbz	r3, 800245c <__sfp+0x68>
 8002418:	6836      	ldr	r6, [r6, #0]
 800241a:	e7f7      	b.n	800240c <__sfp+0x18>
 800241c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002420:	b9d5      	cbnz	r5, 8002458 <__sfp+0x64>
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <__sfp+0x88>)
 8002424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002428:	60e3      	str	r3, [r4, #12]
 800242a:	6665      	str	r5, [r4, #100]	; 0x64
 800242c:	f000 f847 	bl	80024be <__retarget_lock_init_recursive>
 8002430:	f7ff ff96 	bl	8002360 <__sfp_lock_release>
 8002434:	2208      	movs	r2, #8
 8002436:	4629      	mov	r1, r5
 8002438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800243c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002440:	6025      	str	r5, [r4, #0]
 8002442:	61a5      	str	r5, [r4, #24]
 8002444:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002448:	f7ff fd9c 	bl	8001f84 <memset>
 800244c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002450:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002454:	4620      	mov	r0, r4
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002458:	3468      	adds	r4, #104	; 0x68
 800245a:	e7d9      	b.n	8002410 <__sfp+0x1c>
 800245c:	2104      	movs	r1, #4
 800245e:	4638      	mov	r0, r7
 8002460:	f7ff ff62 	bl	8002328 <__sfmoreglue>
 8002464:	4604      	mov	r4, r0
 8002466:	6030      	str	r0, [r6, #0]
 8002468:	2800      	cmp	r0, #0
 800246a:	d1d5      	bne.n	8002418 <__sfp+0x24>
 800246c:	f7ff ff78 	bl	8002360 <__sfp_lock_release>
 8002470:	230c      	movs	r3, #12
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	e7ee      	b.n	8002454 <__sfp+0x60>
 8002476:	bf00      	nop
 8002478:	0800304c 	.word	0x0800304c
 800247c:	ffff0001 	.word	0xffff0001

08002480 <_fwalk_reent>:
 8002480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002484:	4606      	mov	r6, r0
 8002486:	4688      	mov	r8, r1
 8002488:	2700      	movs	r7, #0
 800248a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800248e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002492:	f1b9 0901 	subs.w	r9, r9, #1
 8002496:	d505      	bpl.n	80024a4 <_fwalk_reent+0x24>
 8002498:	6824      	ldr	r4, [r4, #0]
 800249a:	2c00      	cmp	r4, #0
 800249c:	d1f7      	bne.n	800248e <_fwalk_reent+0xe>
 800249e:	4638      	mov	r0, r7
 80024a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024a4:	89ab      	ldrh	r3, [r5, #12]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d907      	bls.n	80024ba <_fwalk_reent+0x3a>
 80024aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024ae:	3301      	adds	r3, #1
 80024b0:	d003      	beq.n	80024ba <_fwalk_reent+0x3a>
 80024b2:	4629      	mov	r1, r5
 80024b4:	4630      	mov	r0, r6
 80024b6:	47c0      	blx	r8
 80024b8:	4307      	orrs	r7, r0
 80024ba:	3568      	adds	r5, #104	; 0x68
 80024bc:	e7e9      	b.n	8002492 <_fwalk_reent+0x12>

080024be <__retarget_lock_init_recursive>:
 80024be:	4770      	bx	lr

080024c0 <__retarget_lock_acquire_recursive>:
 80024c0:	4770      	bx	lr

080024c2 <__retarget_lock_release_recursive>:
 80024c2:	4770      	bx	lr

080024c4 <__swhatbuf_r>:
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	460e      	mov	r6, r1
 80024c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024cc:	4614      	mov	r4, r2
 80024ce:	2900      	cmp	r1, #0
 80024d0:	461d      	mov	r5, r3
 80024d2:	b096      	sub	sp, #88	; 0x58
 80024d4:	da07      	bge.n	80024e6 <__swhatbuf_r+0x22>
 80024d6:	2300      	movs	r3, #0
 80024d8:	602b      	str	r3, [r5, #0]
 80024da:	89b3      	ldrh	r3, [r6, #12]
 80024dc:	061a      	lsls	r2, r3, #24
 80024de:	d410      	bmi.n	8002502 <__swhatbuf_r+0x3e>
 80024e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e4:	e00e      	b.n	8002504 <__swhatbuf_r+0x40>
 80024e6:	466a      	mov	r2, sp
 80024e8:	f000 fd22 	bl	8002f30 <_fstat_r>
 80024ec:	2800      	cmp	r0, #0
 80024ee:	dbf2      	blt.n	80024d6 <__swhatbuf_r+0x12>
 80024f0:	9a01      	ldr	r2, [sp, #4]
 80024f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024fa:	425a      	negs	r2, r3
 80024fc:	415a      	adcs	r2, r3
 80024fe:	602a      	str	r2, [r5, #0]
 8002500:	e7ee      	b.n	80024e0 <__swhatbuf_r+0x1c>
 8002502:	2340      	movs	r3, #64	; 0x40
 8002504:	2000      	movs	r0, #0
 8002506:	6023      	str	r3, [r4, #0]
 8002508:	b016      	add	sp, #88	; 0x58
 800250a:	bd70      	pop	{r4, r5, r6, pc}

0800250c <__smakebuf_r>:
 800250c:	898b      	ldrh	r3, [r1, #12]
 800250e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002510:	079d      	lsls	r5, r3, #30
 8002512:	4606      	mov	r6, r0
 8002514:	460c      	mov	r4, r1
 8002516:	d507      	bpl.n	8002528 <__smakebuf_r+0x1c>
 8002518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800251c:	6023      	str	r3, [r4, #0]
 800251e:	6123      	str	r3, [r4, #16]
 8002520:	2301      	movs	r3, #1
 8002522:	6163      	str	r3, [r4, #20]
 8002524:	b002      	add	sp, #8
 8002526:	bd70      	pop	{r4, r5, r6, pc}
 8002528:	466a      	mov	r2, sp
 800252a:	ab01      	add	r3, sp, #4
 800252c:	f7ff ffca 	bl	80024c4 <__swhatbuf_r>
 8002530:	9900      	ldr	r1, [sp, #0]
 8002532:	4605      	mov	r5, r0
 8002534:	4630      	mov	r0, r6
 8002536:	f000 f87d 	bl	8002634 <_malloc_r>
 800253a:	b948      	cbnz	r0, 8002550 <__smakebuf_r+0x44>
 800253c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002540:	059a      	lsls	r2, r3, #22
 8002542:	d4ef      	bmi.n	8002524 <__smakebuf_r+0x18>
 8002544:	f023 0303 	bic.w	r3, r3, #3
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	81a3      	strh	r3, [r4, #12]
 800254e:	e7e3      	b.n	8002518 <__smakebuf_r+0xc>
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <__smakebuf_r+0x7c>)
 8002552:	62b3      	str	r3, [r6, #40]	; 0x28
 8002554:	89a3      	ldrh	r3, [r4, #12]
 8002556:	6020      	str	r0, [r4, #0]
 8002558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255c:	81a3      	strh	r3, [r4, #12]
 800255e:	9b00      	ldr	r3, [sp, #0]
 8002560:	6120      	str	r0, [r4, #16]
 8002562:	6163      	str	r3, [r4, #20]
 8002564:	9b01      	ldr	r3, [sp, #4]
 8002566:	b15b      	cbz	r3, 8002580 <__smakebuf_r+0x74>
 8002568:	4630      	mov	r0, r6
 800256a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800256e:	f000 fcf1 	bl	8002f54 <_isatty_r>
 8002572:	b128      	cbz	r0, 8002580 <__smakebuf_r+0x74>
 8002574:	89a3      	ldrh	r3, [r4, #12]
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	81a3      	strh	r3, [r4, #12]
 8002580:	89a0      	ldrh	r0, [r4, #12]
 8002582:	4305      	orrs	r5, r0
 8002584:	81a5      	strh	r5, [r4, #12]
 8002586:	e7cd      	b.n	8002524 <__smakebuf_r+0x18>
 8002588:	0800231d 	.word	0x0800231d

0800258c <malloc>:
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <malloc+0xc>)
 800258e:	4601      	mov	r1, r0
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	f000 b84f 	b.w	8002634 <_malloc_r>
 8002596:	bf00      	nop
 8002598:	2000000c 	.word	0x2000000c

0800259c <_free_r>:
 800259c:	b538      	push	{r3, r4, r5, lr}
 800259e:	4605      	mov	r5, r0
 80025a0:	2900      	cmp	r1, #0
 80025a2:	d043      	beq.n	800262c <_free_r+0x90>
 80025a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025a8:	1f0c      	subs	r4, r1, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bfb8      	it	lt
 80025ae:	18e4      	addlt	r4, r4, r3
 80025b0:	f000 fd00 	bl	8002fb4 <__malloc_lock>
 80025b4:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <_free_r+0x94>)
 80025b6:	6813      	ldr	r3, [r2, #0]
 80025b8:	4610      	mov	r0, r2
 80025ba:	b933      	cbnz	r3, 80025ca <_free_r+0x2e>
 80025bc:	6063      	str	r3, [r4, #4]
 80025be:	6014      	str	r4, [r2, #0]
 80025c0:	4628      	mov	r0, r5
 80025c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025c6:	f000 bcfb 	b.w	8002fc0 <__malloc_unlock>
 80025ca:	42a3      	cmp	r3, r4
 80025cc:	d90a      	bls.n	80025e4 <_free_r+0x48>
 80025ce:	6821      	ldr	r1, [r4, #0]
 80025d0:	1862      	adds	r2, r4, r1
 80025d2:	4293      	cmp	r3, r2
 80025d4:	bf01      	itttt	eq
 80025d6:	681a      	ldreq	r2, [r3, #0]
 80025d8:	685b      	ldreq	r3, [r3, #4]
 80025da:	1852      	addeq	r2, r2, r1
 80025dc:	6022      	streq	r2, [r4, #0]
 80025de:	6063      	str	r3, [r4, #4]
 80025e0:	6004      	str	r4, [r0, #0]
 80025e2:	e7ed      	b.n	80025c0 <_free_r+0x24>
 80025e4:	461a      	mov	r2, r3
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	b10b      	cbz	r3, 80025ee <_free_r+0x52>
 80025ea:	42a3      	cmp	r3, r4
 80025ec:	d9fa      	bls.n	80025e4 <_free_r+0x48>
 80025ee:	6811      	ldr	r1, [r2, #0]
 80025f0:	1850      	adds	r0, r2, r1
 80025f2:	42a0      	cmp	r0, r4
 80025f4:	d10b      	bne.n	800260e <_free_r+0x72>
 80025f6:	6820      	ldr	r0, [r4, #0]
 80025f8:	4401      	add	r1, r0
 80025fa:	1850      	adds	r0, r2, r1
 80025fc:	4283      	cmp	r3, r0
 80025fe:	6011      	str	r1, [r2, #0]
 8002600:	d1de      	bne.n	80025c0 <_free_r+0x24>
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4401      	add	r1, r0
 8002608:	6011      	str	r1, [r2, #0]
 800260a:	6053      	str	r3, [r2, #4]
 800260c:	e7d8      	b.n	80025c0 <_free_r+0x24>
 800260e:	d902      	bls.n	8002616 <_free_r+0x7a>
 8002610:	230c      	movs	r3, #12
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	e7d4      	b.n	80025c0 <_free_r+0x24>
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	1821      	adds	r1, r4, r0
 800261a:	428b      	cmp	r3, r1
 800261c:	bf01      	itttt	eq
 800261e:	6819      	ldreq	r1, [r3, #0]
 8002620:	685b      	ldreq	r3, [r3, #4]
 8002622:	1809      	addeq	r1, r1, r0
 8002624:	6021      	streq	r1, [r4, #0]
 8002626:	6063      	str	r3, [r4, #4]
 8002628:	6054      	str	r4, [r2, #4]
 800262a:	e7c9      	b.n	80025c0 <_free_r+0x24>
 800262c:	bd38      	pop	{r3, r4, r5, pc}
 800262e:	bf00      	nop
 8002630:	20000090 	.word	0x20000090

08002634 <_malloc_r>:
 8002634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002636:	1ccd      	adds	r5, r1, #3
 8002638:	f025 0503 	bic.w	r5, r5, #3
 800263c:	3508      	adds	r5, #8
 800263e:	2d0c      	cmp	r5, #12
 8002640:	bf38      	it	cc
 8002642:	250c      	movcc	r5, #12
 8002644:	2d00      	cmp	r5, #0
 8002646:	4606      	mov	r6, r0
 8002648:	db01      	blt.n	800264e <_malloc_r+0x1a>
 800264a:	42a9      	cmp	r1, r5
 800264c:	d903      	bls.n	8002656 <_malloc_r+0x22>
 800264e:	230c      	movs	r3, #12
 8002650:	6033      	str	r3, [r6, #0]
 8002652:	2000      	movs	r0, #0
 8002654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002656:	f000 fcad 	bl	8002fb4 <__malloc_lock>
 800265a:	4921      	ldr	r1, [pc, #132]	; (80026e0 <_malloc_r+0xac>)
 800265c:	680a      	ldr	r2, [r1, #0]
 800265e:	4614      	mov	r4, r2
 8002660:	b99c      	cbnz	r4, 800268a <_malloc_r+0x56>
 8002662:	4f20      	ldr	r7, [pc, #128]	; (80026e4 <_malloc_r+0xb0>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	b923      	cbnz	r3, 8002672 <_malloc_r+0x3e>
 8002668:	4621      	mov	r1, r4
 800266a:	4630      	mov	r0, r6
 800266c:	f000 fb2a 	bl	8002cc4 <_sbrk_r>
 8002670:	6038      	str	r0, [r7, #0]
 8002672:	4629      	mov	r1, r5
 8002674:	4630      	mov	r0, r6
 8002676:	f000 fb25 	bl	8002cc4 <_sbrk_r>
 800267a:	1c43      	adds	r3, r0, #1
 800267c:	d123      	bne.n	80026c6 <_malloc_r+0x92>
 800267e:	230c      	movs	r3, #12
 8002680:	4630      	mov	r0, r6
 8002682:	6033      	str	r3, [r6, #0]
 8002684:	f000 fc9c 	bl	8002fc0 <__malloc_unlock>
 8002688:	e7e3      	b.n	8002652 <_malloc_r+0x1e>
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	1b5b      	subs	r3, r3, r5
 800268e:	d417      	bmi.n	80026c0 <_malloc_r+0x8c>
 8002690:	2b0b      	cmp	r3, #11
 8002692:	d903      	bls.n	800269c <_malloc_r+0x68>
 8002694:	6023      	str	r3, [r4, #0]
 8002696:	441c      	add	r4, r3
 8002698:	6025      	str	r5, [r4, #0]
 800269a:	e004      	b.n	80026a6 <_malloc_r+0x72>
 800269c:	6863      	ldr	r3, [r4, #4]
 800269e:	42a2      	cmp	r2, r4
 80026a0:	bf0c      	ite	eq
 80026a2:	600b      	streq	r3, [r1, #0]
 80026a4:	6053      	strne	r3, [r2, #4]
 80026a6:	4630      	mov	r0, r6
 80026a8:	f000 fc8a 	bl	8002fc0 <__malloc_unlock>
 80026ac:	f104 000b 	add.w	r0, r4, #11
 80026b0:	1d23      	adds	r3, r4, #4
 80026b2:	f020 0007 	bic.w	r0, r0, #7
 80026b6:	1ac2      	subs	r2, r0, r3
 80026b8:	d0cc      	beq.n	8002654 <_malloc_r+0x20>
 80026ba:	1a1b      	subs	r3, r3, r0
 80026bc:	50a3      	str	r3, [r4, r2]
 80026be:	e7c9      	b.n	8002654 <_malloc_r+0x20>
 80026c0:	4622      	mov	r2, r4
 80026c2:	6864      	ldr	r4, [r4, #4]
 80026c4:	e7cc      	b.n	8002660 <_malloc_r+0x2c>
 80026c6:	1cc4      	adds	r4, r0, #3
 80026c8:	f024 0403 	bic.w	r4, r4, #3
 80026cc:	42a0      	cmp	r0, r4
 80026ce:	d0e3      	beq.n	8002698 <_malloc_r+0x64>
 80026d0:	1a21      	subs	r1, r4, r0
 80026d2:	4630      	mov	r0, r6
 80026d4:	f000 faf6 	bl	8002cc4 <_sbrk_r>
 80026d8:	3001      	adds	r0, #1
 80026da:	d1dd      	bne.n	8002698 <_malloc_r+0x64>
 80026dc:	e7cf      	b.n	800267e <_malloc_r+0x4a>
 80026de:	bf00      	nop
 80026e0:	20000090 	.word	0x20000090
 80026e4:	20000094 	.word	0x20000094

080026e8 <__sfputc_r>:
 80026e8:	6893      	ldr	r3, [r2, #8]
 80026ea:	b410      	push	{r4}
 80026ec:	3b01      	subs	r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	6093      	str	r3, [r2, #8]
 80026f2:	da07      	bge.n	8002704 <__sfputc_r+0x1c>
 80026f4:	6994      	ldr	r4, [r2, #24]
 80026f6:	42a3      	cmp	r3, r4
 80026f8:	db01      	blt.n	80026fe <__sfputc_r+0x16>
 80026fa:	290a      	cmp	r1, #10
 80026fc:	d102      	bne.n	8002704 <__sfputc_r+0x1c>
 80026fe:	bc10      	pop	{r4}
 8002700:	f000 bb34 	b.w	8002d6c <__swbuf_r>
 8002704:	6813      	ldr	r3, [r2, #0]
 8002706:	1c58      	adds	r0, r3, #1
 8002708:	6010      	str	r0, [r2, #0]
 800270a:	7019      	strb	r1, [r3, #0]
 800270c:	4608      	mov	r0, r1
 800270e:	bc10      	pop	{r4}
 8002710:	4770      	bx	lr

08002712 <__sfputs_r>:
 8002712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002714:	4606      	mov	r6, r0
 8002716:	460f      	mov	r7, r1
 8002718:	4614      	mov	r4, r2
 800271a:	18d5      	adds	r5, r2, r3
 800271c:	42ac      	cmp	r4, r5
 800271e:	d101      	bne.n	8002724 <__sfputs_r+0x12>
 8002720:	2000      	movs	r0, #0
 8002722:	e007      	b.n	8002734 <__sfputs_r+0x22>
 8002724:	463a      	mov	r2, r7
 8002726:	4630      	mov	r0, r6
 8002728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800272c:	f7ff ffdc 	bl	80026e8 <__sfputc_r>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d1f3      	bne.n	800271c <__sfputs_r+0xa>
 8002734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002738 <_vfiprintf_r>:
 8002738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800273c:	460d      	mov	r5, r1
 800273e:	4614      	mov	r4, r2
 8002740:	4698      	mov	r8, r3
 8002742:	4606      	mov	r6, r0
 8002744:	b09d      	sub	sp, #116	; 0x74
 8002746:	b118      	cbz	r0, 8002750 <_vfiprintf_r+0x18>
 8002748:	6983      	ldr	r3, [r0, #24]
 800274a:	b90b      	cbnz	r3, 8002750 <_vfiprintf_r+0x18>
 800274c:	f7ff fe1a 	bl	8002384 <__sinit>
 8002750:	4b89      	ldr	r3, [pc, #548]	; (8002978 <_vfiprintf_r+0x240>)
 8002752:	429d      	cmp	r5, r3
 8002754:	d11b      	bne.n	800278e <_vfiprintf_r+0x56>
 8002756:	6875      	ldr	r5, [r6, #4]
 8002758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800275a:	07d9      	lsls	r1, r3, #31
 800275c:	d405      	bmi.n	800276a <_vfiprintf_r+0x32>
 800275e:	89ab      	ldrh	r3, [r5, #12]
 8002760:	059a      	lsls	r2, r3, #22
 8002762:	d402      	bmi.n	800276a <_vfiprintf_r+0x32>
 8002764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002766:	f7ff feab 	bl	80024c0 <__retarget_lock_acquire_recursive>
 800276a:	89ab      	ldrh	r3, [r5, #12]
 800276c:	071b      	lsls	r3, r3, #28
 800276e:	d501      	bpl.n	8002774 <_vfiprintf_r+0x3c>
 8002770:	692b      	ldr	r3, [r5, #16]
 8002772:	b9eb      	cbnz	r3, 80027b0 <_vfiprintf_r+0x78>
 8002774:	4629      	mov	r1, r5
 8002776:	4630      	mov	r0, r6
 8002778:	f000 fb5c 	bl	8002e34 <__swsetup_r>
 800277c:	b1c0      	cbz	r0, 80027b0 <_vfiprintf_r+0x78>
 800277e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002780:	07dc      	lsls	r4, r3, #31
 8002782:	d50e      	bpl.n	80027a2 <_vfiprintf_r+0x6a>
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	b01d      	add	sp, #116	; 0x74
 800278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800278e:	4b7b      	ldr	r3, [pc, #492]	; (800297c <_vfiprintf_r+0x244>)
 8002790:	429d      	cmp	r5, r3
 8002792:	d101      	bne.n	8002798 <_vfiprintf_r+0x60>
 8002794:	68b5      	ldr	r5, [r6, #8]
 8002796:	e7df      	b.n	8002758 <_vfiprintf_r+0x20>
 8002798:	4b79      	ldr	r3, [pc, #484]	; (8002980 <_vfiprintf_r+0x248>)
 800279a:	429d      	cmp	r5, r3
 800279c:	bf08      	it	eq
 800279e:	68f5      	ldreq	r5, [r6, #12]
 80027a0:	e7da      	b.n	8002758 <_vfiprintf_r+0x20>
 80027a2:	89ab      	ldrh	r3, [r5, #12]
 80027a4:	0598      	lsls	r0, r3, #22
 80027a6:	d4ed      	bmi.n	8002784 <_vfiprintf_r+0x4c>
 80027a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027aa:	f7ff fe8a 	bl	80024c2 <__retarget_lock_release_recursive>
 80027ae:	e7e9      	b.n	8002784 <_vfiprintf_r+0x4c>
 80027b0:	2300      	movs	r3, #0
 80027b2:	9309      	str	r3, [sp, #36]	; 0x24
 80027b4:	2320      	movs	r3, #32
 80027b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027ba:	2330      	movs	r3, #48	; 0x30
 80027bc:	f04f 0901 	mov.w	r9, #1
 80027c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80027c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002984 <_vfiprintf_r+0x24c>
 80027c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027cc:	4623      	mov	r3, r4
 80027ce:	469a      	mov	sl, r3
 80027d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027d4:	b10a      	cbz	r2, 80027da <_vfiprintf_r+0xa2>
 80027d6:	2a25      	cmp	r2, #37	; 0x25
 80027d8:	d1f9      	bne.n	80027ce <_vfiprintf_r+0x96>
 80027da:	ebba 0b04 	subs.w	fp, sl, r4
 80027de:	d00b      	beq.n	80027f8 <_vfiprintf_r+0xc0>
 80027e0:	465b      	mov	r3, fp
 80027e2:	4622      	mov	r2, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	4630      	mov	r0, r6
 80027e8:	f7ff ff93 	bl	8002712 <__sfputs_r>
 80027ec:	3001      	adds	r0, #1
 80027ee:	f000 80aa 	beq.w	8002946 <_vfiprintf_r+0x20e>
 80027f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027f4:	445a      	add	r2, fp
 80027f6:	9209      	str	r2, [sp, #36]	; 0x24
 80027f8:	f89a 3000 	ldrb.w	r3, [sl]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a2 	beq.w	8002946 <_vfiprintf_r+0x20e>
 8002802:	2300      	movs	r3, #0
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800280c:	f10a 0a01 	add.w	sl, sl, #1
 8002810:	9304      	str	r3, [sp, #16]
 8002812:	9307      	str	r3, [sp, #28]
 8002814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002818:	931a      	str	r3, [sp, #104]	; 0x68
 800281a:	4654      	mov	r4, sl
 800281c:	2205      	movs	r2, #5
 800281e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002822:	4858      	ldr	r0, [pc, #352]	; (8002984 <_vfiprintf_r+0x24c>)
 8002824:	f000 fbb8 	bl	8002f98 <memchr>
 8002828:	9a04      	ldr	r2, [sp, #16]
 800282a:	b9d8      	cbnz	r0, 8002864 <_vfiprintf_r+0x12c>
 800282c:	06d1      	lsls	r1, r2, #27
 800282e:	bf44      	itt	mi
 8002830:	2320      	movmi	r3, #32
 8002832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002836:	0713      	lsls	r3, r2, #28
 8002838:	bf44      	itt	mi
 800283a:	232b      	movmi	r3, #43	; 0x2b
 800283c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002840:	f89a 3000 	ldrb.w	r3, [sl]
 8002844:	2b2a      	cmp	r3, #42	; 0x2a
 8002846:	d015      	beq.n	8002874 <_vfiprintf_r+0x13c>
 8002848:	4654      	mov	r4, sl
 800284a:	2000      	movs	r0, #0
 800284c:	f04f 0c0a 	mov.w	ip, #10
 8002850:	9a07      	ldr	r2, [sp, #28]
 8002852:	4621      	mov	r1, r4
 8002854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002858:	3b30      	subs	r3, #48	; 0x30
 800285a:	2b09      	cmp	r3, #9
 800285c:	d94e      	bls.n	80028fc <_vfiprintf_r+0x1c4>
 800285e:	b1b0      	cbz	r0, 800288e <_vfiprintf_r+0x156>
 8002860:	9207      	str	r2, [sp, #28]
 8002862:	e014      	b.n	800288e <_vfiprintf_r+0x156>
 8002864:	eba0 0308 	sub.w	r3, r0, r8
 8002868:	fa09 f303 	lsl.w	r3, r9, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	46a2      	mov	sl, r4
 8002870:	9304      	str	r3, [sp, #16]
 8002872:	e7d2      	b.n	800281a <_vfiprintf_r+0xe2>
 8002874:	9b03      	ldr	r3, [sp, #12]
 8002876:	1d19      	adds	r1, r3, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	9103      	str	r1, [sp, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	bfbb      	ittet	lt
 8002880:	425b      	neglt	r3, r3
 8002882:	f042 0202 	orrlt.w	r2, r2, #2
 8002886:	9307      	strge	r3, [sp, #28]
 8002888:	9307      	strlt	r3, [sp, #28]
 800288a:	bfb8      	it	lt
 800288c:	9204      	strlt	r2, [sp, #16]
 800288e:	7823      	ldrb	r3, [r4, #0]
 8002890:	2b2e      	cmp	r3, #46	; 0x2e
 8002892:	d10c      	bne.n	80028ae <_vfiprintf_r+0x176>
 8002894:	7863      	ldrb	r3, [r4, #1]
 8002896:	2b2a      	cmp	r3, #42	; 0x2a
 8002898:	d135      	bne.n	8002906 <_vfiprintf_r+0x1ce>
 800289a:	9b03      	ldr	r3, [sp, #12]
 800289c:	3402      	adds	r4, #2
 800289e:	1d1a      	adds	r2, r3, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	9203      	str	r2, [sp, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bfb8      	it	lt
 80028a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80028ac:	9305      	str	r3, [sp, #20]
 80028ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002994 <_vfiprintf_r+0x25c>
 80028b2:	2203      	movs	r2, #3
 80028b4:	4650      	mov	r0, sl
 80028b6:	7821      	ldrb	r1, [r4, #0]
 80028b8:	f000 fb6e 	bl	8002f98 <memchr>
 80028bc:	b140      	cbz	r0, 80028d0 <_vfiprintf_r+0x198>
 80028be:	2340      	movs	r3, #64	; 0x40
 80028c0:	eba0 000a 	sub.w	r0, r0, sl
 80028c4:	fa03 f000 	lsl.w	r0, r3, r0
 80028c8:	9b04      	ldr	r3, [sp, #16]
 80028ca:	3401      	adds	r4, #1
 80028cc:	4303      	orrs	r3, r0
 80028ce:	9304      	str	r3, [sp, #16]
 80028d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d4:	2206      	movs	r2, #6
 80028d6:	482c      	ldr	r0, [pc, #176]	; (8002988 <_vfiprintf_r+0x250>)
 80028d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028dc:	f000 fb5c 	bl	8002f98 <memchr>
 80028e0:	2800      	cmp	r0, #0
 80028e2:	d03f      	beq.n	8002964 <_vfiprintf_r+0x22c>
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <_vfiprintf_r+0x254>)
 80028e6:	bb1b      	cbnz	r3, 8002930 <_vfiprintf_r+0x1f8>
 80028e8:	9b03      	ldr	r3, [sp, #12]
 80028ea:	3307      	adds	r3, #7
 80028ec:	f023 0307 	bic.w	r3, r3, #7
 80028f0:	3308      	adds	r3, #8
 80028f2:	9303      	str	r3, [sp, #12]
 80028f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028f6:	443b      	add	r3, r7
 80028f8:	9309      	str	r3, [sp, #36]	; 0x24
 80028fa:	e767      	b.n	80027cc <_vfiprintf_r+0x94>
 80028fc:	460c      	mov	r4, r1
 80028fe:	2001      	movs	r0, #1
 8002900:	fb0c 3202 	mla	r2, ip, r2, r3
 8002904:	e7a5      	b.n	8002852 <_vfiprintf_r+0x11a>
 8002906:	2300      	movs	r3, #0
 8002908:	f04f 0c0a 	mov.w	ip, #10
 800290c:	4619      	mov	r1, r3
 800290e:	3401      	adds	r4, #1
 8002910:	9305      	str	r3, [sp, #20]
 8002912:	4620      	mov	r0, r4
 8002914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002918:	3a30      	subs	r2, #48	; 0x30
 800291a:	2a09      	cmp	r2, #9
 800291c:	d903      	bls.n	8002926 <_vfiprintf_r+0x1ee>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0c5      	beq.n	80028ae <_vfiprintf_r+0x176>
 8002922:	9105      	str	r1, [sp, #20]
 8002924:	e7c3      	b.n	80028ae <_vfiprintf_r+0x176>
 8002926:	4604      	mov	r4, r0
 8002928:	2301      	movs	r3, #1
 800292a:	fb0c 2101 	mla	r1, ip, r1, r2
 800292e:	e7f0      	b.n	8002912 <_vfiprintf_r+0x1da>
 8002930:	ab03      	add	r3, sp, #12
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	462a      	mov	r2, r5
 8002936:	4630      	mov	r0, r6
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <_vfiprintf_r+0x258>)
 800293a:	a904      	add	r1, sp, #16
 800293c:	f3af 8000 	nop.w
 8002940:	4607      	mov	r7, r0
 8002942:	1c78      	adds	r0, r7, #1
 8002944:	d1d6      	bne.n	80028f4 <_vfiprintf_r+0x1bc>
 8002946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002948:	07d9      	lsls	r1, r3, #31
 800294a:	d405      	bmi.n	8002958 <_vfiprintf_r+0x220>
 800294c:	89ab      	ldrh	r3, [r5, #12]
 800294e:	059a      	lsls	r2, r3, #22
 8002950:	d402      	bmi.n	8002958 <_vfiprintf_r+0x220>
 8002952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002954:	f7ff fdb5 	bl	80024c2 <__retarget_lock_release_recursive>
 8002958:	89ab      	ldrh	r3, [r5, #12]
 800295a:	065b      	lsls	r3, r3, #25
 800295c:	f53f af12 	bmi.w	8002784 <_vfiprintf_r+0x4c>
 8002960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002962:	e711      	b.n	8002788 <_vfiprintf_r+0x50>
 8002964:	ab03      	add	r3, sp, #12
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	462a      	mov	r2, r5
 800296a:	4630      	mov	r0, r6
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <_vfiprintf_r+0x258>)
 800296e:	a904      	add	r1, sp, #16
 8002970:	f000 f882 	bl	8002a78 <_printf_i>
 8002974:	e7e4      	b.n	8002940 <_vfiprintf_r+0x208>
 8002976:	bf00      	nop
 8002978:	08003070 	.word	0x08003070
 800297c:	08003090 	.word	0x08003090
 8002980:	08003050 	.word	0x08003050
 8002984:	080030b0 	.word	0x080030b0
 8002988:	080030ba 	.word	0x080030ba
 800298c:	00000000 	.word	0x00000000
 8002990:	08002713 	.word	0x08002713
 8002994:	080030b6 	.word	0x080030b6

08002998 <_printf_common>:
 8002998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	4616      	mov	r6, r2
 800299e:	4699      	mov	r9, r3
 80029a0:	688a      	ldr	r2, [r1, #8]
 80029a2:	690b      	ldr	r3, [r1, #16]
 80029a4:	4607      	mov	r7, r0
 80029a6:	4293      	cmp	r3, r2
 80029a8:	bfb8      	it	lt
 80029aa:	4613      	movlt	r3, r2
 80029ac:	6033      	str	r3, [r6, #0]
 80029ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029b2:	460c      	mov	r4, r1
 80029b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029b8:	b10a      	cbz	r2, 80029be <_printf_common+0x26>
 80029ba:	3301      	adds	r3, #1
 80029bc:	6033      	str	r3, [r6, #0]
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	0699      	lsls	r1, r3, #26
 80029c2:	bf42      	ittt	mi
 80029c4:	6833      	ldrmi	r3, [r6, #0]
 80029c6:	3302      	addmi	r3, #2
 80029c8:	6033      	strmi	r3, [r6, #0]
 80029ca:	6825      	ldr	r5, [r4, #0]
 80029cc:	f015 0506 	ands.w	r5, r5, #6
 80029d0:	d106      	bne.n	80029e0 <_printf_common+0x48>
 80029d2:	f104 0a19 	add.w	sl, r4, #25
 80029d6:	68e3      	ldr	r3, [r4, #12]
 80029d8:	6832      	ldr	r2, [r6, #0]
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	42ab      	cmp	r3, r5
 80029de:	dc28      	bgt.n	8002a32 <_printf_common+0x9a>
 80029e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029e4:	1e13      	subs	r3, r2, #0
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	bf18      	it	ne
 80029ea:	2301      	movne	r3, #1
 80029ec:	0692      	lsls	r2, r2, #26
 80029ee:	d42d      	bmi.n	8002a4c <_printf_common+0xb4>
 80029f0:	4649      	mov	r1, r9
 80029f2:	4638      	mov	r0, r7
 80029f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029f8:	47c0      	blx	r8
 80029fa:	3001      	adds	r0, #1
 80029fc:	d020      	beq.n	8002a40 <_printf_common+0xa8>
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	68e5      	ldr	r5, [r4, #12]
 8002a02:	f003 0306 	and.w	r3, r3, #6
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	bf18      	it	ne
 8002a0a:	2500      	movne	r5, #0
 8002a0c:	6832      	ldr	r2, [r6, #0]
 8002a0e:	f04f 0600 	mov.w	r6, #0
 8002a12:	68a3      	ldr	r3, [r4, #8]
 8002a14:	bf08      	it	eq
 8002a16:	1aad      	subeq	r5, r5, r2
 8002a18:	6922      	ldr	r2, [r4, #16]
 8002a1a:	bf08      	it	eq
 8002a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bfc4      	itt	gt
 8002a24:	1a9b      	subgt	r3, r3, r2
 8002a26:	18ed      	addgt	r5, r5, r3
 8002a28:	341a      	adds	r4, #26
 8002a2a:	42b5      	cmp	r5, r6
 8002a2c:	d11a      	bne.n	8002a64 <_printf_common+0xcc>
 8002a2e:	2000      	movs	r0, #0
 8002a30:	e008      	b.n	8002a44 <_printf_common+0xac>
 8002a32:	2301      	movs	r3, #1
 8002a34:	4652      	mov	r2, sl
 8002a36:	4649      	mov	r1, r9
 8002a38:	4638      	mov	r0, r7
 8002a3a:	47c0      	blx	r8
 8002a3c:	3001      	adds	r0, #1
 8002a3e:	d103      	bne.n	8002a48 <_printf_common+0xb0>
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a48:	3501      	adds	r5, #1
 8002a4a:	e7c4      	b.n	80029d6 <_printf_common+0x3e>
 8002a4c:	2030      	movs	r0, #48	; 0x30
 8002a4e:	18e1      	adds	r1, r4, r3
 8002a50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a5a:	4422      	add	r2, r4
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a62:	e7c5      	b.n	80029f0 <_printf_common+0x58>
 8002a64:	2301      	movs	r3, #1
 8002a66:	4622      	mov	r2, r4
 8002a68:	4649      	mov	r1, r9
 8002a6a:	4638      	mov	r0, r7
 8002a6c:	47c0      	blx	r8
 8002a6e:	3001      	adds	r0, #1
 8002a70:	d0e6      	beq.n	8002a40 <_printf_common+0xa8>
 8002a72:	3601      	adds	r6, #1
 8002a74:	e7d9      	b.n	8002a2a <_printf_common+0x92>
	...

08002a78 <_printf_i>:
 8002a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	7e27      	ldrb	r7, [r4, #24]
 8002a80:	4691      	mov	r9, r2
 8002a82:	2f78      	cmp	r7, #120	; 0x78
 8002a84:	4680      	mov	r8, r0
 8002a86:	469a      	mov	sl, r3
 8002a88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a8e:	d807      	bhi.n	8002aa0 <_printf_i+0x28>
 8002a90:	2f62      	cmp	r7, #98	; 0x62
 8002a92:	d80a      	bhi.n	8002aaa <_printf_i+0x32>
 8002a94:	2f00      	cmp	r7, #0
 8002a96:	f000 80d9 	beq.w	8002c4c <_printf_i+0x1d4>
 8002a9a:	2f58      	cmp	r7, #88	; 0x58
 8002a9c:	f000 80a4 	beq.w	8002be8 <_printf_i+0x170>
 8002aa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002aa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002aa8:	e03a      	b.n	8002b20 <_printf_i+0xa8>
 8002aaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002aae:	2b15      	cmp	r3, #21
 8002ab0:	d8f6      	bhi.n	8002aa0 <_printf_i+0x28>
 8002ab2:	a001      	add	r0, pc, #4	; (adr r0, 8002ab8 <_printf_i+0x40>)
 8002ab4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ab8:	08002b11 	.word	0x08002b11
 8002abc:	08002b25 	.word	0x08002b25
 8002ac0:	08002aa1 	.word	0x08002aa1
 8002ac4:	08002aa1 	.word	0x08002aa1
 8002ac8:	08002aa1 	.word	0x08002aa1
 8002acc:	08002aa1 	.word	0x08002aa1
 8002ad0:	08002b25 	.word	0x08002b25
 8002ad4:	08002aa1 	.word	0x08002aa1
 8002ad8:	08002aa1 	.word	0x08002aa1
 8002adc:	08002aa1 	.word	0x08002aa1
 8002ae0:	08002aa1 	.word	0x08002aa1
 8002ae4:	08002c33 	.word	0x08002c33
 8002ae8:	08002b55 	.word	0x08002b55
 8002aec:	08002c15 	.word	0x08002c15
 8002af0:	08002aa1 	.word	0x08002aa1
 8002af4:	08002aa1 	.word	0x08002aa1
 8002af8:	08002c55 	.word	0x08002c55
 8002afc:	08002aa1 	.word	0x08002aa1
 8002b00:	08002b55 	.word	0x08002b55
 8002b04:	08002aa1 	.word	0x08002aa1
 8002b08:	08002aa1 	.word	0x08002aa1
 8002b0c:	08002c1d 	.word	0x08002c1d
 8002b10:	680b      	ldr	r3, [r1, #0]
 8002b12:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	600a      	str	r2, [r1, #0]
 8002b1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0a4      	b.n	8002c6e <_printf_i+0x1f6>
 8002b24:	6825      	ldr	r5, [r4, #0]
 8002b26:	6808      	ldr	r0, [r1, #0]
 8002b28:	062e      	lsls	r6, r5, #24
 8002b2a:	f100 0304 	add.w	r3, r0, #4
 8002b2e:	d50a      	bpl.n	8002b46 <_printf_i+0xce>
 8002b30:	6805      	ldr	r5, [r0, #0]
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	2d00      	cmp	r5, #0
 8002b36:	da03      	bge.n	8002b40 <_printf_i+0xc8>
 8002b38:	232d      	movs	r3, #45	; 0x2d
 8002b3a:	426d      	negs	r5, r5
 8002b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b40:	230a      	movs	r3, #10
 8002b42:	485e      	ldr	r0, [pc, #376]	; (8002cbc <_printf_i+0x244>)
 8002b44:	e019      	b.n	8002b7a <_printf_i+0x102>
 8002b46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b4a:	6805      	ldr	r5, [r0, #0]
 8002b4c:	600b      	str	r3, [r1, #0]
 8002b4e:	bf18      	it	ne
 8002b50:	b22d      	sxthne	r5, r5
 8002b52:	e7ef      	b.n	8002b34 <_printf_i+0xbc>
 8002b54:	680b      	ldr	r3, [r1, #0]
 8002b56:	6825      	ldr	r5, [r4, #0]
 8002b58:	1d18      	adds	r0, r3, #4
 8002b5a:	6008      	str	r0, [r1, #0]
 8002b5c:	0628      	lsls	r0, r5, #24
 8002b5e:	d501      	bpl.n	8002b64 <_printf_i+0xec>
 8002b60:	681d      	ldr	r5, [r3, #0]
 8002b62:	e002      	b.n	8002b6a <_printf_i+0xf2>
 8002b64:	0669      	lsls	r1, r5, #25
 8002b66:	d5fb      	bpl.n	8002b60 <_printf_i+0xe8>
 8002b68:	881d      	ldrh	r5, [r3, #0]
 8002b6a:	2f6f      	cmp	r7, #111	; 0x6f
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2308      	moveq	r3, #8
 8002b70:	230a      	movne	r3, #10
 8002b72:	4852      	ldr	r0, [pc, #328]	; (8002cbc <_printf_i+0x244>)
 8002b74:	2100      	movs	r1, #0
 8002b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b7a:	6866      	ldr	r6, [r4, #4]
 8002b7c:	2e00      	cmp	r6, #0
 8002b7e:	bfa8      	it	ge
 8002b80:	6821      	ldrge	r1, [r4, #0]
 8002b82:	60a6      	str	r6, [r4, #8]
 8002b84:	bfa4      	itt	ge
 8002b86:	f021 0104 	bicge.w	r1, r1, #4
 8002b8a:	6021      	strge	r1, [r4, #0]
 8002b8c:	b90d      	cbnz	r5, 8002b92 <_printf_i+0x11a>
 8002b8e:	2e00      	cmp	r6, #0
 8002b90:	d04d      	beq.n	8002c2e <_printf_i+0x1b6>
 8002b92:	4616      	mov	r6, r2
 8002b94:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b98:	fb03 5711 	mls	r7, r3, r1, r5
 8002b9c:	5dc7      	ldrb	r7, [r0, r7]
 8002b9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ba2:	462f      	mov	r7, r5
 8002ba4:	42bb      	cmp	r3, r7
 8002ba6:	460d      	mov	r5, r1
 8002ba8:	d9f4      	bls.n	8002b94 <_printf_i+0x11c>
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d10b      	bne.n	8002bc6 <_printf_i+0x14e>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	07df      	lsls	r7, r3, #31
 8002bb2:	d508      	bpl.n	8002bc6 <_printf_i+0x14e>
 8002bb4:	6923      	ldr	r3, [r4, #16]
 8002bb6:	6861      	ldr	r1, [r4, #4]
 8002bb8:	4299      	cmp	r1, r3
 8002bba:	bfde      	ittt	le
 8002bbc:	2330      	movle	r3, #48	; 0x30
 8002bbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bc6:	1b92      	subs	r2, r2, r6
 8002bc8:	6122      	str	r2, [r4, #16]
 8002bca:	464b      	mov	r3, r9
 8002bcc:	4621      	mov	r1, r4
 8002bce:	4640      	mov	r0, r8
 8002bd0:	f8cd a000 	str.w	sl, [sp]
 8002bd4:	aa03      	add	r2, sp, #12
 8002bd6:	f7ff fedf 	bl	8002998 <_printf_common>
 8002bda:	3001      	adds	r0, #1
 8002bdc:	d14c      	bne.n	8002c78 <_printf_i+0x200>
 8002bde:	f04f 30ff 	mov.w	r0, #4294967295
 8002be2:	b004      	add	sp, #16
 8002be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be8:	4834      	ldr	r0, [pc, #208]	; (8002cbc <_printf_i+0x244>)
 8002bea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bee:	680e      	ldr	r6, [r1, #0]
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f856 5b04 	ldr.w	r5, [r6], #4
 8002bf6:	061f      	lsls	r7, r3, #24
 8002bf8:	600e      	str	r6, [r1, #0]
 8002bfa:	d514      	bpl.n	8002c26 <_printf_i+0x1ae>
 8002bfc:	07d9      	lsls	r1, r3, #31
 8002bfe:	bf44      	itt	mi
 8002c00:	f043 0320 	orrmi.w	r3, r3, #32
 8002c04:	6023      	strmi	r3, [r4, #0]
 8002c06:	b91d      	cbnz	r5, 8002c10 <_printf_i+0x198>
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	f023 0320 	bic.w	r3, r3, #32
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	2310      	movs	r3, #16
 8002c12:	e7af      	b.n	8002b74 <_printf_i+0xfc>
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	f043 0320 	orr.w	r3, r3, #32
 8002c1a:	6023      	str	r3, [r4, #0]
 8002c1c:	2378      	movs	r3, #120	; 0x78
 8002c1e:	4828      	ldr	r0, [pc, #160]	; (8002cc0 <_printf_i+0x248>)
 8002c20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c24:	e7e3      	b.n	8002bee <_printf_i+0x176>
 8002c26:	065e      	lsls	r6, r3, #25
 8002c28:	bf48      	it	mi
 8002c2a:	b2ad      	uxthmi	r5, r5
 8002c2c:	e7e6      	b.n	8002bfc <_printf_i+0x184>
 8002c2e:	4616      	mov	r6, r2
 8002c30:	e7bb      	b.n	8002baa <_printf_i+0x132>
 8002c32:	680b      	ldr	r3, [r1, #0]
 8002c34:	6826      	ldr	r6, [r4, #0]
 8002c36:	1d1d      	adds	r5, r3, #4
 8002c38:	6960      	ldr	r0, [r4, #20]
 8002c3a:	600d      	str	r5, [r1, #0]
 8002c3c:	0635      	lsls	r5, r6, #24
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	d501      	bpl.n	8002c46 <_printf_i+0x1ce>
 8002c42:	6018      	str	r0, [r3, #0]
 8002c44:	e002      	b.n	8002c4c <_printf_i+0x1d4>
 8002c46:	0671      	lsls	r1, r6, #25
 8002c48:	d5fb      	bpl.n	8002c42 <_printf_i+0x1ca>
 8002c4a:	8018      	strh	r0, [r3, #0]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	4616      	mov	r6, r2
 8002c50:	6123      	str	r3, [r4, #16]
 8002c52:	e7ba      	b.n	8002bca <_printf_i+0x152>
 8002c54:	680b      	ldr	r3, [r1, #0]
 8002c56:	1d1a      	adds	r2, r3, #4
 8002c58:	600a      	str	r2, [r1, #0]
 8002c5a:	681e      	ldr	r6, [r3, #0]
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4630      	mov	r0, r6
 8002c60:	6862      	ldr	r2, [r4, #4]
 8002c62:	f000 f999 	bl	8002f98 <memchr>
 8002c66:	b108      	cbz	r0, 8002c6c <_printf_i+0x1f4>
 8002c68:	1b80      	subs	r0, r0, r6
 8002c6a:	6060      	str	r0, [r4, #4]
 8002c6c:	6863      	ldr	r3, [r4, #4]
 8002c6e:	6123      	str	r3, [r4, #16]
 8002c70:	2300      	movs	r3, #0
 8002c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c76:	e7a8      	b.n	8002bca <_printf_i+0x152>
 8002c78:	4632      	mov	r2, r6
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	4640      	mov	r0, r8
 8002c7e:	6923      	ldr	r3, [r4, #16]
 8002c80:	47d0      	blx	sl
 8002c82:	3001      	adds	r0, #1
 8002c84:	d0ab      	beq.n	8002bde <_printf_i+0x166>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	079b      	lsls	r3, r3, #30
 8002c8a:	d413      	bmi.n	8002cb4 <_printf_i+0x23c>
 8002c8c:	68e0      	ldr	r0, [r4, #12]
 8002c8e:	9b03      	ldr	r3, [sp, #12]
 8002c90:	4298      	cmp	r0, r3
 8002c92:	bfb8      	it	lt
 8002c94:	4618      	movlt	r0, r3
 8002c96:	e7a4      	b.n	8002be2 <_printf_i+0x16a>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	4632      	mov	r2, r6
 8002c9c:	4649      	mov	r1, r9
 8002c9e:	4640      	mov	r0, r8
 8002ca0:	47d0      	blx	sl
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	d09b      	beq.n	8002bde <_printf_i+0x166>
 8002ca6:	3501      	adds	r5, #1
 8002ca8:	68e3      	ldr	r3, [r4, #12]
 8002caa:	9903      	ldr	r1, [sp, #12]
 8002cac:	1a5b      	subs	r3, r3, r1
 8002cae:	42ab      	cmp	r3, r5
 8002cb0:	dcf2      	bgt.n	8002c98 <_printf_i+0x220>
 8002cb2:	e7eb      	b.n	8002c8c <_printf_i+0x214>
 8002cb4:	2500      	movs	r5, #0
 8002cb6:	f104 0619 	add.w	r6, r4, #25
 8002cba:	e7f5      	b.n	8002ca8 <_printf_i+0x230>
 8002cbc:	080030c1 	.word	0x080030c1
 8002cc0:	080030d2 	.word	0x080030d2

08002cc4 <_sbrk_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4d05      	ldr	r5, [pc, #20]	; (8002ce0 <_sbrk_r+0x1c>)
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4608      	mov	r0, r1
 8002cce:	602b      	str	r3, [r5, #0]
 8002cd0:	f7fd fc18 	bl	8000504 <_sbrk>
 8002cd4:	1c43      	adds	r3, r0, #1
 8002cd6:	d102      	bne.n	8002cde <_sbrk_r+0x1a>
 8002cd8:	682b      	ldr	r3, [r5, #0]
 8002cda:	b103      	cbz	r3, 8002cde <_sbrk_r+0x1a>
 8002cdc:	6023      	str	r3, [r4, #0]
 8002cde:	bd38      	pop	{r3, r4, r5, pc}
 8002ce0:	200000e8 	.word	0x200000e8

08002ce4 <__sread>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cec:	f000 f96e 	bl	8002fcc <_read_r>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	bfab      	itete	ge
 8002cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8002cf8:	181b      	addge	r3, r3, r0
 8002cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002cfe:	bfac      	ite	ge
 8002d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d02:	81a3      	strhlt	r3, [r4, #12]
 8002d04:	bd10      	pop	{r4, pc}

08002d06 <__swrite>:
 8002d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0a:	461f      	mov	r7, r3
 8002d0c:	898b      	ldrh	r3, [r1, #12]
 8002d0e:	4605      	mov	r5, r0
 8002d10:	05db      	lsls	r3, r3, #23
 8002d12:	460c      	mov	r4, r1
 8002d14:	4616      	mov	r6, r2
 8002d16:	d505      	bpl.n	8002d24 <__swrite+0x1e>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d20:	f000 f928 	bl	8002f74 <_lseek_r>
 8002d24:	89a3      	ldrh	r3, [r4, #12]
 8002d26:	4632      	mov	r2, r6
 8002d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d2c:	81a3      	strh	r3, [r4, #12]
 8002d2e:	4628      	mov	r0, r5
 8002d30:	463b      	mov	r3, r7
 8002d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3a:	f000 b869 	b.w	8002e10 <_write_r>

08002d3e <__sseek>:
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	460c      	mov	r4, r1
 8002d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d46:	f000 f915 	bl	8002f74 <_lseek_r>
 8002d4a:	1c43      	adds	r3, r0, #1
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	bf15      	itete	ne
 8002d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d5a:	81a3      	strheq	r3, [r4, #12]
 8002d5c:	bf18      	it	ne
 8002d5e:	81a3      	strhne	r3, [r4, #12]
 8002d60:	bd10      	pop	{r4, pc}

08002d62 <__sclose>:
 8002d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d66:	f000 b8d3 	b.w	8002f10 <_close_r>
	...

08002d6c <__swbuf_r>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	460e      	mov	r6, r1
 8002d70:	4614      	mov	r4, r2
 8002d72:	4605      	mov	r5, r0
 8002d74:	b118      	cbz	r0, 8002d7e <__swbuf_r+0x12>
 8002d76:	6983      	ldr	r3, [r0, #24]
 8002d78:	b90b      	cbnz	r3, 8002d7e <__swbuf_r+0x12>
 8002d7a:	f7ff fb03 	bl	8002384 <__sinit>
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <__swbuf_r+0x98>)
 8002d80:	429c      	cmp	r4, r3
 8002d82:	d12b      	bne.n	8002ddc <__swbuf_r+0x70>
 8002d84:	686c      	ldr	r4, [r5, #4]
 8002d86:	69a3      	ldr	r3, [r4, #24]
 8002d88:	60a3      	str	r3, [r4, #8]
 8002d8a:	89a3      	ldrh	r3, [r4, #12]
 8002d8c:	071a      	lsls	r2, r3, #28
 8002d8e:	d52f      	bpl.n	8002df0 <__swbuf_r+0x84>
 8002d90:	6923      	ldr	r3, [r4, #16]
 8002d92:	b36b      	cbz	r3, 8002df0 <__swbuf_r+0x84>
 8002d94:	6923      	ldr	r3, [r4, #16]
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	b2f6      	uxtb	r6, r6
 8002d9a:	1ac0      	subs	r0, r0, r3
 8002d9c:	6963      	ldr	r3, [r4, #20]
 8002d9e:	4637      	mov	r7, r6
 8002da0:	4283      	cmp	r3, r0
 8002da2:	dc04      	bgt.n	8002dae <__swbuf_r+0x42>
 8002da4:	4621      	mov	r1, r4
 8002da6:	4628      	mov	r0, r5
 8002da8:	f7ff fa58 	bl	800225c <_fflush_r>
 8002dac:	bb30      	cbnz	r0, 8002dfc <__swbuf_r+0x90>
 8002dae:	68a3      	ldr	r3, [r4, #8]
 8002db0:	3001      	adds	r0, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	60a3      	str	r3, [r4, #8]
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	6022      	str	r2, [r4, #0]
 8002dbc:	701e      	strb	r6, [r3, #0]
 8002dbe:	6963      	ldr	r3, [r4, #20]
 8002dc0:	4283      	cmp	r3, r0
 8002dc2:	d004      	beq.n	8002dce <__swbuf_r+0x62>
 8002dc4:	89a3      	ldrh	r3, [r4, #12]
 8002dc6:	07db      	lsls	r3, r3, #31
 8002dc8:	d506      	bpl.n	8002dd8 <__swbuf_r+0x6c>
 8002dca:	2e0a      	cmp	r6, #10
 8002dcc:	d104      	bne.n	8002dd8 <__swbuf_r+0x6c>
 8002dce:	4621      	mov	r1, r4
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f7ff fa43 	bl	800225c <_fflush_r>
 8002dd6:	b988      	cbnz	r0, 8002dfc <__swbuf_r+0x90>
 8002dd8:	4638      	mov	r0, r7
 8002dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <__swbuf_r+0x9c>)
 8002dde:	429c      	cmp	r4, r3
 8002de0:	d101      	bne.n	8002de6 <__swbuf_r+0x7a>
 8002de2:	68ac      	ldr	r4, [r5, #8]
 8002de4:	e7cf      	b.n	8002d86 <__swbuf_r+0x1a>
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <__swbuf_r+0xa0>)
 8002de8:	429c      	cmp	r4, r3
 8002dea:	bf08      	it	eq
 8002dec:	68ec      	ldreq	r4, [r5, #12]
 8002dee:	e7ca      	b.n	8002d86 <__swbuf_r+0x1a>
 8002df0:	4621      	mov	r1, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 f81e 	bl	8002e34 <__swsetup_r>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d0cb      	beq.n	8002d94 <__swbuf_r+0x28>
 8002dfc:	f04f 37ff 	mov.w	r7, #4294967295
 8002e00:	e7ea      	b.n	8002dd8 <__swbuf_r+0x6c>
 8002e02:	bf00      	nop
 8002e04:	08003070 	.word	0x08003070
 8002e08:	08003090 	.word	0x08003090
 8002e0c:	08003050 	.word	0x08003050

08002e10 <_write_r>:
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	4604      	mov	r4, r0
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4d05      	ldr	r5, [pc, #20]	; (8002e30 <_write_r+0x20>)
 8002e1c:	602a      	str	r2, [r5, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f7fd fb23 	bl	800046a <_write>
 8002e24:	1c43      	adds	r3, r0, #1
 8002e26:	d102      	bne.n	8002e2e <_write_r+0x1e>
 8002e28:	682b      	ldr	r3, [r5, #0]
 8002e2a:	b103      	cbz	r3, 8002e2e <_write_r+0x1e>
 8002e2c:	6023      	str	r3, [r4, #0]
 8002e2e:	bd38      	pop	{r3, r4, r5, pc}
 8002e30:	200000e8 	.word	0x200000e8

08002e34 <__swsetup_r>:
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <__swsetup_r+0xcc>)
 8002e36:	b570      	push	{r4, r5, r6, lr}
 8002e38:	681d      	ldr	r5, [r3, #0]
 8002e3a:	4606      	mov	r6, r0
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	b125      	cbz	r5, 8002e4a <__swsetup_r+0x16>
 8002e40:	69ab      	ldr	r3, [r5, #24]
 8002e42:	b913      	cbnz	r3, 8002e4a <__swsetup_r+0x16>
 8002e44:	4628      	mov	r0, r5
 8002e46:	f7ff fa9d 	bl	8002384 <__sinit>
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <__swsetup_r+0xd0>)
 8002e4c:	429c      	cmp	r4, r3
 8002e4e:	d10f      	bne.n	8002e70 <__swsetup_r+0x3c>
 8002e50:	686c      	ldr	r4, [r5, #4]
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e58:	0719      	lsls	r1, r3, #28
 8002e5a:	d42c      	bmi.n	8002eb6 <__swsetup_r+0x82>
 8002e5c:	06dd      	lsls	r5, r3, #27
 8002e5e:	d411      	bmi.n	8002e84 <__swsetup_r+0x50>
 8002e60:	2309      	movs	r3, #9
 8002e62:	6033      	str	r3, [r6, #0]
 8002e64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	81a3      	strh	r3, [r4, #12]
 8002e6e:	e03e      	b.n	8002eee <__swsetup_r+0xba>
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <__swsetup_r+0xd4>)
 8002e72:	429c      	cmp	r4, r3
 8002e74:	d101      	bne.n	8002e7a <__swsetup_r+0x46>
 8002e76:	68ac      	ldr	r4, [r5, #8]
 8002e78:	e7eb      	b.n	8002e52 <__swsetup_r+0x1e>
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <__swsetup_r+0xd8>)
 8002e7c:	429c      	cmp	r4, r3
 8002e7e:	bf08      	it	eq
 8002e80:	68ec      	ldreq	r4, [r5, #12]
 8002e82:	e7e6      	b.n	8002e52 <__swsetup_r+0x1e>
 8002e84:	0758      	lsls	r0, r3, #29
 8002e86:	d512      	bpl.n	8002eae <__swsetup_r+0x7a>
 8002e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e8a:	b141      	cbz	r1, 8002e9e <__swsetup_r+0x6a>
 8002e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e90:	4299      	cmp	r1, r3
 8002e92:	d002      	beq.n	8002e9a <__swsetup_r+0x66>
 8002e94:	4630      	mov	r0, r6
 8002e96:	f7ff fb81 	bl	800259c <_free_r>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8002e9e:	89a3      	ldrh	r3, [r4, #12]
 8002ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ea4:	81a3      	strh	r3, [r4, #12]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	6063      	str	r3, [r4, #4]
 8002eaa:	6923      	ldr	r3, [r4, #16]
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	6923      	ldr	r3, [r4, #16]
 8002eb8:	b94b      	cbnz	r3, 8002ece <__swsetup_r+0x9a>
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec4:	d003      	beq.n	8002ece <__swsetup_r+0x9a>
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f7ff fb1f 	bl	800250c <__smakebuf_r>
 8002ece:	89a0      	ldrh	r0, [r4, #12]
 8002ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ed4:	f010 0301 	ands.w	r3, r0, #1
 8002ed8:	d00a      	beq.n	8002ef0 <__swsetup_r+0xbc>
 8002eda:	2300      	movs	r3, #0
 8002edc:	60a3      	str	r3, [r4, #8]
 8002ede:	6963      	ldr	r3, [r4, #20]
 8002ee0:	425b      	negs	r3, r3
 8002ee2:	61a3      	str	r3, [r4, #24]
 8002ee4:	6923      	ldr	r3, [r4, #16]
 8002ee6:	b943      	cbnz	r3, 8002efa <__swsetup_r+0xc6>
 8002ee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002eec:	d1ba      	bne.n	8002e64 <__swsetup_r+0x30>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	0781      	lsls	r1, r0, #30
 8002ef2:	bf58      	it	pl
 8002ef4:	6963      	ldrpl	r3, [r4, #20]
 8002ef6:	60a3      	str	r3, [r4, #8]
 8002ef8:	e7f4      	b.n	8002ee4 <__swsetup_r+0xb0>
 8002efa:	2000      	movs	r0, #0
 8002efc:	e7f7      	b.n	8002eee <__swsetup_r+0xba>
 8002efe:	bf00      	nop
 8002f00:	2000000c 	.word	0x2000000c
 8002f04:	08003070 	.word	0x08003070
 8002f08:	08003090 	.word	0x08003090
 8002f0c:	08003050 	.word	0x08003050

08002f10 <_close_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	2300      	movs	r3, #0
 8002f14:	4d05      	ldr	r5, [pc, #20]	; (8002f2c <_close_r+0x1c>)
 8002f16:	4604      	mov	r4, r0
 8002f18:	4608      	mov	r0, r1
 8002f1a:	602b      	str	r3, [r5, #0]
 8002f1c:	f7fd fac1 	bl	80004a2 <_close>
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	d102      	bne.n	8002f2a <_close_r+0x1a>
 8002f24:	682b      	ldr	r3, [r5, #0]
 8002f26:	b103      	cbz	r3, 8002f2a <_close_r+0x1a>
 8002f28:	6023      	str	r3, [r4, #0]
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
 8002f2c:	200000e8 	.word	0x200000e8

08002f30 <_fstat_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	2300      	movs	r3, #0
 8002f34:	4d06      	ldr	r5, [pc, #24]	; (8002f50 <_fstat_r+0x20>)
 8002f36:	4604      	mov	r4, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	f7fd fabb 	bl	80004b8 <_fstat>
 8002f42:	1c43      	adds	r3, r0, #1
 8002f44:	d102      	bne.n	8002f4c <_fstat_r+0x1c>
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	b103      	cbz	r3, 8002f4c <_fstat_r+0x1c>
 8002f4a:	6023      	str	r3, [r4, #0]
 8002f4c:	bd38      	pop	{r3, r4, r5, pc}
 8002f4e:	bf00      	nop
 8002f50:	200000e8 	.word	0x200000e8

08002f54 <_isatty_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	2300      	movs	r3, #0
 8002f58:	4d05      	ldr	r5, [pc, #20]	; (8002f70 <_isatty_r+0x1c>)
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	602b      	str	r3, [r5, #0]
 8002f60:	f7fd fab9 	bl	80004d6 <_isatty>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_isatty_r+0x1a>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_isatty_r+0x1a>
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	200000e8 	.word	0x200000e8

08002f74 <_lseek_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	4604      	mov	r4, r0
 8002f78:	4608      	mov	r0, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	4d05      	ldr	r5, [pc, #20]	; (8002f94 <_lseek_r+0x20>)
 8002f80:	602a      	str	r2, [r5, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f7fd fab1 	bl	80004ea <_lseek>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_lseek_r+0x1e>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_lseek_r+0x1e>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	200000e8 	.word	0x200000e8

08002f98 <memchr>:
 8002f98:	4603      	mov	r3, r0
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	b2c9      	uxtb	r1, r1
 8002f9e:	4402      	add	r2, r0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	d101      	bne.n	8002faa <memchr+0x12>
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	e003      	b.n	8002fb2 <memchr+0x1a>
 8002faa:	7804      	ldrb	r4, [r0, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	428c      	cmp	r4, r1
 8002fb0:	d1f6      	bne.n	8002fa0 <memchr+0x8>
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <__malloc_lock>:
 8002fb4:	4801      	ldr	r0, [pc, #4]	; (8002fbc <__malloc_lock+0x8>)
 8002fb6:	f7ff ba83 	b.w	80024c0 <__retarget_lock_acquire_recursive>
 8002fba:	bf00      	nop
 8002fbc:	200000e0 	.word	0x200000e0

08002fc0 <__malloc_unlock>:
 8002fc0:	4801      	ldr	r0, [pc, #4]	; (8002fc8 <__malloc_unlock+0x8>)
 8002fc2:	f7ff ba7e 	b.w	80024c2 <__retarget_lock_release_recursive>
 8002fc6:	bf00      	nop
 8002fc8:	200000e0 	.word	0x200000e0

08002fcc <_read_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4604      	mov	r4, r0
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	4d05      	ldr	r5, [pc, #20]	; (8002fec <_read_r+0x20>)
 8002fd8:	602a      	str	r2, [r5, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f7fd fa28 	bl	8000430 <_read>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	d102      	bne.n	8002fea <_read_r+0x1e>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	b103      	cbz	r3, 8002fea <_read_r+0x1e>
 8002fe8:	6023      	str	r3, [r4, #0]
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
 8002fec:	200000e8 	.word	0x200000e8

08002ff0 <_init>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	bf00      	nop
 8002ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff6:	bc08      	pop	{r3}
 8002ff8:	469e      	mov	lr, r3
 8002ffa:	4770      	bx	lr

08002ffc <_fini>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr
