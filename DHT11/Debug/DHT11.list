
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08005da0  08005da0  00015da0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f4  080061f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080061f4  080061f4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061f4  080061f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080061fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  200001dc  080063d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080063d8  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbbd  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bd  00000000  00000000  0002bdc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002df80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6b2  00000000  00000000  0002f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4b8  00000000  00000000  00049a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094026  00000000  00000000  00056eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eaf00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a58  00000000  00000000  000eaf54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08005d84 	.word	0x08005d84

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08005d84 	.word	0x08005d84

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <DWT_Delay_Init+0x58>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <DWT_Delay_Init+0x58>)
 8000d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d8a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <DWT_Delay_Init+0x58>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <DWT_Delay_Init+0x58>)
 8000d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d96:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <DWT_Delay_Init+0x5c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <DWT_Delay_Init+0x5c>)
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <DWT_Delay_Init+0x5c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <DWT_Delay_Init+0x5c>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <DWT_Delay_Init+0x5c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000db6:	bf00      	nop
     __ASM volatile ("NOP");
 8000db8:	bf00      	nop
  __ASM volatile ("NOP");
 8000dba:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <DWT_Delay_Init+0x5c>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e000      	b.n	8000dca <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000dc8:	2301      	movs	r3, #1
  }
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000edf0 	.word	0xe000edf0
 8000dd8:	e0001000 	.word	0xe0001000

08000ddc <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <delay+0x40>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000dea:	f001 fda9 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <delay+0x44>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	0c9b      	lsrs	r3, r3, #18
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	fb02 f303 	mul.w	r3, r2, r3
 8000dfe:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e00:	bf00      	nop
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <delay+0x40>)
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1ad2      	subs	r2, r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d3f8      	bcc.n	8000e02 <delay+0x26>
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e0001000 	.word	0xe0001000
 8000e20:	431bde83 	.word	0x431bde83

08000e24 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2302      	movs	r3, #2
 8000e48:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4619      	mov	r1, r3
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 fea3 	bl	8001b9c <HAL_GPIO_Init>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4619      	mov	r1, r3
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fe86 	bl	8001b9c <HAL_GPIO_Init>
}
 8000e90:	bf00      	nop
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <DHT_Start>:


void DHT_Start (void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000e9c:	f7ff ff6e 	bl	8000d7c <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <DHT_Start+0x40>)
 8000ea4:	f7ff ffbe 	bl	8000e24 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <DHT_Start+0x40>)
 8000eae:	f001 f820 	bl	8001ef2 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000eb2:	f244 6050 	movw	r0, #18000	; 0x4650
 8000eb6:	f7ff ff91 	bl	8000ddc <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <DHT_Start+0x40>)
 8000ec0:	f001 f817 	bl	8001ef2 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000ec4:	2014      	movs	r0, #20
 8000ec6:	f7ff ff89 	bl	8000ddc <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DHT_Start+0x40>)
 8000ece:	f7ff ffc6 	bl	8000e5e <Set_Pin_Input>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40011800 	.word	0x40011800

08000edc <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000ee6:	2028      	movs	r0, #40	; 0x28
 8000ee8:	f7ff ff78 	bl	8000ddc <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000eec:	2101      	movs	r1, #1
 8000eee:	4811      	ldr	r0, [pc, #68]	; (8000f34 <DHT_Check_Response+0x58>)
 8000ef0:	f000 ffe8 	bl	8001ec4 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10e      	bne.n	8000f18 <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000efa:	2050      	movs	r0, #80	; 0x50
 8000efc:	f7ff ff6e 	bl	8000ddc <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000f00:	2101      	movs	r1, #1
 8000f02:	480c      	ldr	r0, [pc, #48]	; (8000f34 <DHT_Check_Response+0x58>)
 8000f04:	f000 ffde 	bl	8001ec4 <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <DHT_Check_Response+0x38>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	e001      	b.n	8000f18 <DHT_Check_Response+0x3c>
		else Response = -1;
 8000f14:	23ff      	movs	r3, #255	; 0xff
 8000f16:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f18:	bf00      	nop
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <DHT_Check_Response+0x58>)
 8000f1e:	f000 ffd1 	bl	8001ec4 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f8      	bne.n	8000f1a <DHT_Check_Response+0x3e>

	return Response;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40011800 	.word	0x40011800

08000f38 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	71bb      	strb	r3, [r7, #6]
 8000f42:	e037      	b.n	8000fb4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000f44:	bf00      	nop
 8000f46:	2101      	movs	r1, #1
 8000f48:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <DHT_Read+0x8c>)
 8000f4a:	f000 ffbb 	bl	8001ec4 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f8      	beq.n	8000f46 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000f54:	2028      	movs	r0, #40	; 0x28
 8000f56:	f7ff ff41 	bl	8000ddc <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <DHT_Read+0x8c>)
 8000f5e:	f000 ffb1 	bl	8001ec4 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10e      	bne.n	8000f86 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	b25a      	sxtb	r2, r3
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	e00b      	b.n	8000f9e <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	f1c3 0307 	rsb	r3, r3, #7
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	b25a      	sxtb	r2, r3
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000f9e:	bf00      	nop
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <DHT_Read+0x8c>)
 8000fa4:	f000 ff8e 	bl	8001ec4 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f8      	bne.n	8000fa0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	71bb      	strb	r3, [r7, #6]
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	d9c4      	bls.n	8000f44 <DHT_Read+0xc>
	}
	return i;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40011800 	.word	0x40011800

08000fc8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000fd0:	f7ff ff62 	bl	8000e98 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000fd4:	f7ff ff82 	bl	8000edc <DHT_Check_Response>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <DHT_GetData+0xa0>)
 8000fde:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000fe0:	f7ff ffaa 	bl	8000f38 <DHT_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <DHT_GetData+0xa4>)
 8000fea:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000fec:	f7ff ffa4 	bl	8000f38 <DHT_Read>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <DHT_GetData+0xa8>)
 8000ff6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000ff8:	f7ff ff9e 	bl	8000f38 <DHT_Read>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <DHT_GetData+0xac>)
 8001002:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001004:	f7ff ff98 	bl	8000f38 <DHT_Read>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <DHT_GetData+0xb0>)
 800100e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001010:	f7ff ff92 	bl	8000f38 <DHT_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <DHT_GetData+0xb4>)
 800101a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <DHT_GetData+0xb4>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <DHT_GetData+0xa4>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <DHT_GetData+0xa8>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4413      	add	r3, r2
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <DHT_GetData+0xac>)
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a10      	ldr	r2, [pc, #64]	; (8001078 <DHT_GetData+0xb0>)
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	4413      	add	r3, r2
 800103a:	4299      	cmp	r1, r3
 800103c:	d10f      	bne.n	800105e <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <DHT_GetData+0xac>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fe42 	bl	8000ccc <__aeabi_ui2f>
 8001048:	4602      	mov	r2, r0
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <DHT_GetData+0xa4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fe3a 	bl	8000ccc <__aeabi_ui2f>
 8001058:	4602      	mov	r2, r0
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200001f8 	.word	0x200001f8
 800106c:	20000208 	.word	0x20000208
 8001070:	2000020a 	.word	0x2000020a
 8001074:	20000209 	.word	0x20000209
 8001078:	2000020e 	.word	0x2000020e
 800107c:	2000020c 	.word	0x2000020c

08001080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_GPIO_Init+0x40>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <MX_GPIO_Init+0x40>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6193      	str	r3, [r2, #24]
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_GPIO_Init+0x40>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_GPIO_Init+0x40>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <MX_GPIO_Init+0x40>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <MX_GPIO_Init+0x40>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000

080010c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2C1_Init+0x50>)
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <MX_I2C1_Init+0x54>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_I2C1_Init+0x50>)
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <MX_I2C1_Init+0x58>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_I2C1_Init+0x50>)
 80010e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_I2C1_Init+0x50>)
 8001102:	f000 ff0f 	bl	8001f24 <HAL_I2C_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800110c:	f000 f8f3 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000210 	.word	0x20000210
 8001118:	40005400 	.word	0x40005400
 800111c:	000186a0 	.word	0x000186a0

08001120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a15      	ldr	r2, [pc, #84]	; (8001190 <HAL_I2C_MspInit+0x70>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d123      	bne.n	8001188 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_I2C_MspInit+0x74>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <HAL_I2C_MspInit+0x74>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_I2C_MspInit+0x74>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001158:	23c0      	movs	r3, #192	; 0xc0
 800115a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <HAL_I2C_MspInit+0x78>)
 800116c:	f000 fd16 	bl	8001b9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_I2C_MspInit+0x74>)
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_I2C_MspInit+0x74>)
 8001176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800117a:	61d3      	str	r3, [r2, #28]
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_I2C_MspInit+0x74>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40005400 	.word	0x40005400
 8001194:	40021000 	.word	0x40021000
 8001198:	40010c00 	.word	0x40010c00

0800119c <_write>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int _write(int file, unsigned char* p, int len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, p, len, 10);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	230a      	movs	r3, #10
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <_write+0x24>)
 80011b2:	f001 fc62 	bl	8002a7a <HAL_UART_Transmit>
   return len;
 80011b6:	687b      	ldr	r3, [r7, #4]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000274 	.word	0x20000274

080011c4 <main>:
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}

int main(void)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f000 fa4b 	bl	8001664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f84d 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f7ff ff55 	bl	8001080 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011d6:	f7ff ff75 	bl	80010c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80011da:	f000 f99f 	bl	800151c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  setvbuf(stdout, NULL, _IONBF, 0);
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <main+0x88>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6898      	ldr	r0, [r3, #8]
 80011e4:	2300      	movs	r3, #0
 80011e6:	2202      	movs	r2, #2
 80011e8:	2100      	movs	r1, #0
 80011ea:	f002 fc8f 	bl	8003b0c <setvbuf>
  printf("start program");
 80011ee:	4818      	ldr	r0, [pc, #96]	; (8001250 <main+0x8c>)
 80011f0:	f002 fc74 	bl	8003adc <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("DHT11 read start  ");
 80011f4:	4817      	ldr	r0, [pc, #92]	; (8001254 <main+0x90>)
 80011f6:	f002 fc71 	bl	8003adc <iprintf>
	  DHT_GetData(&DHT11_Data);
 80011fa:	4817      	ldr	r0, [pc, #92]	; (8001258 <main+0x94>)
 80011fc:	f7ff fee4 	bl	8000fc8 <DHT_GetData>
	  Temperature = DHT11_Data.Temperature;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <main+0x94>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <main+0x98>)
 8001206:	6013      	str	r3, [r2, #0]
	  Humidity = DHT11_Data.Humidity;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <main+0x94>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <main+0x9c>)
 800120e:	6013      	str	r3, [r2, #0]
	  printf("DHT11 read end  ");
 8001210:	4814      	ldr	r0, [pc, #80]	; (8001264 <main+0xa0>)
 8001212:	f002 fc63 	bl	8003adc <iprintf>
	  printf("temp:%f  humi:%f", Temperature, Humidity);
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <main+0x98>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f970 	bl	8000500 <__aeabi_f2d>
 8001220:	4604      	mov	r4, r0
 8001222:	460d      	mov	r5, r1
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <main+0x9c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f969 	bl	8000500 <__aeabi_f2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	e9cd 2300 	strd	r2, r3, [sp]
 8001236:	4622      	mov	r2, r4
 8001238:	462b      	mov	r3, r5
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <main+0xa4>)
 800123c:	f002 fc4e 	bl	8003adc <iprintf>
	  HAL_Delay(3000);
 8001240:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001244:	f000 fa70 	bl	8001728 <HAL_Delay>
	  printf("DHT11 read start  ");
 8001248:	e7d4      	b.n	80011f4 <main+0x30>
 800124a:	bf00      	nop
 800124c:	2000000c 	.word	0x2000000c
 8001250:	08005da0 	.word	0x08005da0
 8001254:	08005db0 	.word	0x08005db0
 8001258:	20000268 	.word	0x20000268
 800125c:	20000264 	.word	0x20000264
 8001260:	20000270 	.word	0x20000270
 8001264:	08005dc4 	.word	0x08005dc4
 8001268:	08005dd8 	.word	0x08005dd8

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b090      	sub	sp, #64	; 0x40
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0318 	add.w	r3, r7, #24
 8001276:	2228      	movs	r2, #40	; 0x28
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f001 ffc6 	bl	800320c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001296:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2302      	movs	r3, #2
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 ff79 	bl	80021ac <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012c0:	f000 f819 	bl	80012f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 f9e4 	bl	80026ac <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012ea:	f000 f804 	bl	80012f6 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3740      	adds	r7, #64	; 0x40
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fa:	b672      	cpsid	i
}
 80012fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fe:	e7fe      	b.n	80012fe <Error_Handler+0x8>

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_MspInit+0x5c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_MspInit+0x5c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	61d3      	str	r3, [r2, #28]
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_MspInit+0x60>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_MspInit+0x60>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000

08001364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <NMI_Handler+0x4>

0800136a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <MemManage_Handler+0x4>

08001376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler+0x4>

08001382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013aa:	f000 f9a1 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <USART1_IRQHandler+0x10>)
 80013ba:	f001 fbf1 	bl	8002ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000274 	.word	0x20000274

080013c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	return 1;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <_kill>:

int _kill(int pid, int sig)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013e0:	f001 feea 	bl	80031b8 <__errno>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2216      	movs	r2, #22
 80013e8:	601a      	str	r2, [r3, #0]
	return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_exit>:

void _exit (int status)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffe7 	bl	80013d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001408:	e7fe      	b.n	8001408 <_exit+0x12>

0800140a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e00a      	b.n	8001432 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800141c:	f3af 8000 	nop.w
 8001420:	4601      	mov	r1, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	60ba      	str	r2, [r7, #8]
 8001428:	b2ca      	uxtb	r2, r1
 800142a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	429a      	cmp	r2, r3
 8001438:	dbf0      	blt.n	800141c <_read+0x12>
	}

return len;
 800143a:	687b      	ldr	r3, [r7, #4]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	return -1;
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146a:	605a      	str	r2, [r3, #4]
	return 0;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <_isatty>:

int _isatty(int file)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	return 1;
 8001480:	2301      	movs	r3, #1
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
	return 0;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f001 fe70 	bl	80031b8 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000c000 	.word	0x2000c000
 8001504:	00000400 	.word	0x00000400
 8001508:	200001fc 	.word	0x200001fc
 800150c:	200002c8 	.word	0x200002c8

08001510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART1_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001554:	f001 fa44 	bl	80029e0 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f7ff feca 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000274 	.word	0x20000274
 800156c:	40013800 	.word	0x40013800

08001570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a20      	ldr	r2, [pc, #128]	; (800160c <HAL_UART_MspInit+0x9c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d139      	bne.n	8001604 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_UART_MspInit+0xa0>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_UART_MspInit+0xa0>)
 8001596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_UART_MspInit+0xa0>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_UART_MspInit+0xa0>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a18      	ldr	r2, [pc, #96]	; (8001610 <HAL_UART_MspInit+0xa0>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_UART_MspInit+0xa0>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <HAL_UART_MspInit+0xa4>)
 80015d6:	f000 fae1 	bl	8001b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4809      	ldr	r0, [pc, #36]	; (8001614 <HAL_UART_MspInit+0xa4>)
 80015f0:	f000 fad4 	bl	8001b9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	2025      	movs	r0, #37	; 0x25
 80015fa:	f000 f990 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015fe:	2025      	movs	r0, #37	; 0x25
 8001600:	f000 f9a9 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40013800 	.word	0x40013800
 8001610:	40021000 	.word	0x40021000
 8001614:	40010800 	.word	0x40010800

08001618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001618:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800161a:	e003      	b.n	8001624 <LoopCopyDataInit>

0800161c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800161e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001620:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001622:	3104      	adds	r1, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001628:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800162a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800162c:	d3f6      	bcc.n	800161c <CopyDataInit>
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001630:	e002      	b.n	8001638 <LoopFillZerobss>

08001632 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001634:	f842 3b04 	str.w	r3, [r2], #4

08001638 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800163a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800163c:	d3f9      	bcc.n	8001632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800163e:	f7ff ff67 	bl	8001510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f001 fdbf 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001646:	f7ff fdbd 	bl	80011c4 <main>
  bx lr
 800164a:	4770      	bx	lr
  ldr r3, =_sidata
 800164c:	080061fc 	.word	0x080061fc
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001654:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001658:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800165c:	200002c8 	.word	0x200002c8

08001660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC1_2_IRQHandler>
	...

08001664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_Init+0x28>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_Init+0x28>)
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001674:	2003      	movs	r0, #3
 8001676:	f000 f947 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167a:	2000      	movs	r0, #0
 800167c:	f000 f808 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001680:	f7ff fe3e 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40022000 	.word	0x40022000

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x54>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x58>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f95f 	bl	8001972 <HAL_SYSTICK_Config>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00e      	b.n	80016dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d80a      	bhi.n	80016da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 f927 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_InitTick+0x5c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_IncTick+0x1c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_IncTick+0x20>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a03      	ldr	r2, [pc, #12]	; (8001710 <HAL_IncTick+0x20>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000008 	.word	0x20000008
 8001710:	200002b4 	.word	0x200002b4

08001714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b02      	ldr	r3, [pc, #8]	; (8001724 <HAL_GetTick+0x10>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	200002b4 	.word	0x200002b4

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff fff0 	bl	8001714 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffe0 	bl	8001714 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800179c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60d3      	str	r3, [r2, #12]
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4906      	ldr	r1, [pc, #24]	; (8001808 <__NVIC_EnableIRQ+0x34>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	; (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff90 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff2d 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff42 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff90 	bl	8001860 <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5f 	bl	800180c <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff35 	bl	80017d4 <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d005      	beq.n	80019ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2204      	movs	r2, #4
 80019a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e0d6      	b.n	8001b5c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 020e 	bic.w	r2, r2, #14
 80019bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b64      	ldr	r3, [pc, #400]	; (8001b68 <HAL_DMA_Abort_IT+0x1dc>)
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d958      	bls.n	8001a8c <HAL_DMA_Abort_IT+0x100>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a63      	ldr	r2, [pc, #396]	; (8001b6c <HAL_DMA_Abort_IT+0x1e0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04f      	beq.n	8001a84 <HAL_DMA_Abort_IT+0xf8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a61      	ldr	r2, [pc, #388]	; (8001b70 <HAL_DMA_Abort_IT+0x1e4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d048      	beq.n	8001a80 <HAL_DMA_Abort_IT+0xf4>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a60      	ldr	r2, [pc, #384]	; (8001b74 <HAL_DMA_Abort_IT+0x1e8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d040      	beq.n	8001a7a <HAL_DMA_Abort_IT+0xee>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5e      	ldr	r2, [pc, #376]	; (8001b78 <HAL_DMA_Abort_IT+0x1ec>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d038      	beq.n	8001a74 <HAL_DMA_Abort_IT+0xe8>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a5d      	ldr	r2, [pc, #372]	; (8001b7c <HAL_DMA_Abort_IT+0x1f0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d030      	beq.n	8001a6e <HAL_DMA_Abort_IT+0xe2>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a5b      	ldr	r2, [pc, #364]	; (8001b80 <HAL_DMA_Abort_IT+0x1f4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d028      	beq.n	8001a68 <HAL_DMA_Abort_IT+0xdc>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a53      	ldr	r2, [pc, #332]	; (8001b68 <HAL_DMA_Abort_IT+0x1dc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d020      	beq.n	8001a62 <HAL_DMA_Abort_IT+0xd6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_DMA_Abort_IT+0x1f8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_DMA_Abort_IT+0xd2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_DMA_Abort_IT+0x1fc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d012      	beq.n	8001a5a <HAL_DMA_Abort_IT+0xce>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a54      	ldr	r2, [pc, #336]	; (8001b8c <HAL_DMA_Abort_IT+0x200>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00a      	beq.n	8001a54 <HAL_DMA_Abort_IT+0xc8>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a53      	ldr	r2, [pc, #332]	; (8001b90 <HAL_DMA_Abort_IT+0x204>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d102      	bne.n	8001a4e <HAL_DMA_Abort_IT+0xc2>
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	e01b      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a52:	e018      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a58:	e015      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a5a:	2310      	movs	r3, #16
 8001a5c:	e013      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e011      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a66:	e00e      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a6c:	e00b      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a72:	e008      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	e005      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7e:	e002      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a80:	2310      	movs	r3, #16
 8001a82:	e000      	b.n	8001a86 <HAL_DMA_Abort_IT+0xfa>
 8001a84:	2301      	movs	r3, #1
 8001a86:	4a43      	ldr	r2, [pc, #268]	; (8001b94 <HAL_DMA_Abort_IT+0x208>)
 8001a88:	6053      	str	r3, [r2, #4]
 8001a8a:	e057      	b.n	8001b3c <HAL_DMA_Abort_IT+0x1b0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a36      	ldr	r2, [pc, #216]	; (8001b6c <HAL_DMA_Abort_IT+0x1e0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d04f      	beq.n	8001b36 <HAL_DMA_Abort_IT+0x1aa>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a35      	ldr	r2, [pc, #212]	; (8001b70 <HAL_DMA_Abort_IT+0x1e4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d048      	beq.n	8001b32 <HAL_DMA_Abort_IT+0x1a6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <HAL_DMA_Abort_IT+0x1e8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d040      	beq.n	8001b2c <HAL_DMA_Abort_IT+0x1a0>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <HAL_DMA_Abort_IT+0x1ec>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d038      	beq.n	8001b26 <HAL_DMA_Abort_IT+0x19a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <HAL_DMA_Abort_IT+0x1f0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d030      	beq.n	8001b20 <HAL_DMA_Abort_IT+0x194>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <HAL_DMA_Abort_IT+0x1f4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d028      	beq.n	8001b1a <HAL_DMA_Abort_IT+0x18e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a26      	ldr	r2, [pc, #152]	; (8001b68 <HAL_DMA_Abort_IT+0x1dc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d020      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x188>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <HAL_DMA_Abort_IT+0x1f8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d019      	beq.n	8001b10 <HAL_DMA_Abort_IT+0x184>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <HAL_DMA_Abort_IT+0x1fc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d012      	beq.n	8001b0c <HAL_DMA_Abort_IT+0x180>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <HAL_DMA_Abort_IT+0x200>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00a      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x17a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <HAL_DMA_Abort_IT+0x204>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d102      	bne.n	8001b00 <HAL_DMA_Abort_IT+0x174>
 8001afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afe:	e01b      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b04:	e018      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	e015      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	e013      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e011      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b18:	e00e      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b1e:	e00b      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b24:	e008      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2a:	e005      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b30:	e002      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b32:	2310      	movs	r3, #16
 8001b34:	e000      	b.n	8001b38 <HAL_DMA_Abort_IT+0x1ac>
 8001b36:	2301      	movs	r3, #1
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_DMA_Abort_IT+0x20c>)
 8001b3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	4798      	blx	r3
    } 
  }
  return status;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40020080 	.word	0x40020080
 8001b6c:	40020008 	.word	0x40020008
 8001b70:	4002001c 	.word	0x4002001c
 8001b74:	40020030 	.word	0x40020030
 8001b78:	40020044 	.word	0x40020044
 8001b7c:	40020058 	.word	0x40020058
 8001b80:	4002006c 	.word	0x4002006c
 8001b84:	40020408 	.word	0x40020408
 8001b88:	4002041c 	.word	0x4002041c
 8001b8c:	40020430 	.word	0x40020430
 8001b90:	40020444 	.word	0x40020444
 8001b94:	40020400 	.word	0x40020400
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b08b      	sub	sp, #44	; 0x2c
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	e179      	b.n	8001ea4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8168 	bne.w	8001e9e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4aa0      	ldr	r2, [pc, #640]	; (8001e54 <HAL_GPIO_Init+0x2b8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d05e      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001bd8:	4a9e      	ldr	r2, [pc, #632]	; (8001e54 <HAL_GPIO_Init+0x2b8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d875      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001bde:	4a9e      	ldr	r2, [pc, #632]	; (8001e58 <HAL_GPIO_Init+0x2bc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d058      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001be4:	4a9c      	ldr	r2, [pc, #624]	; (8001e58 <HAL_GPIO_Init+0x2bc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d86f      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001bea:	4a9c      	ldr	r2, [pc, #624]	; (8001e5c <HAL_GPIO_Init+0x2c0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d052      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001bf0:	4a9a      	ldr	r2, [pc, #616]	; (8001e5c <HAL_GPIO_Init+0x2c0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d869      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001bf6:	4a9a      	ldr	r2, [pc, #616]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d04c      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001bfc:	4a98      	ldr	r2, [pc, #608]	; (8001e60 <HAL_GPIO_Init+0x2c4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d863      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001c02:	4a98      	ldr	r2, [pc, #608]	; (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d046      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
 8001c08:	4a96      	ldr	r2, [pc, #600]	; (8001e64 <HAL_GPIO_Init+0x2c8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d85d      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001c0e:	2b12      	cmp	r3, #18
 8001c10:	d82a      	bhi.n	8001c68 <HAL_GPIO_Init+0xcc>
 8001c12:	2b12      	cmp	r3, #18
 8001c14:	d859      	bhi.n	8001cca <HAL_GPIO_Init+0x12e>
 8001c16:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <HAL_GPIO_Init+0x80>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c97 	.word	0x08001c97
 8001c20:	08001c71 	.word	0x08001c71
 8001c24:	08001c83 	.word	0x08001c83
 8001c28:	08001cc5 	.word	0x08001cc5
 8001c2c:	08001ccb 	.word	0x08001ccb
 8001c30:	08001ccb 	.word	0x08001ccb
 8001c34:	08001ccb 	.word	0x08001ccb
 8001c38:	08001ccb 	.word	0x08001ccb
 8001c3c:	08001ccb 	.word	0x08001ccb
 8001c40:	08001ccb 	.word	0x08001ccb
 8001c44:	08001ccb 	.word	0x08001ccb
 8001c48:	08001ccb 	.word	0x08001ccb
 8001c4c:	08001ccb 	.word	0x08001ccb
 8001c50:	08001ccb 	.word	0x08001ccb
 8001c54:	08001ccb 	.word	0x08001ccb
 8001c58:	08001ccb 	.word	0x08001ccb
 8001c5c:	08001ccb 	.word	0x08001ccb
 8001c60:	08001c79 	.word	0x08001c79
 8001c64:	08001c8d 	.word	0x08001c8d
 8001c68:	4a7f      	ldr	r2, [pc, #508]	; (8001e68 <HAL_GPIO_Init+0x2cc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c6e:	e02c      	b.n	8001cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e029      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	623b      	str	r3, [r7, #32]
          break;
 8001c80:	e024      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	3308      	adds	r3, #8
 8001c88:	623b      	str	r3, [r7, #32]
          break;
 8001c8a:	e01f      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	330c      	adds	r3, #12
 8001c92:	623b      	str	r3, [r7, #32]
          break;
 8001c94:	e01a      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e013      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cac:	2308      	movs	r3, #8
 8001cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	611a      	str	r2, [r3, #16]
          break;
 8001cb6:	e009      	b.n	8001ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	615a      	str	r2, [r3, #20]
          break;
 8001cc2:	e003      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
          break;
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x130>
          break;
 8001cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2bff      	cmp	r3, #255	; 0xff
 8001cd0:	d801      	bhi.n	8001cd6 <HAL_GPIO_Init+0x13a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	e001      	b.n	8001cda <HAL_GPIO_Init+0x13e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2bff      	cmp	r3, #255	; 0xff
 8001ce0:	d802      	bhi.n	8001ce8 <HAL_GPIO_Init+0x14c>
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x152>
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	3b08      	subs	r3, #8
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	210f      	movs	r1, #15
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	6a39      	ldr	r1, [r7, #32]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80c1 	beq.w	8001e9e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6193      	str	r3, [r2, #24]
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_GPIO_Init+0x2d0>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d34:	4a4e      	ldr	r2, [pc, #312]	; (8001e70 <HAL_GPIO_Init+0x2d4>)
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a46      	ldr	r2, [pc, #280]	; (8001e74 <HAL_GPIO_Init+0x2d8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d01f      	beq.n	8001da0 <HAL_GPIO_Init+0x204>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a45      	ldr	r2, [pc, #276]	; (8001e78 <HAL_GPIO_Init+0x2dc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d019      	beq.n	8001d9c <HAL_GPIO_Init+0x200>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a44      	ldr	r2, [pc, #272]	; (8001e7c <HAL_GPIO_Init+0x2e0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <HAL_GPIO_Init+0x1fc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a43      	ldr	r2, [pc, #268]	; (8001e80 <HAL_GPIO_Init+0x2e4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00d      	beq.n	8001d94 <HAL_GPIO_Init+0x1f8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a42      	ldr	r2, [pc, #264]	; (8001e84 <HAL_GPIO_Init+0x2e8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d007      	beq.n	8001d90 <HAL_GPIO_Init+0x1f4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a41      	ldr	r2, [pc, #260]	; (8001e88 <HAL_GPIO_Init+0x2ec>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_GPIO_Init+0x1f0>
 8001d88:	2305      	movs	r3, #5
 8001d8a:	e00a      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d8c:	2306      	movs	r3, #6
 8001d8e:	e008      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d90:	2304      	movs	r3, #4
 8001d92:	e006      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e004      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_GPIO_Init+0x206>
 8001da0:	2300      	movs	r3, #0
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	f002 0203 	and.w	r2, r2, #3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4093      	lsls	r3, r2
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001db2:	492f      	ldr	r1, [pc, #188]	; (8001e70 <HAL_GPIO_Init+0x2d4>)
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	492e      	ldr	r1, [pc, #184]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dda:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	492a      	ldr	r1, [pc, #168]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4924      	ldr	r1, [pc, #144]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4920      	ldr	r1, [pc, #128]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	491a      	ldr	r1, [pc, #104]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4916      	ldr	r1, [pc, #88]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d025      	beq.n	8001e90 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4910      	ldr	r1, [pc, #64]	; (8001e8c <HAL_GPIO_Init+0x2f0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60cb      	str	r3, [r1, #12]
 8001e50:	e025      	b.n	8001e9e <HAL_GPIO_Init+0x302>
 8001e52:	bf00      	nop
 8001e54:	10320000 	.word	0x10320000
 8001e58:	10310000 	.word	0x10310000
 8001e5c:	10220000 	.word	0x10220000
 8001e60:	10210000 	.word	0x10210000
 8001e64:	10120000 	.word	0x10120000
 8001e68:	10110000 	.word	0x10110000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40010800 	.word	0x40010800
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	40011400 	.word	0x40011400
 8001e84:	40011800 	.word	0x40011800
 8001e88:	40011c00 	.word	0x40011c00
 8001e8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	4909      	ldr	r1, [pc, #36]	; (8001ec0 <HAL_GPIO_Init+0x324>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f47f ae7e 	bne.w	8001bb0 <HAL_GPIO_Init+0x14>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	372c      	adds	r7, #44	; 0x2c
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	40010400 	.word	0x40010400

08001ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e001      	b.n	8001ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	807b      	strh	r3, [r7, #2]
 8001efe:	4613      	mov	r3, r2
 8001f00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f02:	787b      	ldrb	r3, [r7, #1]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f08:	887a      	ldrh	r2, [r7, #2]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f0e:	e003      	b.n	8001f18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	041a      	lsls	r2, r3, #16
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	611a      	str	r2, [r3, #16]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e12b      	b.n	800218e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff f8e8 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2224      	movs	r2, #36	; 0x24
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f88:	f000 fce4 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8001f8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4a81      	ldr	r2, [pc, #516]	; (8002198 <HAL_I2C_Init+0x274>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d807      	bhi.n	8001fa8 <HAL_I2C_Init+0x84>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a80      	ldr	r2, [pc, #512]	; (800219c <HAL_I2C_Init+0x278>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	bf94      	ite	ls
 8001fa0:	2301      	movls	r3, #1
 8001fa2:	2300      	movhi	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e006      	b.n	8001fb6 <HAL_I2C_Init+0x92>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a7d      	ldr	r2, [pc, #500]	; (80021a0 <HAL_I2C_Init+0x27c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0e7      	b.n	800218e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4a78      	ldr	r2, [pc, #480]	; (80021a4 <HAL_I2C_Init+0x280>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0c9b      	lsrs	r3, r3, #18
 8001fc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a6a      	ldr	r2, [pc, #424]	; (8002198 <HAL_I2C_Init+0x274>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d802      	bhi.n	8001ff8 <HAL_I2C_Init+0xd4>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	e009      	b.n	800200c <HAL_I2C_Init+0xe8>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	4a69      	ldr	r2, [pc, #420]	; (80021a8 <HAL_I2C_Init+0x284>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	3301      	adds	r3, #1
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	430b      	orrs	r3, r1
 8002012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800201e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	495c      	ldr	r1, [pc, #368]	; (8002198 <HAL_I2C_Init+0x274>)
 8002028:	428b      	cmp	r3, r1
 800202a:	d819      	bhi.n	8002060 <HAL_I2C_Init+0x13c>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e59      	subs	r1, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fbb1 f3f3 	udiv	r3, r1, r3
 800203a:	1c59      	adds	r1, r3, #1
 800203c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002040:	400b      	ands	r3, r1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_I2C_Init+0x138>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1e59      	subs	r1, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fbb1 f3f3 	udiv	r3, r1, r3
 8002054:	3301      	adds	r3, #1
 8002056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205a:	e051      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 800205c:	2304      	movs	r3, #4
 800205e:	e04f      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d111      	bne.n	800208c <HAL_I2C_Init+0x168>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e012      	b.n	80020b2 <HAL_I2C_Init+0x18e>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1e58      	subs	r0, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	0099      	lsls	r1, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Init+0x196>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e022      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10e      	bne.n	80020e0 <HAL_I2C_Init+0x1bc>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1e58      	subs	r0, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6859      	ldr	r1, [r3, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	440b      	add	r3, r1
 80020d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020de:	e00f      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e58      	subs	r0, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	0099      	lsls	r1, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	6809      	ldr	r1, [r1, #0]
 8002104:	4313      	orrs	r3, r2
 8002106:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800212e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6911      	ldr	r1, [r2, #16]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68d2      	ldr	r2, [r2, #12]
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	430b      	orrs	r3, r1
 8002142:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	000186a0 	.word	0x000186a0
 800219c:	001e847f 	.word	0x001e847f
 80021a0:	003d08ff 	.word	0x003d08ff
 80021a4:	431bde83 	.word	0x431bde83
 80021a8:	10624dd3 	.word	0x10624dd3

080021ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e26c      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8087 	beq.w	80022da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021cc:	4b92      	ldr	r3, [pc, #584]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d00c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d8:	4b8f      	ldr	r3, [pc, #572]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d112      	bne.n	800220a <HAL_RCC_OscConfig+0x5e>
 80021e4:	4b8c      	ldr	r3, [pc, #560]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f0:	d10b      	bne.n	800220a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f2:	4b89      	ldr	r3, [pc, #548]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d06c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x12c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d168      	bne.n	80022d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e246      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x76>
 8002214:	4b80      	ldr	r3, [pc, #512]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a7f      	ldr	r2, [pc, #508]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800221a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e02e      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x98>
 800222a:	4b7b      	ldr	r3, [pc, #492]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a7a      	ldr	r2, [pc, #488]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b78      	ldr	r3, [pc, #480]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a77      	ldr	r2, [pc, #476]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e01d      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0xbc>
 800224e:	4b72      	ldr	r3, [pc, #456]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a71      	ldr	r2, [pc, #452]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b6f      	ldr	r3, [pc, #444]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6e      	ldr	r2, [pc, #440]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0xd4>
 8002268:	4b6b      	ldr	r3, [pc, #428]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a6a      	ldr	r2, [pc, #424]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800226e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b68      	ldr	r3, [pc, #416]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a67      	ldr	r2, [pc, #412]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d013      	beq.n	80022b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fa44 	bl	8001714 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff fa40 	bl	8001714 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1fa      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xe4>
 80022ae:	e014      	b.n	80022da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fa30 	bl	8001714 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff fa2c 	bl	8001714 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1e6      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x10c>
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d063      	beq.n	80023ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e6:	4b4c      	ldr	r3, [pc, #304]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022f2:	4b49      	ldr	r3, [pc, #292]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d11c      	bne.n	8002338 <HAL_RCC_OscConfig+0x18c>
 80022fe:	4b46      	ldr	r3, [pc, #280]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d116      	bne.n	8002338 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	4b43      	ldr	r3, [pc, #268]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x176>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e1ba      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4939      	ldr	r1, [pc, #228]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	e03a      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d020      	beq.n	8002382 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x270>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff f9e5 	bl	8001714 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234e:	f7ff f9e1 	bl	8001714 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e19b      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4927      	ldr	r1, [pc, #156]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
 8002380:	e015      	b.n	80023ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_RCC_OscConfig+0x270>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff f9c4 	bl	8001714 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002390:	f7ff f9c0 	bl	8001714 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e17a      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d03a      	beq.n	8002430 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d019      	beq.n	80023f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7ff f9a4 	bl	8001714 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7ff f9a0 	bl	8001714 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e15a      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f000 fad8 	bl	80029a4 <RCC_Delay>
 80023f4:	e01c      	b.n	8002430 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_RCC_OscConfig+0x274>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fc:	f7ff f98a 	bl	8001714 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002402:	e00f      	b.n	8002424 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7ff f986 	bl	8001714 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d908      	bls.n	8002424 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e140      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	42420000 	.word	0x42420000
 8002420:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	4b9e      	ldr	r3, [pc, #632]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e9      	bne.n	8002404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a6 	beq.w	800258a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b97      	ldr	r3, [pc, #604]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b94      	ldr	r3, [pc, #592]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a93      	ldr	r2, [pc, #588]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b91      	ldr	r3, [pc, #580]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b8e      	ldr	r3, [pc, #568]	; (80026a4 <HAL_RCC_OscConfig+0x4f8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002476:	4b8b      	ldr	r3, [pc, #556]	; (80026a4 <HAL_RCC_OscConfig+0x4f8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a8a      	ldr	r2, [pc, #552]	; (80026a4 <HAL_RCC_OscConfig+0x4f8>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7ff f947 	bl	8001714 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7ff f943 	bl	8001714 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	; 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0fd      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_RCC_OscConfig+0x4f8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x312>
 80024b0:	4b7b      	ldr	r3, [pc, #492]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4a7a      	ldr	r2, [pc, #488]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6213      	str	r3, [r2, #32]
 80024bc:	e02d      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x334>
 80024c6:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a75      	ldr	r2, [pc, #468]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	e01c      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x356>
 80024e8:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a6c      	ldr	r2, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6213      	str	r3, [r2, #32]
 80024f4:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a69      	ldr	r2, [pc, #420]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0x36e>
 8002502:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a66      	ldr	r2, [pc, #408]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6213      	str	r3, [r2, #32]
 800250e:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a63      	ldr	r2, [pc, #396]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d015      	beq.n	800254e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7ff f8f7 	bl	8001714 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7ff f8f3 	bl	8001714 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0ab      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ee      	beq.n	800252a <HAL_RCC_OscConfig+0x37e>
 800254c:	e014      	b.n	8002578 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7ff f8e1 	bl	8001714 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7ff f8dd 	bl	8001714 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e095      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ee      	bne.n	8002556 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257e:	4b48      	ldr	r3, [pc, #288]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a47      	ldr	r2, [pc, #284]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002588:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8081 	beq.w	8002696 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d061      	beq.n	8002664 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d146      	bne.n	8002636 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <HAL_RCC_OscConfig+0x4fc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7ff f8b1 	bl	8001714 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b6:	f7ff f8ad 	bl	8001714 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e067      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	492d      	ldr	r1, [pc, #180]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a19      	ldr	r1, [r3, #32]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	430b      	orrs	r3, r1
 8002602:	4927      	ldr	r1, [pc, #156]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <HAL_RCC_OscConfig+0x4fc>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff f881 	bl	8001714 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7ff f87d 	bl	8001714 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e037      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x46a>
 8002634:	e02f      	b.n	8002696 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_RCC_OscConfig+0x4fc>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff f86a 	bl	8001714 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7ff f866 	bl	8001714 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e020      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x498>
 8002662:	e018      	b.n	8002696 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e013      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x4f4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	429a      	cmp	r2, r3
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40007000 	.word	0x40007000
 80026a8:	42420060 	.word	0x42420060

080026ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0d0      	b.n	8002862 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d910      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b67      	ldr	r3, [pc, #412]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 0207 	bic.w	r2, r3, #7
 80026d6:	4965      	ldr	r1, [pc, #404]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b63      	ldr	r3, [pc, #396]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0b8      	b.n	8002862 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d020      	beq.n	800273e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002708:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a58      	ldr	r2, [pc, #352]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002712:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a52      	ldr	r2, [pc, #328]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800272a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272c:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	494d      	ldr	r1, [pc, #308]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d040      	beq.n	80027cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d115      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e07f      	b.n	8002862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b41      	ldr	r3, [pc, #260]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e073      	b.n	8002862 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e06b      	b.n	8002862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b39      	ldr	r3, [pc, #228]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4936      	ldr	r1, [pc, #216]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800279c:	f7fe ffba 	bl	8001714 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7fe ffb6 	bl	8001714 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e053      	b.n	8002862 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d210      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 0207 	bic.w	r2, r3, #7
 80027e2:	4922      	ldr	r1, [pc, #136]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e032      	b.n	8002862 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4916      	ldr	r1, [pc, #88]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	490e      	ldr	r1, [pc, #56]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800283a:	f000 f821 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 800283e:	4602      	mov	r2, r0
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	490a      	ldr	r1, [pc, #40]	; (8002874 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	5ccb      	ldrb	r3, [r1, r3]
 800284e:	fa22 f303 	lsr.w	r3, r2, r3
 8002852:	4a09      	ldr	r2, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1cc>)
 8002854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_ClockConfig+0x1d0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe ff18 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40022000 	.word	0x40022000
 8002870:	40021000 	.word	0x40021000
 8002874:	08005dfc 	.word	0x08005dfc
 8002878:	20000000 	.word	0x20000000
 800287c:	20000004 	.word	0x20000004

08002880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002880:	b490      	push	{r4, r7}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002888:	1d3c      	adds	r4, r7, #4
 800288a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800288c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002890:	f240 2301 	movw	r3, #513	; 0x201
 8002894:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x40>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x46>
 80028be:	e02d      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c2:	623b      	str	r3, [r7, #32]
      break;
 80028c4:	e02d      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028d2:	4413      	add	r3, r2
 80028d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	0c5b      	lsrs	r3, r3, #17
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028f2:	4413      	add	r3, r2
 80028f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	4a0e      	ldr	r2, [pc, #56]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fe:	fb02 f203 	mul.w	r2, r2, r3
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
 800290a:	e004      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	623b      	str	r3, [r7, #32]
      break;
 800291a:	e002      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb8>)
 800291e:	623b      	str	r3, [r7, #32]
      break;
 8002920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002922:	6a3b      	ldr	r3, [r7, #32]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3728      	adds	r7, #40	; 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bc90      	pop	{r4, r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	08005dec 	.word	0x08005dec
 8002934:	40021000 	.word	0x40021000
 8002938:	007a1200 	.word	0x007a1200
 800293c:	003d0900 	.word	0x003d0900

08002940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b02      	ldr	r3, [pc, #8]	; (8002950 <HAL_RCC_GetHCLKFreq+0x10>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	20000000 	.word	0x20000000

08002954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002958:	f7ff fff2 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4903      	ldr	r1, [pc, #12]	; (8002978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	08005e0c 	.word	0x08005e0c

0800297c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002980:	f7ff ffde 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	0adb      	lsrs	r3, r3, #11
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4903      	ldr	r1, [pc, #12]	; (80029a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	08005e0c 	.word	0x08005e0c

080029a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <RCC_Delay+0x34>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <RCC_Delay+0x38>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0a5b      	lsrs	r3, r3, #9
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029c0:	bf00      	nop
  }
  while (Delay --);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	60fa      	str	r2, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f9      	bne.n	80029c0 <RCC_Delay+0x1c>
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	20000000 	.word	0x20000000
 80029dc:	10624dd3 	.word	0x10624dd3

080029e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e03f      	b.n	8002a72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fdb2 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2224      	movs	r2, #36	; 0x24
 8002a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fb39 	bl	800309c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b08a      	sub	sp, #40	; 0x28
 8002a7e:	af02      	add	r7, sp, #8
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d17c      	bne.n	8002b94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_UART_Transmit+0x2c>
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e075      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_UART_Transmit+0x3e>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e06e      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2221      	movs	r2, #33	; 0x21
 8002aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ace:	f7fe fe21 	bl	8001714 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae8:	d108      	bne.n	8002afc <HAL_UART_Transmit+0x82>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e003      	b.n	8002b04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002b0c:	e02a      	b.n	8002b64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f95c 	bl	8002dd6 <UART_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e036      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	3302      	adds	r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e007      	b.n	8002b56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1cf      	bne.n	8002b0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f92c 	bl	8002dd6 <UART_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e006      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x52>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9d5 	bl	8002f9a <UART_Receive_IT>
      return;
 8002bf0:	e0d0      	b.n	8002d94 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80b0 	beq.w	8002d5a <HAL_UART_IRQHandler+0x1ba>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_UART_IRQHandler+0x70>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80a5 	beq.w	8002d5a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_UART_IRQHandler+0x90>
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_UART_IRQHandler+0xb0>
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	f043 0202 	orr.w	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_UART_IRQHandler+0xd0>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	f043 0204 	orr.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00f      	beq.n	8002c9a <HAL_UART_IRQHandler+0xfa>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <HAL_UART_IRQHandler+0xee>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	f043 0208 	orr.w	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d077      	beq.n	8002d92 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_UART_IRQHandler+0x11c>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f96f 	bl	8002f9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bf14      	ite	ne
 8002cca:	2301      	movne	r3, #1
 8002ccc:	2300      	moveq	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x144>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d031      	beq.n	8002d48 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8c0 	bl	8002e6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d023      	beq.n	8002d40 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d06:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <HAL_UART_IRQHandler+0x1fc>)
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fe35 	bl	800198c <HAL_DMA_Abort_IT>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d016      	beq.n	8002d56 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d32:	4610      	mov	r0, r2
 8002d34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d36:	e00e      	b.n	8002d56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f843 	bl	8002dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3e:	e00a      	b.n	8002d56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f83f 	bl	8002dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d46:	e006      	b.n	8002d56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f83b 	bl	8002dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d54:	e01d      	b.n	8002d92 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d56:	bf00      	nop
    return;
 8002d58:	e01b      	b.n	8002d92 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1d6>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8ac 	bl	8002ecc <UART_Transmit_IT>
    return;
 8002d74:	e00e      	b.n	8002d94 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HAL_UART_IRQHandler+0x1f4>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8ed 	bl	8002f6a <UART_EndTransmit_IT>
    return;
 8002d90:	e000      	b.n	8002d94 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002d92:	bf00      	nop
  }
}
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	08002ea5 	.word	0x08002ea5

08002da0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de6:	e02c      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d028      	beq.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x30>
 8002df6:	f7fe fc8d 	bl	8001714 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d21d      	bcs.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e14:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e00f      	b.n	8002e62 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d0c3      	beq.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e80:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff ff80 	bl	8002dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b21      	cmp	r3, #33	; 0x21
 8002ede:	d13e      	bne.n	8002f5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d114      	bne.n	8002f14 <UART_Transmit_IT+0x48>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d110      	bne.n	8002f14 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	621a      	str	r2, [r3, #32]
 8002f12:	e008      	b.n	8002f26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	1c59      	adds	r1, r3, #1
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6211      	str	r1, [r2, #32]
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4619      	mov	r1, r3
 8002f34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ff08 	bl	8002da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b22      	cmp	r3, #34	; 0x22
 8002fac:	d170      	bne.n	8003090 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb6:	d117      	bne.n	8002fe8 <UART_Receive_IT+0x4e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d113      	bne.n	8002fe8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	1c9a      	adds	r2, r3, #2
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe6:	e026      	b.n	8003036 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffa:	d007      	beq.n	800300c <UART_Receive_IT+0x72>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <UART_Receive_IT+0x80>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e008      	b.n	800302c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4619      	mov	r1, r3
 8003044:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003046:	2b00      	cmp	r3, #0
 8003048:	d120      	bne.n	800308c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0220 	bic.w	r2, r2, #32
 8003058:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff fe95 	bl	8002db2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e002      	b.n	8003092 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030d6:	f023 030c 	bic.w	r3, r3, #12
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	430b      	orrs	r3, r1
 80030e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <UART_SetConfig+0x114>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d103      	bne.n	800310c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003104:	f7ff fc3a 	bl	800297c <HAL_RCC_GetPCLK2Freq>
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	e002      	b.n	8003112 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800310c:	f7ff fc22 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8003110:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <UART_SetConfig+0x118>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	0119      	lsls	r1, r3, #4
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009a      	lsls	r2, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	fbb2 f2f3 	udiv	r2, r2, r3
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <UART_SetConfig+0x118>)
 800314a:	fba3 0302 	umull	r0, r3, r3, r2
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2064      	movs	r0, #100	; 0x64
 8003152:	fb00 f303 	mul.w	r3, r0, r3
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	3332      	adds	r3, #50	; 0x32
 800315c:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <UART_SetConfig+0x118>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003168:	4419      	add	r1, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009a      	lsls	r2, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <UART_SetConfig+0x118>)
 8003182:	fba3 0302 	umull	r0, r3, r3, r2
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2064      	movs	r0, #100	; 0x64
 800318a:	fb00 f303 	mul.w	r3, r0, r3
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	3332      	adds	r3, #50	; 0x32
 8003194:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <UART_SetConfig+0x118>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	f003 020f 	and.w	r2, r3, #15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	440a      	add	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40013800 	.word	0x40013800
 80031b4:	51eb851f 	.word	0x51eb851f

080031b8 <__errno>:
 80031b8:	4b01      	ldr	r3, [pc, #4]	; (80031c0 <__errno+0x8>)
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	2600      	movs	r6, #0
 80031c8:	4d0c      	ldr	r5, [pc, #48]	; (80031fc <__libc_init_array+0x38>)
 80031ca:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031cc:	1b64      	subs	r4, r4, r5
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	42a6      	cmp	r6, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	f002 fdd6 	bl	8005d84 <_init>
 80031d8:	2600      	movs	r6, #0
 80031da:	4d0a      	ldr	r5, [pc, #40]	; (8003204 <__libc_init_array+0x40>)
 80031dc:	4c0a      	ldr	r4, [pc, #40]	; (8003208 <__libc_init_array+0x44>)
 80031de:	1b64      	subs	r4, r4, r5
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	42a6      	cmp	r6, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ec:	4798      	blx	r3
 80031ee:	3601      	adds	r6, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f6:	4798      	blx	r3
 80031f8:	3601      	adds	r6, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	080061f4 	.word	0x080061f4
 8003200:	080061f4 	.word	0x080061f4
 8003204:	080061f4 	.word	0x080061f4
 8003208:	080061f8 	.word	0x080061f8

0800320c <memset>:
 800320c:	4603      	mov	r3, r0
 800320e:	4402      	add	r2, r0
 8003210:	4293      	cmp	r3, r2
 8003212:	d100      	bne.n	8003216 <memset+0xa>
 8003214:	4770      	bx	lr
 8003216:	f803 1b01 	strb.w	r1, [r3], #1
 800321a:	e7f9      	b.n	8003210 <memset+0x4>

0800321c <__cvt>:
 800321c:	2b00      	cmp	r3, #0
 800321e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003222:	461f      	mov	r7, r3
 8003224:	bfbb      	ittet	lt
 8003226:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800322a:	461f      	movlt	r7, r3
 800322c:	2300      	movge	r3, #0
 800322e:	232d      	movlt	r3, #45	; 0x2d
 8003230:	b088      	sub	sp, #32
 8003232:	4614      	mov	r4, r2
 8003234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003236:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003238:	7013      	strb	r3, [r2, #0]
 800323a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800323c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003240:	f023 0820 	bic.w	r8, r3, #32
 8003244:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003248:	d005      	beq.n	8003256 <__cvt+0x3a>
 800324a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800324e:	d100      	bne.n	8003252 <__cvt+0x36>
 8003250:	3501      	adds	r5, #1
 8003252:	2302      	movs	r3, #2
 8003254:	e000      	b.n	8003258 <__cvt+0x3c>
 8003256:	2303      	movs	r3, #3
 8003258:	aa07      	add	r2, sp, #28
 800325a:	9204      	str	r2, [sp, #16]
 800325c:	aa06      	add	r2, sp, #24
 800325e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003262:	e9cd 3500 	strd	r3, r5, [sp]
 8003266:	4622      	mov	r2, r4
 8003268:	463b      	mov	r3, r7
 800326a:	f000 fda5 	bl	8003db8 <_dtoa_r>
 800326e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003272:	4606      	mov	r6, r0
 8003274:	d102      	bne.n	800327c <__cvt+0x60>
 8003276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003278:	07db      	lsls	r3, r3, #31
 800327a:	d522      	bpl.n	80032c2 <__cvt+0xa6>
 800327c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003280:	eb06 0905 	add.w	r9, r6, r5
 8003284:	d110      	bne.n	80032a8 <__cvt+0x8c>
 8003286:	7833      	ldrb	r3, [r6, #0]
 8003288:	2b30      	cmp	r3, #48	; 0x30
 800328a:	d10a      	bne.n	80032a2 <__cvt+0x86>
 800328c:	2200      	movs	r2, #0
 800328e:	2300      	movs	r3, #0
 8003290:	4620      	mov	r0, r4
 8003292:	4639      	mov	r1, r7
 8003294:	f7fd fbf4 	bl	8000a80 <__aeabi_dcmpeq>
 8003298:	b918      	cbnz	r0, 80032a2 <__cvt+0x86>
 800329a:	f1c5 0501 	rsb	r5, r5, #1
 800329e:	f8ca 5000 	str.w	r5, [sl]
 80032a2:	f8da 3000 	ldr.w	r3, [sl]
 80032a6:	4499      	add	r9, r3
 80032a8:	2200      	movs	r2, #0
 80032aa:	2300      	movs	r3, #0
 80032ac:	4620      	mov	r0, r4
 80032ae:	4639      	mov	r1, r7
 80032b0:	f7fd fbe6 	bl	8000a80 <__aeabi_dcmpeq>
 80032b4:	b108      	cbz	r0, 80032ba <__cvt+0x9e>
 80032b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80032ba:	2230      	movs	r2, #48	; 0x30
 80032bc:	9b07      	ldr	r3, [sp, #28]
 80032be:	454b      	cmp	r3, r9
 80032c0:	d307      	bcc.n	80032d2 <__cvt+0xb6>
 80032c2:	4630      	mov	r0, r6
 80032c4:	9b07      	ldr	r3, [sp, #28]
 80032c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80032c8:	1b9b      	subs	r3, r3, r6
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	b008      	add	sp, #32
 80032ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d2:	1c59      	adds	r1, r3, #1
 80032d4:	9107      	str	r1, [sp, #28]
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e7f0      	b.n	80032bc <__cvt+0xa0>

080032da <__exponent>:
 80032da:	4603      	mov	r3, r0
 80032dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032de:	2900      	cmp	r1, #0
 80032e0:	f803 2b02 	strb.w	r2, [r3], #2
 80032e4:	bfb6      	itet	lt
 80032e6:	222d      	movlt	r2, #45	; 0x2d
 80032e8:	222b      	movge	r2, #43	; 0x2b
 80032ea:	4249      	neglt	r1, r1
 80032ec:	2909      	cmp	r1, #9
 80032ee:	7042      	strb	r2, [r0, #1]
 80032f0:	dd2b      	ble.n	800334a <__exponent+0x70>
 80032f2:	f10d 0407 	add.w	r4, sp, #7
 80032f6:	46a4      	mov	ip, r4
 80032f8:	270a      	movs	r7, #10
 80032fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80032fe:	460a      	mov	r2, r1
 8003300:	46a6      	mov	lr, r4
 8003302:	fb07 1516 	mls	r5, r7, r6, r1
 8003306:	2a63      	cmp	r2, #99	; 0x63
 8003308:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800330c:	4631      	mov	r1, r6
 800330e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003312:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003316:	dcf0      	bgt.n	80032fa <__exponent+0x20>
 8003318:	3130      	adds	r1, #48	; 0x30
 800331a:	f1ae 0502 	sub.w	r5, lr, #2
 800331e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003322:	4629      	mov	r1, r5
 8003324:	1c44      	adds	r4, r0, #1
 8003326:	4561      	cmp	r1, ip
 8003328:	d30a      	bcc.n	8003340 <__exponent+0x66>
 800332a:	f10d 0209 	add.w	r2, sp, #9
 800332e:	eba2 020e 	sub.w	r2, r2, lr
 8003332:	4565      	cmp	r5, ip
 8003334:	bf88      	it	hi
 8003336:	2200      	movhi	r2, #0
 8003338:	4413      	add	r3, r2
 800333a:	1a18      	subs	r0, r3, r0
 800333c:	b003      	add	sp, #12
 800333e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003340:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003344:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003348:	e7ed      	b.n	8003326 <__exponent+0x4c>
 800334a:	2330      	movs	r3, #48	; 0x30
 800334c:	3130      	adds	r1, #48	; 0x30
 800334e:	7083      	strb	r3, [r0, #2]
 8003350:	70c1      	strb	r1, [r0, #3]
 8003352:	1d03      	adds	r3, r0, #4
 8003354:	e7f1      	b.n	800333a <__exponent+0x60>
	...

08003358 <_printf_float>:
 8003358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335c:	b091      	sub	sp, #68	; 0x44
 800335e:	460c      	mov	r4, r1
 8003360:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003364:	4616      	mov	r6, r2
 8003366:	461f      	mov	r7, r3
 8003368:	4605      	mov	r5, r0
 800336a:	f001 fccb 	bl	8004d04 <_localeconv_r>
 800336e:	6803      	ldr	r3, [r0, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	9309      	str	r3, [sp, #36]	; 0x24
 8003374:	f7fc ff58 	bl	8000228 <strlen>
 8003378:	2300      	movs	r3, #0
 800337a:	930e      	str	r3, [sp, #56]	; 0x38
 800337c:	f8d8 3000 	ldr.w	r3, [r8]
 8003380:	900a      	str	r0, [sp, #40]	; 0x28
 8003382:	3307      	adds	r3, #7
 8003384:	f023 0307 	bic.w	r3, r3, #7
 8003388:	f103 0208 	add.w	r2, r3, #8
 800338c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003390:	f8d4 b000 	ldr.w	fp, [r4]
 8003394:	f8c8 2000 	str.w	r2, [r8]
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80033a0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80033a4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80033a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80033aa:	f04f 32ff 	mov.w	r2, #4294967295
 80033ae:	4640      	mov	r0, r8
 80033b0:	4b9c      	ldr	r3, [pc, #624]	; (8003624 <_printf_float+0x2cc>)
 80033b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033b4:	f7fd fb96 	bl	8000ae4 <__aeabi_dcmpun>
 80033b8:	bb70      	cbnz	r0, 8003418 <_printf_float+0xc0>
 80033ba:	f04f 32ff 	mov.w	r2, #4294967295
 80033be:	4640      	mov	r0, r8
 80033c0:	4b98      	ldr	r3, [pc, #608]	; (8003624 <_printf_float+0x2cc>)
 80033c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033c4:	f7fd fb70 	bl	8000aa8 <__aeabi_dcmple>
 80033c8:	bb30      	cbnz	r0, 8003418 <_printf_float+0xc0>
 80033ca:	2200      	movs	r2, #0
 80033cc:	2300      	movs	r3, #0
 80033ce:	4640      	mov	r0, r8
 80033d0:	4651      	mov	r1, sl
 80033d2:	f7fd fb5f 	bl	8000a94 <__aeabi_dcmplt>
 80033d6:	b110      	cbz	r0, 80033de <_printf_float+0x86>
 80033d8:	232d      	movs	r3, #45	; 0x2d
 80033da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033de:	4b92      	ldr	r3, [pc, #584]	; (8003628 <_printf_float+0x2d0>)
 80033e0:	4892      	ldr	r0, [pc, #584]	; (800362c <_printf_float+0x2d4>)
 80033e2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80033e6:	bf94      	ite	ls
 80033e8:	4698      	movls	r8, r3
 80033ea:	4680      	movhi	r8, r0
 80033ec:	2303      	movs	r3, #3
 80033ee:	f04f 0a00 	mov.w	sl, #0
 80033f2:	6123      	str	r3, [r4, #16]
 80033f4:	f02b 0304 	bic.w	r3, fp, #4
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	4633      	mov	r3, r6
 80033fc:	4621      	mov	r1, r4
 80033fe:	4628      	mov	r0, r5
 8003400:	9700      	str	r7, [sp, #0]
 8003402:	aa0f      	add	r2, sp, #60	; 0x3c
 8003404:	f000 f9d4 	bl	80037b0 <_printf_common>
 8003408:	3001      	adds	r0, #1
 800340a:	f040 8090 	bne.w	800352e <_printf_float+0x1d6>
 800340e:	f04f 30ff 	mov.w	r0, #4294967295
 8003412:	b011      	add	sp, #68	; 0x44
 8003414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003418:	4642      	mov	r2, r8
 800341a:	4653      	mov	r3, sl
 800341c:	4640      	mov	r0, r8
 800341e:	4651      	mov	r1, sl
 8003420:	f7fd fb60 	bl	8000ae4 <__aeabi_dcmpun>
 8003424:	b148      	cbz	r0, 800343a <_printf_float+0xe2>
 8003426:	f1ba 0f00 	cmp.w	sl, #0
 800342a:	bfb8      	it	lt
 800342c:	232d      	movlt	r3, #45	; 0x2d
 800342e:	4880      	ldr	r0, [pc, #512]	; (8003630 <_printf_float+0x2d8>)
 8003430:	bfb8      	it	lt
 8003432:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003436:	4b7f      	ldr	r3, [pc, #508]	; (8003634 <_printf_float+0x2dc>)
 8003438:	e7d3      	b.n	80033e2 <_printf_float+0x8a>
 800343a:	6863      	ldr	r3, [r4, #4]
 800343c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	d142      	bne.n	80034ca <_printf_float+0x172>
 8003444:	2306      	movs	r3, #6
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	9206      	str	r2, [sp, #24]
 800344c:	aa0e      	add	r2, sp, #56	; 0x38
 800344e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003452:	aa0d      	add	r2, sp, #52	; 0x34
 8003454:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003458:	9203      	str	r2, [sp, #12]
 800345a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800345e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003462:	6023      	str	r3, [r4, #0]
 8003464:	6863      	ldr	r3, [r4, #4]
 8003466:	4642      	mov	r2, r8
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	4628      	mov	r0, r5
 800346c:	4653      	mov	r3, sl
 800346e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003470:	f7ff fed4 	bl	800321c <__cvt>
 8003474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003476:	4680      	mov	r8, r0
 8003478:	2947      	cmp	r1, #71	; 0x47
 800347a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800347c:	d108      	bne.n	8003490 <_printf_float+0x138>
 800347e:	1cc8      	adds	r0, r1, #3
 8003480:	db02      	blt.n	8003488 <_printf_float+0x130>
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	4299      	cmp	r1, r3
 8003486:	dd40      	ble.n	800350a <_printf_float+0x1b2>
 8003488:	f1a9 0902 	sub.w	r9, r9, #2
 800348c:	fa5f f989 	uxtb.w	r9, r9
 8003490:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003494:	d81f      	bhi.n	80034d6 <_printf_float+0x17e>
 8003496:	464a      	mov	r2, r9
 8003498:	3901      	subs	r1, #1
 800349a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800349e:	910d      	str	r1, [sp, #52]	; 0x34
 80034a0:	f7ff ff1b 	bl	80032da <__exponent>
 80034a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034a6:	4682      	mov	sl, r0
 80034a8:	1813      	adds	r3, r2, r0
 80034aa:	2a01      	cmp	r2, #1
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	dc02      	bgt.n	80034b6 <_printf_float+0x15e>
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	07d2      	lsls	r2, r2, #31
 80034b4:	d501      	bpl.n	80034ba <_printf_float+0x162>
 80034b6:	3301      	adds	r3, #1
 80034b8:	6123      	str	r3, [r4, #16]
 80034ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d09b      	beq.n	80033fa <_printf_float+0xa2>
 80034c2:	232d      	movs	r3, #45	; 0x2d
 80034c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034c8:	e797      	b.n	80033fa <_printf_float+0xa2>
 80034ca:	2947      	cmp	r1, #71	; 0x47
 80034cc:	d1bc      	bne.n	8003448 <_printf_float+0xf0>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ba      	bne.n	8003448 <_printf_float+0xf0>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e7b7      	b.n	8003446 <_printf_float+0xee>
 80034d6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80034da:	d118      	bne.n	800350e <_printf_float+0x1b6>
 80034dc:	2900      	cmp	r1, #0
 80034de:	6863      	ldr	r3, [r4, #4]
 80034e0:	dd0b      	ble.n	80034fa <_printf_float+0x1a2>
 80034e2:	6121      	str	r1, [r4, #16]
 80034e4:	b913      	cbnz	r3, 80034ec <_printf_float+0x194>
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	07d0      	lsls	r0, r2, #31
 80034ea:	d502      	bpl.n	80034f2 <_printf_float+0x19a>
 80034ec:	3301      	adds	r3, #1
 80034ee:	440b      	add	r3, r1
 80034f0:	6123      	str	r3, [r4, #16]
 80034f2:	f04f 0a00 	mov.w	sl, #0
 80034f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80034f8:	e7df      	b.n	80034ba <_printf_float+0x162>
 80034fa:	b913      	cbnz	r3, 8003502 <_printf_float+0x1aa>
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	07d2      	lsls	r2, r2, #31
 8003500:	d501      	bpl.n	8003506 <_printf_float+0x1ae>
 8003502:	3302      	adds	r3, #2
 8003504:	e7f4      	b.n	80034f0 <_printf_float+0x198>
 8003506:	2301      	movs	r3, #1
 8003508:	e7f2      	b.n	80034f0 <_printf_float+0x198>
 800350a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800350e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003510:	4299      	cmp	r1, r3
 8003512:	db05      	blt.n	8003520 <_printf_float+0x1c8>
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	6121      	str	r1, [r4, #16]
 8003518:	07d8      	lsls	r0, r3, #31
 800351a:	d5ea      	bpl.n	80034f2 <_printf_float+0x19a>
 800351c:	1c4b      	adds	r3, r1, #1
 800351e:	e7e7      	b.n	80034f0 <_printf_float+0x198>
 8003520:	2900      	cmp	r1, #0
 8003522:	bfcc      	ite	gt
 8003524:	2201      	movgt	r2, #1
 8003526:	f1c1 0202 	rsble	r2, r1, #2
 800352a:	4413      	add	r3, r2
 800352c:	e7e0      	b.n	80034f0 <_printf_float+0x198>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	055a      	lsls	r2, r3, #21
 8003532:	d407      	bmi.n	8003544 <_printf_float+0x1ec>
 8003534:	6923      	ldr	r3, [r4, #16]
 8003536:	4642      	mov	r2, r8
 8003538:	4631      	mov	r1, r6
 800353a:	4628      	mov	r0, r5
 800353c:	47b8      	blx	r7
 800353e:	3001      	adds	r0, #1
 8003540:	d12b      	bne.n	800359a <_printf_float+0x242>
 8003542:	e764      	b.n	800340e <_printf_float+0xb6>
 8003544:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003548:	f240 80dd 	bls.w	8003706 <_printf_float+0x3ae>
 800354c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003550:	2200      	movs	r2, #0
 8003552:	2300      	movs	r3, #0
 8003554:	f7fd fa94 	bl	8000a80 <__aeabi_dcmpeq>
 8003558:	2800      	cmp	r0, #0
 800355a:	d033      	beq.n	80035c4 <_printf_float+0x26c>
 800355c:	2301      	movs	r3, #1
 800355e:	4631      	mov	r1, r6
 8003560:	4628      	mov	r0, r5
 8003562:	4a35      	ldr	r2, [pc, #212]	; (8003638 <_printf_float+0x2e0>)
 8003564:	47b8      	blx	r7
 8003566:	3001      	adds	r0, #1
 8003568:	f43f af51 	beq.w	800340e <_printf_float+0xb6>
 800356c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003570:	429a      	cmp	r2, r3
 8003572:	db02      	blt.n	800357a <_printf_float+0x222>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	07d8      	lsls	r0, r3, #31
 8003578:	d50f      	bpl.n	800359a <_printf_float+0x242>
 800357a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800357e:	4631      	mov	r1, r6
 8003580:	4628      	mov	r0, r5
 8003582:	47b8      	blx	r7
 8003584:	3001      	adds	r0, #1
 8003586:	f43f af42 	beq.w	800340e <_printf_float+0xb6>
 800358a:	f04f 0800 	mov.w	r8, #0
 800358e:	f104 091a 	add.w	r9, r4, #26
 8003592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003594:	3b01      	subs	r3, #1
 8003596:	4543      	cmp	r3, r8
 8003598:	dc09      	bgt.n	80035ae <_printf_float+0x256>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	079b      	lsls	r3, r3, #30
 800359e:	f100 8102 	bmi.w	80037a6 <_printf_float+0x44e>
 80035a2:	68e0      	ldr	r0, [r4, #12]
 80035a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035a6:	4298      	cmp	r0, r3
 80035a8:	bfb8      	it	lt
 80035aa:	4618      	movlt	r0, r3
 80035ac:	e731      	b.n	8003412 <_printf_float+0xba>
 80035ae:	2301      	movs	r3, #1
 80035b0:	464a      	mov	r2, r9
 80035b2:	4631      	mov	r1, r6
 80035b4:	4628      	mov	r0, r5
 80035b6:	47b8      	blx	r7
 80035b8:	3001      	adds	r0, #1
 80035ba:	f43f af28 	beq.w	800340e <_printf_float+0xb6>
 80035be:	f108 0801 	add.w	r8, r8, #1
 80035c2:	e7e6      	b.n	8003592 <_printf_float+0x23a>
 80035c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	dc38      	bgt.n	800363c <_printf_float+0x2e4>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4631      	mov	r1, r6
 80035ce:	4628      	mov	r0, r5
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <_printf_float+0x2e0>)
 80035d2:	47b8      	blx	r7
 80035d4:	3001      	adds	r0, #1
 80035d6:	f43f af1a 	beq.w	800340e <_printf_float+0xb6>
 80035da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035de:	4313      	orrs	r3, r2
 80035e0:	d102      	bne.n	80035e8 <_printf_float+0x290>
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	07d9      	lsls	r1, r3, #31
 80035e6:	d5d8      	bpl.n	800359a <_printf_float+0x242>
 80035e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035ec:	4631      	mov	r1, r6
 80035ee:	4628      	mov	r0, r5
 80035f0:	47b8      	blx	r7
 80035f2:	3001      	adds	r0, #1
 80035f4:	f43f af0b 	beq.w	800340e <_printf_float+0xb6>
 80035f8:	f04f 0900 	mov.w	r9, #0
 80035fc:	f104 0a1a 	add.w	sl, r4, #26
 8003600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003602:	425b      	negs	r3, r3
 8003604:	454b      	cmp	r3, r9
 8003606:	dc01      	bgt.n	800360c <_printf_float+0x2b4>
 8003608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800360a:	e794      	b.n	8003536 <_printf_float+0x1de>
 800360c:	2301      	movs	r3, #1
 800360e:	4652      	mov	r2, sl
 8003610:	4631      	mov	r1, r6
 8003612:	4628      	mov	r0, r5
 8003614:	47b8      	blx	r7
 8003616:	3001      	adds	r0, #1
 8003618:	f43f aef9 	beq.w	800340e <_printf_float+0xb6>
 800361c:	f109 0901 	add.w	r9, r9, #1
 8003620:	e7ee      	b.n	8003600 <_printf_float+0x2a8>
 8003622:	bf00      	nop
 8003624:	7fefffff 	.word	0x7fefffff
 8003628:	08005e18 	.word	0x08005e18
 800362c:	08005e1c 	.word	0x08005e1c
 8003630:	08005e24 	.word	0x08005e24
 8003634:	08005e20 	.word	0x08005e20
 8003638:	08005e28 	.word	0x08005e28
 800363c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800363e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003640:	429a      	cmp	r2, r3
 8003642:	bfa8      	it	ge
 8003644:	461a      	movge	r2, r3
 8003646:	2a00      	cmp	r2, #0
 8003648:	4691      	mov	r9, r2
 800364a:	dc37      	bgt.n	80036bc <_printf_float+0x364>
 800364c:	f04f 0b00 	mov.w	fp, #0
 8003650:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003654:	f104 021a 	add.w	r2, r4, #26
 8003658:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800365c:	ebaa 0309 	sub.w	r3, sl, r9
 8003660:	455b      	cmp	r3, fp
 8003662:	dc33      	bgt.n	80036cc <_printf_float+0x374>
 8003664:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003668:	429a      	cmp	r2, r3
 800366a:	db3b      	blt.n	80036e4 <_printf_float+0x38c>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	07da      	lsls	r2, r3, #31
 8003670:	d438      	bmi.n	80036e4 <_printf_float+0x38c>
 8003672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003674:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003676:	eba2 030a 	sub.w	r3, r2, sl
 800367a:	eba2 0901 	sub.w	r9, r2, r1
 800367e:	4599      	cmp	r9, r3
 8003680:	bfa8      	it	ge
 8003682:	4699      	movge	r9, r3
 8003684:	f1b9 0f00 	cmp.w	r9, #0
 8003688:	dc34      	bgt.n	80036f4 <_printf_float+0x39c>
 800368a:	f04f 0800 	mov.w	r8, #0
 800368e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003692:	f104 0a1a 	add.w	sl, r4, #26
 8003696:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	eba3 0309 	sub.w	r3, r3, r9
 80036a0:	4543      	cmp	r3, r8
 80036a2:	f77f af7a 	ble.w	800359a <_printf_float+0x242>
 80036a6:	2301      	movs	r3, #1
 80036a8:	4652      	mov	r2, sl
 80036aa:	4631      	mov	r1, r6
 80036ac:	4628      	mov	r0, r5
 80036ae:	47b8      	blx	r7
 80036b0:	3001      	adds	r0, #1
 80036b2:	f43f aeac 	beq.w	800340e <_printf_float+0xb6>
 80036b6:	f108 0801 	add.w	r8, r8, #1
 80036ba:	e7ec      	b.n	8003696 <_printf_float+0x33e>
 80036bc:	4613      	mov	r3, r2
 80036be:	4631      	mov	r1, r6
 80036c0:	4642      	mov	r2, r8
 80036c2:	4628      	mov	r0, r5
 80036c4:	47b8      	blx	r7
 80036c6:	3001      	adds	r0, #1
 80036c8:	d1c0      	bne.n	800364c <_printf_float+0x2f4>
 80036ca:	e6a0      	b.n	800340e <_printf_float+0xb6>
 80036cc:	2301      	movs	r3, #1
 80036ce:	4631      	mov	r1, r6
 80036d0:	4628      	mov	r0, r5
 80036d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80036d4:	47b8      	blx	r7
 80036d6:	3001      	adds	r0, #1
 80036d8:	f43f ae99 	beq.w	800340e <_printf_float+0xb6>
 80036dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036de:	f10b 0b01 	add.w	fp, fp, #1
 80036e2:	e7b9      	b.n	8003658 <_printf_float+0x300>
 80036e4:	4631      	mov	r1, r6
 80036e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036ea:	4628      	mov	r0, r5
 80036ec:	47b8      	blx	r7
 80036ee:	3001      	adds	r0, #1
 80036f0:	d1bf      	bne.n	8003672 <_printf_float+0x31a>
 80036f2:	e68c      	b.n	800340e <_printf_float+0xb6>
 80036f4:	464b      	mov	r3, r9
 80036f6:	4631      	mov	r1, r6
 80036f8:	4628      	mov	r0, r5
 80036fa:	eb08 020a 	add.w	r2, r8, sl
 80036fe:	47b8      	blx	r7
 8003700:	3001      	adds	r0, #1
 8003702:	d1c2      	bne.n	800368a <_printf_float+0x332>
 8003704:	e683      	b.n	800340e <_printf_float+0xb6>
 8003706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003708:	2a01      	cmp	r2, #1
 800370a:	dc01      	bgt.n	8003710 <_printf_float+0x3b8>
 800370c:	07db      	lsls	r3, r3, #31
 800370e:	d537      	bpl.n	8003780 <_printf_float+0x428>
 8003710:	2301      	movs	r3, #1
 8003712:	4642      	mov	r2, r8
 8003714:	4631      	mov	r1, r6
 8003716:	4628      	mov	r0, r5
 8003718:	47b8      	blx	r7
 800371a:	3001      	adds	r0, #1
 800371c:	f43f ae77 	beq.w	800340e <_printf_float+0xb6>
 8003720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003724:	4631      	mov	r1, r6
 8003726:	4628      	mov	r0, r5
 8003728:	47b8      	blx	r7
 800372a:	3001      	adds	r0, #1
 800372c:	f43f ae6f 	beq.w	800340e <_printf_float+0xb6>
 8003730:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003734:	2200      	movs	r2, #0
 8003736:	2300      	movs	r3, #0
 8003738:	f7fd f9a2 	bl	8000a80 <__aeabi_dcmpeq>
 800373c:	b9d8      	cbnz	r0, 8003776 <_printf_float+0x41e>
 800373e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003740:	f108 0201 	add.w	r2, r8, #1
 8003744:	3b01      	subs	r3, #1
 8003746:	4631      	mov	r1, r6
 8003748:	4628      	mov	r0, r5
 800374a:	47b8      	blx	r7
 800374c:	3001      	adds	r0, #1
 800374e:	d10e      	bne.n	800376e <_printf_float+0x416>
 8003750:	e65d      	b.n	800340e <_printf_float+0xb6>
 8003752:	2301      	movs	r3, #1
 8003754:	464a      	mov	r2, r9
 8003756:	4631      	mov	r1, r6
 8003758:	4628      	mov	r0, r5
 800375a:	47b8      	blx	r7
 800375c:	3001      	adds	r0, #1
 800375e:	f43f ae56 	beq.w	800340e <_printf_float+0xb6>
 8003762:	f108 0801 	add.w	r8, r8, #1
 8003766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003768:	3b01      	subs	r3, #1
 800376a:	4543      	cmp	r3, r8
 800376c:	dcf1      	bgt.n	8003752 <_printf_float+0x3fa>
 800376e:	4653      	mov	r3, sl
 8003770:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003774:	e6e0      	b.n	8003538 <_printf_float+0x1e0>
 8003776:	f04f 0800 	mov.w	r8, #0
 800377a:	f104 091a 	add.w	r9, r4, #26
 800377e:	e7f2      	b.n	8003766 <_printf_float+0x40e>
 8003780:	2301      	movs	r3, #1
 8003782:	4642      	mov	r2, r8
 8003784:	e7df      	b.n	8003746 <_printf_float+0x3ee>
 8003786:	2301      	movs	r3, #1
 8003788:	464a      	mov	r2, r9
 800378a:	4631      	mov	r1, r6
 800378c:	4628      	mov	r0, r5
 800378e:	47b8      	blx	r7
 8003790:	3001      	adds	r0, #1
 8003792:	f43f ae3c 	beq.w	800340e <_printf_float+0xb6>
 8003796:	f108 0801 	add.w	r8, r8, #1
 800379a:	68e3      	ldr	r3, [r4, #12]
 800379c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800379e:	1a5b      	subs	r3, r3, r1
 80037a0:	4543      	cmp	r3, r8
 80037a2:	dcf0      	bgt.n	8003786 <_printf_float+0x42e>
 80037a4:	e6fd      	b.n	80035a2 <_printf_float+0x24a>
 80037a6:	f04f 0800 	mov.w	r8, #0
 80037aa:	f104 0919 	add.w	r9, r4, #25
 80037ae:	e7f4      	b.n	800379a <_printf_float+0x442>

080037b0 <_printf_common>:
 80037b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b4:	4616      	mov	r6, r2
 80037b6:	4699      	mov	r9, r3
 80037b8:	688a      	ldr	r2, [r1, #8]
 80037ba:	690b      	ldr	r3, [r1, #16]
 80037bc:	4607      	mov	r7, r0
 80037be:	4293      	cmp	r3, r2
 80037c0:	bfb8      	it	lt
 80037c2:	4613      	movlt	r3, r2
 80037c4:	6033      	str	r3, [r6, #0]
 80037c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037ca:	460c      	mov	r4, r1
 80037cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037d0:	b10a      	cbz	r2, 80037d6 <_printf_common+0x26>
 80037d2:	3301      	adds	r3, #1
 80037d4:	6033      	str	r3, [r6, #0]
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	0699      	lsls	r1, r3, #26
 80037da:	bf42      	ittt	mi
 80037dc:	6833      	ldrmi	r3, [r6, #0]
 80037de:	3302      	addmi	r3, #2
 80037e0:	6033      	strmi	r3, [r6, #0]
 80037e2:	6825      	ldr	r5, [r4, #0]
 80037e4:	f015 0506 	ands.w	r5, r5, #6
 80037e8:	d106      	bne.n	80037f8 <_printf_common+0x48>
 80037ea:	f104 0a19 	add.w	sl, r4, #25
 80037ee:	68e3      	ldr	r3, [r4, #12]
 80037f0:	6832      	ldr	r2, [r6, #0]
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	42ab      	cmp	r3, r5
 80037f6:	dc28      	bgt.n	800384a <_printf_common+0x9a>
 80037f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037fc:	1e13      	subs	r3, r2, #0
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	bf18      	it	ne
 8003802:	2301      	movne	r3, #1
 8003804:	0692      	lsls	r2, r2, #26
 8003806:	d42d      	bmi.n	8003864 <_printf_common+0xb4>
 8003808:	4649      	mov	r1, r9
 800380a:	4638      	mov	r0, r7
 800380c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003810:	47c0      	blx	r8
 8003812:	3001      	adds	r0, #1
 8003814:	d020      	beq.n	8003858 <_printf_common+0xa8>
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	68e5      	ldr	r5, [r4, #12]
 800381a:	f003 0306 	and.w	r3, r3, #6
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf18      	it	ne
 8003822:	2500      	movne	r5, #0
 8003824:	6832      	ldr	r2, [r6, #0]
 8003826:	f04f 0600 	mov.w	r6, #0
 800382a:	68a3      	ldr	r3, [r4, #8]
 800382c:	bf08      	it	eq
 800382e:	1aad      	subeq	r5, r5, r2
 8003830:	6922      	ldr	r2, [r4, #16]
 8003832:	bf08      	it	eq
 8003834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003838:	4293      	cmp	r3, r2
 800383a:	bfc4      	itt	gt
 800383c:	1a9b      	subgt	r3, r3, r2
 800383e:	18ed      	addgt	r5, r5, r3
 8003840:	341a      	adds	r4, #26
 8003842:	42b5      	cmp	r5, r6
 8003844:	d11a      	bne.n	800387c <_printf_common+0xcc>
 8003846:	2000      	movs	r0, #0
 8003848:	e008      	b.n	800385c <_printf_common+0xac>
 800384a:	2301      	movs	r3, #1
 800384c:	4652      	mov	r2, sl
 800384e:	4649      	mov	r1, r9
 8003850:	4638      	mov	r0, r7
 8003852:	47c0      	blx	r8
 8003854:	3001      	adds	r0, #1
 8003856:	d103      	bne.n	8003860 <_printf_common+0xb0>
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003860:	3501      	adds	r5, #1
 8003862:	e7c4      	b.n	80037ee <_printf_common+0x3e>
 8003864:	2030      	movs	r0, #48	; 0x30
 8003866:	18e1      	adds	r1, r4, r3
 8003868:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003872:	4422      	add	r2, r4
 8003874:	3302      	adds	r3, #2
 8003876:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800387a:	e7c5      	b.n	8003808 <_printf_common+0x58>
 800387c:	2301      	movs	r3, #1
 800387e:	4622      	mov	r2, r4
 8003880:	4649      	mov	r1, r9
 8003882:	4638      	mov	r0, r7
 8003884:	47c0      	blx	r8
 8003886:	3001      	adds	r0, #1
 8003888:	d0e6      	beq.n	8003858 <_printf_common+0xa8>
 800388a:	3601      	adds	r6, #1
 800388c:	e7d9      	b.n	8003842 <_printf_common+0x92>
	...

08003890 <_printf_i>:
 8003890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003894:	460c      	mov	r4, r1
 8003896:	7e27      	ldrb	r7, [r4, #24]
 8003898:	4691      	mov	r9, r2
 800389a:	2f78      	cmp	r7, #120	; 0x78
 800389c:	4680      	mov	r8, r0
 800389e:	469a      	mov	sl, r3
 80038a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038a6:	d807      	bhi.n	80038b8 <_printf_i+0x28>
 80038a8:	2f62      	cmp	r7, #98	; 0x62
 80038aa:	d80a      	bhi.n	80038c2 <_printf_i+0x32>
 80038ac:	2f00      	cmp	r7, #0
 80038ae:	f000 80d9 	beq.w	8003a64 <_printf_i+0x1d4>
 80038b2:	2f58      	cmp	r7, #88	; 0x58
 80038b4:	f000 80a4 	beq.w	8003a00 <_printf_i+0x170>
 80038b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038c0:	e03a      	b.n	8003938 <_printf_i+0xa8>
 80038c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038c6:	2b15      	cmp	r3, #21
 80038c8:	d8f6      	bhi.n	80038b8 <_printf_i+0x28>
 80038ca:	a001      	add	r0, pc, #4	; (adr r0, 80038d0 <_printf_i+0x40>)
 80038cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80038d0:	08003929 	.word	0x08003929
 80038d4:	0800393d 	.word	0x0800393d
 80038d8:	080038b9 	.word	0x080038b9
 80038dc:	080038b9 	.word	0x080038b9
 80038e0:	080038b9 	.word	0x080038b9
 80038e4:	080038b9 	.word	0x080038b9
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	080038b9 	.word	0x080038b9
 80038f0:	080038b9 	.word	0x080038b9
 80038f4:	080038b9 	.word	0x080038b9
 80038f8:	080038b9 	.word	0x080038b9
 80038fc:	08003a4b 	.word	0x08003a4b
 8003900:	0800396d 	.word	0x0800396d
 8003904:	08003a2d 	.word	0x08003a2d
 8003908:	080038b9 	.word	0x080038b9
 800390c:	080038b9 	.word	0x080038b9
 8003910:	08003a6d 	.word	0x08003a6d
 8003914:	080038b9 	.word	0x080038b9
 8003918:	0800396d 	.word	0x0800396d
 800391c:	080038b9 	.word	0x080038b9
 8003920:	080038b9 	.word	0x080038b9
 8003924:	08003a35 	.word	0x08003a35
 8003928:	680b      	ldr	r3, [r1, #0]
 800392a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800392e:	1d1a      	adds	r2, r3, #4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	600a      	str	r2, [r1, #0]
 8003934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003938:	2301      	movs	r3, #1
 800393a:	e0a4      	b.n	8003a86 <_printf_i+0x1f6>
 800393c:	6825      	ldr	r5, [r4, #0]
 800393e:	6808      	ldr	r0, [r1, #0]
 8003940:	062e      	lsls	r6, r5, #24
 8003942:	f100 0304 	add.w	r3, r0, #4
 8003946:	d50a      	bpl.n	800395e <_printf_i+0xce>
 8003948:	6805      	ldr	r5, [r0, #0]
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	2d00      	cmp	r5, #0
 800394e:	da03      	bge.n	8003958 <_printf_i+0xc8>
 8003950:	232d      	movs	r3, #45	; 0x2d
 8003952:	426d      	negs	r5, r5
 8003954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003958:	230a      	movs	r3, #10
 800395a:	485e      	ldr	r0, [pc, #376]	; (8003ad4 <_printf_i+0x244>)
 800395c:	e019      	b.n	8003992 <_printf_i+0x102>
 800395e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003962:	6805      	ldr	r5, [r0, #0]
 8003964:	600b      	str	r3, [r1, #0]
 8003966:	bf18      	it	ne
 8003968:	b22d      	sxthne	r5, r5
 800396a:	e7ef      	b.n	800394c <_printf_i+0xbc>
 800396c:	680b      	ldr	r3, [r1, #0]
 800396e:	6825      	ldr	r5, [r4, #0]
 8003970:	1d18      	adds	r0, r3, #4
 8003972:	6008      	str	r0, [r1, #0]
 8003974:	0628      	lsls	r0, r5, #24
 8003976:	d501      	bpl.n	800397c <_printf_i+0xec>
 8003978:	681d      	ldr	r5, [r3, #0]
 800397a:	e002      	b.n	8003982 <_printf_i+0xf2>
 800397c:	0669      	lsls	r1, r5, #25
 800397e:	d5fb      	bpl.n	8003978 <_printf_i+0xe8>
 8003980:	881d      	ldrh	r5, [r3, #0]
 8003982:	2f6f      	cmp	r7, #111	; 0x6f
 8003984:	bf0c      	ite	eq
 8003986:	2308      	moveq	r3, #8
 8003988:	230a      	movne	r3, #10
 800398a:	4852      	ldr	r0, [pc, #328]	; (8003ad4 <_printf_i+0x244>)
 800398c:	2100      	movs	r1, #0
 800398e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003992:	6866      	ldr	r6, [r4, #4]
 8003994:	2e00      	cmp	r6, #0
 8003996:	bfa8      	it	ge
 8003998:	6821      	ldrge	r1, [r4, #0]
 800399a:	60a6      	str	r6, [r4, #8]
 800399c:	bfa4      	itt	ge
 800399e:	f021 0104 	bicge.w	r1, r1, #4
 80039a2:	6021      	strge	r1, [r4, #0]
 80039a4:	b90d      	cbnz	r5, 80039aa <_printf_i+0x11a>
 80039a6:	2e00      	cmp	r6, #0
 80039a8:	d04d      	beq.n	8003a46 <_printf_i+0x1b6>
 80039aa:	4616      	mov	r6, r2
 80039ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80039b0:	fb03 5711 	mls	r7, r3, r1, r5
 80039b4:	5dc7      	ldrb	r7, [r0, r7]
 80039b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039ba:	462f      	mov	r7, r5
 80039bc:	42bb      	cmp	r3, r7
 80039be:	460d      	mov	r5, r1
 80039c0:	d9f4      	bls.n	80039ac <_printf_i+0x11c>
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d10b      	bne.n	80039de <_printf_i+0x14e>
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	07df      	lsls	r7, r3, #31
 80039ca:	d508      	bpl.n	80039de <_printf_i+0x14e>
 80039cc:	6923      	ldr	r3, [r4, #16]
 80039ce:	6861      	ldr	r1, [r4, #4]
 80039d0:	4299      	cmp	r1, r3
 80039d2:	bfde      	ittt	le
 80039d4:	2330      	movle	r3, #48	; 0x30
 80039d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039de:	1b92      	subs	r2, r2, r6
 80039e0:	6122      	str	r2, [r4, #16]
 80039e2:	464b      	mov	r3, r9
 80039e4:	4621      	mov	r1, r4
 80039e6:	4640      	mov	r0, r8
 80039e8:	f8cd a000 	str.w	sl, [sp]
 80039ec:	aa03      	add	r2, sp, #12
 80039ee:	f7ff fedf 	bl	80037b0 <_printf_common>
 80039f2:	3001      	adds	r0, #1
 80039f4:	d14c      	bne.n	8003a90 <_printf_i+0x200>
 80039f6:	f04f 30ff 	mov.w	r0, #4294967295
 80039fa:	b004      	add	sp, #16
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	4834      	ldr	r0, [pc, #208]	; (8003ad4 <_printf_i+0x244>)
 8003a02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a06:	680e      	ldr	r6, [r1, #0]
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a0e:	061f      	lsls	r7, r3, #24
 8003a10:	600e      	str	r6, [r1, #0]
 8003a12:	d514      	bpl.n	8003a3e <_printf_i+0x1ae>
 8003a14:	07d9      	lsls	r1, r3, #31
 8003a16:	bf44      	itt	mi
 8003a18:	f043 0320 	orrmi.w	r3, r3, #32
 8003a1c:	6023      	strmi	r3, [r4, #0]
 8003a1e:	b91d      	cbnz	r5, 8003a28 <_printf_i+0x198>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	f023 0320 	bic.w	r3, r3, #32
 8003a26:	6023      	str	r3, [r4, #0]
 8003a28:	2310      	movs	r3, #16
 8003a2a:	e7af      	b.n	800398c <_printf_i+0xfc>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	f043 0320 	orr.w	r3, r3, #32
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	2378      	movs	r3, #120	; 0x78
 8003a36:	4828      	ldr	r0, [pc, #160]	; (8003ad8 <_printf_i+0x248>)
 8003a38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a3c:	e7e3      	b.n	8003a06 <_printf_i+0x176>
 8003a3e:	065e      	lsls	r6, r3, #25
 8003a40:	bf48      	it	mi
 8003a42:	b2ad      	uxthmi	r5, r5
 8003a44:	e7e6      	b.n	8003a14 <_printf_i+0x184>
 8003a46:	4616      	mov	r6, r2
 8003a48:	e7bb      	b.n	80039c2 <_printf_i+0x132>
 8003a4a:	680b      	ldr	r3, [r1, #0]
 8003a4c:	6826      	ldr	r6, [r4, #0]
 8003a4e:	1d1d      	adds	r5, r3, #4
 8003a50:	6960      	ldr	r0, [r4, #20]
 8003a52:	600d      	str	r5, [r1, #0]
 8003a54:	0635      	lsls	r5, r6, #24
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	d501      	bpl.n	8003a5e <_printf_i+0x1ce>
 8003a5a:	6018      	str	r0, [r3, #0]
 8003a5c:	e002      	b.n	8003a64 <_printf_i+0x1d4>
 8003a5e:	0671      	lsls	r1, r6, #25
 8003a60:	d5fb      	bpl.n	8003a5a <_printf_i+0x1ca>
 8003a62:	8018      	strh	r0, [r3, #0]
 8003a64:	2300      	movs	r3, #0
 8003a66:	4616      	mov	r6, r2
 8003a68:	6123      	str	r3, [r4, #16]
 8003a6a:	e7ba      	b.n	80039e2 <_printf_i+0x152>
 8003a6c:	680b      	ldr	r3, [r1, #0]
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	600a      	str	r2, [r1, #0]
 8003a72:	681e      	ldr	r6, [r3, #0]
 8003a74:	2100      	movs	r1, #0
 8003a76:	4630      	mov	r0, r6
 8003a78:	6862      	ldr	r2, [r4, #4]
 8003a7a:	f001 f9b7 	bl	8004dec <memchr>
 8003a7e:	b108      	cbz	r0, 8003a84 <_printf_i+0x1f4>
 8003a80:	1b80      	subs	r0, r0, r6
 8003a82:	6060      	str	r0, [r4, #4]
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	6123      	str	r3, [r4, #16]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8e:	e7a8      	b.n	80039e2 <_printf_i+0x152>
 8003a90:	4632      	mov	r2, r6
 8003a92:	4649      	mov	r1, r9
 8003a94:	4640      	mov	r0, r8
 8003a96:	6923      	ldr	r3, [r4, #16]
 8003a98:	47d0      	blx	sl
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	d0ab      	beq.n	80039f6 <_printf_i+0x166>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	079b      	lsls	r3, r3, #30
 8003aa2:	d413      	bmi.n	8003acc <_printf_i+0x23c>
 8003aa4:	68e0      	ldr	r0, [r4, #12]
 8003aa6:	9b03      	ldr	r3, [sp, #12]
 8003aa8:	4298      	cmp	r0, r3
 8003aaa:	bfb8      	it	lt
 8003aac:	4618      	movlt	r0, r3
 8003aae:	e7a4      	b.n	80039fa <_printf_i+0x16a>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	4632      	mov	r2, r6
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	47d0      	blx	sl
 8003aba:	3001      	adds	r0, #1
 8003abc:	d09b      	beq.n	80039f6 <_printf_i+0x166>
 8003abe:	3501      	adds	r5, #1
 8003ac0:	68e3      	ldr	r3, [r4, #12]
 8003ac2:	9903      	ldr	r1, [sp, #12]
 8003ac4:	1a5b      	subs	r3, r3, r1
 8003ac6:	42ab      	cmp	r3, r5
 8003ac8:	dcf2      	bgt.n	8003ab0 <_printf_i+0x220>
 8003aca:	e7eb      	b.n	8003aa4 <_printf_i+0x214>
 8003acc:	2500      	movs	r5, #0
 8003ace:	f104 0619 	add.w	r6, r4, #25
 8003ad2:	e7f5      	b.n	8003ac0 <_printf_i+0x230>
 8003ad4:	08005e2a 	.word	0x08005e2a
 8003ad8:	08005e3b 	.word	0x08005e3b

08003adc <iprintf>:
 8003adc:	b40f      	push	{r0, r1, r2, r3}
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <iprintf+0x2c>)
 8003ae0:	b513      	push	{r0, r1, r4, lr}
 8003ae2:	681c      	ldr	r4, [r3, #0]
 8003ae4:	b124      	cbz	r4, 8003af0 <iprintf+0x14>
 8003ae6:	69a3      	ldr	r3, [r4, #24]
 8003ae8:	b913      	cbnz	r3, 8003af0 <iprintf+0x14>
 8003aea:	4620      	mov	r0, r4
 8003aec:	f001 f86c 	bl	8004bc8 <__sinit>
 8003af0:	ab05      	add	r3, sp, #20
 8003af2:	4620      	mov	r0, r4
 8003af4:	9a04      	ldr	r2, [sp, #16]
 8003af6:	68a1      	ldr	r1, [r4, #8]
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	f001 fdf1 	bl	80056e0 <_vfiprintf_r>
 8003afe:	b002      	add	sp, #8
 8003b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b04:	b004      	add	sp, #16
 8003b06:	4770      	bx	lr
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <setvbuf>:
 8003b0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b10:	461d      	mov	r5, r3
 8003b12:	4b5d      	ldr	r3, [pc, #372]	; (8003c88 <setvbuf+0x17c>)
 8003b14:	4604      	mov	r4, r0
 8003b16:	681f      	ldr	r7, [r3, #0]
 8003b18:	460e      	mov	r6, r1
 8003b1a:	4690      	mov	r8, r2
 8003b1c:	b127      	cbz	r7, 8003b28 <setvbuf+0x1c>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	b913      	cbnz	r3, 8003b28 <setvbuf+0x1c>
 8003b22:	4638      	mov	r0, r7
 8003b24:	f001 f850 	bl	8004bc8 <__sinit>
 8003b28:	4b58      	ldr	r3, [pc, #352]	; (8003c8c <setvbuf+0x180>)
 8003b2a:	429c      	cmp	r4, r3
 8003b2c:	d167      	bne.n	8003bfe <setvbuf+0xf2>
 8003b2e:	687c      	ldr	r4, [r7, #4]
 8003b30:	f1b8 0f02 	cmp.w	r8, #2
 8003b34:	d006      	beq.n	8003b44 <setvbuf+0x38>
 8003b36:	f1b8 0f01 	cmp.w	r8, #1
 8003b3a:	f200 809f 	bhi.w	8003c7c <setvbuf+0x170>
 8003b3e:	2d00      	cmp	r5, #0
 8003b40:	f2c0 809c 	blt.w	8003c7c <setvbuf+0x170>
 8003b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b46:	07db      	lsls	r3, r3, #31
 8003b48:	d405      	bmi.n	8003b56 <setvbuf+0x4a>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	0598      	lsls	r0, r3, #22
 8003b4e:	d402      	bmi.n	8003b56 <setvbuf+0x4a>
 8003b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b52:	f001 f8dc 	bl	8004d0e <__retarget_lock_acquire_recursive>
 8003b56:	4621      	mov	r1, r4
 8003b58:	4638      	mov	r0, r7
 8003b5a:	f000 ffa1 	bl	8004aa0 <_fflush_r>
 8003b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b60:	b141      	cbz	r1, 8003b74 <setvbuf+0x68>
 8003b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b66:	4299      	cmp	r1, r3
 8003b68:	d002      	beq.n	8003b70 <setvbuf+0x64>
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	f001 fcea 	bl	8005544 <_free_r>
 8003b70:	2300      	movs	r3, #0
 8003b72:	6363      	str	r3, [r4, #52]	; 0x34
 8003b74:	2300      	movs	r3, #0
 8003b76:	61a3      	str	r3, [r4, #24]
 8003b78:	6063      	str	r3, [r4, #4]
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	0619      	lsls	r1, r3, #24
 8003b7e:	d503      	bpl.n	8003b88 <setvbuf+0x7c>
 8003b80:	4638      	mov	r0, r7
 8003b82:	6921      	ldr	r1, [r4, #16]
 8003b84:	f001 fcde 	bl	8005544 <_free_r>
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	f1b8 0f02 	cmp.w	r8, #2
 8003b8e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	d06c      	beq.n	8003c74 <setvbuf+0x168>
 8003b9a:	ab01      	add	r3, sp, #4
 8003b9c:	466a      	mov	r2, sp
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f001 f8b6 	bl	8004d12 <__swhatbuf_r>
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
 8003ba8:	4318      	orrs	r0, r3
 8003baa:	81a0      	strh	r0, [r4, #12]
 8003bac:	2d00      	cmp	r5, #0
 8003bae:	d130      	bne.n	8003c12 <setvbuf+0x106>
 8003bb0:	9d00      	ldr	r5, [sp, #0]
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f001 f912 	bl	8004ddc <malloc>
 8003bb8:	4606      	mov	r6, r0
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d155      	bne.n	8003c6a <setvbuf+0x15e>
 8003bbe:	f8dd 9000 	ldr.w	r9, [sp]
 8003bc2:	45a9      	cmp	r9, r5
 8003bc4:	d14a      	bne.n	8003c5c <setvbuf+0x150>
 8003bc6:	f04f 35ff 	mov.w	r5, #4294967295
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60a2      	str	r2, [r4, #8]
 8003bce:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003bd2:	6022      	str	r2, [r4, #0]
 8003bd4:	6122      	str	r2, [r4, #16]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bdc:	6162      	str	r2, [r4, #20]
 8003bde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	07d2      	lsls	r2, r2, #31
 8003be6:	81a3      	strh	r3, [r4, #12]
 8003be8:	d405      	bmi.n	8003bf6 <setvbuf+0xea>
 8003bea:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003bee:	d102      	bne.n	8003bf6 <setvbuf+0xea>
 8003bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bf2:	f001 f88d 	bl	8004d10 <__retarget_lock_release_recursive>
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	b003      	add	sp, #12
 8003bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <setvbuf+0x184>)
 8003c00:	429c      	cmp	r4, r3
 8003c02:	d101      	bne.n	8003c08 <setvbuf+0xfc>
 8003c04:	68bc      	ldr	r4, [r7, #8]
 8003c06:	e793      	b.n	8003b30 <setvbuf+0x24>
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <setvbuf+0x188>)
 8003c0a:	429c      	cmp	r4, r3
 8003c0c:	bf08      	it	eq
 8003c0e:	68fc      	ldreq	r4, [r7, #12]
 8003c10:	e78e      	b.n	8003b30 <setvbuf+0x24>
 8003c12:	2e00      	cmp	r6, #0
 8003c14:	d0cd      	beq.n	8003bb2 <setvbuf+0xa6>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	b913      	cbnz	r3, 8003c20 <setvbuf+0x114>
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	f000 ffd4 	bl	8004bc8 <__sinit>
 8003c20:	f1b8 0f01 	cmp.w	r8, #1
 8003c24:	bf08      	it	eq
 8003c26:	89a3      	ldrheq	r3, [r4, #12]
 8003c28:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003c2c:	bf04      	itt	eq
 8003c2e:	f043 0301 	orreq.w	r3, r3, #1
 8003c32:	81a3      	strheq	r3, [r4, #12]
 8003c34:	89a2      	ldrh	r2, [r4, #12]
 8003c36:	6026      	str	r6, [r4, #0]
 8003c38:	f012 0308 	ands.w	r3, r2, #8
 8003c3c:	d01c      	beq.n	8003c78 <setvbuf+0x16c>
 8003c3e:	07d3      	lsls	r3, r2, #31
 8003c40:	bf41      	itttt	mi
 8003c42:	2300      	movmi	r3, #0
 8003c44:	426d      	negmi	r5, r5
 8003c46:	60a3      	strmi	r3, [r4, #8]
 8003c48:	61a5      	strmi	r5, [r4, #24]
 8003c4a:	bf58      	it	pl
 8003c4c:	60a5      	strpl	r5, [r4, #8]
 8003c4e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003c50:	f015 0501 	ands.w	r5, r5, #1
 8003c54:	d115      	bne.n	8003c82 <setvbuf+0x176>
 8003c56:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003c5a:	e7c8      	b.n	8003bee <setvbuf+0xe2>
 8003c5c:	4648      	mov	r0, r9
 8003c5e:	f001 f8bd 	bl	8004ddc <malloc>
 8003c62:	4606      	mov	r6, r0
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d0ae      	beq.n	8003bc6 <setvbuf+0xba>
 8003c68:	464d      	mov	r5, r9
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c70:	81a3      	strh	r3, [r4, #12]
 8003c72:	e7d0      	b.n	8003c16 <setvbuf+0x10a>
 8003c74:	2500      	movs	r5, #0
 8003c76:	e7a8      	b.n	8003bca <setvbuf+0xbe>
 8003c78:	60a3      	str	r3, [r4, #8]
 8003c7a:	e7e8      	b.n	8003c4e <setvbuf+0x142>
 8003c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c80:	e7b9      	b.n	8003bf6 <setvbuf+0xea>
 8003c82:	2500      	movs	r5, #0
 8003c84:	e7b7      	b.n	8003bf6 <setvbuf+0xea>
 8003c86:	bf00      	nop
 8003c88:	2000000c 	.word	0x2000000c
 8003c8c:	08005f00 	.word	0x08005f00
 8003c90:	08005f20 	.word	0x08005f20
 8003c94:	08005ee0 	.word	0x08005ee0

08003c98 <quorem>:
 8003c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	6903      	ldr	r3, [r0, #16]
 8003c9e:	690c      	ldr	r4, [r1, #16]
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	42a3      	cmp	r3, r4
 8003ca4:	f2c0 8083 	blt.w	8003dae <quorem+0x116>
 8003ca8:	3c01      	subs	r4, #1
 8003caa:	f100 0514 	add.w	r5, r0, #20
 8003cae:	f101 0814 	add.w	r8, r1, #20
 8003cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003cc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003cd0:	d332      	bcc.n	8003d38 <quorem+0xa0>
 8003cd2:	f04f 0e00 	mov.w	lr, #0
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	46ac      	mov	ip, r5
 8003cda:	46f2      	mov	sl, lr
 8003cdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ce0:	b293      	uxth	r3, r2
 8003ce2:	fb06 e303 	mla	r3, r6, r3, lr
 8003ce6:	0c12      	lsrs	r2, r2, #16
 8003ce8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003cec:	fb06 e202 	mla	r2, r6, r2, lr
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	ebaa 0303 	sub.w	r3, sl, r3
 8003cf6:	f8dc a000 	ldr.w	sl, [ip]
 8003cfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003cfe:	fa1f fa8a 	uxth.w	sl, sl
 8003d02:	4453      	add	r3, sl
 8003d04:	fa1f fa82 	uxth.w	sl, r2
 8003d08:	f8dc 2000 	ldr.w	r2, [ip]
 8003d0c:	4581      	cmp	r9, r0
 8003d0e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003d12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003d20:	f84c 3b04 	str.w	r3, [ip], #4
 8003d24:	d2da      	bcs.n	8003cdc <quorem+0x44>
 8003d26:	f855 300b 	ldr.w	r3, [r5, fp]
 8003d2a:	b92b      	cbnz	r3, 8003d38 <quorem+0xa0>
 8003d2c:	9b01      	ldr	r3, [sp, #4]
 8003d2e:	3b04      	subs	r3, #4
 8003d30:	429d      	cmp	r5, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	d32f      	bcc.n	8003d96 <quorem+0xfe>
 8003d36:	613c      	str	r4, [r7, #16]
 8003d38:	4638      	mov	r0, r7
 8003d3a:	f001 faed 	bl	8005318 <__mcmp>
 8003d3e:	2800      	cmp	r0, #0
 8003d40:	db25      	blt.n	8003d8e <quorem+0xf6>
 8003d42:	4628      	mov	r0, r5
 8003d44:	f04f 0c00 	mov.w	ip, #0
 8003d48:	3601      	adds	r6, #1
 8003d4a:	f858 1b04 	ldr.w	r1, [r8], #4
 8003d4e:	f8d0 e000 	ldr.w	lr, [r0]
 8003d52:	b28b      	uxth	r3, r1
 8003d54:	ebac 0303 	sub.w	r3, ip, r3
 8003d58:	fa1f f28e 	uxth.w	r2, lr
 8003d5c:	4413      	add	r3, r2
 8003d5e:	0c0a      	lsrs	r2, r1, #16
 8003d60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003d64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d6e:	45c1      	cmp	r9, r8
 8003d70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003d74:	f840 3b04 	str.w	r3, [r0], #4
 8003d78:	d2e7      	bcs.n	8003d4a <quorem+0xb2>
 8003d7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d82:	b922      	cbnz	r2, 8003d8e <quorem+0xf6>
 8003d84:	3b04      	subs	r3, #4
 8003d86:	429d      	cmp	r5, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	d30a      	bcc.n	8003da2 <quorem+0x10a>
 8003d8c:	613c      	str	r4, [r7, #16]
 8003d8e:	4630      	mov	r0, r6
 8003d90:	b003      	add	sp, #12
 8003d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	3b04      	subs	r3, #4
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	d1cb      	bne.n	8003d36 <quorem+0x9e>
 8003d9e:	3c01      	subs	r4, #1
 8003da0:	e7c6      	b.n	8003d30 <quorem+0x98>
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	3b04      	subs	r3, #4
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	d1f0      	bne.n	8003d8c <quorem+0xf4>
 8003daa:	3c01      	subs	r4, #1
 8003dac:	e7eb      	b.n	8003d86 <quorem+0xee>
 8003dae:	2000      	movs	r0, #0
 8003db0:	e7ee      	b.n	8003d90 <quorem+0xf8>
 8003db2:	0000      	movs	r0, r0
 8003db4:	0000      	movs	r0, r0
	...

08003db8 <_dtoa_r>:
 8003db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	4616      	mov	r6, r2
 8003dbe:	461f      	mov	r7, r3
 8003dc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003dc2:	b099      	sub	sp, #100	; 0x64
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003dca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003dce:	b974      	cbnz	r4, 8003dee <_dtoa_r+0x36>
 8003dd0:	2010      	movs	r0, #16
 8003dd2:	f001 f803 	bl	8004ddc <malloc>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6268      	str	r0, [r5, #36]	; 0x24
 8003dda:	b920      	cbnz	r0, 8003de6 <_dtoa_r+0x2e>
 8003ddc:	21ea      	movs	r1, #234	; 0xea
 8003dde:	4bae      	ldr	r3, [pc, #696]	; (8004098 <_dtoa_r+0x2e0>)
 8003de0:	48ae      	ldr	r0, [pc, #696]	; (800409c <_dtoa_r+0x2e4>)
 8003de2:	f001 fed3 	bl	8005b8c <__assert_func>
 8003de6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003dea:	6004      	str	r4, [r0, #0]
 8003dec:	60c4      	str	r4, [r0, #12]
 8003dee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	b151      	cbz	r1, 8003e0a <_dtoa_r+0x52>
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	2301      	movs	r3, #1
 8003df8:	4093      	lsls	r3, r2
 8003dfa:	604a      	str	r2, [r1, #4]
 8003dfc:	608b      	str	r3, [r1, #8]
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f001 f850 	bl	8004ea4 <_Bfree>
 8003e04:	2200      	movs	r2, #0
 8003e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	1e3b      	subs	r3, r7, #0
 8003e0c:	bfaf      	iteee	ge
 8003e0e:	2300      	movge	r3, #0
 8003e10:	2201      	movlt	r2, #1
 8003e12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e16:	9305      	strlt	r3, [sp, #20]
 8003e18:	bfa8      	it	ge
 8003e1a:	f8c8 3000 	strge.w	r3, [r8]
 8003e1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003e22:	4b9f      	ldr	r3, [pc, #636]	; (80040a0 <_dtoa_r+0x2e8>)
 8003e24:	bfb8      	it	lt
 8003e26:	f8c8 2000 	strlt.w	r2, [r8]
 8003e2a:	ea33 0309 	bics.w	r3, r3, r9
 8003e2e:	d119      	bne.n	8003e64 <_dtoa_r+0xac>
 8003e30:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003e3c:	4333      	orrs	r3, r6
 8003e3e:	f000 8580 	beq.w	8004942 <_dtoa_r+0xb8a>
 8003e42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e44:	b953      	cbnz	r3, 8003e5c <_dtoa_r+0xa4>
 8003e46:	4b97      	ldr	r3, [pc, #604]	; (80040a4 <_dtoa_r+0x2ec>)
 8003e48:	e022      	b.n	8003e90 <_dtoa_r+0xd8>
 8003e4a:	4b97      	ldr	r3, [pc, #604]	; (80040a8 <_dtoa_r+0x2f0>)
 8003e4c:	9308      	str	r3, [sp, #32]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	9808      	ldr	r0, [sp, #32]
 8003e56:	b019      	add	sp, #100	; 0x64
 8003e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5c:	4b91      	ldr	r3, [pc, #580]	; (80040a4 <_dtoa_r+0x2ec>)
 8003e5e:	9308      	str	r3, [sp, #32]
 8003e60:	3303      	adds	r3, #3
 8003e62:	e7f5      	b.n	8003e50 <_dtoa_r+0x98>
 8003e64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003e68:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003e6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e70:	2200      	movs	r2, #0
 8003e72:	2300      	movs	r3, #0
 8003e74:	f7fc fe04 	bl	8000a80 <__aeabi_dcmpeq>
 8003e78:	4680      	mov	r8, r0
 8003e7a:	b158      	cbz	r0, 8003e94 <_dtoa_r+0xdc>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8559 	beq.w	800493c <_dtoa_r+0xb84>
 8003e8a:	4888      	ldr	r0, [pc, #544]	; (80040ac <_dtoa_r+0x2f4>)
 8003e8c:	6018      	str	r0, [r3, #0]
 8003e8e:	1e43      	subs	r3, r0, #1
 8003e90:	9308      	str	r3, [sp, #32]
 8003e92:	e7df      	b.n	8003e54 <_dtoa_r+0x9c>
 8003e94:	ab16      	add	r3, sp, #88	; 0x58
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	ab17      	add	r3, sp, #92	; 0x5c
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003ea2:	f001 fae5 	bl	8005470 <__d2b>
 8003ea6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003eaa:	4682      	mov	sl, r0
 8003eac:	2c00      	cmp	r4, #0
 8003eae:	d07e      	beq.n	8003fae <_dtoa_r+0x1f6>
 8003eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003eb6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ebe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003ec2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003ec6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4b78      	ldr	r3, [pc, #480]	; (80040b0 <_dtoa_r+0x2f8>)
 8003ece:	f7fc f9b7 	bl	8000240 <__aeabi_dsub>
 8003ed2:	a36b      	add	r3, pc, #428	; (adr r3, 8004080 <_dtoa_r+0x2c8>)
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f7fc fb6a 	bl	80005b0 <__aeabi_dmul>
 8003edc:	a36a      	add	r3, pc, #424	; (adr r3, 8004088 <_dtoa_r+0x2d0>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f7fc f9af 	bl	8000244 <__adddf3>
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	4620      	mov	r0, r4
 8003eea:	460f      	mov	r7, r1
 8003eec:	f7fc faf6 	bl	80004dc <__aeabi_i2d>
 8003ef0:	a367      	add	r3, pc, #412	; (adr r3, 8004090 <_dtoa_r+0x2d8>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f7fc fb5b 	bl	80005b0 <__aeabi_dmul>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4630      	mov	r0, r6
 8003f00:	4639      	mov	r1, r7
 8003f02:	f7fc f99f 	bl	8000244 <__adddf3>
 8003f06:	4606      	mov	r6, r0
 8003f08:	460f      	mov	r7, r1
 8003f0a:	f7fc fe01 	bl	8000b10 <__aeabi_d2iz>
 8003f0e:	2200      	movs	r2, #0
 8003f10:	4681      	mov	r9, r0
 8003f12:	2300      	movs	r3, #0
 8003f14:	4630      	mov	r0, r6
 8003f16:	4639      	mov	r1, r7
 8003f18:	f7fc fdbc 	bl	8000a94 <__aeabi_dcmplt>
 8003f1c:	b148      	cbz	r0, 8003f32 <_dtoa_r+0x17a>
 8003f1e:	4648      	mov	r0, r9
 8003f20:	f7fc fadc 	bl	80004dc <__aeabi_i2d>
 8003f24:	4632      	mov	r2, r6
 8003f26:	463b      	mov	r3, r7
 8003f28:	f7fc fdaa 	bl	8000a80 <__aeabi_dcmpeq>
 8003f2c:	b908      	cbnz	r0, 8003f32 <_dtoa_r+0x17a>
 8003f2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f32:	f1b9 0f16 	cmp.w	r9, #22
 8003f36:	d857      	bhi.n	8003fe8 <_dtoa_r+0x230>
 8003f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f3c:	4b5d      	ldr	r3, [pc, #372]	; (80040b4 <_dtoa_r+0x2fc>)
 8003f3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f7fc fda5 	bl	8000a94 <__aeabi_dcmplt>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d04e      	beq.n	8003fec <_dtoa_r+0x234>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f54:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f58:	1b1c      	subs	r4, r3, r4
 8003f5a:	1e63      	subs	r3, r4, #1
 8003f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5e:	bf49      	itett	mi
 8003f60:	f1c4 0301 	rsbmi	r3, r4, #1
 8003f64:	2300      	movpl	r3, #0
 8003f66:	9306      	strmi	r3, [sp, #24]
 8003f68:	2300      	movmi	r3, #0
 8003f6a:	bf54      	ite	pl
 8003f6c:	9306      	strpl	r3, [sp, #24]
 8003f6e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003f70:	f1b9 0f00 	cmp.w	r9, #0
 8003f74:	db3c      	blt.n	8003ff0 <_dtoa_r+0x238>
 8003f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f78:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003f7c:	444b      	add	r3, r9
 8003f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f80:	2300      	movs	r3, #0
 8003f82:	930a      	str	r3, [sp, #40]	; 0x28
 8003f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f86:	2b09      	cmp	r3, #9
 8003f88:	d86c      	bhi.n	8004064 <_dtoa_r+0x2ac>
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	bfc4      	itt	gt
 8003f8e:	3b04      	subgt	r3, #4
 8003f90:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003f92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f94:	bfc8      	it	gt
 8003f96:	2400      	movgt	r4, #0
 8003f98:	f1a3 0302 	sub.w	r3, r3, #2
 8003f9c:	bfd8      	it	le
 8003f9e:	2401      	movle	r4, #1
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	f200 808b 	bhi.w	80040bc <_dtoa_r+0x304>
 8003fa6:	e8df f003 	tbb	[pc, r3]
 8003faa:	4f2d      	.short	0x4f2d
 8003fac:	5b4d      	.short	0x5b4d
 8003fae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003fb2:	441c      	add	r4, r3
 8003fb4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	bfc3      	ittte	gt
 8003fbc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003fc0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003fc4:	fa09 f303 	lslgt.w	r3, r9, r3
 8003fc8:	f1c3 0320 	rsble	r3, r3, #32
 8003fcc:	bfc6      	itte	gt
 8003fce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003fd2:	4318      	orrgt	r0, r3
 8003fd4:	fa06 f003 	lslle.w	r0, r6, r3
 8003fd8:	f7fc fa70 	bl	80004bc <__aeabi_ui2d>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003fe2:	3c01      	subs	r4, #1
 8003fe4:	9313      	str	r3, [sp, #76]	; 0x4c
 8003fe6:	e770      	b.n	8003eca <_dtoa_r+0x112>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e7b3      	b.n	8003f54 <_dtoa_r+0x19c>
 8003fec:	900f      	str	r0, [sp, #60]	; 0x3c
 8003fee:	e7b2      	b.n	8003f56 <_dtoa_r+0x19e>
 8003ff0:	9b06      	ldr	r3, [sp, #24]
 8003ff2:	eba3 0309 	sub.w	r3, r3, r9
 8003ff6:	9306      	str	r3, [sp, #24]
 8003ff8:	f1c9 0300 	rsb	r3, r9, #0
 8003ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8003ffe:	2300      	movs	r3, #0
 8004000:	930e      	str	r3, [sp, #56]	; 0x38
 8004002:	e7bf      	b.n	8003f84 <_dtoa_r+0x1cc>
 8004004:	2300      	movs	r3, #0
 8004006:	930b      	str	r3, [sp, #44]	; 0x2c
 8004008:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800400a:	2b00      	cmp	r3, #0
 800400c:	dc59      	bgt.n	80040c2 <_dtoa_r+0x30a>
 800400e:	f04f 0b01 	mov.w	fp, #1
 8004012:	465b      	mov	r3, fp
 8004014:	f8cd b008 	str.w	fp, [sp, #8]
 8004018:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800401c:	2200      	movs	r2, #0
 800401e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004020:	6042      	str	r2, [r0, #4]
 8004022:	2204      	movs	r2, #4
 8004024:	f102 0614 	add.w	r6, r2, #20
 8004028:	429e      	cmp	r6, r3
 800402a:	6841      	ldr	r1, [r0, #4]
 800402c:	d94f      	bls.n	80040ce <_dtoa_r+0x316>
 800402e:	4628      	mov	r0, r5
 8004030:	f000 fef8 	bl	8004e24 <_Balloc>
 8004034:	9008      	str	r0, [sp, #32]
 8004036:	2800      	cmp	r0, #0
 8004038:	d14d      	bne.n	80040d6 <_dtoa_r+0x31e>
 800403a:	4602      	mov	r2, r0
 800403c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <_dtoa_r+0x300>)
 8004042:	e6cd      	b.n	8003de0 <_dtoa_r+0x28>
 8004044:	2301      	movs	r3, #1
 8004046:	e7de      	b.n	8004006 <_dtoa_r+0x24e>
 8004048:	2300      	movs	r3, #0
 800404a:	930b      	str	r3, [sp, #44]	; 0x2c
 800404c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800404e:	eb09 0b03 	add.w	fp, r9, r3
 8004052:	f10b 0301 	add.w	r3, fp, #1
 8004056:	2b01      	cmp	r3, #1
 8004058:	9302      	str	r3, [sp, #8]
 800405a:	bfb8      	it	lt
 800405c:	2301      	movlt	r3, #1
 800405e:	e7dd      	b.n	800401c <_dtoa_r+0x264>
 8004060:	2301      	movs	r3, #1
 8004062:	e7f2      	b.n	800404a <_dtoa_r+0x292>
 8004064:	2401      	movs	r4, #1
 8004066:	2300      	movs	r3, #0
 8004068:	940b      	str	r4, [sp, #44]	; 0x2c
 800406a:	9322      	str	r3, [sp, #136]	; 0x88
 800406c:	f04f 3bff 	mov.w	fp, #4294967295
 8004070:	2200      	movs	r2, #0
 8004072:	2312      	movs	r3, #18
 8004074:	f8cd b008 	str.w	fp, [sp, #8]
 8004078:	9223      	str	r2, [sp, #140]	; 0x8c
 800407a:	e7cf      	b.n	800401c <_dtoa_r+0x264>
 800407c:	f3af 8000 	nop.w
 8004080:	636f4361 	.word	0x636f4361
 8004084:	3fd287a7 	.word	0x3fd287a7
 8004088:	8b60c8b3 	.word	0x8b60c8b3
 800408c:	3fc68a28 	.word	0x3fc68a28
 8004090:	509f79fb 	.word	0x509f79fb
 8004094:	3fd34413 	.word	0x3fd34413
 8004098:	08005e59 	.word	0x08005e59
 800409c:	08005e70 	.word	0x08005e70
 80040a0:	7ff00000 	.word	0x7ff00000
 80040a4:	08005e55 	.word	0x08005e55
 80040a8:	08005e4c 	.word	0x08005e4c
 80040ac:	08005e29 	.word	0x08005e29
 80040b0:	3ff80000 	.word	0x3ff80000
 80040b4:	08005fc8 	.word	0x08005fc8
 80040b8:	08005ecf 	.word	0x08005ecf
 80040bc:	2301      	movs	r3, #1
 80040be:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c0:	e7d4      	b.n	800406c <_dtoa_r+0x2b4>
 80040c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80040c6:	465b      	mov	r3, fp
 80040c8:	f8cd b008 	str.w	fp, [sp, #8]
 80040cc:	e7a6      	b.n	800401c <_dtoa_r+0x264>
 80040ce:	3101      	adds	r1, #1
 80040d0:	6041      	str	r1, [r0, #4]
 80040d2:	0052      	lsls	r2, r2, #1
 80040d4:	e7a6      	b.n	8004024 <_dtoa_r+0x26c>
 80040d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80040d8:	9a08      	ldr	r2, [sp, #32]
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	9b02      	ldr	r3, [sp, #8]
 80040de:	2b0e      	cmp	r3, #14
 80040e0:	f200 80a8 	bhi.w	8004234 <_dtoa_r+0x47c>
 80040e4:	2c00      	cmp	r4, #0
 80040e6:	f000 80a5 	beq.w	8004234 <_dtoa_r+0x47c>
 80040ea:	f1b9 0f00 	cmp.w	r9, #0
 80040ee:	dd34      	ble.n	800415a <_dtoa_r+0x3a2>
 80040f0:	4a9a      	ldr	r2, [pc, #616]	; (800435c <_dtoa_r+0x5a4>)
 80040f2:	f009 030f 	and.w	r3, r9, #15
 80040f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80040fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80040fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004102:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004106:	ea4f 1429 	mov.w	r4, r9, asr #4
 800410a:	d016      	beq.n	800413a <_dtoa_r+0x382>
 800410c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004110:	4b93      	ldr	r3, [pc, #588]	; (8004360 <_dtoa_r+0x5a8>)
 8004112:	2703      	movs	r7, #3
 8004114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004118:	f7fc fb74 	bl	8000804 <__aeabi_ddiv>
 800411c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004120:	f004 040f 	and.w	r4, r4, #15
 8004124:	4e8e      	ldr	r6, [pc, #568]	; (8004360 <_dtoa_r+0x5a8>)
 8004126:	b954      	cbnz	r4, 800413e <_dtoa_r+0x386>
 8004128:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800412c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004130:	f7fc fb68 	bl	8000804 <__aeabi_ddiv>
 8004134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004138:	e029      	b.n	800418e <_dtoa_r+0x3d6>
 800413a:	2702      	movs	r7, #2
 800413c:	e7f2      	b.n	8004124 <_dtoa_r+0x36c>
 800413e:	07e1      	lsls	r1, r4, #31
 8004140:	d508      	bpl.n	8004154 <_dtoa_r+0x39c>
 8004142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004146:	e9d6 2300 	ldrd	r2, r3, [r6]
 800414a:	f7fc fa31 	bl	80005b0 <__aeabi_dmul>
 800414e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004152:	3701      	adds	r7, #1
 8004154:	1064      	asrs	r4, r4, #1
 8004156:	3608      	adds	r6, #8
 8004158:	e7e5      	b.n	8004126 <_dtoa_r+0x36e>
 800415a:	f000 80a5 	beq.w	80042a8 <_dtoa_r+0x4f0>
 800415e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004162:	f1c9 0400 	rsb	r4, r9, #0
 8004166:	4b7d      	ldr	r3, [pc, #500]	; (800435c <_dtoa_r+0x5a4>)
 8004168:	f004 020f 	and.w	r2, r4, #15
 800416c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f7fc fa1c 	bl	80005b0 <__aeabi_dmul>
 8004178:	2702      	movs	r7, #2
 800417a:	2300      	movs	r3, #0
 800417c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004180:	4e77      	ldr	r6, [pc, #476]	; (8004360 <_dtoa_r+0x5a8>)
 8004182:	1124      	asrs	r4, r4, #4
 8004184:	2c00      	cmp	r4, #0
 8004186:	f040 8084 	bne.w	8004292 <_dtoa_r+0x4da>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1d2      	bne.n	8004134 <_dtoa_r+0x37c>
 800418e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 808b 	beq.w	80042ac <_dtoa_r+0x4f4>
 8004196:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800419a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800419e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041a2:	2200      	movs	r2, #0
 80041a4:	4b6f      	ldr	r3, [pc, #444]	; (8004364 <_dtoa_r+0x5ac>)
 80041a6:	f7fc fc75 	bl	8000a94 <__aeabi_dcmplt>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d07e      	beq.n	80042ac <_dtoa_r+0x4f4>
 80041ae:	9b02      	ldr	r3, [sp, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d07b      	beq.n	80042ac <_dtoa_r+0x4f4>
 80041b4:	f1bb 0f00 	cmp.w	fp, #0
 80041b8:	dd38      	ble.n	800422c <_dtoa_r+0x474>
 80041ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041be:	2200      	movs	r2, #0
 80041c0:	4b69      	ldr	r3, [pc, #420]	; (8004368 <_dtoa_r+0x5b0>)
 80041c2:	f7fc f9f5 	bl	80005b0 <__aeabi_dmul>
 80041c6:	465c      	mov	r4, fp
 80041c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041cc:	f109 38ff 	add.w	r8, r9, #4294967295
 80041d0:	3701      	adds	r7, #1
 80041d2:	4638      	mov	r0, r7
 80041d4:	f7fc f982 	bl	80004dc <__aeabi_i2d>
 80041d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041dc:	f7fc f9e8 	bl	80005b0 <__aeabi_dmul>
 80041e0:	2200      	movs	r2, #0
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <_dtoa_r+0x5b4>)
 80041e4:	f7fc f82e 	bl	8000244 <__adddf3>
 80041e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80041ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041f0:	9611      	str	r6, [sp, #68]	; 0x44
 80041f2:	2c00      	cmp	r4, #0
 80041f4:	d15d      	bne.n	80042b2 <_dtoa_r+0x4fa>
 80041f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041fa:	2200      	movs	r2, #0
 80041fc:	4b5c      	ldr	r3, [pc, #368]	; (8004370 <_dtoa_r+0x5b8>)
 80041fe:	f7fc f81f 	bl	8000240 <__aeabi_dsub>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800420a:	4633      	mov	r3, r6
 800420c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800420e:	f7fc fc5f 	bl	8000ad0 <__aeabi_dcmpgt>
 8004212:	2800      	cmp	r0, #0
 8004214:	f040 829e 	bne.w	8004754 <_dtoa_r+0x99c>
 8004218:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800421c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800421e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004222:	f7fc fc37 	bl	8000a94 <__aeabi_dcmplt>
 8004226:	2800      	cmp	r0, #0
 8004228:	f040 8292 	bne.w	8004750 <_dtoa_r+0x998>
 800422c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004230:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004236:	2b00      	cmp	r3, #0
 8004238:	f2c0 8153 	blt.w	80044e2 <_dtoa_r+0x72a>
 800423c:	f1b9 0f0e 	cmp.w	r9, #14
 8004240:	f300 814f 	bgt.w	80044e2 <_dtoa_r+0x72a>
 8004244:	4b45      	ldr	r3, [pc, #276]	; (800435c <_dtoa_r+0x5a4>)
 8004246:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800424a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800424e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004252:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004254:	2b00      	cmp	r3, #0
 8004256:	f280 80db 	bge.w	8004410 <_dtoa_r+0x658>
 800425a:	9b02      	ldr	r3, [sp, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f300 80d7 	bgt.w	8004410 <_dtoa_r+0x658>
 8004262:	f040 8274 	bne.w	800474e <_dtoa_r+0x996>
 8004266:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800426a:	2200      	movs	r2, #0
 800426c:	4b40      	ldr	r3, [pc, #256]	; (8004370 <_dtoa_r+0x5b8>)
 800426e:	f7fc f99f 	bl	80005b0 <__aeabi_dmul>
 8004272:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004276:	f7fc fc21 	bl	8000abc <__aeabi_dcmpge>
 800427a:	9c02      	ldr	r4, [sp, #8]
 800427c:	4626      	mov	r6, r4
 800427e:	2800      	cmp	r0, #0
 8004280:	f040 824a 	bne.w	8004718 <_dtoa_r+0x960>
 8004284:	2331      	movs	r3, #49	; 0x31
 8004286:	9f08      	ldr	r7, [sp, #32]
 8004288:	f109 0901 	add.w	r9, r9, #1
 800428c:	f807 3b01 	strb.w	r3, [r7], #1
 8004290:	e246      	b.n	8004720 <_dtoa_r+0x968>
 8004292:	07e2      	lsls	r2, r4, #31
 8004294:	d505      	bpl.n	80042a2 <_dtoa_r+0x4ea>
 8004296:	e9d6 2300 	ldrd	r2, r3, [r6]
 800429a:	f7fc f989 	bl	80005b0 <__aeabi_dmul>
 800429e:	2301      	movs	r3, #1
 80042a0:	3701      	adds	r7, #1
 80042a2:	1064      	asrs	r4, r4, #1
 80042a4:	3608      	adds	r6, #8
 80042a6:	e76d      	b.n	8004184 <_dtoa_r+0x3cc>
 80042a8:	2702      	movs	r7, #2
 80042aa:	e770      	b.n	800418e <_dtoa_r+0x3d6>
 80042ac:	46c8      	mov	r8, r9
 80042ae:	9c02      	ldr	r4, [sp, #8]
 80042b0:	e78f      	b.n	80041d2 <_dtoa_r+0x41a>
 80042b2:	9908      	ldr	r1, [sp, #32]
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <_dtoa_r+0x5a4>)
 80042b6:	4421      	add	r1, r4
 80042b8:	9112      	str	r1, [sp, #72]	; 0x48
 80042ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80042c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80042c8:	2900      	cmp	r1, #0
 80042ca:	d055      	beq.n	8004378 <_dtoa_r+0x5c0>
 80042cc:	2000      	movs	r0, #0
 80042ce:	4929      	ldr	r1, [pc, #164]	; (8004374 <_dtoa_r+0x5bc>)
 80042d0:	f7fc fa98 	bl	8000804 <__aeabi_ddiv>
 80042d4:	463b      	mov	r3, r7
 80042d6:	4632      	mov	r2, r6
 80042d8:	f7fb ffb2 	bl	8000240 <__aeabi_dsub>
 80042dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042e0:	9f08      	ldr	r7, [sp, #32]
 80042e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042e6:	f7fc fc13 	bl	8000b10 <__aeabi_d2iz>
 80042ea:	4604      	mov	r4, r0
 80042ec:	f7fc f8f6 	bl	80004dc <__aeabi_i2d>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042f8:	f7fb ffa2 	bl	8000240 <__aeabi_dsub>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	3430      	adds	r4, #48	; 0x30
 8004302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004306:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800430a:	f807 4b01 	strb.w	r4, [r7], #1
 800430e:	f7fc fbc1 	bl	8000a94 <__aeabi_dcmplt>
 8004312:	2800      	cmp	r0, #0
 8004314:	d174      	bne.n	8004400 <_dtoa_r+0x648>
 8004316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800431a:	2000      	movs	r0, #0
 800431c:	4911      	ldr	r1, [pc, #68]	; (8004364 <_dtoa_r+0x5ac>)
 800431e:	f7fb ff8f 	bl	8000240 <__aeabi_dsub>
 8004322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004326:	f7fc fbb5 	bl	8000a94 <__aeabi_dcmplt>
 800432a:	2800      	cmp	r0, #0
 800432c:	f040 80b6 	bne.w	800449c <_dtoa_r+0x6e4>
 8004330:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004332:	429f      	cmp	r7, r3
 8004334:	f43f af7a 	beq.w	800422c <_dtoa_r+0x474>
 8004338:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800433c:	2200      	movs	r2, #0
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <_dtoa_r+0x5b0>)
 8004340:	f7fc f936 	bl	80005b0 <__aeabi_dmul>
 8004344:	2200      	movs	r2, #0
 8004346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800434a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <_dtoa_r+0x5b0>)
 8004350:	f7fc f92e 	bl	80005b0 <__aeabi_dmul>
 8004354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004358:	e7c3      	b.n	80042e2 <_dtoa_r+0x52a>
 800435a:	bf00      	nop
 800435c:	08005fc8 	.word	0x08005fc8
 8004360:	08005fa0 	.word	0x08005fa0
 8004364:	3ff00000 	.word	0x3ff00000
 8004368:	40240000 	.word	0x40240000
 800436c:	401c0000 	.word	0x401c0000
 8004370:	40140000 	.word	0x40140000
 8004374:	3fe00000 	.word	0x3fe00000
 8004378:	4630      	mov	r0, r6
 800437a:	4639      	mov	r1, r7
 800437c:	f7fc f918 	bl	80005b0 <__aeabi_dmul>
 8004380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004382:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004386:	9c08      	ldr	r4, [sp, #32]
 8004388:	9314      	str	r3, [sp, #80]	; 0x50
 800438a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800438e:	f7fc fbbf 	bl	8000b10 <__aeabi_d2iz>
 8004392:	9015      	str	r0, [sp, #84]	; 0x54
 8004394:	f7fc f8a2 	bl	80004dc <__aeabi_i2d>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043a0:	f7fb ff4e 	bl	8000240 <__aeabi_dsub>
 80043a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043a6:	4606      	mov	r6, r0
 80043a8:	3330      	adds	r3, #48	; 0x30
 80043aa:	f804 3b01 	strb.w	r3, [r4], #1
 80043ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043b0:	460f      	mov	r7, r1
 80043b2:	429c      	cmp	r4, r3
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	d124      	bne.n	8004404 <_dtoa_r+0x64c>
 80043ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043be:	4bb3      	ldr	r3, [pc, #716]	; (800468c <_dtoa_r+0x8d4>)
 80043c0:	f7fb ff40 	bl	8000244 <__adddf3>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4630      	mov	r0, r6
 80043ca:	4639      	mov	r1, r7
 80043cc:	f7fc fb80 	bl	8000ad0 <__aeabi_dcmpgt>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d162      	bne.n	800449a <_dtoa_r+0x6e2>
 80043d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043d8:	2000      	movs	r0, #0
 80043da:	49ac      	ldr	r1, [pc, #688]	; (800468c <_dtoa_r+0x8d4>)
 80043dc:	f7fb ff30 	bl	8000240 <__aeabi_dsub>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4630      	mov	r0, r6
 80043e6:	4639      	mov	r1, r7
 80043e8:	f7fc fb54 	bl	8000a94 <__aeabi_dcmplt>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	f43f af1d 	beq.w	800422c <_dtoa_r+0x474>
 80043f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80043f4:	1e7b      	subs	r3, r7, #1
 80043f6:	9314      	str	r3, [sp, #80]	; 0x50
 80043f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80043fc:	2b30      	cmp	r3, #48	; 0x30
 80043fe:	d0f8      	beq.n	80043f2 <_dtoa_r+0x63a>
 8004400:	46c1      	mov	r9, r8
 8004402:	e03a      	b.n	800447a <_dtoa_r+0x6c2>
 8004404:	4ba2      	ldr	r3, [pc, #648]	; (8004690 <_dtoa_r+0x8d8>)
 8004406:	f7fc f8d3 	bl	80005b0 <__aeabi_dmul>
 800440a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800440e:	e7bc      	b.n	800438a <_dtoa_r+0x5d2>
 8004410:	9f08      	ldr	r7, [sp, #32]
 8004412:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800441a:	f7fc f9f3 	bl	8000804 <__aeabi_ddiv>
 800441e:	f7fc fb77 	bl	8000b10 <__aeabi_d2iz>
 8004422:	4604      	mov	r4, r0
 8004424:	f7fc f85a 	bl	80004dc <__aeabi_i2d>
 8004428:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800442c:	f7fc f8c0 	bl	80005b0 <__aeabi_dmul>
 8004430:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004434:	460b      	mov	r3, r1
 8004436:	4602      	mov	r2, r0
 8004438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800443c:	f7fb ff00 	bl	8000240 <__aeabi_dsub>
 8004440:	f807 6b01 	strb.w	r6, [r7], #1
 8004444:	9e08      	ldr	r6, [sp, #32]
 8004446:	9b02      	ldr	r3, [sp, #8]
 8004448:	1bbe      	subs	r6, r7, r6
 800444a:	42b3      	cmp	r3, r6
 800444c:	d13a      	bne.n	80044c4 <_dtoa_r+0x70c>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	f7fb fef7 	bl	8000244 <__adddf3>
 8004456:	4602      	mov	r2, r0
 8004458:	460b      	mov	r3, r1
 800445a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800445e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004462:	f7fc fb35 	bl	8000ad0 <__aeabi_dcmpgt>
 8004466:	bb58      	cbnz	r0, 80044c0 <_dtoa_r+0x708>
 8004468:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800446c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004470:	f7fc fb06 	bl	8000a80 <__aeabi_dcmpeq>
 8004474:	b108      	cbz	r0, 800447a <_dtoa_r+0x6c2>
 8004476:	07e1      	lsls	r1, r4, #31
 8004478:	d422      	bmi.n	80044c0 <_dtoa_r+0x708>
 800447a:	4628      	mov	r0, r5
 800447c:	4651      	mov	r1, sl
 800447e:	f000 fd11 	bl	8004ea4 <_Bfree>
 8004482:	2300      	movs	r3, #0
 8004484:	703b      	strb	r3, [r7, #0]
 8004486:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004488:	f109 0001 	add.w	r0, r9, #1
 800448c:	6018      	str	r0, [r3, #0]
 800448e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004490:	2b00      	cmp	r3, #0
 8004492:	f43f acdf 	beq.w	8003e54 <_dtoa_r+0x9c>
 8004496:	601f      	str	r7, [r3, #0]
 8004498:	e4dc      	b.n	8003e54 <_dtoa_r+0x9c>
 800449a:	4627      	mov	r7, r4
 800449c:	463b      	mov	r3, r7
 800449e:	461f      	mov	r7, r3
 80044a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044a4:	2a39      	cmp	r2, #57	; 0x39
 80044a6:	d107      	bne.n	80044b8 <_dtoa_r+0x700>
 80044a8:	9a08      	ldr	r2, [sp, #32]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d1f7      	bne.n	800449e <_dtoa_r+0x6e6>
 80044ae:	2230      	movs	r2, #48	; 0x30
 80044b0:	9908      	ldr	r1, [sp, #32]
 80044b2:	f108 0801 	add.w	r8, r8, #1
 80044b6:	700a      	strb	r2, [r1, #0]
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	3201      	adds	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e79f      	b.n	8004400 <_dtoa_r+0x648>
 80044c0:	46c8      	mov	r8, r9
 80044c2:	e7eb      	b.n	800449c <_dtoa_r+0x6e4>
 80044c4:	2200      	movs	r2, #0
 80044c6:	4b72      	ldr	r3, [pc, #456]	; (8004690 <_dtoa_r+0x8d8>)
 80044c8:	f7fc f872 	bl	80005b0 <__aeabi_dmul>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044d4:	2200      	movs	r2, #0
 80044d6:	2300      	movs	r3, #0
 80044d8:	f7fc fad2 	bl	8000a80 <__aeabi_dcmpeq>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d098      	beq.n	8004412 <_dtoa_r+0x65a>
 80044e0:	e7cb      	b.n	800447a <_dtoa_r+0x6c2>
 80044e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044e4:	2a00      	cmp	r2, #0
 80044e6:	f000 80cd 	beq.w	8004684 <_dtoa_r+0x8cc>
 80044ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80044ec:	2a01      	cmp	r2, #1
 80044ee:	f300 80af 	bgt.w	8004650 <_dtoa_r+0x898>
 80044f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	f000 80a7 	beq.w	8004648 <_dtoa_r+0x890>
 80044fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80044fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004500:	9f06      	ldr	r7, [sp, #24]
 8004502:	9a06      	ldr	r2, [sp, #24]
 8004504:	2101      	movs	r1, #1
 8004506:	441a      	add	r2, r3
 8004508:	9206      	str	r2, [sp, #24]
 800450a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800450c:	4628      	mov	r0, r5
 800450e:	441a      	add	r2, r3
 8004510:	9209      	str	r2, [sp, #36]	; 0x24
 8004512:	f000 fd81 	bl	8005018 <__i2b>
 8004516:	4606      	mov	r6, r0
 8004518:	2f00      	cmp	r7, #0
 800451a:	dd0c      	ble.n	8004536 <_dtoa_r+0x77e>
 800451c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	dd09      	ble.n	8004536 <_dtoa_r+0x77e>
 8004522:	42bb      	cmp	r3, r7
 8004524:	bfa8      	it	ge
 8004526:	463b      	movge	r3, r7
 8004528:	9a06      	ldr	r2, [sp, #24]
 800452a:	1aff      	subs	r7, r7, r3
 800452c:	1ad2      	subs	r2, r2, r3
 800452e:	9206      	str	r2, [sp, #24]
 8004530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	9309      	str	r3, [sp, #36]	; 0x24
 8004536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004538:	b1f3      	cbz	r3, 8004578 <_dtoa_r+0x7c0>
 800453a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80a9 	beq.w	8004694 <_dtoa_r+0x8dc>
 8004542:	2c00      	cmp	r4, #0
 8004544:	dd10      	ble.n	8004568 <_dtoa_r+0x7b0>
 8004546:	4631      	mov	r1, r6
 8004548:	4622      	mov	r2, r4
 800454a:	4628      	mov	r0, r5
 800454c:	f000 fe1e 	bl	800518c <__pow5mult>
 8004550:	4652      	mov	r2, sl
 8004552:	4601      	mov	r1, r0
 8004554:	4606      	mov	r6, r0
 8004556:	4628      	mov	r0, r5
 8004558:	f000 fd74 	bl	8005044 <__multiply>
 800455c:	4680      	mov	r8, r0
 800455e:	4651      	mov	r1, sl
 8004560:	4628      	mov	r0, r5
 8004562:	f000 fc9f 	bl	8004ea4 <_Bfree>
 8004566:	46c2      	mov	sl, r8
 8004568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800456a:	1b1a      	subs	r2, r3, r4
 800456c:	d004      	beq.n	8004578 <_dtoa_r+0x7c0>
 800456e:	4651      	mov	r1, sl
 8004570:	4628      	mov	r0, r5
 8004572:	f000 fe0b 	bl	800518c <__pow5mult>
 8004576:	4682      	mov	sl, r0
 8004578:	2101      	movs	r1, #1
 800457a:	4628      	mov	r0, r5
 800457c:	f000 fd4c 	bl	8005018 <__i2b>
 8004580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004582:	4604      	mov	r4, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	f340 8087 	ble.w	8004698 <_dtoa_r+0x8e0>
 800458a:	461a      	mov	r2, r3
 800458c:	4601      	mov	r1, r0
 800458e:	4628      	mov	r0, r5
 8004590:	f000 fdfc 	bl	800518c <__pow5mult>
 8004594:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004596:	4604      	mov	r4, r0
 8004598:	2b01      	cmp	r3, #1
 800459a:	f340 8080 	ble.w	800469e <_dtoa_r+0x8e6>
 800459e:	f04f 0800 	mov.w	r8, #0
 80045a2:	6923      	ldr	r3, [r4, #16]
 80045a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80045a8:	6918      	ldr	r0, [r3, #16]
 80045aa:	f000 fce7 	bl	8004f7c <__hi0bits>
 80045ae:	f1c0 0020 	rsb	r0, r0, #32
 80045b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b4:	4418      	add	r0, r3
 80045b6:	f010 001f 	ands.w	r0, r0, #31
 80045ba:	f000 8092 	beq.w	80046e2 <_dtoa_r+0x92a>
 80045be:	f1c0 0320 	rsb	r3, r0, #32
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	f340 808a 	ble.w	80046dc <_dtoa_r+0x924>
 80045c8:	f1c0 001c 	rsb	r0, r0, #28
 80045cc:	9b06      	ldr	r3, [sp, #24]
 80045ce:	4407      	add	r7, r0
 80045d0:	4403      	add	r3, r0
 80045d2:	9306      	str	r3, [sp, #24]
 80045d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d6:	4403      	add	r3, r0
 80045d8:	9309      	str	r3, [sp, #36]	; 0x24
 80045da:	9b06      	ldr	r3, [sp, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dd05      	ble.n	80045ec <_dtoa_r+0x834>
 80045e0:	4651      	mov	r1, sl
 80045e2:	461a      	mov	r2, r3
 80045e4:	4628      	mov	r0, r5
 80045e6:	f000 fe2b 	bl	8005240 <__lshift>
 80045ea:	4682      	mov	sl, r0
 80045ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	dd05      	ble.n	80045fe <_dtoa_r+0x846>
 80045f2:	4621      	mov	r1, r4
 80045f4:	461a      	mov	r2, r3
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 fe22 	bl	8005240 <__lshift>
 80045fc:	4604      	mov	r4, r0
 80045fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004600:	2b00      	cmp	r3, #0
 8004602:	d070      	beq.n	80046e6 <_dtoa_r+0x92e>
 8004604:	4621      	mov	r1, r4
 8004606:	4650      	mov	r0, sl
 8004608:	f000 fe86 	bl	8005318 <__mcmp>
 800460c:	2800      	cmp	r0, #0
 800460e:	da6a      	bge.n	80046e6 <_dtoa_r+0x92e>
 8004610:	2300      	movs	r3, #0
 8004612:	4651      	mov	r1, sl
 8004614:	220a      	movs	r2, #10
 8004616:	4628      	mov	r0, r5
 8004618:	f000 fc66 	bl	8004ee8 <__multadd>
 800461c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800461e:	4682      	mov	sl, r0
 8004620:	f109 39ff 	add.w	r9, r9, #4294967295
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8193 	beq.w	8004950 <_dtoa_r+0xb98>
 800462a:	4631      	mov	r1, r6
 800462c:	2300      	movs	r3, #0
 800462e:	220a      	movs	r2, #10
 8004630:	4628      	mov	r0, r5
 8004632:	f000 fc59 	bl	8004ee8 <__multadd>
 8004636:	f1bb 0f00 	cmp.w	fp, #0
 800463a:	4606      	mov	r6, r0
 800463c:	f300 8093 	bgt.w	8004766 <_dtoa_r+0x9ae>
 8004640:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004642:	2b02      	cmp	r3, #2
 8004644:	dc57      	bgt.n	80046f6 <_dtoa_r+0x93e>
 8004646:	e08e      	b.n	8004766 <_dtoa_r+0x9ae>
 8004648:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800464a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800464e:	e756      	b.n	80044fe <_dtoa_r+0x746>
 8004650:	9b02      	ldr	r3, [sp, #8]
 8004652:	1e5c      	subs	r4, r3, #1
 8004654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004656:	42a3      	cmp	r3, r4
 8004658:	bfb7      	itett	lt
 800465a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800465c:	1b1c      	subge	r4, r3, r4
 800465e:	1ae2      	sublt	r2, r4, r3
 8004660:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004662:	bfbe      	ittt	lt
 8004664:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004666:	189b      	addlt	r3, r3, r2
 8004668:	930e      	strlt	r3, [sp, #56]	; 0x38
 800466a:	9b02      	ldr	r3, [sp, #8]
 800466c:	bfb8      	it	lt
 800466e:	2400      	movlt	r4, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	bfbb      	ittet	lt
 8004674:	9b06      	ldrlt	r3, [sp, #24]
 8004676:	9a02      	ldrlt	r2, [sp, #8]
 8004678:	9f06      	ldrge	r7, [sp, #24]
 800467a:	1a9f      	sublt	r7, r3, r2
 800467c:	bfac      	ite	ge
 800467e:	9b02      	ldrge	r3, [sp, #8]
 8004680:	2300      	movlt	r3, #0
 8004682:	e73e      	b.n	8004502 <_dtoa_r+0x74a>
 8004684:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004686:	9f06      	ldr	r7, [sp, #24]
 8004688:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800468a:	e745      	b.n	8004518 <_dtoa_r+0x760>
 800468c:	3fe00000 	.word	0x3fe00000
 8004690:	40240000 	.word	0x40240000
 8004694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004696:	e76a      	b.n	800456e <_dtoa_r+0x7b6>
 8004698:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800469a:	2b01      	cmp	r3, #1
 800469c:	dc19      	bgt.n	80046d2 <_dtoa_r+0x91a>
 800469e:	9b04      	ldr	r3, [sp, #16]
 80046a0:	b9bb      	cbnz	r3, 80046d2 <_dtoa_r+0x91a>
 80046a2:	9b05      	ldr	r3, [sp, #20]
 80046a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a8:	b99b      	cbnz	r3, 80046d2 <_dtoa_r+0x91a>
 80046aa:	9b05      	ldr	r3, [sp, #20]
 80046ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046b0:	0d1b      	lsrs	r3, r3, #20
 80046b2:	051b      	lsls	r3, r3, #20
 80046b4:	b183      	cbz	r3, 80046d8 <_dtoa_r+0x920>
 80046b6:	f04f 0801 	mov.w	r8, #1
 80046ba:	9b06      	ldr	r3, [sp, #24]
 80046bc:	3301      	adds	r3, #1
 80046be:	9306      	str	r3, [sp, #24]
 80046c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c2:	3301      	adds	r3, #1
 80046c4:	9309      	str	r3, [sp, #36]	; 0x24
 80046c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f47f af6a 	bne.w	80045a2 <_dtoa_r+0x7ea>
 80046ce:	2001      	movs	r0, #1
 80046d0:	e76f      	b.n	80045b2 <_dtoa_r+0x7fa>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	e7f6      	b.n	80046c6 <_dtoa_r+0x90e>
 80046d8:	4698      	mov	r8, r3
 80046da:	e7f4      	b.n	80046c6 <_dtoa_r+0x90e>
 80046dc:	f43f af7d 	beq.w	80045da <_dtoa_r+0x822>
 80046e0:	4618      	mov	r0, r3
 80046e2:	301c      	adds	r0, #28
 80046e4:	e772      	b.n	80045cc <_dtoa_r+0x814>
 80046e6:	9b02      	ldr	r3, [sp, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	dc36      	bgt.n	800475a <_dtoa_r+0x9a2>
 80046ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	dd33      	ble.n	800475a <_dtoa_r+0x9a2>
 80046f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80046f6:	f1bb 0f00 	cmp.w	fp, #0
 80046fa:	d10d      	bne.n	8004718 <_dtoa_r+0x960>
 80046fc:	4621      	mov	r1, r4
 80046fe:	465b      	mov	r3, fp
 8004700:	2205      	movs	r2, #5
 8004702:	4628      	mov	r0, r5
 8004704:	f000 fbf0 	bl	8004ee8 <__multadd>
 8004708:	4601      	mov	r1, r0
 800470a:	4604      	mov	r4, r0
 800470c:	4650      	mov	r0, sl
 800470e:	f000 fe03 	bl	8005318 <__mcmp>
 8004712:	2800      	cmp	r0, #0
 8004714:	f73f adb6 	bgt.w	8004284 <_dtoa_r+0x4cc>
 8004718:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800471a:	9f08      	ldr	r7, [sp, #32]
 800471c:	ea6f 0903 	mvn.w	r9, r3
 8004720:	f04f 0800 	mov.w	r8, #0
 8004724:	4621      	mov	r1, r4
 8004726:	4628      	mov	r0, r5
 8004728:	f000 fbbc 	bl	8004ea4 <_Bfree>
 800472c:	2e00      	cmp	r6, #0
 800472e:	f43f aea4 	beq.w	800447a <_dtoa_r+0x6c2>
 8004732:	f1b8 0f00 	cmp.w	r8, #0
 8004736:	d005      	beq.n	8004744 <_dtoa_r+0x98c>
 8004738:	45b0      	cmp	r8, r6
 800473a:	d003      	beq.n	8004744 <_dtoa_r+0x98c>
 800473c:	4641      	mov	r1, r8
 800473e:	4628      	mov	r0, r5
 8004740:	f000 fbb0 	bl	8004ea4 <_Bfree>
 8004744:	4631      	mov	r1, r6
 8004746:	4628      	mov	r0, r5
 8004748:	f000 fbac 	bl	8004ea4 <_Bfree>
 800474c:	e695      	b.n	800447a <_dtoa_r+0x6c2>
 800474e:	2400      	movs	r4, #0
 8004750:	4626      	mov	r6, r4
 8004752:	e7e1      	b.n	8004718 <_dtoa_r+0x960>
 8004754:	46c1      	mov	r9, r8
 8004756:	4626      	mov	r6, r4
 8004758:	e594      	b.n	8004284 <_dtoa_r+0x4cc>
 800475a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800475c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80fc 	beq.w	800495e <_dtoa_r+0xba6>
 8004766:	2f00      	cmp	r7, #0
 8004768:	dd05      	ble.n	8004776 <_dtoa_r+0x9be>
 800476a:	4631      	mov	r1, r6
 800476c:	463a      	mov	r2, r7
 800476e:	4628      	mov	r0, r5
 8004770:	f000 fd66 	bl	8005240 <__lshift>
 8004774:	4606      	mov	r6, r0
 8004776:	f1b8 0f00 	cmp.w	r8, #0
 800477a:	d05c      	beq.n	8004836 <_dtoa_r+0xa7e>
 800477c:	4628      	mov	r0, r5
 800477e:	6871      	ldr	r1, [r6, #4]
 8004780:	f000 fb50 	bl	8004e24 <_Balloc>
 8004784:	4607      	mov	r7, r0
 8004786:	b928      	cbnz	r0, 8004794 <_dtoa_r+0x9dc>
 8004788:	4602      	mov	r2, r0
 800478a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800478e:	4b7e      	ldr	r3, [pc, #504]	; (8004988 <_dtoa_r+0xbd0>)
 8004790:	f7ff bb26 	b.w	8003de0 <_dtoa_r+0x28>
 8004794:	6932      	ldr	r2, [r6, #16]
 8004796:	f106 010c 	add.w	r1, r6, #12
 800479a:	3202      	adds	r2, #2
 800479c:	0092      	lsls	r2, r2, #2
 800479e:	300c      	adds	r0, #12
 80047a0:	f000 fb32 	bl	8004e08 <memcpy>
 80047a4:	2201      	movs	r2, #1
 80047a6:	4639      	mov	r1, r7
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 fd49 	bl	8005240 <__lshift>
 80047ae:	46b0      	mov	r8, r6
 80047b0:	4606      	mov	r6, r0
 80047b2:	9b08      	ldr	r3, [sp, #32]
 80047b4:	3301      	adds	r3, #1
 80047b6:	9302      	str	r3, [sp, #8]
 80047b8:	9b08      	ldr	r3, [sp, #32]
 80047ba:	445b      	add	r3, fp
 80047bc:	930a      	str	r3, [sp, #40]	; 0x28
 80047be:	9b04      	ldr	r3, [sp, #16]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	9309      	str	r3, [sp, #36]	; 0x24
 80047c6:	9b02      	ldr	r3, [sp, #8]
 80047c8:	4621      	mov	r1, r4
 80047ca:	4650      	mov	r0, sl
 80047cc:	f103 3bff 	add.w	fp, r3, #4294967295
 80047d0:	f7ff fa62 	bl	8003c98 <quorem>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4641      	mov	r1, r8
 80047d8:	3330      	adds	r3, #48	; 0x30
 80047da:	9004      	str	r0, [sp, #16]
 80047dc:	4650      	mov	r0, sl
 80047de:	930b      	str	r3, [sp, #44]	; 0x2c
 80047e0:	f000 fd9a 	bl	8005318 <__mcmp>
 80047e4:	4632      	mov	r2, r6
 80047e6:	9006      	str	r0, [sp, #24]
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 fdb0 	bl	8005350 <__mdiff>
 80047f0:	68c2      	ldr	r2, [r0, #12]
 80047f2:	4607      	mov	r7, r0
 80047f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047f6:	bb02      	cbnz	r2, 800483a <_dtoa_r+0xa82>
 80047f8:	4601      	mov	r1, r0
 80047fa:	4650      	mov	r0, sl
 80047fc:	f000 fd8c 	bl	8005318 <__mcmp>
 8004800:	4602      	mov	r2, r0
 8004802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004804:	4639      	mov	r1, r7
 8004806:	4628      	mov	r0, r5
 8004808:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800480c:	f000 fb4a 	bl	8004ea4 <_Bfree>
 8004810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004814:	9f02      	ldr	r7, [sp, #8]
 8004816:	ea43 0102 	orr.w	r1, r3, r2
 800481a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800481c:	430b      	orrs	r3, r1
 800481e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004820:	d10d      	bne.n	800483e <_dtoa_r+0xa86>
 8004822:	2b39      	cmp	r3, #57	; 0x39
 8004824:	d027      	beq.n	8004876 <_dtoa_r+0xabe>
 8004826:	9a06      	ldr	r2, [sp, #24]
 8004828:	2a00      	cmp	r2, #0
 800482a:	dd01      	ble.n	8004830 <_dtoa_r+0xa78>
 800482c:	9b04      	ldr	r3, [sp, #16]
 800482e:	3331      	adds	r3, #49	; 0x31
 8004830:	f88b 3000 	strb.w	r3, [fp]
 8004834:	e776      	b.n	8004724 <_dtoa_r+0x96c>
 8004836:	4630      	mov	r0, r6
 8004838:	e7b9      	b.n	80047ae <_dtoa_r+0x9f6>
 800483a:	2201      	movs	r2, #1
 800483c:	e7e2      	b.n	8004804 <_dtoa_r+0xa4c>
 800483e:	9906      	ldr	r1, [sp, #24]
 8004840:	2900      	cmp	r1, #0
 8004842:	db04      	blt.n	800484e <_dtoa_r+0xa96>
 8004844:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004846:	4301      	orrs	r1, r0
 8004848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800484a:	4301      	orrs	r1, r0
 800484c:	d120      	bne.n	8004890 <_dtoa_r+0xad8>
 800484e:	2a00      	cmp	r2, #0
 8004850:	ddee      	ble.n	8004830 <_dtoa_r+0xa78>
 8004852:	4651      	mov	r1, sl
 8004854:	2201      	movs	r2, #1
 8004856:	4628      	mov	r0, r5
 8004858:	9302      	str	r3, [sp, #8]
 800485a:	f000 fcf1 	bl	8005240 <__lshift>
 800485e:	4621      	mov	r1, r4
 8004860:	4682      	mov	sl, r0
 8004862:	f000 fd59 	bl	8005318 <__mcmp>
 8004866:	2800      	cmp	r0, #0
 8004868:	9b02      	ldr	r3, [sp, #8]
 800486a:	dc02      	bgt.n	8004872 <_dtoa_r+0xaba>
 800486c:	d1e0      	bne.n	8004830 <_dtoa_r+0xa78>
 800486e:	07da      	lsls	r2, r3, #31
 8004870:	d5de      	bpl.n	8004830 <_dtoa_r+0xa78>
 8004872:	2b39      	cmp	r3, #57	; 0x39
 8004874:	d1da      	bne.n	800482c <_dtoa_r+0xa74>
 8004876:	2339      	movs	r3, #57	; 0x39
 8004878:	f88b 3000 	strb.w	r3, [fp]
 800487c:	463b      	mov	r3, r7
 800487e:	461f      	mov	r7, r3
 8004880:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004884:	3b01      	subs	r3, #1
 8004886:	2a39      	cmp	r2, #57	; 0x39
 8004888:	d050      	beq.n	800492c <_dtoa_r+0xb74>
 800488a:	3201      	adds	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e749      	b.n	8004724 <_dtoa_r+0x96c>
 8004890:	2a00      	cmp	r2, #0
 8004892:	dd03      	ble.n	800489c <_dtoa_r+0xae4>
 8004894:	2b39      	cmp	r3, #57	; 0x39
 8004896:	d0ee      	beq.n	8004876 <_dtoa_r+0xabe>
 8004898:	3301      	adds	r3, #1
 800489a:	e7c9      	b.n	8004830 <_dtoa_r+0xa78>
 800489c:	9a02      	ldr	r2, [sp, #8]
 800489e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80048a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80048a4:	428a      	cmp	r2, r1
 80048a6:	d02a      	beq.n	80048fe <_dtoa_r+0xb46>
 80048a8:	4651      	mov	r1, sl
 80048aa:	2300      	movs	r3, #0
 80048ac:	220a      	movs	r2, #10
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 fb1a 	bl	8004ee8 <__multadd>
 80048b4:	45b0      	cmp	r8, r6
 80048b6:	4682      	mov	sl, r0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	f04f 020a 	mov.w	r2, #10
 80048c0:	4641      	mov	r1, r8
 80048c2:	4628      	mov	r0, r5
 80048c4:	d107      	bne.n	80048d6 <_dtoa_r+0xb1e>
 80048c6:	f000 fb0f 	bl	8004ee8 <__multadd>
 80048ca:	4680      	mov	r8, r0
 80048cc:	4606      	mov	r6, r0
 80048ce:	9b02      	ldr	r3, [sp, #8]
 80048d0:	3301      	adds	r3, #1
 80048d2:	9302      	str	r3, [sp, #8]
 80048d4:	e777      	b.n	80047c6 <_dtoa_r+0xa0e>
 80048d6:	f000 fb07 	bl	8004ee8 <__multadd>
 80048da:	4631      	mov	r1, r6
 80048dc:	4680      	mov	r8, r0
 80048de:	2300      	movs	r3, #0
 80048e0:	220a      	movs	r2, #10
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 fb00 	bl	8004ee8 <__multadd>
 80048e8:	4606      	mov	r6, r0
 80048ea:	e7f0      	b.n	80048ce <_dtoa_r+0xb16>
 80048ec:	f1bb 0f00 	cmp.w	fp, #0
 80048f0:	bfcc      	ite	gt
 80048f2:	465f      	movgt	r7, fp
 80048f4:	2701      	movle	r7, #1
 80048f6:	f04f 0800 	mov.w	r8, #0
 80048fa:	9a08      	ldr	r2, [sp, #32]
 80048fc:	4417      	add	r7, r2
 80048fe:	4651      	mov	r1, sl
 8004900:	2201      	movs	r2, #1
 8004902:	4628      	mov	r0, r5
 8004904:	9302      	str	r3, [sp, #8]
 8004906:	f000 fc9b 	bl	8005240 <__lshift>
 800490a:	4621      	mov	r1, r4
 800490c:	4682      	mov	sl, r0
 800490e:	f000 fd03 	bl	8005318 <__mcmp>
 8004912:	2800      	cmp	r0, #0
 8004914:	dcb2      	bgt.n	800487c <_dtoa_r+0xac4>
 8004916:	d102      	bne.n	800491e <_dtoa_r+0xb66>
 8004918:	9b02      	ldr	r3, [sp, #8]
 800491a:	07db      	lsls	r3, r3, #31
 800491c:	d4ae      	bmi.n	800487c <_dtoa_r+0xac4>
 800491e:	463b      	mov	r3, r7
 8004920:	461f      	mov	r7, r3
 8004922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004926:	2a30      	cmp	r2, #48	; 0x30
 8004928:	d0fa      	beq.n	8004920 <_dtoa_r+0xb68>
 800492a:	e6fb      	b.n	8004724 <_dtoa_r+0x96c>
 800492c:	9a08      	ldr	r2, [sp, #32]
 800492e:	429a      	cmp	r2, r3
 8004930:	d1a5      	bne.n	800487e <_dtoa_r+0xac6>
 8004932:	2331      	movs	r3, #49	; 0x31
 8004934:	f109 0901 	add.w	r9, r9, #1
 8004938:	7013      	strb	r3, [r2, #0]
 800493a:	e6f3      	b.n	8004724 <_dtoa_r+0x96c>
 800493c:	4b13      	ldr	r3, [pc, #76]	; (800498c <_dtoa_r+0xbd4>)
 800493e:	f7ff baa7 	b.w	8003e90 <_dtoa_r+0xd8>
 8004942:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004944:	2b00      	cmp	r3, #0
 8004946:	f47f aa80 	bne.w	8003e4a <_dtoa_r+0x92>
 800494a:	4b11      	ldr	r3, [pc, #68]	; (8004990 <_dtoa_r+0xbd8>)
 800494c:	f7ff baa0 	b.w	8003e90 <_dtoa_r+0xd8>
 8004950:	f1bb 0f00 	cmp.w	fp, #0
 8004954:	dc03      	bgt.n	800495e <_dtoa_r+0xba6>
 8004956:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004958:	2b02      	cmp	r3, #2
 800495a:	f73f aecc 	bgt.w	80046f6 <_dtoa_r+0x93e>
 800495e:	9f08      	ldr	r7, [sp, #32]
 8004960:	4621      	mov	r1, r4
 8004962:	4650      	mov	r0, sl
 8004964:	f7ff f998 	bl	8003c98 <quorem>
 8004968:	9a08      	ldr	r2, [sp, #32]
 800496a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800496e:	f807 3b01 	strb.w	r3, [r7], #1
 8004972:	1aba      	subs	r2, r7, r2
 8004974:	4593      	cmp	fp, r2
 8004976:	ddb9      	ble.n	80048ec <_dtoa_r+0xb34>
 8004978:	4651      	mov	r1, sl
 800497a:	2300      	movs	r3, #0
 800497c:	220a      	movs	r2, #10
 800497e:	4628      	mov	r0, r5
 8004980:	f000 fab2 	bl	8004ee8 <__multadd>
 8004984:	4682      	mov	sl, r0
 8004986:	e7eb      	b.n	8004960 <_dtoa_r+0xba8>
 8004988:	08005ecf 	.word	0x08005ecf
 800498c:	08005e28 	.word	0x08005e28
 8004990:	08005e4c 	.word	0x08005e4c

08004994 <__sflush_r>:
 8004994:	898a      	ldrh	r2, [r1, #12]
 8004996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499a:	4605      	mov	r5, r0
 800499c:	0710      	lsls	r0, r2, #28
 800499e:	460c      	mov	r4, r1
 80049a0:	d458      	bmi.n	8004a54 <__sflush_r+0xc0>
 80049a2:	684b      	ldr	r3, [r1, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dc05      	bgt.n	80049b4 <__sflush_r+0x20>
 80049a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dc02      	bgt.n	80049b4 <__sflush_r+0x20>
 80049ae:	2000      	movs	r0, #0
 80049b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	d0f9      	beq.n	80049ae <__sflush_r+0x1a>
 80049ba:	2300      	movs	r3, #0
 80049bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049c0:	682f      	ldr	r7, [r5, #0]
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	d032      	beq.n	8004a2c <__sflush_r+0x98>
 80049c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	075a      	lsls	r2, r3, #29
 80049cc:	d505      	bpl.n	80049da <__sflush_r+0x46>
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	1ac0      	subs	r0, r0, r3
 80049d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049d4:	b10b      	cbz	r3, 80049da <__sflush_r+0x46>
 80049d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049d8:	1ac0      	subs	r0, r0, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	4602      	mov	r2, r0
 80049de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049e0:	4628      	mov	r0, r5
 80049e2:	6a21      	ldr	r1, [r4, #32]
 80049e4:	47b0      	blx	r6
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	d106      	bne.n	80049fa <__sflush_r+0x66>
 80049ec:	6829      	ldr	r1, [r5, #0]
 80049ee:	291d      	cmp	r1, #29
 80049f0:	d82c      	bhi.n	8004a4c <__sflush_r+0xb8>
 80049f2:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <__sflush_r+0x108>)
 80049f4:	40ca      	lsrs	r2, r1
 80049f6:	07d6      	lsls	r6, r2, #31
 80049f8:	d528      	bpl.n	8004a4c <__sflush_r+0xb8>
 80049fa:	2200      	movs	r2, #0
 80049fc:	6062      	str	r2, [r4, #4]
 80049fe:	6922      	ldr	r2, [r4, #16]
 8004a00:	04d9      	lsls	r1, r3, #19
 8004a02:	6022      	str	r2, [r4, #0]
 8004a04:	d504      	bpl.n	8004a10 <__sflush_r+0x7c>
 8004a06:	1c42      	adds	r2, r0, #1
 8004a08:	d101      	bne.n	8004a0e <__sflush_r+0x7a>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	b903      	cbnz	r3, 8004a10 <__sflush_r+0x7c>
 8004a0e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a12:	602f      	str	r7, [r5, #0]
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d0ca      	beq.n	80049ae <__sflush_r+0x1a>
 8004a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a1c:	4299      	cmp	r1, r3
 8004a1e:	d002      	beq.n	8004a26 <__sflush_r+0x92>
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 fd8f 	bl	8005544 <_free_r>
 8004a26:	2000      	movs	r0, #0
 8004a28:	6360      	str	r0, [r4, #52]	; 0x34
 8004a2a:	e7c1      	b.n	80049b0 <__sflush_r+0x1c>
 8004a2c:	6a21      	ldr	r1, [r4, #32]
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b0      	blx	r6
 8004a34:	1c41      	adds	r1, r0, #1
 8004a36:	d1c7      	bne.n	80049c8 <__sflush_r+0x34>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0c4      	beq.n	80049c8 <__sflush_r+0x34>
 8004a3e:	2b1d      	cmp	r3, #29
 8004a40:	d001      	beq.n	8004a46 <__sflush_r+0xb2>
 8004a42:	2b16      	cmp	r3, #22
 8004a44:	d101      	bne.n	8004a4a <__sflush_r+0xb6>
 8004a46:	602f      	str	r7, [r5, #0]
 8004a48:	e7b1      	b.n	80049ae <__sflush_r+0x1a>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	e7ad      	b.n	80049b0 <__sflush_r+0x1c>
 8004a54:	690f      	ldr	r7, [r1, #16]
 8004a56:	2f00      	cmp	r7, #0
 8004a58:	d0a9      	beq.n	80049ae <__sflush_r+0x1a>
 8004a5a:	0793      	lsls	r3, r2, #30
 8004a5c:	bf18      	it	ne
 8004a5e:	2300      	movne	r3, #0
 8004a60:	680e      	ldr	r6, [r1, #0]
 8004a62:	bf08      	it	eq
 8004a64:	694b      	ldreq	r3, [r1, #20]
 8004a66:	eba6 0807 	sub.w	r8, r6, r7
 8004a6a:	600f      	str	r7, [r1, #0]
 8004a6c:	608b      	str	r3, [r1, #8]
 8004a6e:	f1b8 0f00 	cmp.w	r8, #0
 8004a72:	dd9c      	ble.n	80049ae <__sflush_r+0x1a>
 8004a74:	4643      	mov	r3, r8
 8004a76:	463a      	mov	r2, r7
 8004a78:	4628      	mov	r0, r5
 8004a7a:	6a21      	ldr	r1, [r4, #32]
 8004a7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a7e:	47b0      	blx	r6
 8004a80:	2800      	cmp	r0, #0
 8004a82:	dc06      	bgt.n	8004a92 <__sflush_r+0xfe>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	e78e      	b.n	80049b0 <__sflush_r+0x1c>
 8004a92:	4407      	add	r7, r0
 8004a94:	eba8 0800 	sub.w	r8, r8, r0
 8004a98:	e7e9      	b.n	8004a6e <__sflush_r+0xda>
 8004a9a:	bf00      	nop
 8004a9c:	20400001 	.word	0x20400001

08004aa0 <_fflush_r>:
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	690b      	ldr	r3, [r1, #16]
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	b913      	cbnz	r3, 8004ab0 <_fflush_r+0x10>
 8004aaa:	2500      	movs	r5, #0
 8004aac:	4628      	mov	r0, r5
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	b118      	cbz	r0, 8004aba <_fflush_r+0x1a>
 8004ab2:	6983      	ldr	r3, [r0, #24]
 8004ab4:	b90b      	cbnz	r3, 8004aba <_fflush_r+0x1a>
 8004ab6:	f000 f887 	bl	8004bc8 <__sinit>
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <_fflush_r+0x6c>)
 8004abc:	429c      	cmp	r4, r3
 8004abe:	d11b      	bne.n	8004af8 <_fflush_r+0x58>
 8004ac0:	686c      	ldr	r4, [r5, #4]
 8004ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0ef      	beq.n	8004aaa <_fflush_r+0xa>
 8004aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004acc:	07d0      	lsls	r0, r2, #31
 8004ace:	d404      	bmi.n	8004ada <_fflush_r+0x3a>
 8004ad0:	0599      	lsls	r1, r3, #22
 8004ad2:	d402      	bmi.n	8004ada <_fflush_r+0x3a>
 8004ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ad6:	f000 f91a 	bl	8004d0e <__retarget_lock_acquire_recursive>
 8004ada:	4628      	mov	r0, r5
 8004adc:	4621      	mov	r1, r4
 8004ade:	f7ff ff59 	bl	8004994 <__sflush_r>
 8004ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	07da      	lsls	r2, r3, #31
 8004ae8:	d4e0      	bmi.n	8004aac <_fflush_r+0xc>
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	059b      	lsls	r3, r3, #22
 8004aee:	d4dd      	bmi.n	8004aac <_fflush_r+0xc>
 8004af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004af2:	f000 f90d 	bl	8004d10 <__retarget_lock_release_recursive>
 8004af6:	e7d9      	b.n	8004aac <_fflush_r+0xc>
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <_fflush_r+0x70>)
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d101      	bne.n	8004b02 <_fflush_r+0x62>
 8004afe:	68ac      	ldr	r4, [r5, #8]
 8004b00:	e7df      	b.n	8004ac2 <_fflush_r+0x22>
 8004b02:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <_fflush_r+0x74>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	bf08      	it	eq
 8004b08:	68ec      	ldreq	r4, [r5, #12]
 8004b0a:	e7da      	b.n	8004ac2 <_fflush_r+0x22>
 8004b0c:	08005f00 	.word	0x08005f00
 8004b10:	08005f20 	.word	0x08005f20
 8004b14:	08005ee0 	.word	0x08005ee0

08004b18 <std>:
 8004b18:	2300      	movs	r3, #0
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b26:	6083      	str	r3, [r0, #8]
 8004b28:	8181      	strh	r1, [r0, #12]
 8004b2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b2c:	81c2      	strh	r2, [r0, #14]
 8004b2e:	6183      	str	r3, [r0, #24]
 8004b30:	4619      	mov	r1, r3
 8004b32:	2208      	movs	r2, #8
 8004b34:	305c      	adds	r0, #92	; 0x5c
 8004b36:	f7fe fb69 	bl	800320c <memset>
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <std+0x38>)
 8004b3c:	6224      	str	r4, [r4, #32]
 8004b3e:	6263      	str	r3, [r4, #36]	; 0x24
 8004b40:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <std+0x3c>)
 8004b42:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <std+0x40>)
 8004b46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <std+0x44>)
 8004b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004b4c:	bd10      	pop	{r4, pc}
 8004b4e:	bf00      	nop
 8004b50:	08005961 	.word	0x08005961
 8004b54:	08005983 	.word	0x08005983
 8004b58:	080059bb 	.word	0x080059bb
 8004b5c:	080059df 	.word	0x080059df

08004b60 <_cleanup_r>:
 8004b60:	4901      	ldr	r1, [pc, #4]	; (8004b68 <_cleanup_r+0x8>)
 8004b62:	f000 b8af 	b.w	8004cc4 <_fwalk_reent>
 8004b66:	bf00      	nop
 8004b68:	08004aa1 	.word	0x08004aa1

08004b6c <__sfmoreglue>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	2568      	movs	r5, #104	; 0x68
 8004b70:	1e4a      	subs	r2, r1, #1
 8004b72:	4355      	muls	r5, r2
 8004b74:	460e      	mov	r6, r1
 8004b76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b7a:	f000 fd2f 	bl	80055dc <_malloc_r>
 8004b7e:	4604      	mov	r4, r0
 8004b80:	b140      	cbz	r0, 8004b94 <__sfmoreglue+0x28>
 8004b82:	2100      	movs	r1, #0
 8004b84:	e9c0 1600 	strd	r1, r6, [r0]
 8004b88:	300c      	adds	r0, #12
 8004b8a:	60a0      	str	r0, [r4, #8]
 8004b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b90:	f7fe fb3c 	bl	800320c <memset>
 8004b94:	4620      	mov	r0, r4
 8004b96:	bd70      	pop	{r4, r5, r6, pc}

08004b98 <__sfp_lock_acquire>:
 8004b98:	4801      	ldr	r0, [pc, #4]	; (8004ba0 <__sfp_lock_acquire+0x8>)
 8004b9a:	f000 b8b8 	b.w	8004d0e <__retarget_lock_acquire_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	200002c0 	.word	0x200002c0

08004ba4 <__sfp_lock_release>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__sfp_lock_release+0x8>)
 8004ba6:	f000 b8b3 	b.w	8004d10 <__retarget_lock_release_recursive>
 8004baa:	bf00      	nop
 8004bac:	200002c0 	.word	0x200002c0

08004bb0 <__sinit_lock_acquire>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__sinit_lock_acquire+0x8>)
 8004bb2:	f000 b8ac 	b.w	8004d0e <__retarget_lock_acquire_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	200002bb 	.word	0x200002bb

08004bbc <__sinit_lock_release>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	; (8004bc4 <__sinit_lock_release+0x8>)
 8004bbe:	f000 b8a7 	b.w	8004d10 <__retarget_lock_release_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	200002bb 	.word	0x200002bb

08004bc8 <__sinit>:
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	4604      	mov	r4, r0
 8004bcc:	f7ff fff0 	bl	8004bb0 <__sinit_lock_acquire>
 8004bd0:	69a3      	ldr	r3, [r4, #24]
 8004bd2:	b11b      	cbz	r3, 8004bdc <__sinit+0x14>
 8004bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd8:	f7ff bff0 	b.w	8004bbc <__sinit_lock_release>
 8004bdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004be0:	6523      	str	r3, [r4, #80]	; 0x50
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <__sinit+0x68>)
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <__sinit+0x6c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	bf08      	it	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	bf08      	it	eq
 8004bf4:	61a3      	streq	r3, [r4, #24]
 8004bf6:	f000 f81f 	bl	8004c38 <__sfp>
 8004bfa:	6060      	str	r0, [r4, #4]
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f000 f81b 	bl	8004c38 <__sfp>
 8004c02:	60a0      	str	r0, [r4, #8]
 8004c04:	4620      	mov	r0, r4
 8004c06:	f000 f817 	bl	8004c38 <__sfp>
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2104      	movs	r1, #4
 8004c0e:	60e0      	str	r0, [r4, #12]
 8004c10:	6860      	ldr	r0, [r4, #4]
 8004c12:	f7ff ff81 	bl	8004b18 <std>
 8004c16:	2201      	movs	r2, #1
 8004c18:	2109      	movs	r1, #9
 8004c1a:	68a0      	ldr	r0, [r4, #8]
 8004c1c:	f7ff ff7c 	bl	8004b18 <std>
 8004c20:	2202      	movs	r2, #2
 8004c22:	2112      	movs	r1, #18
 8004c24:	68e0      	ldr	r0, [r4, #12]
 8004c26:	f7ff ff77 	bl	8004b18 <std>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61a3      	str	r3, [r4, #24]
 8004c2e:	e7d1      	b.n	8004bd4 <__sinit+0xc>
 8004c30:	08005e14 	.word	0x08005e14
 8004c34:	08004b61 	.word	0x08004b61

08004c38 <__sfp>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	4607      	mov	r7, r0
 8004c3c:	f7ff ffac 	bl	8004b98 <__sfp_lock_acquire>
 8004c40:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <__sfp+0x84>)
 8004c42:	681e      	ldr	r6, [r3, #0]
 8004c44:	69b3      	ldr	r3, [r6, #24]
 8004c46:	b913      	cbnz	r3, 8004c4e <__sfp+0x16>
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f7ff ffbd 	bl	8004bc8 <__sinit>
 8004c4e:	3648      	adds	r6, #72	; 0x48
 8004c50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	d503      	bpl.n	8004c60 <__sfp+0x28>
 8004c58:	6833      	ldr	r3, [r6, #0]
 8004c5a:	b30b      	cbz	r3, 8004ca0 <__sfp+0x68>
 8004c5c:	6836      	ldr	r6, [r6, #0]
 8004c5e:	e7f7      	b.n	8004c50 <__sfp+0x18>
 8004c60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c64:	b9d5      	cbnz	r5, 8004c9c <__sfp+0x64>
 8004c66:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <__sfp+0x88>)
 8004c68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c6c:	60e3      	str	r3, [r4, #12]
 8004c6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004c70:	f000 f84c 	bl	8004d0c <__retarget_lock_init_recursive>
 8004c74:	f7ff ff96 	bl	8004ba4 <__sfp_lock_release>
 8004c78:	2208      	movs	r2, #8
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c84:	6025      	str	r5, [r4, #0]
 8004c86:	61a5      	str	r5, [r4, #24]
 8004c88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c8c:	f7fe fabe 	bl	800320c <memset>
 8004c90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c98:	4620      	mov	r0, r4
 8004c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c9c:	3468      	adds	r4, #104	; 0x68
 8004c9e:	e7d9      	b.n	8004c54 <__sfp+0x1c>
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	f7ff ff62 	bl	8004b6c <__sfmoreglue>
 8004ca8:	4604      	mov	r4, r0
 8004caa:	6030      	str	r0, [r6, #0]
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d1d5      	bne.n	8004c5c <__sfp+0x24>
 8004cb0:	f7ff ff78 	bl	8004ba4 <__sfp_lock_release>
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	e7ee      	b.n	8004c98 <__sfp+0x60>
 8004cba:	bf00      	nop
 8004cbc:	08005e14 	.word	0x08005e14
 8004cc0:	ffff0001 	.word	0xffff0001

08004cc4 <_fwalk_reent>:
 8004cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc8:	4606      	mov	r6, r0
 8004cca:	4688      	mov	r8, r1
 8004ccc:	2700      	movs	r7, #0
 8004cce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cd6:	f1b9 0901 	subs.w	r9, r9, #1
 8004cda:	d505      	bpl.n	8004ce8 <_fwalk_reent+0x24>
 8004cdc:	6824      	ldr	r4, [r4, #0]
 8004cde:	2c00      	cmp	r4, #0
 8004ce0:	d1f7      	bne.n	8004cd2 <_fwalk_reent+0xe>
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce8:	89ab      	ldrh	r3, [r5, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d907      	bls.n	8004cfe <_fwalk_reent+0x3a>
 8004cee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	d003      	beq.n	8004cfe <_fwalk_reent+0x3a>
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	47c0      	blx	r8
 8004cfc:	4307      	orrs	r7, r0
 8004cfe:	3568      	adds	r5, #104	; 0x68
 8004d00:	e7e9      	b.n	8004cd6 <_fwalk_reent+0x12>
	...

08004d04 <_localeconv_r>:
 8004d04:	4800      	ldr	r0, [pc, #0]	; (8004d08 <_localeconv_r+0x4>)
 8004d06:	4770      	bx	lr
 8004d08:	20000160 	.word	0x20000160

08004d0c <__retarget_lock_init_recursive>:
 8004d0c:	4770      	bx	lr

08004d0e <__retarget_lock_acquire_recursive>:
 8004d0e:	4770      	bx	lr

08004d10 <__retarget_lock_release_recursive>:
 8004d10:	4770      	bx	lr

08004d12 <__swhatbuf_r>:
 8004d12:	b570      	push	{r4, r5, r6, lr}
 8004d14:	460e      	mov	r6, r1
 8004d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	461d      	mov	r5, r3
 8004d20:	b096      	sub	sp, #88	; 0x58
 8004d22:	da07      	bge.n	8004d34 <__swhatbuf_r+0x22>
 8004d24:	2300      	movs	r3, #0
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	89b3      	ldrh	r3, [r6, #12]
 8004d2a:	061a      	lsls	r2, r3, #24
 8004d2c:	d410      	bmi.n	8004d50 <__swhatbuf_r+0x3e>
 8004d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d32:	e00e      	b.n	8004d52 <__swhatbuf_r+0x40>
 8004d34:	466a      	mov	r2, sp
 8004d36:	f000 ff69 	bl	8005c0c <_fstat_r>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	dbf2      	blt.n	8004d24 <__swhatbuf_r+0x12>
 8004d3e:	9a01      	ldr	r2, [sp, #4]
 8004d40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d48:	425a      	negs	r2, r3
 8004d4a:	415a      	adcs	r2, r3
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	e7ee      	b.n	8004d2e <__swhatbuf_r+0x1c>
 8004d50:	2340      	movs	r3, #64	; 0x40
 8004d52:	2000      	movs	r0, #0
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	b016      	add	sp, #88	; 0x58
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d5c <__smakebuf_r>:
 8004d5c:	898b      	ldrh	r3, [r1, #12]
 8004d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d60:	079d      	lsls	r5, r3, #30
 8004d62:	4606      	mov	r6, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	d507      	bpl.n	8004d78 <__smakebuf_r+0x1c>
 8004d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	2301      	movs	r3, #1
 8004d72:	6163      	str	r3, [r4, #20]
 8004d74:	b002      	add	sp, #8
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	466a      	mov	r2, sp
 8004d7a:	ab01      	add	r3, sp, #4
 8004d7c:	f7ff ffc9 	bl	8004d12 <__swhatbuf_r>
 8004d80:	9900      	ldr	r1, [sp, #0]
 8004d82:	4605      	mov	r5, r0
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 fc29 	bl	80055dc <_malloc_r>
 8004d8a:	b948      	cbnz	r0, 8004da0 <__smakebuf_r+0x44>
 8004d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d90:	059a      	lsls	r2, r3, #22
 8004d92:	d4ef      	bmi.n	8004d74 <__smakebuf_r+0x18>
 8004d94:	f023 0303 	bic.w	r3, r3, #3
 8004d98:	f043 0302 	orr.w	r3, r3, #2
 8004d9c:	81a3      	strh	r3, [r4, #12]
 8004d9e:	e7e3      	b.n	8004d68 <__smakebuf_r+0xc>
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <__smakebuf_r+0x7c>)
 8004da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	6020      	str	r0, [r4, #0]
 8004da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	9b00      	ldr	r3, [sp, #0]
 8004db0:	6120      	str	r0, [r4, #16]
 8004db2:	6163      	str	r3, [r4, #20]
 8004db4:	9b01      	ldr	r3, [sp, #4]
 8004db6:	b15b      	cbz	r3, 8004dd0 <__smakebuf_r+0x74>
 8004db8:	4630      	mov	r0, r6
 8004dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbe:	f000 ff37 	bl	8005c30 <_isatty_r>
 8004dc2:	b128      	cbz	r0, 8004dd0 <__smakebuf_r+0x74>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	89a0      	ldrh	r0, [r4, #12]
 8004dd2:	4305      	orrs	r5, r0
 8004dd4:	81a5      	strh	r5, [r4, #12]
 8004dd6:	e7cd      	b.n	8004d74 <__smakebuf_r+0x18>
 8004dd8:	08004b61 	.word	0x08004b61

08004ddc <malloc>:
 8004ddc:	4b02      	ldr	r3, [pc, #8]	; (8004de8 <malloc+0xc>)
 8004dde:	4601      	mov	r1, r0
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	f000 bbfb 	b.w	80055dc <_malloc_r>
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c

08004dec <memchr>:
 8004dec:	4603      	mov	r3, r0
 8004dee:	b510      	push	{r4, lr}
 8004df0:	b2c9      	uxtb	r1, r1
 8004df2:	4402      	add	r2, r0
 8004df4:	4293      	cmp	r3, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	d101      	bne.n	8004dfe <memchr+0x12>
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e003      	b.n	8004e06 <memchr+0x1a>
 8004dfe:	7804      	ldrb	r4, [r0, #0]
 8004e00:	3301      	adds	r3, #1
 8004e02:	428c      	cmp	r4, r1
 8004e04:	d1f6      	bne.n	8004df4 <memchr+0x8>
 8004e06:	bd10      	pop	{r4, pc}

08004e08 <memcpy>:
 8004e08:	440a      	add	r2, r1
 8004e0a:	4291      	cmp	r1, r2
 8004e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e10:	d100      	bne.n	8004e14 <memcpy+0xc>
 8004e12:	4770      	bx	lr
 8004e14:	b510      	push	{r4, lr}
 8004e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e1a:	4291      	cmp	r1, r2
 8004e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e20:	d1f9      	bne.n	8004e16 <memcpy+0xe>
 8004e22:	bd10      	pop	{r4, pc}

08004e24 <_Balloc>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e28:	4604      	mov	r4, r0
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	b976      	cbnz	r6, 8004e4c <_Balloc+0x28>
 8004e2e:	2010      	movs	r0, #16
 8004e30:	f7ff ffd4 	bl	8004ddc <malloc>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6260      	str	r0, [r4, #36]	; 0x24
 8004e38:	b920      	cbnz	r0, 8004e44 <_Balloc+0x20>
 8004e3a:	2166      	movs	r1, #102	; 0x66
 8004e3c:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <_Balloc+0x78>)
 8004e3e:	4818      	ldr	r0, [pc, #96]	; (8004ea0 <_Balloc+0x7c>)
 8004e40:	f000 fea4 	bl	8005b8c <__assert_func>
 8004e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e48:	6006      	str	r6, [r0, #0]
 8004e4a:	60c6      	str	r6, [r0, #12]
 8004e4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e4e:	68f3      	ldr	r3, [r6, #12]
 8004e50:	b183      	cbz	r3, 8004e74 <_Balloc+0x50>
 8004e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e5a:	b9b8      	cbnz	r0, 8004e8c <_Balloc+0x68>
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	fa01 f605 	lsl.w	r6, r1, r5
 8004e62:	1d72      	adds	r2, r6, #5
 8004e64:	4620      	mov	r0, r4
 8004e66:	0092      	lsls	r2, r2, #2
 8004e68:	f000 fb5e 	bl	8005528 <_calloc_r>
 8004e6c:	b160      	cbz	r0, 8004e88 <_Balloc+0x64>
 8004e6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e72:	e00e      	b.n	8004e92 <_Balloc+0x6e>
 8004e74:	2221      	movs	r2, #33	; 0x21
 8004e76:	2104      	movs	r1, #4
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f000 fb55 	bl	8005528 <_calloc_r>
 8004e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e80:	60f0      	str	r0, [r6, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e4      	bne.n	8004e52 <_Balloc+0x2e>
 8004e88:	2000      	movs	r0, #0
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	6802      	ldr	r2, [r0, #0]
 8004e8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e92:	2300      	movs	r3, #0
 8004e94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e98:	e7f7      	b.n	8004e8a <_Balloc+0x66>
 8004e9a:	bf00      	nop
 8004e9c:	08005e59 	.word	0x08005e59
 8004ea0:	08005f40 	.word	0x08005f40

08004ea4 <_Bfree>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	b976      	cbnz	r6, 8004ecc <_Bfree+0x28>
 8004eae:	2010      	movs	r0, #16
 8004eb0:	f7ff ff94 	bl	8004ddc <malloc>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6268      	str	r0, [r5, #36]	; 0x24
 8004eb8:	b920      	cbnz	r0, 8004ec4 <_Bfree+0x20>
 8004eba:	218a      	movs	r1, #138	; 0x8a
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <_Bfree+0x3c>)
 8004ebe:	4809      	ldr	r0, [pc, #36]	; (8004ee4 <_Bfree+0x40>)
 8004ec0:	f000 fe64 	bl	8005b8c <__assert_func>
 8004ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ec8:	6006      	str	r6, [r0, #0]
 8004eca:	60c6      	str	r6, [r0, #12]
 8004ecc:	b13c      	cbz	r4, 8004ede <_Bfree+0x3a>
 8004ece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ed0:	6862      	ldr	r2, [r4, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ed8:	6021      	str	r1, [r4, #0]
 8004eda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	08005e59 	.word	0x08005e59
 8004ee4:	08005f40 	.word	0x08005f40

08004ee8 <__multadd>:
 8004ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eec:	4698      	mov	r8, r3
 8004eee:	460c      	mov	r4, r1
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	690e      	ldr	r6, [r1, #16]
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	f101 0014 	add.w	r0, r1, #20
 8004efa:	6805      	ldr	r5, [r0, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	b2a9      	uxth	r1, r5
 8004f00:	fb02 8101 	mla	r1, r2, r1, r8
 8004f04:	0c2d      	lsrs	r5, r5, #16
 8004f06:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004f0a:	fb02 c505 	mla	r5, r2, r5, ip
 8004f0e:	b289      	uxth	r1, r1
 8004f10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004f14:	429e      	cmp	r6, r3
 8004f16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004f1a:	f840 1b04 	str.w	r1, [r0], #4
 8004f1e:	dcec      	bgt.n	8004efa <__multadd+0x12>
 8004f20:	f1b8 0f00 	cmp.w	r8, #0
 8004f24:	d022      	beq.n	8004f6c <__multadd+0x84>
 8004f26:	68a3      	ldr	r3, [r4, #8]
 8004f28:	42b3      	cmp	r3, r6
 8004f2a:	dc19      	bgt.n	8004f60 <__multadd+0x78>
 8004f2c:	6861      	ldr	r1, [r4, #4]
 8004f2e:	4638      	mov	r0, r7
 8004f30:	3101      	adds	r1, #1
 8004f32:	f7ff ff77 	bl	8004e24 <_Balloc>
 8004f36:	4605      	mov	r5, r0
 8004f38:	b928      	cbnz	r0, 8004f46 <__multadd+0x5e>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	21b5      	movs	r1, #181	; 0xb5
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <__multadd+0x8c>)
 8004f40:	480d      	ldr	r0, [pc, #52]	; (8004f78 <__multadd+0x90>)
 8004f42:	f000 fe23 	bl	8005b8c <__assert_func>
 8004f46:	6922      	ldr	r2, [r4, #16]
 8004f48:	f104 010c 	add.w	r1, r4, #12
 8004f4c:	3202      	adds	r2, #2
 8004f4e:	0092      	lsls	r2, r2, #2
 8004f50:	300c      	adds	r0, #12
 8004f52:	f7ff ff59 	bl	8004e08 <memcpy>
 8004f56:	4621      	mov	r1, r4
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f7ff ffa3 	bl	8004ea4 <_Bfree>
 8004f5e:	462c      	mov	r4, r5
 8004f60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004f64:	3601      	adds	r6, #1
 8004f66:	f8c3 8014 	str.w	r8, [r3, #20]
 8004f6a:	6126      	str	r6, [r4, #16]
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f72:	bf00      	nop
 8004f74:	08005ecf 	.word	0x08005ecf
 8004f78:	08005f40 	.word	0x08005f40

08004f7c <__hi0bits>:
 8004f7c:	0c02      	lsrs	r2, r0, #16
 8004f7e:	0412      	lsls	r2, r2, #16
 8004f80:	4603      	mov	r3, r0
 8004f82:	b9ca      	cbnz	r2, 8004fb8 <__hi0bits+0x3c>
 8004f84:	0403      	lsls	r3, r0, #16
 8004f86:	2010      	movs	r0, #16
 8004f88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f8c:	bf04      	itt	eq
 8004f8e:	021b      	lsleq	r3, r3, #8
 8004f90:	3008      	addeq	r0, #8
 8004f92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f96:	bf04      	itt	eq
 8004f98:	011b      	lsleq	r3, r3, #4
 8004f9a:	3004      	addeq	r0, #4
 8004f9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004fa0:	bf04      	itt	eq
 8004fa2:	009b      	lsleq	r3, r3, #2
 8004fa4:	3002      	addeq	r0, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	db05      	blt.n	8004fb6 <__hi0bits+0x3a>
 8004faa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004fae:	f100 0001 	add.w	r0, r0, #1
 8004fb2:	bf08      	it	eq
 8004fb4:	2020      	moveq	r0, #32
 8004fb6:	4770      	bx	lr
 8004fb8:	2000      	movs	r0, #0
 8004fba:	e7e5      	b.n	8004f88 <__hi0bits+0xc>

08004fbc <__lo0bits>:
 8004fbc:	6803      	ldr	r3, [r0, #0]
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	f013 0007 	ands.w	r0, r3, #7
 8004fc4:	d00b      	beq.n	8004fde <__lo0bits+0x22>
 8004fc6:	07d9      	lsls	r1, r3, #31
 8004fc8:	d422      	bmi.n	8005010 <__lo0bits+0x54>
 8004fca:	0798      	lsls	r0, r3, #30
 8004fcc:	bf49      	itett	mi
 8004fce:	085b      	lsrmi	r3, r3, #1
 8004fd0:	089b      	lsrpl	r3, r3, #2
 8004fd2:	2001      	movmi	r0, #1
 8004fd4:	6013      	strmi	r3, [r2, #0]
 8004fd6:	bf5c      	itt	pl
 8004fd8:	2002      	movpl	r0, #2
 8004fda:	6013      	strpl	r3, [r2, #0]
 8004fdc:	4770      	bx	lr
 8004fde:	b299      	uxth	r1, r3
 8004fe0:	b909      	cbnz	r1, 8004fe6 <__lo0bits+0x2a>
 8004fe2:	2010      	movs	r0, #16
 8004fe4:	0c1b      	lsrs	r3, r3, #16
 8004fe6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004fea:	bf04      	itt	eq
 8004fec:	0a1b      	lsreq	r3, r3, #8
 8004fee:	3008      	addeq	r0, #8
 8004ff0:	0719      	lsls	r1, r3, #28
 8004ff2:	bf04      	itt	eq
 8004ff4:	091b      	lsreq	r3, r3, #4
 8004ff6:	3004      	addeq	r0, #4
 8004ff8:	0799      	lsls	r1, r3, #30
 8004ffa:	bf04      	itt	eq
 8004ffc:	089b      	lsreq	r3, r3, #2
 8004ffe:	3002      	addeq	r0, #2
 8005000:	07d9      	lsls	r1, r3, #31
 8005002:	d403      	bmi.n	800500c <__lo0bits+0x50>
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	f100 0001 	add.w	r0, r0, #1
 800500a:	d003      	beq.n	8005014 <__lo0bits+0x58>
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	4770      	bx	lr
 8005010:	2000      	movs	r0, #0
 8005012:	4770      	bx	lr
 8005014:	2020      	movs	r0, #32
 8005016:	4770      	bx	lr

08005018 <__i2b>:
 8005018:	b510      	push	{r4, lr}
 800501a:	460c      	mov	r4, r1
 800501c:	2101      	movs	r1, #1
 800501e:	f7ff ff01 	bl	8004e24 <_Balloc>
 8005022:	4602      	mov	r2, r0
 8005024:	b928      	cbnz	r0, 8005032 <__i2b+0x1a>
 8005026:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800502a:	4b04      	ldr	r3, [pc, #16]	; (800503c <__i2b+0x24>)
 800502c:	4804      	ldr	r0, [pc, #16]	; (8005040 <__i2b+0x28>)
 800502e:	f000 fdad 	bl	8005b8c <__assert_func>
 8005032:	2301      	movs	r3, #1
 8005034:	6144      	str	r4, [r0, #20]
 8005036:	6103      	str	r3, [r0, #16]
 8005038:	bd10      	pop	{r4, pc}
 800503a:	bf00      	nop
 800503c:	08005ecf 	.word	0x08005ecf
 8005040:	08005f40 	.word	0x08005f40

08005044 <__multiply>:
 8005044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005048:	4614      	mov	r4, r2
 800504a:	690a      	ldr	r2, [r1, #16]
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	460d      	mov	r5, r1
 8005050:	429a      	cmp	r2, r3
 8005052:	bfbe      	ittt	lt
 8005054:	460b      	movlt	r3, r1
 8005056:	4625      	movlt	r5, r4
 8005058:	461c      	movlt	r4, r3
 800505a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800505e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005062:	68ab      	ldr	r3, [r5, #8]
 8005064:	6869      	ldr	r1, [r5, #4]
 8005066:	eb0a 0709 	add.w	r7, sl, r9
 800506a:	42bb      	cmp	r3, r7
 800506c:	b085      	sub	sp, #20
 800506e:	bfb8      	it	lt
 8005070:	3101      	addlt	r1, #1
 8005072:	f7ff fed7 	bl	8004e24 <_Balloc>
 8005076:	b930      	cbnz	r0, 8005086 <__multiply+0x42>
 8005078:	4602      	mov	r2, r0
 800507a:	f240 115d 	movw	r1, #349	; 0x15d
 800507e:	4b41      	ldr	r3, [pc, #260]	; (8005184 <__multiply+0x140>)
 8005080:	4841      	ldr	r0, [pc, #260]	; (8005188 <__multiply+0x144>)
 8005082:	f000 fd83 	bl	8005b8c <__assert_func>
 8005086:	f100 0614 	add.w	r6, r0, #20
 800508a:	4633      	mov	r3, r6
 800508c:	2200      	movs	r2, #0
 800508e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005092:	4543      	cmp	r3, r8
 8005094:	d31e      	bcc.n	80050d4 <__multiply+0x90>
 8005096:	f105 0c14 	add.w	ip, r5, #20
 800509a:	f104 0314 	add.w	r3, r4, #20
 800509e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80050a2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80050a6:	9202      	str	r2, [sp, #8]
 80050a8:	ebac 0205 	sub.w	r2, ip, r5
 80050ac:	3a15      	subs	r2, #21
 80050ae:	f022 0203 	bic.w	r2, r2, #3
 80050b2:	3204      	adds	r2, #4
 80050b4:	f105 0115 	add.w	r1, r5, #21
 80050b8:	458c      	cmp	ip, r1
 80050ba:	bf38      	it	cc
 80050bc:	2204      	movcc	r2, #4
 80050be:	9201      	str	r2, [sp, #4]
 80050c0:	9a02      	ldr	r2, [sp, #8]
 80050c2:	9303      	str	r3, [sp, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d808      	bhi.n	80050da <__multiply+0x96>
 80050c8:	2f00      	cmp	r7, #0
 80050ca:	dc55      	bgt.n	8005178 <__multiply+0x134>
 80050cc:	6107      	str	r7, [r0, #16]
 80050ce:	b005      	add	sp, #20
 80050d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d4:	f843 2b04 	str.w	r2, [r3], #4
 80050d8:	e7db      	b.n	8005092 <__multiply+0x4e>
 80050da:	f8b3 a000 	ldrh.w	sl, [r3]
 80050de:	f1ba 0f00 	cmp.w	sl, #0
 80050e2:	d020      	beq.n	8005126 <__multiply+0xe2>
 80050e4:	46b1      	mov	r9, r6
 80050e6:	2200      	movs	r2, #0
 80050e8:	f105 0e14 	add.w	lr, r5, #20
 80050ec:	f85e 4b04 	ldr.w	r4, [lr], #4
 80050f0:	f8d9 b000 	ldr.w	fp, [r9]
 80050f4:	b2a1      	uxth	r1, r4
 80050f6:	fa1f fb8b 	uxth.w	fp, fp
 80050fa:	fb0a b101 	mla	r1, sl, r1, fp
 80050fe:	4411      	add	r1, r2
 8005100:	f8d9 2000 	ldr.w	r2, [r9]
 8005104:	0c24      	lsrs	r4, r4, #16
 8005106:	0c12      	lsrs	r2, r2, #16
 8005108:	fb0a 2404 	mla	r4, sl, r4, r2
 800510c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005110:	b289      	uxth	r1, r1
 8005112:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005116:	45f4      	cmp	ip, lr
 8005118:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800511c:	f849 1b04 	str.w	r1, [r9], #4
 8005120:	d8e4      	bhi.n	80050ec <__multiply+0xa8>
 8005122:	9901      	ldr	r1, [sp, #4]
 8005124:	5072      	str	r2, [r6, r1]
 8005126:	9a03      	ldr	r2, [sp, #12]
 8005128:	3304      	adds	r3, #4
 800512a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800512e:	f1b9 0f00 	cmp.w	r9, #0
 8005132:	d01f      	beq.n	8005174 <__multiply+0x130>
 8005134:	46b6      	mov	lr, r6
 8005136:	f04f 0a00 	mov.w	sl, #0
 800513a:	6834      	ldr	r4, [r6, #0]
 800513c:	f105 0114 	add.w	r1, r5, #20
 8005140:	880a      	ldrh	r2, [r1, #0]
 8005142:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005146:	b2a4      	uxth	r4, r4
 8005148:	fb09 b202 	mla	r2, r9, r2, fp
 800514c:	4492      	add	sl, r2
 800514e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005152:	f84e 4b04 	str.w	r4, [lr], #4
 8005156:	f851 4b04 	ldr.w	r4, [r1], #4
 800515a:	f8be 2000 	ldrh.w	r2, [lr]
 800515e:	0c24      	lsrs	r4, r4, #16
 8005160:	fb09 2404 	mla	r4, r9, r4, r2
 8005164:	458c      	cmp	ip, r1
 8005166:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800516a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800516e:	d8e7      	bhi.n	8005140 <__multiply+0xfc>
 8005170:	9a01      	ldr	r2, [sp, #4]
 8005172:	50b4      	str	r4, [r6, r2]
 8005174:	3604      	adds	r6, #4
 8005176:	e7a3      	b.n	80050c0 <__multiply+0x7c>
 8005178:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1a5      	bne.n	80050cc <__multiply+0x88>
 8005180:	3f01      	subs	r7, #1
 8005182:	e7a1      	b.n	80050c8 <__multiply+0x84>
 8005184:	08005ecf 	.word	0x08005ecf
 8005188:	08005f40 	.word	0x08005f40

0800518c <__pow5mult>:
 800518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005190:	4615      	mov	r5, r2
 8005192:	f012 0203 	ands.w	r2, r2, #3
 8005196:	4606      	mov	r6, r0
 8005198:	460f      	mov	r7, r1
 800519a:	d007      	beq.n	80051ac <__pow5mult+0x20>
 800519c:	4c25      	ldr	r4, [pc, #148]	; (8005234 <__pow5mult+0xa8>)
 800519e:	3a01      	subs	r2, #1
 80051a0:	2300      	movs	r3, #0
 80051a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051a6:	f7ff fe9f 	bl	8004ee8 <__multadd>
 80051aa:	4607      	mov	r7, r0
 80051ac:	10ad      	asrs	r5, r5, #2
 80051ae:	d03d      	beq.n	800522c <__pow5mult+0xa0>
 80051b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80051b2:	b97c      	cbnz	r4, 80051d4 <__pow5mult+0x48>
 80051b4:	2010      	movs	r0, #16
 80051b6:	f7ff fe11 	bl	8004ddc <malloc>
 80051ba:	4602      	mov	r2, r0
 80051bc:	6270      	str	r0, [r6, #36]	; 0x24
 80051be:	b928      	cbnz	r0, 80051cc <__pow5mult+0x40>
 80051c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80051c4:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <__pow5mult+0xac>)
 80051c6:	481d      	ldr	r0, [pc, #116]	; (800523c <__pow5mult+0xb0>)
 80051c8:	f000 fce0 	bl	8005b8c <__assert_func>
 80051cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051d0:	6004      	str	r4, [r0, #0]
 80051d2:	60c4      	str	r4, [r0, #12]
 80051d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80051d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051dc:	b94c      	cbnz	r4, 80051f2 <__pow5mult+0x66>
 80051de:	f240 2171 	movw	r1, #625	; 0x271
 80051e2:	4630      	mov	r0, r6
 80051e4:	f7ff ff18 	bl	8005018 <__i2b>
 80051e8:	2300      	movs	r3, #0
 80051ea:	4604      	mov	r4, r0
 80051ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80051f0:	6003      	str	r3, [r0, #0]
 80051f2:	f04f 0900 	mov.w	r9, #0
 80051f6:	07eb      	lsls	r3, r5, #31
 80051f8:	d50a      	bpl.n	8005210 <__pow5mult+0x84>
 80051fa:	4639      	mov	r1, r7
 80051fc:	4622      	mov	r2, r4
 80051fe:	4630      	mov	r0, r6
 8005200:	f7ff ff20 	bl	8005044 <__multiply>
 8005204:	4680      	mov	r8, r0
 8005206:	4639      	mov	r1, r7
 8005208:	4630      	mov	r0, r6
 800520a:	f7ff fe4b 	bl	8004ea4 <_Bfree>
 800520e:	4647      	mov	r7, r8
 8005210:	106d      	asrs	r5, r5, #1
 8005212:	d00b      	beq.n	800522c <__pow5mult+0xa0>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	b938      	cbnz	r0, 8005228 <__pow5mult+0x9c>
 8005218:	4622      	mov	r2, r4
 800521a:	4621      	mov	r1, r4
 800521c:	4630      	mov	r0, r6
 800521e:	f7ff ff11 	bl	8005044 <__multiply>
 8005222:	6020      	str	r0, [r4, #0]
 8005224:	f8c0 9000 	str.w	r9, [r0]
 8005228:	4604      	mov	r4, r0
 800522a:	e7e4      	b.n	80051f6 <__pow5mult+0x6a>
 800522c:	4638      	mov	r0, r7
 800522e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005232:	bf00      	nop
 8005234:	08006090 	.word	0x08006090
 8005238:	08005e59 	.word	0x08005e59
 800523c:	08005f40 	.word	0x08005f40

08005240 <__lshift>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	460c      	mov	r4, r1
 8005246:	4607      	mov	r7, r0
 8005248:	4691      	mov	r9, r2
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	6849      	ldr	r1, [r1, #4]
 800524e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005252:	68a3      	ldr	r3, [r4, #8]
 8005254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005258:	f108 0601 	add.w	r6, r8, #1
 800525c:	42b3      	cmp	r3, r6
 800525e:	db0b      	blt.n	8005278 <__lshift+0x38>
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff fddf 	bl	8004e24 <_Balloc>
 8005266:	4605      	mov	r5, r0
 8005268:	b948      	cbnz	r0, 800527e <__lshift+0x3e>
 800526a:	4602      	mov	r2, r0
 800526c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005270:	4b27      	ldr	r3, [pc, #156]	; (8005310 <__lshift+0xd0>)
 8005272:	4828      	ldr	r0, [pc, #160]	; (8005314 <__lshift+0xd4>)
 8005274:	f000 fc8a 	bl	8005b8c <__assert_func>
 8005278:	3101      	adds	r1, #1
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	e7ee      	b.n	800525c <__lshift+0x1c>
 800527e:	2300      	movs	r3, #0
 8005280:	f100 0114 	add.w	r1, r0, #20
 8005284:	f100 0210 	add.w	r2, r0, #16
 8005288:	4618      	mov	r0, r3
 800528a:	4553      	cmp	r3, sl
 800528c:	db33      	blt.n	80052f6 <__lshift+0xb6>
 800528e:	6920      	ldr	r0, [r4, #16]
 8005290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005294:	f104 0314 	add.w	r3, r4, #20
 8005298:	f019 091f 	ands.w	r9, r9, #31
 800529c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80052a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052a4:	d02b      	beq.n	80052fe <__lshift+0xbe>
 80052a6:	468a      	mov	sl, r1
 80052a8:	2200      	movs	r2, #0
 80052aa:	f1c9 0e20 	rsb	lr, r9, #32
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	fa00 f009 	lsl.w	r0, r0, r9
 80052b4:	4302      	orrs	r2, r0
 80052b6:	f84a 2b04 	str.w	r2, [sl], #4
 80052ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80052be:	459c      	cmp	ip, r3
 80052c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80052c4:	d8f3      	bhi.n	80052ae <__lshift+0x6e>
 80052c6:	ebac 0304 	sub.w	r3, ip, r4
 80052ca:	3b15      	subs	r3, #21
 80052cc:	f023 0303 	bic.w	r3, r3, #3
 80052d0:	3304      	adds	r3, #4
 80052d2:	f104 0015 	add.w	r0, r4, #21
 80052d6:	4584      	cmp	ip, r0
 80052d8:	bf38      	it	cc
 80052da:	2304      	movcc	r3, #4
 80052dc:	50ca      	str	r2, [r1, r3]
 80052de:	b10a      	cbz	r2, 80052e4 <__lshift+0xa4>
 80052e0:	f108 0602 	add.w	r6, r8, #2
 80052e4:	3e01      	subs	r6, #1
 80052e6:	4638      	mov	r0, r7
 80052e8:	4621      	mov	r1, r4
 80052ea:	612e      	str	r6, [r5, #16]
 80052ec:	f7ff fdda 	bl	8004ea4 <_Bfree>
 80052f0:	4628      	mov	r0, r5
 80052f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80052fa:	3301      	adds	r3, #1
 80052fc:	e7c5      	b.n	800528a <__lshift+0x4a>
 80052fe:	3904      	subs	r1, #4
 8005300:	f853 2b04 	ldr.w	r2, [r3], #4
 8005304:	459c      	cmp	ip, r3
 8005306:	f841 2f04 	str.w	r2, [r1, #4]!
 800530a:	d8f9      	bhi.n	8005300 <__lshift+0xc0>
 800530c:	e7ea      	b.n	80052e4 <__lshift+0xa4>
 800530e:	bf00      	nop
 8005310:	08005ecf 	.word	0x08005ecf
 8005314:	08005f40 	.word	0x08005f40

08005318 <__mcmp>:
 8005318:	4603      	mov	r3, r0
 800531a:	690a      	ldr	r2, [r1, #16]
 800531c:	6900      	ldr	r0, [r0, #16]
 800531e:	b530      	push	{r4, r5, lr}
 8005320:	1a80      	subs	r0, r0, r2
 8005322:	d10d      	bne.n	8005340 <__mcmp+0x28>
 8005324:	3314      	adds	r3, #20
 8005326:	3114      	adds	r1, #20
 8005328:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800532c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005330:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005334:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005338:	4295      	cmp	r5, r2
 800533a:	d002      	beq.n	8005342 <__mcmp+0x2a>
 800533c:	d304      	bcc.n	8005348 <__mcmp+0x30>
 800533e:	2001      	movs	r0, #1
 8005340:	bd30      	pop	{r4, r5, pc}
 8005342:	42a3      	cmp	r3, r4
 8005344:	d3f4      	bcc.n	8005330 <__mcmp+0x18>
 8005346:	e7fb      	b.n	8005340 <__mcmp+0x28>
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	e7f8      	b.n	8005340 <__mcmp+0x28>
	...

08005350 <__mdiff>:
 8005350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	460c      	mov	r4, r1
 8005356:	4606      	mov	r6, r0
 8005358:	4611      	mov	r1, r2
 800535a:	4620      	mov	r0, r4
 800535c:	4692      	mov	sl, r2
 800535e:	f7ff ffdb 	bl	8005318 <__mcmp>
 8005362:	1e05      	subs	r5, r0, #0
 8005364:	d111      	bne.n	800538a <__mdiff+0x3a>
 8005366:	4629      	mov	r1, r5
 8005368:	4630      	mov	r0, r6
 800536a:	f7ff fd5b 	bl	8004e24 <_Balloc>
 800536e:	4602      	mov	r2, r0
 8005370:	b928      	cbnz	r0, 800537e <__mdiff+0x2e>
 8005372:	f240 2132 	movw	r1, #562	; 0x232
 8005376:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <__mdiff+0x118>)
 8005378:	483c      	ldr	r0, [pc, #240]	; (800546c <__mdiff+0x11c>)
 800537a:	f000 fc07 	bl	8005b8c <__assert_func>
 800537e:	2301      	movs	r3, #1
 8005380:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005384:	4610      	mov	r0, r2
 8005386:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538a:	bfa4      	itt	ge
 800538c:	4653      	movge	r3, sl
 800538e:	46a2      	movge	sl, r4
 8005390:	4630      	mov	r0, r6
 8005392:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005396:	bfa6      	itte	ge
 8005398:	461c      	movge	r4, r3
 800539a:	2500      	movge	r5, #0
 800539c:	2501      	movlt	r5, #1
 800539e:	f7ff fd41 	bl	8004e24 <_Balloc>
 80053a2:	4602      	mov	r2, r0
 80053a4:	b918      	cbnz	r0, 80053ae <__mdiff+0x5e>
 80053a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80053aa:	4b2f      	ldr	r3, [pc, #188]	; (8005468 <__mdiff+0x118>)
 80053ac:	e7e4      	b.n	8005378 <__mdiff+0x28>
 80053ae:	f100 0814 	add.w	r8, r0, #20
 80053b2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80053b6:	60c5      	str	r5, [r0, #12]
 80053b8:	f04f 0c00 	mov.w	ip, #0
 80053bc:	f10a 0514 	add.w	r5, sl, #20
 80053c0:	f10a 0010 	add.w	r0, sl, #16
 80053c4:	46c2      	mov	sl, r8
 80053c6:	6926      	ldr	r6, [r4, #16]
 80053c8:	f104 0914 	add.w	r9, r4, #20
 80053cc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80053d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80053d4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80053d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80053dc:	fa1f f18b 	uxth.w	r1, fp
 80053e0:	4461      	add	r1, ip
 80053e2:	fa1f fc83 	uxth.w	ip, r3
 80053e6:	0c1b      	lsrs	r3, r3, #16
 80053e8:	eba1 010c 	sub.w	r1, r1, ip
 80053ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80053f0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80053f4:	b289      	uxth	r1, r1
 80053f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80053fa:	454e      	cmp	r6, r9
 80053fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005400:	f84a 3b04 	str.w	r3, [sl], #4
 8005404:	d8e6      	bhi.n	80053d4 <__mdiff+0x84>
 8005406:	1b33      	subs	r3, r6, r4
 8005408:	3b15      	subs	r3, #21
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	3415      	adds	r4, #21
 8005410:	3304      	adds	r3, #4
 8005412:	42a6      	cmp	r6, r4
 8005414:	bf38      	it	cc
 8005416:	2304      	movcc	r3, #4
 8005418:	441d      	add	r5, r3
 800541a:	4443      	add	r3, r8
 800541c:	461e      	mov	r6, r3
 800541e:	462c      	mov	r4, r5
 8005420:	4574      	cmp	r4, lr
 8005422:	d30e      	bcc.n	8005442 <__mdiff+0xf2>
 8005424:	f10e 0103 	add.w	r1, lr, #3
 8005428:	1b49      	subs	r1, r1, r5
 800542a:	f021 0103 	bic.w	r1, r1, #3
 800542e:	3d03      	subs	r5, #3
 8005430:	45ae      	cmp	lr, r5
 8005432:	bf38      	it	cc
 8005434:	2100      	movcc	r1, #0
 8005436:	4419      	add	r1, r3
 8005438:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800543c:	b18b      	cbz	r3, 8005462 <__mdiff+0x112>
 800543e:	6117      	str	r7, [r2, #16]
 8005440:	e7a0      	b.n	8005384 <__mdiff+0x34>
 8005442:	f854 8b04 	ldr.w	r8, [r4], #4
 8005446:	fa1f f188 	uxth.w	r1, r8
 800544a:	4461      	add	r1, ip
 800544c:	1408      	asrs	r0, r1, #16
 800544e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005452:	b289      	uxth	r1, r1
 8005454:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005458:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800545c:	f846 1b04 	str.w	r1, [r6], #4
 8005460:	e7de      	b.n	8005420 <__mdiff+0xd0>
 8005462:	3f01      	subs	r7, #1
 8005464:	e7e8      	b.n	8005438 <__mdiff+0xe8>
 8005466:	bf00      	nop
 8005468:	08005ecf 	.word	0x08005ecf
 800546c:	08005f40 	.word	0x08005f40

08005470 <__d2b>:
 8005470:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005474:	2101      	movs	r1, #1
 8005476:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800547a:	4690      	mov	r8, r2
 800547c:	461d      	mov	r5, r3
 800547e:	f7ff fcd1 	bl	8004e24 <_Balloc>
 8005482:	4604      	mov	r4, r0
 8005484:	b930      	cbnz	r0, 8005494 <__d2b+0x24>
 8005486:	4602      	mov	r2, r0
 8005488:	f240 310a 	movw	r1, #778	; 0x30a
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <__d2b+0xb0>)
 800548e:	4825      	ldr	r0, [pc, #148]	; (8005524 <__d2b+0xb4>)
 8005490:	f000 fb7c 	bl	8005b8c <__assert_func>
 8005494:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005498:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800549c:	bb2d      	cbnz	r5, 80054ea <__d2b+0x7a>
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	f1b8 0300 	subs.w	r3, r8, #0
 80054a4:	d026      	beq.n	80054f4 <__d2b+0x84>
 80054a6:	4668      	mov	r0, sp
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	f7ff fd87 	bl	8004fbc <__lo0bits>
 80054ae:	9900      	ldr	r1, [sp, #0]
 80054b0:	b1f0      	cbz	r0, 80054f0 <__d2b+0x80>
 80054b2:	9a01      	ldr	r2, [sp, #4]
 80054b4:	f1c0 0320 	rsb	r3, r0, #32
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	430b      	orrs	r3, r1
 80054be:	40c2      	lsrs	r2, r0
 80054c0:	6163      	str	r3, [r4, #20]
 80054c2:	9201      	str	r2, [sp, #4]
 80054c4:	9b01      	ldr	r3, [sp, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bf14      	ite	ne
 80054ca:	2102      	movne	r1, #2
 80054cc:	2101      	moveq	r1, #1
 80054ce:	61a3      	str	r3, [r4, #24]
 80054d0:	6121      	str	r1, [r4, #16]
 80054d2:	b1c5      	cbz	r5, 8005506 <__d2b+0x96>
 80054d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80054d8:	4405      	add	r5, r0
 80054da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80054de:	603d      	str	r5, [r7, #0]
 80054e0:	6030      	str	r0, [r6, #0]
 80054e2:	4620      	mov	r0, r4
 80054e4:	b002      	add	sp, #8
 80054e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ee:	e7d6      	b.n	800549e <__d2b+0x2e>
 80054f0:	6161      	str	r1, [r4, #20]
 80054f2:	e7e7      	b.n	80054c4 <__d2b+0x54>
 80054f4:	a801      	add	r0, sp, #4
 80054f6:	f7ff fd61 	bl	8004fbc <__lo0bits>
 80054fa:	2101      	movs	r1, #1
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	6121      	str	r1, [r4, #16]
 8005500:	6163      	str	r3, [r4, #20]
 8005502:	3020      	adds	r0, #32
 8005504:	e7e5      	b.n	80054d2 <__d2b+0x62>
 8005506:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800550a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800550e:	6038      	str	r0, [r7, #0]
 8005510:	6918      	ldr	r0, [r3, #16]
 8005512:	f7ff fd33 	bl	8004f7c <__hi0bits>
 8005516:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800551a:	6031      	str	r1, [r6, #0]
 800551c:	e7e1      	b.n	80054e2 <__d2b+0x72>
 800551e:	bf00      	nop
 8005520:	08005ecf 	.word	0x08005ecf
 8005524:	08005f40 	.word	0x08005f40

08005528 <_calloc_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	fb02 f501 	mul.w	r5, r2, r1
 800552e:	4629      	mov	r1, r5
 8005530:	f000 f854 	bl	80055dc <_malloc_r>
 8005534:	4604      	mov	r4, r0
 8005536:	b118      	cbz	r0, 8005540 <_calloc_r+0x18>
 8005538:	462a      	mov	r2, r5
 800553a:	2100      	movs	r1, #0
 800553c:	f7fd fe66 	bl	800320c <memset>
 8005540:	4620      	mov	r0, r4
 8005542:	bd38      	pop	{r3, r4, r5, pc}

08005544 <_free_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4605      	mov	r5, r0
 8005548:	2900      	cmp	r1, #0
 800554a:	d043      	beq.n	80055d4 <_free_r+0x90>
 800554c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005550:	1f0c      	subs	r4, r1, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfb8      	it	lt
 8005556:	18e4      	addlt	r4, r4, r3
 8005558:	f000 fb9e 	bl	8005c98 <__malloc_lock>
 800555c:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <_free_r+0x94>)
 800555e:	6813      	ldr	r3, [r2, #0]
 8005560:	4610      	mov	r0, r2
 8005562:	b933      	cbnz	r3, 8005572 <_free_r+0x2e>
 8005564:	6063      	str	r3, [r4, #4]
 8005566:	6014      	str	r4, [r2, #0]
 8005568:	4628      	mov	r0, r5
 800556a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800556e:	f000 bb99 	b.w	8005ca4 <__malloc_unlock>
 8005572:	42a3      	cmp	r3, r4
 8005574:	d90a      	bls.n	800558c <_free_r+0x48>
 8005576:	6821      	ldr	r1, [r4, #0]
 8005578:	1862      	adds	r2, r4, r1
 800557a:	4293      	cmp	r3, r2
 800557c:	bf01      	itttt	eq
 800557e:	681a      	ldreq	r2, [r3, #0]
 8005580:	685b      	ldreq	r3, [r3, #4]
 8005582:	1852      	addeq	r2, r2, r1
 8005584:	6022      	streq	r2, [r4, #0]
 8005586:	6063      	str	r3, [r4, #4]
 8005588:	6004      	str	r4, [r0, #0]
 800558a:	e7ed      	b.n	8005568 <_free_r+0x24>
 800558c:	461a      	mov	r2, r3
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	b10b      	cbz	r3, 8005596 <_free_r+0x52>
 8005592:	42a3      	cmp	r3, r4
 8005594:	d9fa      	bls.n	800558c <_free_r+0x48>
 8005596:	6811      	ldr	r1, [r2, #0]
 8005598:	1850      	adds	r0, r2, r1
 800559a:	42a0      	cmp	r0, r4
 800559c:	d10b      	bne.n	80055b6 <_free_r+0x72>
 800559e:	6820      	ldr	r0, [r4, #0]
 80055a0:	4401      	add	r1, r0
 80055a2:	1850      	adds	r0, r2, r1
 80055a4:	4283      	cmp	r3, r0
 80055a6:	6011      	str	r1, [r2, #0]
 80055a8:	d1de      	bne.n	8005568 <_free_r+0x24>
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4401      	add	r1, r0
 80055b0:	6011      	str	r1, [r2, #0]
 80055b2:	6053      	str	r3, [r2, #4]
 80055b4:	e7d8      	b.n	8005568 <_free_r+0x24>
 80055b6:	d902      	bls.n	80055be <_free_r+0x7a>
 80055b8:	230c      	movs	r3, #12
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	e7d4      	b.n	8005568 <_free_r+0x24>
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	1821      	adds	r1, r4, r0
 80055c2:	428b      	cmp	r3, r1
 80055c4:	bf01      	itttt	eq
 80055c6:	6819      	ldreq	r1, [r3, #0]
 80055c8:	685b      	ldreq	r3, [r3, #4]
 80055ca:	1809      	addeq	r1, r1, r0
 80055cc:	6021      	streq	r1, [r4, #0]
 80055ce:	6063      	str	r3, [r4, #4]
 80055d0:	6054      	str	r4, [r2, #4]
 80055d2:	e7c9      	b.n	8005568 <_free_r+0x24>
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
 80055d6:	bf00      	nop
 80055d8:	20000200 	.word	0x20000200

080055dc <_malloc_r>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	1ccd      	adds	r5, r1, #3
 80055e0:	f025 0503 	bic.w	r5, r5, #3
 80055e4:	3508      	adds	r5, #8
 80055e6:	2d0c      	cmp	r5, #12
 80055e8:	bf38      	it	cc
 80055ea:	250c      	movcc	r5, #12
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	4606      	mov	r6, r0
 80055f0:	db01      	blt.n	80055f6 <_malloc_r+0x1a>
 80055f2:	42a9      	cmp	r1, r5
 80055f4:	d903      	bls.n	80055fe <_malloc_r+0x22>
 80055f6:	230c      	movs	r3, #12
 80055f8:	6033      	str	r3, [r6, #0]
 80055fa:	2000      	movs	r0, #0
 80055fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055fe:	f000 fb4b 	bl	8005c98 <__malloc_lock>
 8005602:	4921      	ldr	r1, [pc, #132]	; (8005688 <_malloc_r+0xac>)
 8005604:	680a      	ldr	r2, [r1, #0]
 8005606:	4614      	mov	r4, r2
 8005608:	b99c      	cbnz	r4, 8005632 <_malloc_r+0x56>
 800560a:	4f20      	ldr	r7, [pc, #128]	; (800568c <_malloc_r+0xb0>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	b923      	cbnz	r3, 800561a <_malloc_r+0x3e>
 8005610:	4621      	mov	r1, r4
 8005612:	4630      	mov	r0, r6
 8005614:	f000 f994 	bl	8005940 <_sbrk_r>
 8005618:	6038      	str	r0, [r7, #0]
 800561a:	4629      	mov	r1, r5
 800561c:	4630      	mov	r0, r6
 800561e:	f000 f98f 	bl	8005940 <_sbrk_r>
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	d123      	bne.n	800566e <_malloc_r+0x92>
 8005626:	230c      	movs	r3, #12
 8005628:	4630      	mov	r0, r6
 800562a:	6033      	str	r3, [r6, #0]
 800562c:	f000 fb3a 	bl	8005ca4 <__malloc_unlock>
 8005630:	e7e3      	b.n	80055fa <_malloc_r+0x1e>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	1b5b      	subs	r3, r3, r5
 8005636:	d417      	bmi.n	8005668 <_malloc_r+0x8c>
 8005638:	2b0b      	cmp	r3, #11
 800563a:	d903      	bls.n	8005644 <_malloc_r+0x68>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	441c      	add	r4, r3
 8005640:	6025      	str	r5, [r4, #0]
 8005642:	e004      	b.n	800564e <_malloc_r+0x72>
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	42a2      	cmp	r2, r4
 8005648:	bf0c      	ite	eq
 800564a:	600b      	streq	r3, [r1, #0]
 800564c:	6053      	strne	r3, [r2, #4]
 800564e:	4630      	mov	r0, r6
 8005650:	f000 fb28 	bl	8005ca4 <__malloc_unlock>
 8005654:	f104 000b 	add.w	r0, r4, #11
 8005658:	1d23      	adds	r3, r4, #4
 800565a:	f020 0007 	bic.w	r0, r0, #7
 800565e:	1ac2      	subs	r2, r0, r3
 8005660:	d0cc      	beq.n	80055fc <_malloc_r+0x20>
 8005662:	1a1b      	subs	r3, r3, r0
 8005664:	50a3      	str	r3, [r4, r2]
 8005666:	e7c9      	b.n	80055fc <_malloc_r+0x20>
 8005668:	4622      	mov	r2, r4
 800566a:	6864      	ldr	r4, [r4, #4]
 800566c:	e7cc      	b.n	8005608 <_malloc_r+0x2c>
 800566e:	1cc4      	adds	r4, r0, #3
 8005670:	f024 0403 	bic.w	r4, r4, #3
 8005674:	42a0      	cmp	r0, r4
 8005676:	d0e3      	beq.n	8005640 <_malloc_r+0x64>
 8005678:	1a21      	subs	r1, r4, r0
 800567a:	4630      	mov	r0, r6
 800567c:	f000 f960 	bl	8005940 <_sbrk_r>
 8005680:	3001      	adds	r0, #1
 8005682:	d1dd      	bne.n	8005640 <_malloc_r+0x64>
 8005684:	e7cf      	b.n	8005626 <_malloc_r+0x4a>
 8005686:	bf00      	nop
 8005688:	20000200 	.word	0x20000200
 800568c:	20000204 	.word	0x20000204

08005690 <__sfputc_r>:
 8005690:	6893      	ldr	r3, [r2, #8]
 8005692:	b410      	push	{r4}
 8005694:	3b01      	subs	r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	6093      	str	r3, [r2, #8]
 800569a:	da07      	bge.n	80056ac <__sfputc_r+0x1c>
 800569c:	6994      	ldr	r4, [r2, #24]
 800569e:	42a3      	cmp	r3, r4
 80056a0:	db01      	blt.n	80056a6 <__sfputc_r+0x16>
 80056a2:	290a      	cmp	r1, #10
 80056a4:	d102      	bne.n	80056ac <__sfputc_r+0x1c>
 80056a6:	bc10      	pop	{r4}
 80056a8:	f000 b99e 	b.w	80059e8 <__swbuf_r>
 80056ac:	6813      	ldr	r3, [r2, #0]
 80056ae:	1c58      	adds	r0, r3, #1
 80056b0:	6010      	str	r0, [r2, #0]
 80056b2:	7019      	strb	r1, [r3, #0]
 80056b4:	4608      	mov	r0, r1
 80056b6:	bc10      	pop	{r4}
 80056b8:	4770      	bx	lr

080056ba <__sfputs_r>:
 80056ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056bc:	4606      	mov	r6, r0
 80056be:	460f      	mov	r7, r1
 80056c0:	4614      	mov	r4, r2
 80056c2:	18d5      	adds	r5, r2, r3
 80056c4:	42ac      	cmp	r4, r5
 80056c6:	d101      	bne.n	80056cc <__sfputs_r+0x12>
 80056c8:	2000      	movs	r0, #0
 80056ca:	e007      	b.n	80056dc <__sfputs_r+0x22>
 80056cc:	463a      	mov	r2, r7
 80056ce:	4630      	mov	r0, r6
 80056d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d4:	f7ff ffdc 	bl	8005690 <__sfputc_r>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d1f3      	bne.n	80056c4 <__sfputs_r+0xa>
 80056dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056e0 <_vfiprintf_r>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	460d      	mov	r5, r1
 80056e6:	4614      	mov	r4, r2
 80056e8:	4698      	mov	r8, r3
 80056ea:	4606      	mov	r6, r0
 80056ec:	b09d      	sub	sp, #116	; 0x74
 80056ee:	b118      	cbz	r0, 80056f8 <_vfiprintf_r+0x18>
 80056f0:	6983      	ldr	r3, [r0, #24]
 80056f2:	b90b      	cbnz	r3, 80056f8 <_vfiprintf_r+0x18>
 80056f4:	f7ff fa68 	bl	8004bc8 <__sinit>
 80056f8:	4b89      	ldr	r3, [pc, #548]	; (8005920 <_vfiprintf_r+0x240>)
 80056fa:	429d      	cmp	r5, r3
 80056fc:	d11b      	bne.n	8005736 <_vfiprintf_r+0x56>
 80056fe:	6875      	ldr	r5, [r6, #4]
 8005700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005702:	07d9      	lsls	r1, r3, #31
 8005704:	d405      	bmi.n	8005712 <_vfiprintf_r+0x32>
 8005706:	89ab      	ldrh	r3, [r5, #12]
 8005708:	059a      	lsls	r2, r3, #22
 800570a:	d402      	bmi.n	8005712 <_vfiprintf_r+0x32>
 800570c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800570e:	f7ff fafe 	bl	8004d0e <__retarget_lock_acquire_recursive>
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	d501      	bpl.n	800571c <_vfiprintf_r+0x3c>
 8005718:	692b      	ldr	r3, [r5, #16]
 800571a:	b9eb      	cbnz	r3, 8005758 <_vfiprintf_r+0x78>
 800571c:	4629      	mov	r1, r5
 800571e:	4630      	mov	r0, r6
 8005720:	f000 f9c6 	bl	8005ab0 <__swsetup_r>
 8005724:	b1c0      	cbz	r0, 8005758 <_vfiprintf_r+0x78>
 8005726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005728:	07dc      	lsls	r4, r3, #31
 800572a:	d50e      	bpl.n	800574a <_vfiprintf_r+0x6a>
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	b01d      	add	sp, #116	; 0x74
 8005732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005736:	4b7b      	ldr	r3, [pc, #492]	; (8005924 <_vfiprintf_r+0x244>)
 8005738:	429d      	cmp	r5, r3
 800573a:	d101      	bne.n	8005740 <_vfiprintf_r+0x60>
 800573c:	68b5      	ldr	r5, [r6, #8]
 800573e:	e7df      	b.n	8005700 <_vfiprintf_r+0x20>
 8005740:	4b79      	ldr	r3, [pc, #484]	; (8005928 <_vfiprintf_r+0x248>)
 8005742:	429d      	cmp	r5, r3
 8005744:	bf08      	it	eq
 8005746:	68f5      	ldreq	r5, [r6, #12]
 8005748:	e7da      	b.n	8005700 <_vfiprintf_r+0x20>
 800574a:	89ab      	ldrh	r3, [r5, #12]
 800574c:	0598      	lsls	r0, r3, #22
 800574e:	d4ed      	bmi.n	800572c <_vfiprintf_r+0x4c>
 8005750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005752:	f7ff fadd 	bl	8004d10 <__retarget_lock_release_recursive>
 8005756:	e7e9      	b.n	800572c <_vfiprintf_r+0x4c>
 8005758:	2300      	movs	r3, #0
 800575a:	9309      	str	r3, [sp, #36]	; 0x24
 800575c:	2320      	movs	r3, #32
 800575e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005762:	2330      	movs	r3, #48	; 0x30
 8005764:	f04f 0901 	mov.w	r9, #1
 8005768:	f8cd 800c 	str.w	r8, [sp, #12]
 800576c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800592c <_vfiprintf_r+0x24c>
 8005770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005774:	4623      	mov	r3, r4
 8005776:	469a      	mov	sl, r3
 8005778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800577c:	b10a      	cbz	r2, 8005782 <_vfiprintf_r+0xa2>
 800577e:	2a25      	cmp	r2, #37	; 0x25
 8005780:	d1f9      	bne.n	8005776 <_vfiprintf_r+0x96>
 8005782:	ebba 0b04 	subs.w	fp, sl, r4
 8005786:	d00b      	beq.n	80057a0 <_vfiprintf_r+0xc0>
 8005788:	465b      	mov	r3, fp
 800578a:	4622      	mov	r2, r4
 800578c:	4629      	mov	r1, r5
 800578e:	4630      	mov	r0, r6
 8005790:	f7ff ff93 	bl	80056ba <__sfputs_r>
 8005794:	3001      	adds	r0, #1
 8005796:	f000 80aa 	beq.w	80058ee <_vfiprintf_r+0x20e>
 800579a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800579c:	445a      	add	r2, fp
 800579e:	9209      	str	r2, [sp, #36]	; 0x24
 80057a0:	f89a 3000 	ldrb.w	r3, [sl]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80a2 	beq.w	80058ee <_vfiprintf_r+0x20e>
 80057aa:	2300      	movs	r3, #0
 80057ac:	f04f 32ff 	mov.w	r2, #4294967295
 80057b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057b4:	f10a 0a01 	add.w	sl, sl, #1
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	9307      	str	r3, [sp, #28]
 80057bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057c0:	931a      	str	r3, [sp, #104]	; 0x68
 80057c2:	4654      	mov	r4, sl
 80057c4:	2205      	movs	r2, #5
 80057c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ca:	4858      	ldr	r0, [pc, #352]	; (800592c <_vfiprintf_r+0x24c>)
 80057cc:	f7ff fb0e 	bl	8004dec <memchr>
 80057d0:	9a04      	ldr	r2, [sp, #16]
 80057d2:	b9d8      	cbnz	r0, 800580c <_vfiprintf_r+0x12c>
 80057d4:	06d1      	lsls	r1, r2, #27
 80057d6:	bf44      	itt	mi
 80057d8:	2320      	movmi	r3, #32
 80057da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057de:	0713      	lsls	r3, r2, #28
 80057e0:	bf44      	itt	mi
 80057e2:	232b      	movmi	r3, #43	; 0x2b
 80057e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057e8:	f89a 3000 	ldrb.w	r3, [sl]
 80057ec:	2b2a      	cmp	r3, #42	; 0x2a
 80057ee:	d015      	beq.n	800581c <_vfiprintf_r+0x13c>
 80057f0:	4654      	mov	r4, sl
 80057f2:	2000      	movs	r0, #0
 80057f4:	f04f 0c0a 	mov.w	ip, #10
 80057f8:	9a07      	ldr	r2, [sp, #28]
 80057fa:	4621      	mov	r1, r4
 80057fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005800:	3b30      	subs	r3, #48	; 0x30
 8005802:	2b09      	cmp	r3, #9
 8005804:	d94e      	bls.n	80058a4 <_vfiprintf_r+0x1c4>
 8005806:	b1b0      	cbz	r0, 8005836 <_vfiprintf_r+0x156>
 8005808:	9207      	str	r2, [sp, #28]
 800580a:	e014      	b.n	8005836 <_vfiprintf_r+0x156>
 800580c:	eba0 0308 	sub.w	r3, r0, r8
 8005810:	fa09 f303 	lsl.w	r3, r9, r3
 8005814:	4313      	orrs	r3, r2
 8005816:	46a2      	mov	sl, r4
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	e7d2      	b.n	80057c2 <_vfiprintf_r+0xe2>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	1d19      	adds	r1, r3, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	9103      	str	r1, [sp, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	bfbb      	ittet	lt
 8005828:	425b      	neglt	r3, r3
 800582a:	f042 0202 	orrlt.w	r2, r2, #2
 800582e:	9307      	strge	r3, [sp, #28]
 8005830:	9307      	strlt	r3, [sp, #28]
 8005832:	bfb8      	it	lt
 8005834:	9204      	strlt	r2, [sp, #16]
 8005836:	7823      	ldrb	r3, [r4, #0]
 8005838:	2b2e      	cmp	r3, #46	; 0x2e
 800583a:	d10c      	bne.n	8005856 <_vfiprintf_r+0x176>
 800583c:	7863      	ldrb	r3, [r4, #1]
 800583e:	2b2a      	cmp	r3, #42	; 0x2a
 8005840:	d135      	bne.n	80058ae <_vfiprintf_r+0x1ce>
 8005842:	9b03      	ldr	r3, [sp, #12]
 8005844:	3402      	adds	r4, #2
 8005846:	1d1a      	adds	r2, r3, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	9203      	str	r2, [sp, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	bfb8      	it	lt
 8005850:	f04f 33ff 	movlt.w	r3, #4294967295
 8005854:	9305      	str	r3, [sp, #20]
 8005856:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800593c <_vfiprintf_r+0x25c>
 800585a:	2203      	movs	r2, #3
 800585c:	4650      	mov	r0, sl
 800585e:	7821      	ldrb	r1, [r4, #0]
 8005860:	f7ff fac4 	bl	8004dec <memchr>
 8005864:	b140      	cbz	r0, 8005878 <_vfiprintf_r+0x198>
 8005866:	2340      	movs	r3, #64	; 0x40
 8005868:	eba0 000a 	sub.w	r0, r0, sl
 800586c:	fa03 f000 	lsl.w	r0, r3, r0
 8005870:	9b04      	ldr	r3, [sp, #16]
 8005872:	3401      	adds	r4, #1
 8005874:	4303      	orrs	r3, r0
 8005876:	9304      	str	r3, [sp, #16]
 8005878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800587c:	2206      	movs	r2, #6
 800587e:	482c      	ldr	r0, [pc, #176]	; (8005930 <_vfiprintf_r+0x250>)
 8005880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005884:	f7ff fab2 	bl	8004dec <memchr>
 8005888:	2800      	cmp	r0, #0
 800588a:	d03f      	beq.n	800590c <_vfiprintf_r+0x22c>
 800588c:	4b29      	ldr	r3, [pc, #164]	; (8005934 <_vfiprintf_r+0x254>)
 800588e:	bb1b      	cbnz	r3, 80058d8 <_vfiprintf_r+0x1f8>
 8005890:	9b03      	ldr	r3, [sp, #12]
 8005892:	3307      	adds	r3, #7
 8005894:	f023 0307 	bic.w	r3, r3, #7
 8005898:	3308      	adds	r3, #8
 800589a:	9303      	str	r3, [sp, #12]
 800589c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589e:	443b      	add	r3, r7
 80058a0:	9309      	str	r3, [sp, #36]	; 0x24
 80058a2:	e767      	b.n	8005774 <_vfiprintf_r+0x94>
 80058a4:	460c      	mov	r4, r1
 80058a6:	2001      	movs	r0, #1
 80058a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ac:	e7a5      	b.n	80057fa <_vfiprintf_r+0x11a>
 80058ae:	2300      	movs	r3, #0
 80058b0:	f04f 0c0a 	mov.w	ip, #10
 80058b4:	4619      	mov	r1, r3
 80058b6:	3401      	adds	r4, #1
 80058b8:	9305      	str	r3, [sp, #20]
 80058ba:	4620      	mov	r0, r4
 80058bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058c0:	3a30      	subs	r2, #48	; 0x30
 80058c2:	2a09      	cmp	r2, #9
 80058c4:	d903      	bls.n	80058ce <_vfiprintf_r+0x1ee>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0c5      	beq.n	8005856 <_vfiprintf_r+0x176>
 80058ca:	9105      	str	r1, [sp, #20]
 80058cc:	e7c3      	b.n	8005856 <_vfiprintf_r+0x176>
 80058ce:	4604      	mov	r4, r0
 80058d0:	2301      	movs	r3, #1
 80058d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058d6:	e7f0      	b.n	80058ba <_vfiprintf_r+0x1da>
 80058d8:	ab03      	add	r3, sp, #12
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	462a      	mov	r2, r5
 80058de:	4630      	mov	r0, r6
 80058e0:	4b15      	ldr	r3, [pc, #84]	; (8005938 <_vfiprintf_r+0x258>)
 80058e2:	a904      	add	r1, sp, #16
 80058e4:	f7fd fd38 	bl	8003358 <_printf_float>
 80058e8:	4607      	mov	r7, r0
 80058ea:	1c78      	adds	r0, r7, #1
 80058ec:	d1d6      	bne.n	800589c <_vfiprintf_r+0x1bc>
 80058ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058f0:	07d9      	lsls	r1, r3, #31
 80058f2:	d405      	bmi.n	8005900 <_vfiprintf_r+0x220>
 80058f4:	89ab      	ldrh	r3, [r5, #12]
 80058f6:	059a      	lsls	r2, r3, #22
 80058f8:	d402      	bmi.n	8005900 <_vfiprintf_r+0x220>
 80058fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058fc:	f7ff fa08 	bl	8004d10 <__retarget_lock_release_recursive>
 8005900:	89ab      	ldrh	r3, [r5, #12]
 8005902:	065b      	lsls	r3, r3, #25
 8005904:	f53f af12 	bmi.w	800572c <_vfiprintf_r+0x4c>
 8005908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800590a:	e711      	b.n	8005730 <_vfiprintf_r+0x50>
 800590c:	ab03      	add	r3, sp, #12
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	462a      	mov	r2, r5
 8005912:	4630      	mov	r0, r6
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <_vfiprintf_r+0x258>)
 8005916:	a904      	add	r1, sp, #16
 8005918:	f7fd ffba 	bl	8003890 <_printf_i>
 800591c:	e7e4      	b.n	80058e8 <_vfiprintf_r+0x208>
 800591e:	bf00      	nop
 8005920:	08005f00 	.word	0x08005f00
 8005924:	08005f20 	.word	0x08005f20
 8005928:	08005ee0 	.word	0x08005ee0
 800592c:	0800609c 	.word	0x0800609c
 8005930:	080060a6 	.word	0x080060a6
 8005934:	08003359 	.word	0x08003359
 8005938:	080056bb 	.word	0x080056bb
 800593c:	080060a2 	.word	0x080060a2

08005940 <_sbrk_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	2300      	movs	r3, #0
 8005944:	4d05      	ldr	r5, [pc, #20]	; (800595c <_sbrk_r+0x1c>)
 8005946:	4604      	mov	r4, r0
 8005948:	4608      	mov	r0, r1
 800594a:	602b      	str	r3, [r5, #0]
 800594c:	f7fb fdaa 	bl	80014a4 <_sbrk>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d102      	bne.n	800595a <_sbrk_r+0x1a>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	b103      	cbz	r3, 800595a <_sbrk_r+0x1a>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	200002c4 	.word	0x200002c4

08005960 <__sread>:
 8005960:	b510      	push	{r4, lr}
 8005962:	460c      	mov	r4, r1
 8005964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005968:	f000 f9a2 	bl	8005cb0 <_read_r>
 800596c:	2800      	cmp	r0, #0
 800596e:	bfab      	itete	ge
 8005970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005972:	89a3      	ldrhlt	r3, [r4, #12]
 8005974:	181b      	addge	r3, r3, r0
 8005976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800597a:	bfac      	ite	ge
 800597c:	6563      	strge	r3, [r4, #84]	; 0x54
 800597e:	81a3      	strhlt	r3, [r4, #12]
 8005980:	bd10      	pop	{r4, pc}

08005982 <__swrite>:
 8005982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005986:	461f      	mov	r7, r3
 8005988:	898b      	ldrh	r3, [r1, #12]
 800598a:	4605      	mov	r5, r0
 800598c:	05db      	lsls	r3, r3, #23
 800598e:	460c      	mov	r4, r1
 8005990:	4616      	mov	r6, r2
 8005992:	d505      	bpl.n	80059a0 <__swrite+0x1e>
 8005994:	2302      	movs	r3, #2
 8005996:	2200      	movs	r2, #0
 8005998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599c:	f000 f958 	bl	8005c50 <_lseek_r>
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	4632      	mov	r2, r6
 80059a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	4628      	mov	r0, r5
 80059ac:	463b      	mov	r3, r7
 80059ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059b6:	f000 b869 	b.w	8005a8c <_write_r>

080059ba <__sseek>:
 80059ba:	b510      	push	{r4, lr}
 80059bc:	460c      	mov	r4, r1
 80059be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c2:	f000 f945 	bl	8005c50 <_lseek_r>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	89a3      	ldrh	r3, [r4, #12]
 80059ca:	bf15      	itete	ne
 80059cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80059ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059d6:	81a3      	strheq	r3, [r4, #12]
 80059d8:	bf18      	it	ne
 80059da:	81a3      	strhne	r3, [r4, #12]
 80059dc:	bd10      	pop	{r4, pc}

080059de <__sclose>:
 80059de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e2:	f000 b8f1 	b.w	8005bc8 <_close_r>
	...

080059e8 <__swbuf_r>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	460e      	mov	r6, r1
 80059ec:	4614      	mov	r4, r2
 80059ee:	4605      	mov	r5, r0
 80059f0:	b118      	cbz	r0, 80059fa <__swbuf_r+0x12>
 80059f2:	6983      	ldr	r3, [r0, #24]
 80059f4:	b90b      	cbnz	r3, 80059fa <__swbuf_r+0x12>
 80059f6:	f7ff f8e7 	bl	8004bc8 <__sinit>
 80059fa:	4b21      	ldr	r3, [pc, #132]	; (8005a80 <__swbuf_r+0x98>)
 80059fc:	429c      	cmp	r4, r3
 80059fe:	d12b      	bne.n	8005a58 <__swbuf_r+0x70>
 8005a00:	686c      	ldr	r4, [r5, #4]
 8005a02:	69a3      	ldr	r3, [r4, #24]
 8005a04:	60a3      	str	r3, [r4, #8]
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	071a      	lsls	r2, r3, #28
 8005a0a:	d52f      	bpl.n	8005a6c <__swbuf_r+0x84>
 8005a0c:	6923      	ldr	r3, [r4, #16]
 8005a0e:	b36b      	cbz	r3, 8005a6c <__swbuf_r+0x84>
 8005a10:	6923      	ldr	r3, [r4, #16]
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	b2f6      	uxtb	r6, r6
 8005a16:	1ac0      	subs	r0, r0, r3
 8005a18:	6963      	ldr	r3, [r4, #20]
 8005a1a:	4637      	mov	r7, r6
 8005a1c:	4283      	cmp	r3, r0
 8005a1e:	dc04      	bgt.n	8005a2a <__swbuf_r+0x42>
 8005a20:	4621      	mov	r1, r4
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff f83c 	bl	8004aa0 <_fflush_r>
 8005a28:	bb30      	cbnz	r0, 8005a78 <__swbuf_r+0x90>
 8005a2a:	68a3      	ldr	r3, [r4, #8]
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	701e      	strb	r6, [r3, #0]
 8005a3a:	6963      	ldr	r3, [r4, #20]
 8005a3c:	4283      	cmp	r3, r0
 8005a3e:	d004      	beq.n	8005a4a <__swbuf_r+0x62>
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	07db      	lsls	r3, r3, #31
 8005a44:	d506      	bpl.n	8005a54 <__swbuf_r+0x6c>
 8005a46:	2e0a      	cmp	r6, #10
 8005a48:	d104      	bne.n	8005a54 <__swbuf_r+0x6c>
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f7ff f827 	bl	8004aa0 <_fflush_r>
 8005a52:	b988      	cbnz	r0, 8005a78 <__swbuf_r+0x90>
 8005a54:	4638      	mov	r0, r7
 8005a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <__swbuf_r+0x9c>)
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	d101      	bne.n	8005a62 <__swbuf_r+0x7a>
 8005a5e:	68ac      	ldr	r4, [r5, #8]
 8005a60:	e7cf      	b.n	8005a02 <__swbuf_r+0x1a>
 8005a62:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <__swbuf_r+0xa0>)
 8005a64:	429c      	cmp	r4, r3
 8005a66:	bf08      	it	eq
 8005a68:	68ec      	ldreq	r4, [r5, #12]
 8005a6a:	e7ca      	b.n	8005a02 <__swbuf_r+0x1a>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f000 f81e 	bl	8005ab0 <__swsetup_r>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d0cb      	beq.n	8005a10 <__swbuf_r+0x28>
 8005a78:	f04f 37ff 	mov.w	r7, #4294967295
 8005a7c:	e7ea      	b.n	8005a54 <__swbuf_r+0x6c>
 8005a7e:	bf00      	nop
 8005a80:	08005f00 	.word	0x08005f00
 8005a84:	08005f20 	.word	0x08005f20
 8005a88:	08005ee0 	.word	0x08005ee0

08005a8c <_write_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4604      	mov	r4, r0
 8005a90:	4608      	mov	r0, r1
 8005a92:	4611      	mov	r1, r2
 8005a94:	2200      	movs	r2, #0
 8005a96:	4d05      	ldr	r5, [pc, #20]	; (8005aac <_write_r+0x20>)
 8005a98:	602a      	str	r2, [r5, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f7fb fb7e 	bl	800119c <_write>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_write_r+0x1e>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_write_r+0x1e>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	200002c4 	.word	0x200002c4

08005ab0 <__swsetup_r>:
 8005ab0:	4b32      	ldr	r3, [pc, #200]	; (8005b7c <__swsetup_r+0xcc>)
 8005ab2:	b570      	push	{r4, r5, r6, lr}
 8005ab4:	681d      	ldr	r5, [r3, #0]
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	460c      	mov	r4, r1
 8005aba:	b125      	cbz	r5, 8005ac6 <__swsetup_r+0x16>
 8005abc:	69ab      	ldr	r3, [r5, #24]
 8005abe:	b913      	cbnz	r3, 8005ac6 <__swsetup_r+0x16>
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f7ff f881 	bl	8004bc8 <__sinit>
 8005ac6:	4b2e      	ldr	r3, [pc, #184]	; (8005b80 <__swsetup_r+0xd0>)
 8005ac8:	429c      	cmp	r4, r3
 8005aca:	d10f      	bne.n	8005aec <__swsetup_r+0x3c>
 8005acc:	686c      	ldr	r4, [r5, #4]
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ad4:	0719      	lsls	r1, r3, #28
 8005ad6:	d42c      	bmi.n	8005b32 <__swsetup_r+0x82>
 8005ad8:	06dd      	lsls	r5, r3, #27
 8005ada:	d411      	bmi.n	8005b00 <__swsetup_r+0x50>
 8005adc:	2309      	movs	r3, #9
 8005ade:	6033      	str	r3, [r6, #0]
 8005ae0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	e03e      	b.n	8005b6a <__swsetup_r+0xba>
 8005aec:	4b25      	ldr	r3, [pc, #148]	; (8005b84 <__swsetup_r+0xd4>)
 8005aee:	429c      	cmp	r4, r3
 8005af0:	d101      	bne.n	8005af6 <__swsetup_r+0x46>
 8005af2:	68ac      	ldr	r4, [r5, #8]
 8005af4:	e7eb      	b.n	8005ace <__swsetup_r+0x1e>
 8005af6:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <__swsetup_r+0xd8>)
 8005af8:	429c      	cmp	r4, r3
 8005afa:	bf08      	it	eq
 8005afc:	68ec      	ldreq	r4, [r5, #12]
 8005afe:	e7e6      	b.n	8005ace <__swsetup_r+0x1e>
 8005b00:	0758      	lsls	r0, r3, #29
 8005b02:	d512      	bpl.n	8005b2a <__swsetup_r+0x7a>
 8005b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b06:	b141      	cbz	r1, 8005b1a <__swsetup_r+0x6a>
 8005b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b0c:	4299      	cmp	r1, r3
 8005b0e:	d002      	beq.n	8005b16 <__swsetup_r+0x66>
 8005b10:	4630      	mov	r0, r6
 8005b12:	f7ff fd17 	bl	8005544 <_free_r>
 8005b16:	2300      	movs	r3, #0
 8005b18:	6363      	str	r3, [r4, #52]	; 0x34
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b20:	81a3      	strh	r3, [r4, #12]
 8005b22:	2300      	movs	r3, #0
 8005b24:	6063      	str	r3, [r4, #4]
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f043 0308 	orr.w	r3, r3, #8
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	b94b      	cbnz	r3, 8005b4a <__swsetup_r+0x9a>
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b40:	d003      	beq.n	8005b4a <__swsetup_r+0x9a>
 8005b42:	4621      	mov	r1, r4
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff f909 	bl	8004d5c <__smakebuf_r>
 8005b4a:	89a0      	ldrh	r0, [r4, #12]
 8005b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b50:	f010 0301 	ands.w	r3, r0, #1
 8005b54:	d00a      	beq.n	8005b6c <__swsetup_r+0xbc>
 8005b56:	2300      	movs	r3, #0
 8005b58:	60a3      	str	r3, [r4, #8]
 8005b5a:	6963      	ldr	r3, [r4, #20]
 8005b5c:	425b      	negs	r3, r3
 8005b5e:	61a3      	str	r3, [r4, #24]
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	b943      	cbnz	r3, 8005b76 <__swsetup_r+0xc6>
 8005b64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b68:	d1ba      	bne.n	8005ae0 <__swsetup_r+0x30>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	0781      	lsls	r1, r0, #30
 8005b6e:	bf58      	it	pl
 8005b70:	6963      	ldrpl	r3, [r4, #20]
 8005b72:	60a3      	str	r3, [r4, #8]
 8005b74:	e7f4      	b.n	8005b60 <__swsetup_r+0xb0>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e7f7      	b.n	8005b6a <__swsetup_r+0xba>
 8005b7a:	bf00      	nop
 8005b7c:	2000000c 	.word	0x2000000c
 8005b80:	08005f00 	.word	0x08005f00
 8005b84:	08005f20 	.word	0x08005f20
 8005b88:	08005ee0 	.word	0x08005ee0

08005b8c <__assert_func>:
 8005b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b8e:	4614      	mov	r4, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <__assert_func+0x2c>)
 8005b94:	4605      	mov	r5, r0
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68d8      	ldr	r0, [r3, #12]
 8005b9a:	b14c      	cbz	r4, 8005bb0 <__assert_func+0x24>
 8005b9c:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <__assert_func+0x30>)
 8005b9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ba2:	9100      	str	r1, [sp, #0]
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	4906      	ldr	r1, [pc, #24]	; (8005bc0 <__assert_func+0x34>)
 8005ba8:	f000 f81e 	bl	8005be8 <fiprintf>
 8005bac:	f000 f89f 	bl	8005cee <abort>
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <__assert_func+0x38>)
 8005bb2:	461c      	mov	r4, r3
 8005bb4:	e7f3      	b.n	8005b9e <__assert_func+0x12>
 8005bb6:	bf00      	nop
 8005bb8:	2000000c 	.word	0x2000000c
 8005bbc:	080060ad 	.word	0x080060ad
 8005bc0:	080060ba 	.word	0x080060ba
 8005bc4:	080060e8 	.word	0x080060e8

08005bc8 <_close_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4d05      	ldr	r5, [pc, #20]	; (8005be4 <_close_r+0x1c>)
 8005bce:	4604      	mov	r4, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	f7fb fc36 	bl	8001444 <_close>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_close_r+0x1a>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_close_r+0x1a>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	200002c4 	.word	0x200002c4

08005be8 <fiprintf>:
 8005be8:	b40e      	push	{r1, r2, r3}
 8005bea:	b503      	push	{r0, r1, lr}
 8005bec:	4601      	mov	r1, r0
 8005bee:	ab03      	add	r3, sp, #12
 8005bf0:	4805      	ldr	r0, [pc, #20]	; (8005c08 <fiprintf+0x20>)
 8005bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf6:	6800      	ldr	r0, [r0, #0]
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	f7ff fd71 	bl	80056e0 <_vfiprintf_r>
 8005bfe:	b002      	add	sp, #8
 8005c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c04:	b003      	add	sp, #12
 8005c06:	4770      	bx	lr
 8005c08:	2000000c 	.word	0x2000000c

08005c0c <_fstat_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	2300      	movs	r3, #0
 8005c10:	4d06      	ldr	r5, [pc, #24]	; (8005c2c <_fstat_r+0x20>)
 8005c12:	4604      	mov	r4, r0
 8005c14:	4608      	mov	r0, r1
 8005c16:	4611      	mov	r1, r2
 8005c18:	602b      	str	r3, [r5, #0]
 8005c1a:	f7fb fc1e 	bl	800145a <_fstat>
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	d102      	bne.n	8005c28 <_fstat_r+0x1c>
 8005c22:	682b      	ldr	r3, [r5, #0]
 8005c24:	b103      	cbz	r3, 8005c28 <_fstat_r+0x1c>
 8005c26:	6023      	str	r3, [r4, #0]
 8005c28:	bd38      	pop	{r3, r4, r5, pc}
 8005c2a:	bf00      	nop
 8005c2c:	200002c4 	.word	0x200002c4

08005c30 <_isatty_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	2300      	movs	r3, #0
 8005c34:	4d05      	ldr	r5, [pc, #20]	; (8005c4c <_isatty_r+0x1c>)
 8005c36:	4604      	mov	r4, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	f7fb fc1c 	bl	8001478 <_isatty>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_isatty_r+0x1a>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_isatty_r+0x1a>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	200002c4 	.word	0x200002c4

08005c50 <_lseek_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4d05      	ldr	r5, [pc, #20]	; (8005c70 <_lseek_r+0x20>)
 8005c5c:	602a      	str	r2, [r5, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fb fc14 	bl	800148c <_lseek>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_lseek_r+0x1e>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_lseek_r+0x1e>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200002c4 	.word	0x200002c4

08005c74 <__ascii_mbtowc>:
 8005c74:	b082      	sub	sp, #8
 8005c76:	b901      	cbnz	r1, 8005c7a <__ascii_mbtowc+0x6>
 8005c78:	a901      	add	r1, sp, #4
 8005c7a:	b142      	cbz	r2, 8005c8e <__ascii_mbtowc+0x1a>
 8005c7c:	b14b      	cbz	r3, 8005c92 <__ascii_mbtowc+0x1e>
 8005c7e:	7813      	ldrb	r3, [r2, #0]
 8005c80:	600b      	str	r3, [r1, #0]
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	1e10      	subs	r0, r2, #0
 8005c86:	bf18      	it	ne
 8005c88:	2001      	movne	r0, #1
 8005c8a:	b002      	add	sp, #8
 8005c8c:	4770      	bx	lr
 8005c8e:	4610      	mov	r0, r2
 8005c90:	e7fb      	b.n	8005c8a <__ascii_mbtowc+0x16>
 8005c92:	f06f 0001 	mvn.w	r0, #1
 8005c96:	e7f8      	b.n	8005c8a <__ascii_mbtowc+0x16>

08005c98 <__malloc_lock>:
 8005c98:	4801      	ldr	r0, [pc, #4]	; (8005ca0 <__malloc_lock+0x8>)
 8005c9a:	f7ff b838 	b.w	8004d0e <__retarget_lock_acquire_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	200002bc 	.word	0x200002bc

08005ca4 <__malloc_unlock>:
 8005ca4:	4801      	ldr	r0, [pc, #4]	; (8005cac <__malloc_unlock+0x8>)
 8005ca6:	f7ff b833 	b.w	8004d10 <__retarget_lock_release_recursive>
 8005caa:	bf00      	nop
 8005cac:	200002bc 	.word	0x200002bc

08005cb0 <_read_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4d05      	ldr	r5, [pc, #20]	; (8005cd0 <_read_r+0x20>)
 8005cbc:	602a      	str	r2, [r5, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f7fb fba3 	bl	800140a <_read>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_read_r+0x1e>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_read_r+0x1e>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	200002c4 	.word	0x200002c4

08005cd4 <__ascii_wctomb>:
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4608      	mov	r0, r1
 8005cd8:	b141      	cbz	r1, 8005cec <__ascii_wctomb+0x18>
 8005cda:	2aff      	cmp	r2, #255	; 0xff
 8005cdc:	d904      	bls.n	8005ce8 <__ascii_wctomb+0x14>
 8005cde:	228a      	movs	r2, #138	; 0x8a
 8005ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	4770      	bx	lr
 8005ce8:	2001      	movs	r0, #1
 8005cea:	700a      	strb	r2, [r1, #0]
 8005cec:	4770      	bx	lr

08005cee <abort>:
 8005cee:	2006      	movs	r0, #6
 8005cf0:	b508      	push	{r3, lr}
 8005cf2:	f000 f82b 	bl	8005d4c <raise>
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	f7fb fb7d 	bl	80013f6 <_exit>

08005cfc <_raise_r>:
 8005cfc:	291f      	cmp	r1, #31
 8005cfe:	b538      	push	{r3, r4, r5, lr}
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	d904      	bls.n	8005d10 <_raise_r+0x14>
 8005d06:	2316      	movs	r3, #22
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d12:	b112      	cbz	r2, 8005d1a <_raise_r+0x1e>
 8005d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d18:	b94b      	cbnz	r3, 8005d2e <_raise_r+0x32>
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 f830 	bl	8005d80 <_getpid_r>
 8005d20:	462a      	mov	r2, r5
 8005d22:	4601      	mov	r1, r0
 8005d24:	4620      	mov	r0, r4
 8005d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d2a:	f000 b817 	b.w	8005d5c <_kill_r>
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d00a      	beq.n	8005d48 <_raise_r+0x4c>
 8005d32:	1c59      	adds	r1, r3, #1
 8005d34:	d103      	bne.n	8005d3e <_raise_r+0x42>
 8005d36:	2316      	movs	r3, #22
 8005d38:	6003      	str	r3, [r0, #0]
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e7e7      	b.n	8005d0e <_raise_r+0x12>
 8005d3e:	2400      	movs	r4, #0
 8005d40:	4628      	mov	r0, r5
 8005d42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d46:	4798      	blx	r3
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e7e0      	b.n	8005d0e <_raise_r+0x12>

08005d4c <raise>:
 8005d4c:	4b02      	ldr	r3, [pc, #8]	; (8005d58 <raise+0xc>)
 8005d4e:	4601      	mov	r1, r0
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	f7ff bfd3 	b.w	8005cfc <_raise_r>
 8005d56:	bf00      	nop
 8005d58:	2000000c 	.word	0x2000000c

08005d5c <_kill_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	2300      	movs	r3, #0
 8005d60:	4d06      	ldr	r5, [pc, #24]	; (8005d7c <_kill_r+0x20>)
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	602b      	str	r3, [r5, #0]
 8005d6a:	f7fb fb34 	bl	80013d6 <_kill>
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	d102      	bne.n	8005d78 <_kill_r+0x1c>
 8005d72:	682b      	ldr	r3, [r5, #0]
 8005d74:	b103      	cbz	r3, 8005d78 <_kill_r+0x1c>
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200002c4 	.word	0x200002c4

08005d80 <_getpid_r>:
 8005d80:	f7fb bb22 	b.w	80013c8 <_getpid>

08005d84 <_init>:
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	bf00      	nop
 8005d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8a:	bc08      	pop	{r3}
 8005d8c:	469e      	mov	lr, r3
 8005d8e:	4770      	bx	lr

08005d90 <_fini>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	bf00      	nop
 8005d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d96:	bc08      	pop	{r3}
 8005d98:	469e      	mov	lr, r3
 8005d9a:	4770      	bx	lr
